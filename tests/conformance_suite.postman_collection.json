{
	"info": {
		"_postman_id": "802393fe-c7f8-48fc-93a3-85372c78d9c8",
		"name": "Conformance Suite",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "15641111"
	},
	"item": [
		{
			"name": "Discovery - API Configuration",
			"item": [
				{
					"name": "Positive Testing",
					"item": [
						{
							"name": "did_json",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"status code is 200\", function () {",
											" pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"response validates against schema\", function() {",
											" const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
											" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const convertDidToEndpoint = (did) => {",
											"  const regex = new RegExp(",
											"    `did:web:(?<host>[a-zA-Z0-9/.\\\\-_]+)(:*)(?<port>[0-9]+)*(:*)(?<path>[a-zA-Z0-9/.:\\\\-_]*)`",
											"  );",
											"  const match = did.match(regex);",
											"  if (!match) {",
											"    throw new Error(\"DID is not a valid did:web\");",
											"  }",
											"  const { host, port, path } = match.groups;",
											"  const origin = port ? `${host}:${port}` : `${host}`;",
											"  const protocol = host.includes(\"localhost\") ? \"http\" : \"https\";",
											"  const decodedPartialPath = path.split(\":\").join(\"/\");",
											"  const endpoint = path",
											"    ? `${protocol}://${origin}/${decodedPartialPath}/did.json`",
											"    : `${protocol}://${origin}/.well-known/did.json`;",
											"  return endpoint;",
											"};",
											"",
											"const url =  convertDidToEndpoint(pm.environment.get(\"ORGANIZATION_DID_WEB\"))",
											"pm.variables.set(\"did_doc_url\", url);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{did_doc_url}}",
									"host": [
										"{{did_doc_url}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Identifiers - Resolve",
			"item": [
				{
					"name": "Negative Testing",
					"item": [
						{
							"name": "Bad Request",
							"item": [
								{
									"name": "did:invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{API_BASE_URL}}/identifiers/invalid_did",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"identifiers",
												"invalid_did"
											]
										}
									},
									"response": []
								},
								{
									"name": "did:not_found:did_web",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 404\", function () {",
													" pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{API_BASE_URL}}/identifiers/did:web:example.com",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"identifiers",
												"did:web:example.com"
											]
										}
									},
									"response": []
								},
								{
									"name": "did:not_found:urn",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 404\", function () {",
													" pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{API_BASE_URL}}/identifiers/urn:uuid:{{$randomUUID}}",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"identifiers",
												"urn:uuid:{{$randomUUID}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Bad Auth",
							"item": [
								{
									"name": "identifiers:missing_auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 401\", function () {",
													" pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{API_BASE_URL}}/identifiers/{{ORGANIZATION_DID_WEB}}",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"identifiers",
												"{{ORGANIZATION_DID_WEB}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "identifiers:missing_scope:resolve:dids",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 403\", function () {",
													" pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Obtain an access token without the required \"resolve:dids\" scope",
													"utils(pm).getAccessToken('')",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{API_BASE_URL}}/identifiers/{{ORGANIZATION_DID_WEB}}",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"identifiers",
												"{{ORGANIZATION_DID_WEB}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Positive Testing",
					"item": [
						{
							"name": "identifiers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"status code is 200\", function () {",
											" pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"response validates against schema\", function() {",
											" const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
											" pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
											"     strict: true,",
											"     strictSchema: true,",
											" });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{API_BASE_URL}}/identifiers/{{ORGANIZATION_DID_WEB}}",
									"host": [
										"{{API_BASE_URL}}"
									],
									"path": [
										"identifiers",
										"{{ORGANIZATION_DID_WEB}}"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{currentAccessToken}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// Obtain an access token with the required \"resolve:dids\" scope",
							"utils(pm).getAccessToken('resolve:dids');",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Credentials - Create",
			"item": [
				{
					"name": "Negative Testing",
					"item": [
						{
							"name": "Bad Request",
							"item": [
								{
									"name": "credentials_issue:credential:missing",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"rawBody\");",
													"",
													"// credential is required",
													"delete rawBody.credential",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue:credential.@context:missing",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"rawBody\");",
													"",
													"// credential.@context is required",
													"delete rawBody.credential[\"@context\"]",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue:credential.@context:wrong_type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"rawBody\");",
													"",
													"// credential.@context must be an array",
													"rawBody.credential[\"@context\"] = 42;",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue:credential.@context.members:wrong_type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"rawBody\");",
													"",
													"// credential.@context array must contain only strings",
													"rawBody.credential[\"@context\"] = [1, 2, 3];",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue:credential.id:wrong_type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"rawBody\");",
													"",
													"// credential.id must be string when present",
													"rawBody.credential.id = [1, 2, 3];",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue:credential.type:missing",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"rawBody\");",
													"",
													"// credential.type is required",
													"delete rawBody.credential.type",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue:credential.type:wrong_type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"rawBody\");",
													"",
													"// credential.type must be an array",
													"rawBody.credential.type = 42;",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue:credential.type.members:wrong_type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"rawBody\");",
													"",
													"// credential.type array must contain only strings",
													"rawBody.credential.type = [1, 2, 3];",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue:credential.issuer:missing",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"rawBody\");",
													"",
													"// credential.issuer is required",
													"delete rawBody.credential.issuer",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue:credential.issuer:wrong_type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"rawBody\");",
													"",
													"// credential.issuer must be a string or an object",
													"rawBody.credential.issuer = [\"arrays are invalid\"];",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue.credential.issuer:invalid_value",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"rawBody\");",
													"",
													"// credential.issuer must be a URI when it is a string value.",
													"rawBody.credential.issuer = \"not.a.uri\";",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue.credential.issuer:unknown",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"rawBody\");",
													"",
													"// credential.issuer must be known to the endpoint.",
													"rawBody.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue:credential.issuer.id:missing",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"rawBody\");",
													"",
													"// credential.issuer.id is required when issuer is in object format",
													"rawBody.credential.issuer = {};",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue:credential.issuer.id:wrong_type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"rawBody\");",
													"",
													"// credential.issuer.id must be a string.",
													"rawBody.credential.issuer = {\"id\": [\"arrays are invalid\"]};",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue.credential.issuer.id:invalid_value",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"rawBody\");",
													"",
													"// credential.issuer.id string must be a URI.",
													"rawBody.credential.issuer = {\"id\": \"not.a.uri\"};",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue.credential.issuer.id:unknown",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"rawBody\");",
													"",
													"// credential.issuer.id string must be known to the implementation.",
													"rawBody.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue:credential.issuanceDate.missing",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"rawBody\");",
													"",
													"// credential.issuanceDate is required",
													"delete rawBody.credential.issuanceDate",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue:credential.issuanceDate:wrong_type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"rawBody\");",
													"",
													"// credential.issuanceDate must be a string",
													"rawBody.credential.issuanceDate = [\"arrays are invalid\"];",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue:credential.issuanceDate:invalid_value",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"rawBody\");",
													"",
													"// credential.issuanceDate must be an XML Date Time String",
													"rawBody.credential.issuanceDate = \"not an xml date time string\";",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue:credential.credentialSubject:missing",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"rawBody\");",
													"",
													"// credential.credentialSubject is required",
													"delete rawBody.credential.credentialSubject",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue:credential.credentialSubject:wrong_type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"rawBody\");",
													"",
													"// credential.credentialSubject must be an object",
													"rawBody.credential.credentialSubject = \"did:example:1234\";",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue:credential.credentialSubject.id:wrong_type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"rawBody\");",
													"",
													"// credential.credentialSubject can be an object with an optional \"id\"",
													"// property that must be a string when present.",
													"rawBody.credential.credentialSubject = {\"id\": [\"did:example:1234\"]};",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue:options:missing",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"rawBody\");",
													"",
													"// options is required",
													"delete rawBody.options",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue:options:wrong_type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"rawBody\");",
													"",
													"// options must be an object",
													"rawBody.options = [\"array\", \"element\"];",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue:options.type:missing",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"rawBody\");",
													"",
													"// options.type is required",
													"delete rawBody.options.type",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue:options.type:wrong_type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"rawBody\");",
													"",
													"// options.type must be a string",
													"rawBody.options.type = [\"an\", \"array\"];",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue:options.type:invalid_value",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"rawBody\");",
													"",
													"// options.type must be valid",
													"rawBody.options.type = \"invalid value\";",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue:options.created:wrong_type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"rawBody\");",
													"",
													"// options.created must be a string when present",
													"rawBody.options.created = [\"an\", \"array\"];",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue:options.credentialStatus:wrong_type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"rawBody\");",
													"",
													"// options.credentialStatus must be an object when present",
													"rawBody.options.credentialStatus = \"a string\";",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue:options.credentialStatus.type:wrong_type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"rawBody\");",
													"",
													"// options.credentialStatus.type must be a string when present",
													"rawBody.options.credentialStatus = {\"type\": {\"foo\": 42}};",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue:options.credentialStatus.type:invalid_value",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 400\", function () {",
													" pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"rawBody\");",
													"",
													"// options.credentialStatus.type must be valid",
													"rawBody.options.credentialStatus = {\"type\": \"invalid value\"};",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								}
							],
							"description": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server."
						},
						{
							"name": "Bad Auth",
							"item": [
								{
									"name": "credentials_issue:missing_auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 401\", function () {",
													" pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_issue:missing_scope:issue_credentials",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 403\", function () {",
													" pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Obtain an access token without the required \"issue:credentials\" scope",
													"utils(pm).getAccessToken('');",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{currentAccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/issue",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"issue"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Positive Testing",
					"item": [
						{
							"name": "credentials_issue",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"status code is 201\", function () {",
											" pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"response validates against schema\", function() {",
											" const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
											" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
											"});",
											"",
											"pm.test(\"response issuer matches request credential.issuer\", function() {",
											" const { issuer } = pm.response.json();",
											" pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
											"});",
											"",
											"pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
											" const { credentialSubject } = pm.response.json();",
											" pm.expect(credentialSubject).to.be.empty;",
											"});",
											"",
											"pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
											" const { issuanceDate } = pm.response.json();",
											" pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuance_date\"))",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let rawBody = pm.variables.get(\"rawBody\");",
											"",
											"// Request body must be serialized before sending over the wire.",
											"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_BASE_URL}}/credentials/issue",
									"host": [
										"{{API_BASE_URL}}"
									],
									"path": [
										"credentials",
										"issue"
									]
								}
							},
							"response": []
						},
						{
							"name": "credentials_issue:credential:opt.id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"status code is 201\", function () {",
											" pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"response validates against schema\", function() {",
											" const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
											" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let rawBody = pm.variables.get(\"rawBody\");",
											"",
											"// credential.id is optional",
											"rawBody.credential.id = pm.variables.get(\"credential_id\");",
											"",
											"// Request body must be serialized before sending over the wire.",
											"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_BASE_URL}}/credentials/issue",
									"host": [
										"{{API_BASE_URL}}"
									],
									"path": [
										"credentials",
										"issue"
									]
								}
							},
							"response": []
						},
						{
							"name": "credentials_issue:credential:alt.issuer.object",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"status code is 201\", function () {",
											" pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"response validates against schema\", function() {",
											" const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
											" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
											"});",
											"",
											"pm.test(\"response issuer matches request credential.issuer.id\", function() {",
											" const { issuer } = pm.response.json();",
											" // Implementations may reduce object with just \"id\" property to a bare string",
											" if (typeof issuer === 'string') {",
											"  pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
											" } else {",
											"  pm.expect(issuer.id).to.equal(pm.variables.get(\"credential_issuer_id\"))",
											" }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let rawBody = pm.variables.get(\"rawBody\");",
											"",
											"// credential.issuer can be an object with required 'id' element",
											"rawBody.credential.issuer = {\"id\": pm.variables.get(\"credential_issuer_id\") };",
											"",
											"// Request body must be serialized before sending over the wire.",
											"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_BASE_URL}}/credentials/issue",
									"host": [
										"{{API_BASE_URL}}"
									],
									"path": [
										"credentials",
										"issue"
									]
								}
							},
							"response": []
						},
						{
							"name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"status code is 201\", function () {",
											" pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"response validates against schema\", function() {",
											" const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
											" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
											"});",
											"",
											"pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
											" const { credentialSubject } = pm.response.json();",
											" pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credential_subject\"))",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let rawBody = pm.variables.get(\"rawBody\");",
											"",
											"// credential.credentialSubject can be an object with optional 'id' element",
											"rawBody.credential.credentialSubject = {\"id\": pm.variables.get(\"credential_subject\") };",
											"",
											"// Request body must be serialized before sending over the wire.",
											"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_BASE_URL}}/credentials/issue",
									"host": [
										"{{API_BASE_URL}}"
									],
									"path": [
										"credentials",
										"issue"
									]
								}
							},
							"response": []
						},
						{
							"name": "credentials_issue:options:opt.created",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"status code is 201\", function () {",
											" pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"response validates against schema\", function() {",
											" const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
											" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let rawBody = pm.variables.get(\"rawBody\");",
											"",
											"// options.created can be an optional string value",
											"rawBody.options.created = \"an arbitrary string\";",
											"",
											"// Request body must be serialized before sending over the wire.",
											"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_BASE_URL}}/credentials/issue",
									"host": [
										"{{API_BASE_URL}}"
									],
									"path": [
										"credentials",
										"issue"
									]
								}
							},
							"response": []
						},
						{
							"name": "credentials_issue:options:opt.credentialStatus",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"status code is 201\", function () {",
											" pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"response validates against schema\", function() {",
											" const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
											" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let rawBody = pm.variables.get(\"rawBody\");",
											"",
											"// options.credentialStatus can be an optional object",
											"rawBody.options.credentialStatus = {};",
											"",
											"// Request body must be serialized before sending over the wire.",
											"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_BASE_URL}}/credentials/issue",
									"host": [
										"{{API_BASE_URL}}"
									],
									"path": [
										"credentials",
										"issue"
									]
								}
							},
							"response": []
						},
						{
							"name": "credentials_issue:options:opt.credentialStatus.type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"status code is 201\", function () {",
											" pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"response validates against schema\", function() {",
											" const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
											" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let rawBody = pm.variables.get(\"rawBody\");",
											"",
											"// options.credentialStatus.type can specific string",
											"rawBody.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
											"",
											"// Request body must be serialized before sending over the wire.",
											"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_BASE_URL}}/credentials/issue",
									"host": [
										"{{API_BASE_URL}}"
									],
									"path": [
										"credentials",
										"issue"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{currentAccessToken}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// Raw body should exclude all optional items and should contain",
							"// first alternate version of any 'oneOf' elements defined in the",
							"// OpenAPI schema.",
							"",
							"pm.variables.set('issuance_date', '2006-01-02T15:04:05Z');",
							"",
							"pm.variables.set(\"rawBody\", {",
							"    \"credential\": {",
							"        \"@context\": [",
							"            \"https://www.w3.org/2018/credentials/v1\"",
							"        ],",
							"        \"type\": [",
							"            \"VerifiableCredential\"",
							"        ],",
							"        \"issuer\": \"{{credential_issuer_id}}\",",
							"        \"issuanceDate\": \"{{issuance_date}}\",",
							"        \"credentialSubject\": {}",
							"    },",
							"    \"options\": {",
							"        \"type\": \"Ed25519Signature2018\",",
							"        \"created\": \"2020-04-02T18:48:36Z\"",
							"    }",
							"});",
							"",
							"// Obtain an access token with the required \"issue:credentials\" scope",
							"utils(pm).getAccessToken('issue:credentials');",
							"",
							"// Obtain the credential issuer ID via did:web resolution",
							"utils(pm).getIssuerId();",
							"",
							"// Set the credential subject to use for testing",
							"if (!pm.variables.get('credential_subject')) {",
							"    pm.variables.set('credential_subject', 'did:example:123')",
							"}",
							"",
							"// Set the credential id to use for testing",
							"if (!pm.variables.get('credential_id')) {",
							"    pm.variables.set('credential_id', \"urn:uuid:{{$randomUUID}}\")",
							"}",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Credentials - Update Status",
			"item": [
				{
					"name": "Negative Testing",
					"item": [
						{
							"name": "Bad Auth",
							"item": [
								{
									"name": "credentials_status:missing_auth",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 401\", function () {",
													" pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/status",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"status"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_status:missing_scope:update_credentials",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Obtain an access token without the required \"update:credentials\" scope",
													"utils(pm).getAccessToken('');",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 403\", function () {",
													" pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{currentAccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/status",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"status"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					]
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{currentAccessToken}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// Obtain an access token with the required \"update:credentials\" scope",
							"utils(pm).getAccessToken('update:credentials');",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Credentials - Verify",
			"item": [
				{
					"name": "Negative Testing",
					"item": [
						{
							"name": "Bad Request",
							"item": [
								{
									"name": "credentials_verify:vc:missing",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:string",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": \"string\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:null",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": null\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:integer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": 123\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:boolean",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:array",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": []\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:@context:missing",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:@context:boolean",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"valid_vc\");",
													"",
													"// credential.@context must be an array of strings",
													"rawBody[\"@context\"] = true;",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:@context:integer",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"valid_vc\");",
													"",
													"// credential.@context must be an array of strings",
													"rawBody[\"@context\"] = 123;",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:@context:null",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"valid_vc\");",
													"",
													"// credential.@context must be an array of strings",
													"rawBody[\"@context\"] = null;",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:@context:object",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..RJunbl8K6pk5JyKv0VkmdJT4I8sfatEPdbup0RAYKU6F1fDvEZ8j0xFlr1ocpNQGIi4H5cufTCRE3Fi45ZQ-CA\"\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:@context:string",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..33cnhPeRXCGz478h0OHf8saAVLVXrxpUI5wG_hdHUWjqKz-bnw2xRGx837FIMgC5jICPlDjEQl1c_durehmQBg\"\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:@context:item:array",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"valid_vc\");",
													"",
													"// credential.@context must be an array of strings",
													"rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:@context:item:boolean",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"valid_vc\");",
													"",
													"// credential.@context must be an array of strings",
													"rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:@context:item:integer",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"valid_vc\");",
													"",
													"// credential.@context must be an array of strings",
													"rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:@context:item:null",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"valid_vc\");",
													"",
													"// credential.@context must be an array of strings",
													"rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:@context:item:object",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..33cnhPeRXCGz478h0OHf8saAVLVXrxpUI5wG_hdHUWjqKz-bnw2xRGx837FIMgC5jICPlDjEQl1c_durehmQBg\"\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:id:array",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..CaZ2UcTNDOTCXaDXAclLPy7_3rpuf2sbL5xwaMnN2abolieE_C7fB7RsmZ7i5_6CoKRhGnrM3_YkAms8IlObCQ\"\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:id:boolean",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": false,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..yonwdW7r7YFAAjZZxjVrYPkLVrbLR5TMZ3bkWN1uo2UbUi5tgtlikoyyHlj8QD0MPA7xd4Jv-1PlryIVOqtUCw\"\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:id:integer",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": 123,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TRCl90uRMmkycDvfeHw1S7yxyAVl1-Vc2SfwwDzXkn1SqfCJxptwVsgJWwr3gQRAqveZR0xrxQczy4tWHq2FDw\"\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:id:null",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": null,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..33cnhPeRXCGz478h0OHf8saAVLVXrxpUI5wG_hdHUWjqKz-bnw2xRGx837FIMgC5jICPlDjEQl1c_durehmQBg\"\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:id:object",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ymo0kNnQ9mVHr1RKpfCuR_ekUAXzNEM7stSEtbbFv4ZPZb6NK7kUBkckgwrZyBp8re9RQEedJ9yiyfzTL41dCg\"\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:type:missing",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:type:boolean",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"valid_vc\");",
													"",
													"// credential.type must be an array of strings",
													"rawBody[\"type\"] = true;",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:type:integer",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"valid_vc\");",
													"",
													"// credential.type must be an array of strings",
													"rawBody[\"type\"] = 123;",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:type:null",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"valid_vc\");",
													"",
													"// credential.type must be an array of strings",
													"rawBody[\"type\"] = null;",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:type:object",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"valid_vc\");",
													"",
													"// credential.type must be an array of strings",
													"rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:type:string",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..J3mhnnbzRyvk8fyfh7fwzuuznEROTdVRM_MrdE-HV93WdGfTdgVhebmdmVZHmvmJiQaxYiIuD-natToEB7xvCg\"\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:type:item:array",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"valid_vc\");",
													"",
													"// credential.type must be an array of strings",
													"rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:type:item:boolean",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"valid_vc\");",
													"",
													"// credential.type must be an array of strings",
													"rawBody.type = [\"VerifiableCredential\", true];",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:type:item:integer",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"valid_vc\");",
													"",
													"// credential.type must be an array of strings",
													"rawBody.type = [\"VerifiableCredential\", 123];",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:type:item:null",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"valid_vc\");",
													"",
													"// credential.type must be an array of strings",
													"rawBody.type = [\"VerifiableCredential\", null];",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:type:item:object",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"valid_vc\");",
													"",
													"// credential.type must be an array of strings",
													"rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:issuer:missing",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xkCnC0dheSr9rWQn6uxLta6CXejSLy7FIQkZT2rYiOV0jmWW8SWcCdLqHg2gJ3WyBBmxj_zRwNBpFIUvsLCDBw\"\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:issuer:array",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bgY03ZzK02APUHCDiqUVMYbbvu4mSPNC1sGY3lTC8ko7j5oZDB4rB8FRzsXCc9L0O4nHx4UNJURCsRZUErbRCg\"\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:issuer:boolean",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..2Mu6q2PaIBjmfXHqLuT7XIFthDHboV4bdlIdLFY9KxapUXic6uhoefYFrarss-AN_5dUHdjWnHEMCoWYjW4MAg\"\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:issuer:integer",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..L3RWLJfQzaffmRy3vXZF_7gfdlR-iQbA_8TjGFaBCmaOqm8R7Qi0B6JivEqshh8MZWufDitgO-r6ASk2iaGVDA\"\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:issuer:null",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xkCnC0dheSr9rWQn6uxLta6CXejSLy7FIQkZT2rYiOV0jmWW8SWcCdLqHg2gJ3WyBBmxj_zRwNBpFIUvsLCDBw\"\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:issuer:id:missing",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n0Ffdz9nyzKuJw3OlGpU5h8clE5I6MFEFEEobztPABGQn1hFRN7CBx_BmDMsT7KF3jSLl008sTJ3RllFql5QBA\"\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:issuer:id:array",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..E4WypAOLo4KNTnvHucei_9yLEMdlq_UwhS7mexlp5i3hF8SfBAlLv2scHANd3Ikhtqr9JIyaXuDnIN2LsaVFCA\"\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:issuer:id:boolean",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..rnEgkKo3EQPiGixl67oPIFuZ7H9zueq0ELswP2p_FdahgJooIojScCnp-AcxeC_G6YDtLUbsNlVy0SkDvTnwBw\"\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:issuer:id:integer",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..nK8J_eHLw18__7Byp9ohgpDCHY1-Wfpw8vk-8k-nw4ezzjlwYoYjbo9x_xx3ES0WY0aCN2Xr9SbRoZHr78P0CQ\"\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:issuer:id:null",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n0Ffdz9nyzKuJw3OlGpU5h8clE5I6MFEFEEobztPABGQn1hFRN7CBx_BmDMsT7KF3jSLl008sTJ3RllFql5QBA\"\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:issuer:id:object",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..GEyy2tqmKf8AzHhXY06veUbSRVk9uoQIu21GZlYtcdMGh-VrTjvfVg2R8DAFtCBe6tEUL4dnsM87mT-20nG5Dg\"\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:issuanceDate:missing",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..WtxX0aIcE2JJ6T-a5nqfvElr_E5NwRYeOJgRBqeAVVFNJJaQJh6rz1V6nZsDl2xsblGQxCAaWQq9V6SphImACA\"\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:issuanceDate:array",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..vuVI_mdt7bpVwmKIsmIusWlCbj-wk33p6_FC2COcGBKzh9m5jxydHlDRIM6YoJQJWpS8_EavVFKwQvPuLuwNDA\"\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:issuanceDate:boolean",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": false,\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..jurLQ2KXgTdIxIAB1dwcysrBFVMT95g3Mn2SuyxAubRWS8Rbe-dFsoVG24kxo5wE6EZVYEuES8uHwNX_SSrvBQ\"\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:issuanceDate:integer",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..HyTRfrVnRzNCXO3qmmbQnmtXYV_bAdmZg-27bnuBGqQScL87kkmPfY3CpSTLN_8aV72mVBkvy1-uvYhkQotmDg\"\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:issuanceDate:null",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": null,\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..WtxX0aIcE2JJ6T-a5nqfvElr_E5NwRYeOJgRBqeAVVFNJJaQJh6rz1V6nZsDl2xsblGQxCAaWQq9V6SphImACA\"\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:issuanceDate:object",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..5NhiK8XqFDY7TB3l0Mli_VAhnflErggK8zlj71jNg6F5WD4eNAVufeVLhK8HtvGaC-7R7nQzQfzkCH9692DUAQ\"\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:issuanceDate:string",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1phNak29yV9Dt7ljiilV_cD1b78U9dV8Zhwjgrocc4Nahxchof8QHmEAFjfupRQZ71WIBpW-VGUtW-OwUu6eDA\"\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:credentialSubject:missing",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..jbb-uyU5OrakaqoC-9v-KQVdCXvOfr4Vjxox8hwFNP6qggsTP9NhHuq-T2Vdyag8BweIFTykT0SR_jAgtOxKDA\"\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:credentialSubject:array",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..J3mhnnbzRyvk8fyfh7fwzuuznEROTdVRM_MrdE-HV93WdGfTdgVhebmdmVZHmvmJiQaxYiIuD-natToEB7xvCg\"\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:credentialSubject:boolean",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..j1W65DhMkwul7bodXfKrVNsT_27QIFO7rI-8TDk0-ef-wu4PU7OuA8MFAOXfx-HdVf5KdqVu0BB1ITE6WjIXCw\"\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:credentialSubject:integer",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Wm4yBzXF87zLmyA0LMEwHSWs-2EfPpdN2yJstmvPJkPVLFdXKUdjh7lZuHNVtTkAMGNT8Wi_RZ5Q1BWAY054Cw\"\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:credentialSubject:null",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..jbb-uyU5OrakaqoC-9v-KQVdCXvOfr4Vjxox8hwFNP6qggsTP9NhHuq-T2Vdyag8BweIFTykT0SR_jAgtOxKDA\"\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:credentialSubject:string",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..J3mhnnbzRyvk8fyfh7fwzuuznEROTdVRM_MrdE-HV93WdGfTdgVhebmdmVZHmvmJiQaxYiIuD-natToEB7xvCg\"\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:credentialSubject:id:array",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VDVadt3rnBQ7P8dSYyZU5RHdfxVBWz3liR1wKbXbfBuaNT-rJYOoUCLQj-7IQ2elQaB4Fhp2nsgul9ZQmZc1CA\"\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:credentialSubject:id:boolean",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Kz272GRCnCfgHy4D8txIaM1bY5O5vW8iFfQrL2B8a7OnaVTcq6nF-dhqnoMLHPEbrUNzHK7spVAZG05Njl6CDQ\"\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:credentialSubject:id:integer",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..P9pVMuK8IN7B38_-uHlTyqAeQFcasIOW06wJWEZDZLPpaeLA4L-S6ee-tZsbGmM0QoSr8WTkbqkhiXpEhuIbAg\"\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:credentialSubject:id:null",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..rdlyOsz8ZwKwD5_CacS7c9iPQnRUIywCc_sHdyJlADD9Cq4cRwRw0wwJ7OZtLDylbm512V0s3Cn69i1qMWc8Bw\"\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:vc:credentialSubject:id:object",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YXI2e8nVY98qybXn64g4bOG063TH6yjKFmSF9gRq0MtX3q3cex1t5ayc38JjZSBEgoJTKQzUTbL71FOukoNrAw\"\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:proof:missing",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"valid_vc\");",
													"",
													"// credential.proof is required for embedded proof VCs",
													"delete rawBody.proof",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:proof:array",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"valid_vc\");",
													"",
													"// credential.proof is required to be an object for embedded proof VCs",
													"rawBody.proof = [];",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:proof:boolean",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"valid_vc\");",
													"",
													"// credential.proof is required to be an object for embedded proof VCs",
													"rawBody.proof = true;",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:proof:integer",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"valid_vc\");",
													"",
													"// credential.proof is required to be an object for embedded proof VCs",
													"rawBody.proof = 10;",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:proof:null",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"valid_vc\");",
													"",
													"// credential.proof is required to be an object for embedded proof VCs",
													"rawBody.proof = null;",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:proof:string",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"valid_vc\");",
													"",
													"// credential.proof is required to be an object for embedded proof VCs",
													"rawBody.proof = \"string\";",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:proof:type:array",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"valid_vc\");",
													"",
													"// credential.proof.type is required to be a specific string",
													"rawBody.proof.type = [\"Ed25519Signature2018\"];",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:proof:type:boolean",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"valid_vc\");",
													"",
													"// credential.proof.type is required to be a specific string",
													"rawBody.proof.type = true;",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:proof:type:integer",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"valid_vc\");",
													"",
													"// credential.proof.type is required to be a specific string",
													"rawBody.proof.type = 123;",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:proof:type:null",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"valid_vc\");",
													"",
													"// credential.proof.type is required to be a specific string",
													"rawBody.proof.type = null;",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:proof:type:object",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"valid_vc\");",
													"",
													"// credential.proof.type is required to be a specific string",
													"rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:proof:type:string",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"valid_vc\");",
													"",
													"// credential.proof.type is required to be a specific string",
													"rawBody.proof.type = \"not one of the valid values\";",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:proof:created:array",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"valid_vc\");",
													"",
													"// credential.proof.created is required to be a string",
													"rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:proof:created:boolean",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"valid_vc\");",
													"",
													"// credential.proof.created is required to be a string",
													"rawBody.proof.created = true;",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:proof:created:integer",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"valid_vc\");",
													"",
													"// credential.proof.created is required to be a string",
													"rawBody.proof.created = 123;",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:proof:created:null",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"valid_vc\");",
													"",
													"// credential.proof.created is required to be a string",
													"rawBody.proof.created = null;",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:proof:created:object",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"valid_vc\");",
													"",
													"// credential.proof.created is required to be a string",
													"rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:proof:verificationMethod:array",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"valid_vc\");",
													"",
													"// credential.proof.verificationMethod is required to be a string",
													"rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:proof:verificationMethod:boolean",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"valid_vc\");",
													"",
													"// credential.proof.verificationMethod is required to be a string",
													"rawBody.proof.verificationMethod = true;",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:proof:verificationMethod:integer",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"valid_vc\");",
													"",
													"// credential.proof.verificationMethod is required to be a string",
													"rawBody.proof.verificationMethod = 123;",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:proof:verificationMethod:null",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"valid_vc\");",
													"",
													"// credential.proof.verificationMethod is required to be a string",
													"rawBody.proof.verificationMethod = null;",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:proof:verificationMethod:object",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"valid_vc\");",
													"",
													"// credential.proof.verificationMethod is required to be a string",
													"rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:proof:jws:array",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"valid_vc\");",
													"",
													"// credential.proof.jws is required to be a string",
													"rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:proof:jws:boolean",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"valid_vc\");",
													"",
													"// credential.proof.jws is required to be a string",
													"rawBody.proof.jws = true;",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:proof:jws:integer",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"valid_vc\");",
													"",
													"// credential.proof.jws is required to be a string",
													"rawBody.proof.jws = 123;",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:proof:jws:null",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"valid_vc\");",
													"",
													"// credential.proof.jws is required to be a string",
													"rawBody.proof.jws = null;",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:proof:jws:object",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"valid_vc\");",
													"",
													"// credential.proof.jws is required to be a string",
													"rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:proof:proofPurpose:array",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"valid_vc\");",
													"",
													"// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
													"rawBody.proof.proofPurpose = [\"assertionMethod\"];",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:proof:proofPurpose:boolean",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"valid_vc\");",
													"",
													"// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
													"rawBody.proof.proofPurpose = true;",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:proof:proofPurpose:integer",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"valid_vc\");",
													"",
													"// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
													"rawBody.proof.proofPurpose = 123;",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:proof:proofPurpose:null",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"valid_vc\");",
													"",
													"// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
													"rawBody.proof.proofPurpose = null;",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:proof:proofPurpose:object",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"valid_vc\");",
													"",
													"// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
													"rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:proof:proofPurpose:string",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.variables.get(\"valid_vc\");",
													"",
													"// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
													"rawBody.proof.proofPurpose = \"not a valid value\";",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"status code is 400\", function () {",
											" pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"response validates against schema\", function() {",
											" const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
											" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
											"});",
											""
										]
									}
								}
							]
						},
						{
							"name": "Bad Auth",
							"item": [
								{
									"name": "credentials_verify:missing_auth",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 401\", function () {",
													" pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials_verify:missing_scope:verify_credentials",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Obtain an access token without the required \"verify:credentials\" scope",
													"utils(pm).getAccessToken('');",
													"",
													"// Request body must be serialized before sending over the wire.",
													"pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 403\", function () {",
													" pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{currentAccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_BASE_URL}}/credentials/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"credentials",
												"verify"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					]
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{currentAccessToken}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// Obtain an access token with the required \"verify:credentials\" scope",
							"utils(pm).getAccessToken('verify:credentials');",
							"",
							"// Dummy VC issued for testing",
							"pm.variables.set(\"valid_vc\", {",
							"    \"@context\": [",
							"        \"https://www.w3.org/2018/credentials/v1\"",
							"    ],",
							"    \"credentialSubject\": {",
							"        \"id\": \"did:example:123\"",
							"    },",
							"    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
							"    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
							"    \"proof\": {",
							"        \"created\": \"2020-04-02T18:48:36Z\",",
							"        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
							"        \"proofPurpose\": \"assertionMethod\",",
							"        \"type\": \"Ed25519Signature2018\",",
							"        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
							"    },",
							"    \"type\": \"VerifiableCredential\"",
							"});",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Presentations - Present",
			"item": [
				{
					"name": "Negative Testing",
					"item": [
						{
							"name": "Bad Auth",
							"item": [
								{
									"name": "presentations:missing_auth",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 401\", function () {",
													" pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{API_BASE_URL}}/presentations",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"presentations"
											]
										}
									},
									"response": []
								},
								{
									"name": "presentations:missing_scope:submit_presentations",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Obtain an access token without the required \"submit:presentations\" scope",
													"utils(pm).getAccessToken('');",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 403\", function () {",
													" pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{currentAccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{API_BASE_URL}}/presentations",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"presentations"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					]
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{currentAccessToken}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// Obtain an access token with the required \"submit:presentations\" scope",
							"utils(pm).getAccessToken('submit:presentations');",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Presentations - Create",
			"item": [
				{
					"name": "Negative Testing",
					"item": [
						{
							"name": "Bad Auth",
							"item": [
								{
									"name": "presentations_prove:missing_auth",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 401\", function () {",
													" pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{API_BASE_URL}}/presentations/prove",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"presentations",
												"prove"
											]
										}
									},
									"response": []
								},
								{
									"name": "presentations_prove:missing_scope:prove_presentations",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Obtain an access token without the required \"prove:presentations\" scope",
													"utils(pm).getAccessToken('');",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 403\", function () {",
													" pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{currentAccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{API_BASE_URL}}/presentations/prove",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"presentations",
												"prove"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					]
				}
			],
			"auth": {
				"type": "bearer"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// Obtain an access token with the required \"prove:presentations\" scope",
							"utils(pm).getAccessToken('prove:presentations');"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Presentations - Verify",
			"item": [
				{
					"name": "Negative Testing",
					"item": [
						{
							"name": "Bad Auth",
							"item": [
								{
									"name": "presentations_verify:missing_auth",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 401\", function () {",
													" pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{API_BASE_URL}}/presentations/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"presentations",
												"verify"
											]
										}
									},
									"response": []
								},
								{
									"name": "presentations_verify:missing_scope:verify_presentations",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Obtain an access token without the required \"verify:presentations\" scope",
													"utils(pm).getAccessToken('');",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code is 403\", function () {",
													" pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"response validates against schema\", function() {",
													" const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
													" pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{currentAccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{API_BASE_URL}}/presentations/verify",
											"host": [
												"{{API_BASE_URL}}"
											],
											"path": [
												"presentations",
												"verify"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					]
				}
			],
			"auth": {
				"type": "bearer"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// Obtain an access token with the required \"verify:presentations\" scope",
							"utils(pm).getAccessToken('verify:presentations');"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Presentations - Notify",
			"item": []
		},
		{
			"name": "Presentations - Submit",
			"item": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// The pm variable is not available inside global methods.",
					"utils = (pm) => {",
					"    // Local variables do not persist across requests, but globals do.",
					"    let tokenCache = {};",
					"    if (pm.globals.has(\"tokenCache\")) {",
					"        tokenCache = JSON.parse(pm.globals.get(\"tokenCache\"))",
					"    }",
					"    return {",
					"        getAccessToken: (scope) => {",
					"            const accessTokenRequest = {",
					"                url: pm.environment.get(\"TOKEN_ENDPOINT\"),",
					"                method: 'POST',",
					"                body: {",
					"                    mode: 'urlencoded',",
					"                    urlencoded: [",
					"                        {key: \"client_id\", value: pm.environment.get(\"CLIENT_ID\")},",
					"                        {key: \"client_secret\", value: pm.environment.get(\"CLIENT_SECRET\")},",
					"                        {key: \"audience\", value: pm.environment.get(\"TOKEN_AUDIENCE\")},",
					"                        {key: \"grant_type\", value: \"client_credentials\" },",
					"                        {key: \"scope\", value: scope},",
					"                    ],",
					"                }",
					"            };",
					"            if (tokenCache[scope]) {",
					"                pm.variables.set('currentAccessToken', tokenCache[scope])",
					"            } else {",
					"                // NB: The main Postman request will not be sent until the pre-request script",
					"                //     is determined to be finished with all callbacks, including sendRequest.",
					"                pm.sendRequest(accessTokenRequest, (err, res) => {",
					"                    pm.expect(err).to.be.null;",
					"                    tokenCache[scope] = res.json().access_token;",
					"                    pm.globals.set(\"tokenCache\", JSON.stringify(tokenCache));",
					"                    pm.variables.set(\"currentAccessToken\", tokenCache[scope]);",
					"                });",
					"            }",
					"        },",
					"        getIssuerId: () => {",
					"            const request = {",
					"                url: pm.environment.get(\"API_BASE_URL\") + \"/did.json\",",
					"                method: 'GET',",
					"            };",
					"            pm.sendRequest(request, (err, res) => {",
					"                pm.expect(err).to.be.null;",
					"                const { id } = res.json();",
					"                pm.variables.set(\"credential_issuer_id\", id);",
					"            });",
					"        },",
					"    };",
					"};"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "responseSchema201CredentialsIssue",
			"value": "{\"title\":\"Serialized Verifiable Credential\",\"oneOf\":[{\"title\":\"Verifiable Credential\",\"type\":\"object\",\"allOf\":[{\"type\":\"object\",\"required\":[\"@context\",\"type\",\"issuer\",\"issuanceDate\",\"credentialSubject\"],\"properties\":{\"@context\":{\"description\":\"This JSON-LD Context defining all terms in the Credential.\",\"type\":\"array\",\"items\":{\"type\":\"string\"}},\"id\":{\"description\":\"The IRI identifying the Credential\",\"type\":\"string\"},\"type\":{\"description\":\"The Type of the Credential\",\"type\":\"array\",\"items\":{\"type\":\"string\"}},\"issuer\":{\"description\":\"This value MUST match the assertionMethod used to create the Verifiable Credential.\",\"oneOf\":[{\"type\":\"string\"},{\"type\":\"object\",\"required\":[\"id\"],\"properties\":{\"id\":{\"description\":\"The IRI identifying the Issuer\",\"type\":\"string\"}}}]},\"issuanceDate\":{\"description\":\"This value MUST be an XML Date Time String\",\"type\":\"string\"},\"credentialSubject\":{\"type\":\"object\",\"properties\":{\"id\":{\"description\":\"The IRI identifying the Subject\",\"type\":\"string\"}}}}},{\"type\":\"object\",\"required\":[\"proof\"],\"properties\":{\"proof\":{\"title\":\"Credential Linked Data Proof\",\"allOf\":[{\"title\":\"Linked Data Proof\",\"type\":\"object\",\"description\":\"A JSON-LD Linked Data proof.\",\"properties\":{\"type\":{\"type\":\"string\",\"description\":\"Linked Data Signature Suite used to produce proof.\",\"enum\":[\"Ed25519Signature2018\",\"JsonWebSignature2020\",\"jwt_vc\"]},\"created\":{\"type\":\"string\",\"description\":\"Date the proof was created.\"},\"verificationMethod\":{\"type\":\"string\",\"description\":\"Verification Method used to verify proof.\"},\"jws\":{\"type\":\"string\",\"description\":\"Detached JSON Web Signature\"}}},{\"type\":\"object\",\"properties\":{\"proofPurpose\":{\"type\":\"string\",\"description\":\"Credentials rely on assertionMethod proof purpose.\",\"enum\":[\"assertionMethod\"]}}}]}}}]},{\"title\":\"VC JWT\",\"type\":\"string\"}]}",
			"type": "string"
		},
		{
			"key": "responseSchema400",
			"value": "{\"allOf\":[{\"type\":\"object\",\"required\":[\"message\"],\"properties\":{\"message\":{\"type\":\"string\"},\"details\":{\"oneOf\":[{\"type\":\"string\"},{\"type\":\"array\",\"items\":{\"type\":\"string\"}},{\"type\":\"object\",\"additionalProperties\":true}]}}},{\"type\":\"object\",\"properties\":{\"code\":{\"enum\":[400]},\"message\":{\"enum\":[\"Bad Request: Your request body does not conform to the required schema\"]}}}]}",
			"type": "string"
		},
		{
			"key": "responseSchema401",
			"value": "{\"allOf\":[{\"type\":\"object\",\"required\":[\"message\"],\"properties\":{\"message\":{\"type\":\"string\"},\"details\":{\"oneOf\":[{\"type\":\"string\"},{\"type\":\"array\",\"items\":{\"type\":\"string\"}},{\"type\":\"object\",\"additionalProperties\":true}]}}},{\"type\":\"object\",\"properties\":{\"code\":{\"enum\":[401]},\"message\":{\"enum\":[\"Unauthorized: This endpoint requires an OAuth2 bearer token\"]}}}]}",
			"type": "string"
		},
		{
			"key": "responseSchema403",
			"value": "{\"allOf\":[{\"type\":\"object\",\"required\":[\"message\"],\"properties\":{\"message\":{\"type\":\"string\"},\"details\":{\"oneOf\":[{\"type\":\"string\"},{\"type\":\"array\",\"items\":{\"type\":\"string\"}},{\"type\":\"object\",\"additionalProperties\":true}]}}},{\"type\":\"object\",\"properties\":{\"code\":{\"enum\":[403]},\"message\":{\"enum\":[\"Forbidden: OAuth2 bearer token does not have the required scope\"]}}}]}",
			"type": "string"
		},
		{
			"key": "responseSchema404",
			"value": "{\"allOf\":[{\"type\":\"object\",\"required\":[\"message\"],\"properties\":{\"message\":{\"type\":\"string\"},\"details\":{\"oneOf\":[{\"type\":\"string\"},{\"type\":\"array\",\"items\":{\"type\":\"string\"}},{\"type\":\"object\",\"additionalProperties\":true}]}}},{\"type\":\"object\",\"properties\":{\"code\":{\"enum\":[404]},\"message\":{\"enum\":[\"Not Found: The requested resource could not be found\"]}}}]}",
			"type": "string"
		},
		{
			"key": "responseSchema500",
			"value": "{\"type\":\"object\",\"required\":[\"message\"],\"properties\":{\"message\":{\"type\":\"string\"},\"details\":{\"oneOf\":[{\"type\":\"string\"},{\"type\":\"array\",\"items\":{\"type\":\"string\"}},{\"type\":\"object\",\"additionalProperties\":true}]}}}",
			"type": "string"
		},
		{
			"key": "responseSchema200Identifiers",
			"value": "{\"type\":\"object\",\"required\":[\"didDocument\"],\"properties\":{\"didDocument\":{\"type\":\"object\",\"required\":[\"service\"],\"properties\":{\"service\":{\"type\":\"array\",\"minItems\":1,\"items\":{\"type\":\"object\",\"required\":[\"type\",\"serviceEndpoint\"],\"properties\":{\"type\":{\"type\":\"string\"},\"serviceEndpoint\":{\"type\":\"string\"}}}}}},\"didResolutionMetadata\":{\"type\":\"object\"},\"didDocumentMetadata\":{\"type\":\"object\"}}}",
			"type": "string"
		},
		{
			"key": "responseSchema400Identifiers",
			"value": "{\"allOf\":[{\"description\":\"Bad Request\",\"content\":{\"application/json\":{\"schema\":{\"allOf\":[{\"type\":\"object\",\"required\":[\"message\"],\"properties\":{\"message\":{\"type\":\"string\"},\"details\":{\"oneOf\":[{\"type\":\"string\"},{\"type\":\"array\",\"items\":{\"type\":\"string\"}},{\"type\":\"object\",\"additionalProperties\":true}]}}},{\"type\":\"object\",\"properties\":{\"code\":{\"enum\":[400]},\"message\":{\"enum\":[\"Bad Request: Your request body does not conform to the required schema\"]}}}]}}}},{\"type\":\"object\",\"properties\":{\"message\":{\"enum\":[\"Bad Request: Invalid DID\"]}}}]}",
			"type": "string"
		},
		{
			"key": "responseSchema200ApiConfiguration",
			"value": "{\"title\":\"Traceability API DID Web Document\",\"type\":\"object\",\"properties\":{\"@context\":{\"oneOf\":[{\"type\":\"string\"},{\"type\":\"array\",\"uniqueItems\":true,\"items\":{\"oneOf\":[{\"type\":\"string\"},{\"type\":\"object\"}]}}]},\"id\":{\"type\":\"string\"},\"service\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"},\"type\":{\"type\":\"array\",\"items\":{\"type\":\"string\"}},\"serviceEndpoint\":{\"type\":\"string\"}}}}}}",
			"type": "string"
		}
	]
}