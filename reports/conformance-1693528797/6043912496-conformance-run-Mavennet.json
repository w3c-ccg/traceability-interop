{
  "collection": {
    "info": {
      "_postman_id": "faa02ea8-9433-45af-b9a7-893a98130da9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "ea3891e6-e252-4406-9364-5641b189c1f0",
        "name": "Clear Cache",
        "item": [
          {
            "id": "2eec1519-6065-41c4-80d9-79d4fdb5e67c",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a2e2f93d-26bb-4007-b21d-2b0344f5f36c",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "a87b6bbc-1278-44ae-bb91-df62dd819df6"
                }
              }
            ]
          },
          {
            "id": "ce928997-0831-447d-be7f-0fb47f138ace",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "bdd0ed10-41d2-4b94-8293-6ef8f8d47a0c",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "f4658461-cbc4-45f0-bda6-742f5698c3cb"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "f929cc70-ef83-4603-a7ca-5995fc7a24f3",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "5b801586-635a-4cb6-8f2d-fd708785d4d4",
            "name": "Positive Testing",
            "item": [
              {
                "id": "16e63b69-cf8f-44b4-9b36-8364baf22dd4",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "184812d7-9d6e-431f-85c5-b18f9d9c3cfd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4cc74ed2-147e-4224-bfd6-5ab26a72b801"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4fa4902b-50db-458a-82ec-dc3e8a42f564",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "47c4267d-1e61-4445-b0e9-eb39bcd26656"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "85cb684c-530e-4532-99fc-9024f0efdf0e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c6b43836-1834-494e-8958-b657ab1ba7ed"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "40958620-0a70-458f-81c8-653647c10ac3",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "2c776b1e-d0fc-4c38-af73-bf643b108bb3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b2c655aa-19b9-47b9-9cb5-0563bd49089b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "15ae7602-5d49-44c8-9d03-530f3ffd71df"
            }
          }
        ]
      },
      {
        "id": "ded4d10e-a26e-4f51-aa8f-c675545cc055",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "5605bc24-f0a6-496e-8085-e5036fbc1f9d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a8128491-484c-4cbf-918e-0214a9dfc9cf",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "9e6a248b-fc16-4a5f-ba8f-00abef4b1f86",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c2be65a-94fb-496d-af09-4166ee9142b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b7c57afd-c3ab-427f-a25e-40bc5d229fb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac93ddd9-f14c-4023-bdc7-7f4625ae6cc5",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b696b4d4-c63b-4d5a-9e08-281d5cfc7371",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "18a9a87f-6287-4792-8381-660667ec1df9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f11defe-c86c-4874-9872-1cedd205dadd",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c1d05f7-1cf2-435e-9439-34e351547d97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fab64809-b3d1-47cf-ad90-762282e156ad"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "9abadf67-e2a3-4ca4-8a5a-6f162a84e21d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "11301ef1-bd5d-4135-aea4-ab194bbb170f",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2385b243-caeb-43b8-8f5a-7befd2a60bcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "93f548fd-763d-49b3-88d9-c7a36b002a20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf5d8d58-fb81-4d5a-8ed6-9aa1d9245ed0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9617748-11ff-4f79-844e-3c5ae6b45678"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "bb330ec0-c888-43bc-9c30-6a9e1ccbcf25",
            "name": "Positive Testing",
            "item": [
              {
                "id": "7139fadc-0bd4-4701-a870-2ab6d03a11f1",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9450693a-fa7e-4617-8fd0-f05aef993627",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "8027fd68-a4fb-481f-83a9-58f55a40fbf5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4c59e92d-373c-491a-bacf-4614b79c038d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "40602814-c3df-45f4-8789-a3505ad6ad94"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f1f6b1c3-322a-4aaf-8020-85454d23d706",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3c346dce-6340-47b4-974e-0cc2e7b281a9"
            }
          }
        ]
      },
      {
        "id": "c7e82116-5d6a-46bf-8169-67ac078812bf",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "5342789f-2a6b-46d8-bf8d-0e3642f036c9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a6db72ef-13b1-490e-8b80-66d4ce066cc5",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "74115aa8-9ab3-4498-9582-327e1568010f",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48fa1e75-7e90-4741-846c-eb6dabf375bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36c79cfd-3aa4-4d69-b47a-c9b4f4b45319"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0fb4232-dfda-4e25-a2e5-ec84dcd86898",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7ae0c595-53f5-4138-b3f7-7bab547d5671"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e066a95-6f08-4d98-8bfb-3ad91ee802e1",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11ecf849-189a-4e86-927b-c0740e3c0567",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73ad772f-44fc-4668-994a-d399330040a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9189aeac-beff-423c-9a3d-cd4da690f956",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9cb5e482-85ea-4463-abf5-086a07783ff2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d34e73d-0560-4a29-8375-d5e46f3f7327",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "551c7708-8edb-45c0-a2b8-eb4f13216f33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd82ad86-039c-435b-9eb8-3d43bc131490"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad834cfb-a05e-48ab-b3e3-1f94cadb5ab3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "26a51b4a-e50a-48f5-a959-1b8df7d329b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a15c94e-41b8-43a4-be15-a2a688e01ecd",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3269f61-46de-4668-9528-70aab783ca99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aca0d58b-d9e6-4fa1-a683-4afd820d5bf9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "869a920f-dfae-4b40-b6a7-f3d3a264d14f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1a6cf86d-a9f7-4dd8-9490-6b7e612b169e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7d7a899-5091-4d77-a252-dd33fa72edce",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "361a80f4-e8b9-44e8-84de-020a13f77262",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37ce8180-27cf-43cf-9f61-29952ebba562"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49e1e5ac-3adf-4914-a908-8d62798109b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6f98b82f-b936-48db-962b-0b46f4ee10ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14e55271-5eca-45af-aa42-b8f8e5bdd07a",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c070586-1807-4f16-880b-4fe7902e2316",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5558407f-eb27-43fe-a6ae-8b647386c3a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "132afece-f13e-4291-a7b5-e84327e517e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9d689602-142a-4334-9d05-e24253e4316a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca83c148-1705-4461-822a-c6292364ab58",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c51b64b-3c59-4d7d-a7a2-7a7f3b4a1aaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29c2d8f9-99d1-493f-bcdd-f4f3d0e2bd3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3264021d-67db-4fac-92df-c51189d13514",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e9f2faab-8ba3-4482-a264-6410321b5789"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07b1e2d1-306b-4f78-ba19-da52e2f543ba",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8edd74e8-60e8-4c8b-bf61-78b7687be8ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b106b4c5-2031-49d1-85b2-73f44a18aca0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebffb953-ec7a-4488-8689-d16339040a76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c9c56764-90a7-45d2-b4eb-aaac39beb42c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2dd3dbff-3cb6-4fe0-a3d0-0bee7ac1bf62",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6295d259-532a-4a65-b2ac-32b3f3eefa32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "101ea09f-daac-4654-91e1-0b8bb5881fbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a33e335-58f8-4b81-a4a1-2fd7e71de951",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7b96f7c6-ec65-42fc-aaec-e1aae971a46c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7189d328-23e7-4ad4-88b5-525da309fae9",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "919705f9-fdb7-444f-beac-c0ecc20952cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ef32f78-be54-45a5-94b7-97bcd0370a91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "474a94b4-c8a1-42ae-8a07-38c2431751d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1f32108b-5d52-4778-8dac-f893c9d34ce2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83d049bf-91fb-4043-adb8-ac8daf9c2494",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16548eb4-e7d0-4a7e-bf2e-869750c5aa8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df29879d-6e71-43c8-a74f-2ac356c20079"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7c1a6b7-45b3-4e09-817e-e28b7b6c4ac8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b084490b-1352-4cfd-90e7-b7d4a664039d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31e30da6-111c-417b-803d-0df6415b9325",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b0eb034-c217-4adf-8d6c-b910335ae588",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d247c26-991f-473a-8b4e-bcdb515ddf85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c924d8e1-66ea-4b28-b0c1-d0c66f0a65c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d7c442dc-2e6a-416b-b773-659ce968ee73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "096c2033-aef9-4b04-ad3d-cc6413e909b7",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f066c6f-6af3-44e4-be79-5e08ba2a1ad6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae5397bf-defd-40ec-b7b7-d75557a21957"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb28d4d1-bb22-4703-ba64-cc2c4af70a8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8a61c305-0d1f-40f0-b56f-134c4a2830db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d07d763-22fd-442f-b11b-42c88ca7b0bc",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58f870aa-41fb-4f73-a365-9a5671a74e2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83a165ea-105d-4458-ab95-8567b2bdd471"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfaf6b43-398b-4325-888f-c72669318678",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7609d28b-e96e-4ab2-8158-043e063e29a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f17e294a-9f6f-4237-94e4-705d02119747",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "403c134d-edf5-44d0-baf5-e4b5216adcf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9925d374-41aa-4968-afdd-4993b807c339"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9bcd5f8-4a60-4a80-a707-1b365a0e6271",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "68b8b9d8-628c-44d2-9520-8abf273f2d24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e72ef7b1-57d4-4fd9-95f7-25e4bca94b44",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0af385d-b574-4616-9136-6c7c9cb20aac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe7fd6d9-fc89-476a-b72c-29c174302e00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d977b735-effb-405c-a9fa-fc56f8a69ee1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "234f3e71-a0f2-4c37-91df-ec8ec468fabd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8196725f-caba-4d7d-8a5d-64001cee3232",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84293bcc-daf6-44bf-af1c-e7c065f26dd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a721458a-3d7e-40aa-a150-5154df267414"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89eeba12-092b-4e22-9a7b-f869483c6552",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8e0985a0-423f-48ad-ba20-4056b5adc05e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da18c833-b611-42f2-9c0a-c0a9214bc531",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46c64b02-2807-4d73-b2f3-117fc1fbcd02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9638f504-9049-4be3-840e-fb5a91a4c8de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4cbc6ab-78d9-4dfb-926c-2a96ad61ac2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "7054e03a-9f2a-4504-afa1-e4ef8f3f2c9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41e058b1-b051-4a59-b12a-b9a648dff1b8",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dab2f84-0600-487e-89b8-65ee35e2697f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f1568b5-2899-4750-a946-5ef0176fadde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9ffc2e9-6a74-4b86-911c-05fe43b85fa1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "874a7fd4-a5e1-42dc-848b-840cb9395cfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d40fb592-4fae-4caf-907f-b90669a3f55e",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21c08cf3-3a7f-4113-9e7c-96c34a210472",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e09f1e8e-c51d-4b1e-ae3e-b68f77a826ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6195c8a1-663c-472f-a71e-8763bccbc620",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5cb1e78d-4e05-45b2-8ad2-8d14afd65ae6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fc67f9f-9496-41fc-a50f-44742ee4862a",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "675279d1-04a3-49ce-8f97-8f672edddbd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "705a9ac6-a212-428a-a345-e4a60578299f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e46234e-7137-47cc-8e0b-3a82d6caff98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "35487a3f-ee94-4cd6-bb45-91a810d700a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0280ddf0-81b2-4039-9e01-a6c168afdae9",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "008f3616-cb2a-4e62-a7a0-ee15c2fca757",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f54db6f-3901-4edc-8378-4795dccf6438"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb10fa3c-cd32-4a75-94be-3c3fb4e49f54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e0037a15-a22f-43a4-84cf-0e49e94012bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fd549c3-9ce8-4308-8713-01a724ae659e",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a74b60c0-f6dc-4aa8-822e-cd6827230bbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "246c0323-f838-4c36-99c3-e527f23ac959"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "535b8393-7e8c-4d8b-8a46-d11c3b4e555d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2a667ca6-6f29-4566-8f11-d311b8a49dce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9cd9144-4c6d-4eec-b060-124c9a037350",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b67c428-a0c4-4d96-930b-e77d52555f5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf43d198-e80f-4fda-b456-2469db8c9c2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90aa5c82-30e5-4569-ac24-ed6e48f85d8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "eab2a3a7-097c-4577-9528-06500c69523e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31bfc243-3210-4a61-bf5f-f81343f7b6fa",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2725e03-30c3-411f-9973-74ca18968077",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c97ec7c3-3c7e-44b2-9086-10ab17af7eb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f56500db-784a-49d0-9d8b-dbd2d104edb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "cba24d14-15b5-4b51-809c-66d2a6680eb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe2eee3e-c12e-4f8b-ab00-6443f891cee3",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3243a294-fc88-401b-8cb9-d0f543e5c1b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ac2d7ec-af00-4b3f-a4cc-8e68f2f59a55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7f2a53c-6cc4-424f-a240-17fd9f4eec1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ef6d17b6-f007-4108-affe-67d4fd161f37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b913e5a2-4f60-47e7-a1a1-05f6607a5292",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7046cd9b-56d7-46f7-92f9-933379398e44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "455e189f-1c8c-45df-8739-55e30b8f7bae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66bed513-1107-4496-9ceb-c7611e9462f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "bd7da647-cf74-41d7-8478-24ad55f3bcf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4547a75b-25c7-40bc-bb45-5d7dbfafa7dc",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b31d954-af8e-437b-b7f3-0c9f78a02696",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a294194d-d638-4214-8e5d-8aebbf0710fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cef809ad-2d09-432f-b777-67ef44ad63be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c332d741-12ba-41f1-bcc6-051d4598a9a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b5e035e-d2e1-42ac-a694-a1c63f5b81bb",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d34cb346-702b-48e6-ba97-f286a7888bfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3f80124-f474-43b6-89fe-f8379012b5ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ac5eb15-cd96-438f-9caa-bb8db1d77b83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "762c657b-9139-4699-bf72-4cb74c268f9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dbd425a-ddbb-4560-ad5b-b553d56bf04a",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "086e9ee6-d809-4df2-aab7-abb8c736404c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a234e415-ac77-4f1d-affb-4e64a7d35980"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c3871af-00f3-4332-b7cb-a5b41977beb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "8e367e09-5209-484f-a1fb-08ca4fe4bd87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0178680d-d741-480f-b0e8-e2827fd67611",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b45d8cdc-649b-4b7a-9b9d-1a281c38f31b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "074b98fc-38db-42c1-86c1-aee25efa1f9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b419e484-92c8-4af0-ae74-06df79f9c1db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "cc00ce2f-4ab8-49f5-abb9-dddb42d257ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f819e57-e4ed-4bed-9fea-5e9c1ae65db4",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65458b0f-9eb7-4ea2-af06-7c45b0af2a33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb652c30-d67e-4bdb-8e83-2b167cd1e853"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c49ea3ab-ed48-4adf-af5a-6e76b7a80ffb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "416fd6ec-1948-4a53-9c14-03ff3888f276"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be3f49ef-570c-4bf7-9845-624d3944e056",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3adde999-eb05-4169-a003-68ddb8f8bb3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d9de1e8-1f88-45ac-aae6-b873186e83bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0e89888-79dd-485c-958e-a979ba13c3ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7b5da84a-7c68-401a-ac01-f212f2122606"
                        }
                      }
                    ]
                  },
                  {
                    "id": "449fca9a-b88f-4ba5-96d3-55e44b854c78",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d97eac74-ee09-4e5c-83ab-cf2c795ec3c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a84a1b04-deab-4e20-abdb-0eed5e295ccd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edbccd64-e988-4533-9950-499d141fb8f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4b6628d2-1853-4be1-a014-50deb99e8dcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebc2c97a-a4b5-4694-977b-92b99ecfcc77",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49f455c5-ff9f-42ea-8d7c-fe8ef64e6dcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbe56fbe-d475-46d9-b55b-3f9650900e6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d21d0c90-f59e-4242-b532-654ba69479ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "f2c53272-0542-4b03-8d38-caf692bf12c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "750e8f65-6a5f-4637-971c-d5185ee15fa0",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d8a5d49-f781-40cc-811a-92f49bea352c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e7d9a4d7-5cea-40a8-88be-34a9f9d8b0dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8790cd1b-30be-477b-bb4b-9af6767f0669",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ba4749df-c99e-4b95-aca3-9fa3bd26e146"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a6d322e-682c-409a-8cf3-ed1630d34c52",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46d7fe3f-748e-4312-8fac-d6c448200550",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e6bd6cf-3e32-487c-9d44-2fa9ec2ebeab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "654d7d71-9abe-43c3-a487-e714b855c60e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "85546fb1-ec62-48e0-93da-7e4b5a318bf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ccb7dbf-0dc2-443e-a182-66ddb1a5ff63",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b19bed4-7089-46a0-8f1f-1a46a2aeae60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc63e4be-9577-4ff6-8859-22d14ed83bcb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "230e30f2-46d5-4fdd-a9a6-efee87dbcdf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "e078be32-1229-434c-8b1a-056cd71854fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1dc5de0-cd18-454c-b15e-c1d4907f99a6",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6860705-53f4-4b10-a55f-36b4737db3d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6cdab53b-8e63-493a-9a7d-a73fe184ad76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f596508e-11b4-46e2-b8c4-6d3fb0e0496a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "5af2481b-eefb-4f01-9e03-265fcef2a026"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5e4881b-7bb6-45bd-9f82-f2a6fd1e0e2b",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "164852bd-b875-4df4-9143-3a7b55c163da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bfae132-38ed-47f8-9854-32da50d62567"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ea735e3-9417-4369-9c55-79ce77409542",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "5016b972-be62-477a-9699-bc3bd1f704cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b6adaa5-9f87-4b5d-8f40-156fb1688e5b",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adb9148d-86eb-475d-bbed-652a8a68af31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0344212b-4d04-44b8-b605-6ab3e09f977a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67493d0e-2970-4fad-8467-e1d45b338a20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "c870f788-d0a0-4633-80e7-7519cf554dc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39ab30d0-10d5-4f40-905f-2140cdc08611",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b38a0a25-6a6b-47b0-ac80-898cc505aba2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90b86a7c-02b3-4777-90da-e530bec7d7a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaaca64a-9333-4446-9c28-c25e50d54094",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "23a08908-eb16-4559-b339-98178ca2ecc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c57146d-3152-4635-965c-070825846981",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d3cbe66-f8cd-4478-b9af-f227046e85a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58078a4d-5a20-49e5-b46a-ef6b964f46dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0b0f566-e0f1-4562-86a4-90572de403b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "eb3b4d88-fa97-42d8-935b-92e93b768504"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ecac8e6-2300-49cb-997a-2cfde47032d8",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca481d1e-7464-4dad-bd3b-ebd829475008",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e76ee78-aa83-4e89-96a3-39d85d8cb039"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dfdec11-f155-4506-8d98-dcc7c4ebd64b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "82851646-8da7-4db6-ab4b-22ba301fa151"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54a09a65-c4d7-420e-af15-7c4138853580",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46b697c7-e0d7-4106-aef1-845b2dac6e83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86eff89a-6970-46b3-b5e5-478c474a30ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f63f09f1-19db-42d3-9641-f885327f1b30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0f48b819-420c-4812-95bc-a9d3f5bf2f7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a2a28df-d470-4d50-a792-70985db68ccd",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fcef444-f94d-4922-ac11-230c8ca04831",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4039f441-e478-4fca-ae69-d0db02d4b728"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ced507b-e2b4-49a4-bece-dce06e8ea31c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "48f22642-0aad-4f09-8dee-61f6686c2843"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12311c54-1a25-47a7-8779-771d7f69dc8e",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30a9719e-f759-4875-b96b-1122159e1abc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7435532b-4b48-4da0-8b1a-acb9419d7716"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46b1246a-c914-4f2f-a03f-308250d7a85a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "96ce492a-411f-4f4c-9ad0-b6378724ffef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af6733ac-fcd3-42c6-a75e-0b3ea659e13c",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd9fac2a-0872-4fb3-b16b-8724d997eb9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8de3117b-9ecd-42da-9572-4910d7a2a72b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bad6e44-fb97-4483-b513-38b42ccc95ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "007eaed8-dda2-415c-b351-64705ee766f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be957b97-81d0-48ec-b28c-c3d1e946b1f8",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21b6c84b-ab4b-48ae-8c02-f2e098836d6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f7cc7ef-3f2c-425a-a4d2-7173f42c4f30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4e9cdf7-c5db-4f1f-9ce6-e722c20c5c3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b60e3b62-4d5a-47ec-95fd-ab1ceabdec13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2254932-acec-4ca1-9205-1f0759967a86",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8279231c-805c-4b9d-bf07-2be0138594c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0994473-3e24-4761-99bf-215fb700585e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "591b0128-f5f5-46ec-a11a-81d394e1397c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1ef2862b-fee6-44b3-a0fd-e2924fe6eb3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f5ac035-ed17-430d-911a-f91a2c5d1294",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6942612b-dc65-4433-a95d-0f13173c35e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8bb861b-2785-49fc-a933-cfebe16d82d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ad78699-608e-4fc0-928d-8d98d88aba29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "dc4a417b-5ce5-45d9-85aa-c852d693c2b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71dc48f8-81c8-49eb-9c6a-d69b9cc6b12b",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aca0791c-4c6b-4b02-bbe2-8f789d25d35a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03ed15c1-b31e-4438-95e0-2cebf1ccf851"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df5d4c35-b99c-4102-8e6a-b08ec6445c4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2708f805-e7dc-4c94-8263-e90ca1ce9910"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6af9f90-9af6-4ddf-a7a3-18687e064ca7",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7ec43b5-c1e0-449e-931c-0600372d94d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a4e592a-93e5-42e4-acca-79cba15f6a41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21245067-352d-4180-b985-ae8362c056b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "23bef7fa-f390-4974-8f51-5de40079d86e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36983ecd-5fc4-413f-b321-7a20111e40db",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f3ee651-67d2-43e2-9148-74cf5c8d4e6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45ef32e2-379f-454b-82bd-09c0afe1d800"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36c18a02-f10e-41d1-a24f-5f6864dd1bca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3dada675-a550-4bc1-a46e-90fbc2355999"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2df3feb4-33eb-43b1-92ec-c16e1d4931a6",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aeddde83-8f05-451d-b2a8-8079e844eb1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4687d751-59b7-4133-b32d-61b8e94bc65e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4b49538-f444-4384-a520-961e89a08863",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5e79a99a-7e43-46d6-acbd-a1e01a234fd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0edb3e9-426f-4ee0-b99d-eec8e30053fa",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e649ae4-346e-4195-b5ef-997fa32eb5e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47b4d1dd-fb0b-4b01-ad60-2507916a9294"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f63aa24-cece-4946-b269-49ce906caf4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "4d9751ae-79ec-4a34-9ea0-ac52da1c03c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c14278eb-6b28-4525-84ac-51150b4d32c8",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "453443a1-8c68-4a4b-9272-b0e37f583d3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc5f6f50-d470-41a2-b39f-c24b3f08617f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2089881-3bd9-4873-98f2-3e9a026609c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "d21eeb34-6f84-451e-b2de-cdd2e3cc7566"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66db2d84-0dcb-4be9-8da7-334bbd876c33",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a9d4bc3-cf91-445e-8909-5a68e1160ecc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0f6b25b-004c-4ed2-9f6f-5de3489a1e44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4bcd56b-622a-4d50-8b3e-3caafa736720",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "56bca7d3-4219-4256-95d9-37bc304b2b1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09328477-aa6a-4cab-9bb1-beeba1c4cb6e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f0a2c75-11b7-43f6-9dc8-89c8df6294f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e5be80a-22f0-4a51-a623-ae9ab36d49c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f5a01f6-30dc-469a-818d-4a2aaf74782a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "327b1512-9408-4559-971b-5b9bf22113c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5de7ad61-0ea6-4e04-9a27-249bbecf8028",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe9b182d-06c3-4360-8e34-53c1fbf34f20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66d697eb-b418-47c0-a0d8-10a3567428ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98be5177-5de4-4cf7-9c21-8bc5be2d0e03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "7a1afe2a-5da5-45d9-9d3a-50be45106f93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a76443b-6f3f-46f9-a313-f3739f5996a5",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "089da5ab-18aa-486f-b0dd-5de52f3c98a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f71a53e3-febd-4437-8d28-cea30ac08d28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1e72baa-c631-460b-a70c-88e6d9ac8ee6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "c7dd4a8d-36a1-433e-b562-e6bff991578b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e980c352-246d-404e-ae92-f253a10d935e",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1433fdc-6c36-43f7-9344-43043b6a9e3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0972d0a9-0634-4977-b27f-335ecac76de2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07c32fcc-310d-45de-8643-e6d93f30fbf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "3c8b4c68-cbe6-409e-a686-b9fb6f166dce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2aea0bd2-00be-4165-af31-6d3aee2026e2",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d8a8341-d324-4274-a8a8-358a89c96cc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef4862c9-8a0c-4301-9eeb-1341a6bbe005"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04a84532-7b7c-4c89-a7aa-063f38b62371",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "88fe6861-e5e5-4367-8d2a-5a60e298efca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1b2c1c9-9475-44e3-bf24-af46c2ceddfb",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ee4d947-d199-4909-8972-a496c801728f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50595105-e5dd-4dca-8442-e0d91439d579"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65dfffcc-d6b2-49e2-8a11-18d3e510642b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a4e82d38-d778-4b29-8813-c794d71708ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d541c41b-bf62-4f94-bd89-9a6d0cf95478",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12d239ae-71ca-4c24-a317-bb079541c1ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5692e23-9701-45f5-a951-f5a3350db652"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84fb69a9-7324-4e6f-93f9-f59b02a4f4c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0eb714c5-dcab-4cf4-bcf2-b7acb29528ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fdc7bbe-a6e5-4aa0-a982-c3f9009ae9fa",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7847b5d-b2b2-489c-bb72-601a177bfae4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0affb294-c8d0-4123-95ef-a41e5548ad1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8a0e575-5408-43b4-a572-c91cce40c1aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f1550d54-31b1-431d-a7ff-4e88faddec51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ddeeed3-9533-4643-86bc-dab5bb8580c2",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9dc9f52-945a-4f35-8732-bb13747ac73c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "916746ab-fc5e-4497-b6f9-001f8c99cc25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be30a489-4839-419e-971b-ef327f066c8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "765c3c59-d3eb-43c7-ad0e-97930df57b5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ca70db9-e508-4493-991d-e383de390924",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "730e0ad0-1f49-4784-9d44-14ba1c3f8606",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7ced133-5711-4a82-8c03-9404e42b3627"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5773d0d-1747-4e30-8be8-d6a24e1bb966",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "e074c4f5-1074-42c8-b8a3-6ccc39a70a31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4646d9a-839f-4ec3-8c72-a6fb888c0f1a",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67b63557-26c2-4f4a-8bf3-e0ea59e05292",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63cae593-ba6a-44f6-b1da-b2c8e80bca6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a0e9a73-2829-4e76-9c2f-7cf70ad501ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "ef299d88-b6f4-431e-82b8-729a1511f62d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6c82b49-5f0a-4b61-bf88-7119f77a83b9",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03edcaf6-f65b-4a99-bd5c-a3072bbc39d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69d6aade-6920-4984-90b3-7e9f0baff1e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "014fb29b-ff70-4cca-b190-a51a913e6702",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "10e0094a-da59-492e-a9aa-434a9c55f537"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee5fd1dc-5abd-4923-9343-ca518c2b6ec8",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c38d5b99-bcfd-40c7-be16-da532d9b381a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7f37ff9-d4c9-428f-ba77-54fd4cd7603a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a7066d8-5161-40c8-a929-d5b926cf27e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0f6bb690-1c56-4645-b051-2b2b6952110e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4881a43b-30c2-48e3-9855-c0b3094b54af",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f256421-a919-48e7-a0c5-7189c4e83ff2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3051e071-983d-4b23-bfc1-168e95fe906d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7e83d78-2057-4588-8c6f-b71a4f586937",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3defc9be-795d-461a-8f99-c52aa920df6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fba9749-7025-49a9-928e-5e77bd1cbc3f",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f34576a-739a-4c4e-94af-1a70313c4129",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1faff82-d9c9-46af-9511-e095d2fe7a9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18a8e436-0ae5-408f-825b-6e1dfe55f0b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f87e5c81-1d6e-4feb-87a3-764dd2442832"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77fb078c-1734-4e39-862f-b65fedc37c68",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e067916d-03b4-4cfa-b6c6-76608857c316",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1645950c-8e13-4bd5-9ca9-920d0675fe4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fe42bfd-be8d-4bf5-889d-b180e5401ef0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1b3ac5c5-78e0-4393-bd5b-b951cee544bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57f25be9-8737-40ff-815c-c4453285fe38",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7d647ea-7aff-4816-9b01-39c0f319408c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca009268-2842-4687-b42c-6af6e1c25030"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28b6d20a-7dee-48b4-9f19-5b2e0d1d59fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f6ab8f4b-f620-4e17-966d-1f65c5c325d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08ad221c-b946-4fa9-8462-68116e0745c9",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1870e7d-22f8-4413-a146-0f21c107cf24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f824b14d-58b9-4fb3-82f0-69be85513040"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bcbd8a7-53d2-4694-83a9-3752b83f8281",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e19436ed-d87e-40aa-a3c4-15e138897a8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "656da0f3-3672-4aa8-afc6-e4d826f02608",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30f4f42b-49af-4589-bede-9b885174f085",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7212123-e796-4d55-b89b-a7c940d60cda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89b1a587-1295-42e4-99bf-1648e597e366",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3fda227a-227c-4194-92be-f3280613efcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4ba60ef-75a9-4cea-a3de-e93ec224dd4c",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9126567-f2a1-4cde-8a43-d5a43498659b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4891187d-4433-46ec-b2d8-b7d712cee21f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4ac7ae7-b3a8-4e96-ab66-152213ef403e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a92a2e4e-b646-4d40-86f7-7e2393626103"
                        }
                      }
                    ]
                  },
                  {
                    "id": "575c71ce-afa7-469b-82bf-2674ff87fab3",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54c5286a-7975-4a45-b8aa-893beb0ffd7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98115f11-daeb-4460-ab8d-2cc647885d33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edc34ab8-85bc-46b2-a118-9cb91cc6d2b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7afecaf2-676c-485d-9ddc-52ecfac283a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9b3c8f2-e245-4e3c-acd5-ad660789c28d",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f352784-9c9d-4d4a-96f9-8b671f652b2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac397f02-f38c-480c-b333-3f7cc885aff1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea3a1fbf-a7cf-49b2-a842-2eea08313cf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "25dd96fc-26aa-4b61-8448-1ff5c815f8fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c99a28ee-7d5b-4eb5-b6b1-809e7bb9d8bd",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e662941-4e4e-4b40-a89c-7a5b4ed3ab4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ade57fc-5f01-4395-9e4a-73c05a04b9f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d744175f-84d1-4147-8848-2ce783169c5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "6397b7be-7840-401a-b34c-dce25dc03693"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14602544-1db7-433d-b7ef-cbd35198523f",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a172383-e4ad-4e3b-9479-2feb3501d986",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06ccf077-3f2d-4add-9e24-e69c8429e771"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a27dc36-5759-4fd0-bb16-bafc753ec549",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b9565302-e6bf-4dbe-83d6-4ddb26994a87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3313ea14-ccb6-4ba5-8de2-6d7bd8202348",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50e0bd57-e15e-45c9-81ed-c32c6b2bd1b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2a67d12-d764-4fb1-ab23-58b6227dbdf5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a25d59d7-9e37-4f5f-80cd-b6ef025c1339",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4ee92c6f-eceb-4aa2-93e4-85f7f0709cbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "148dda74-644b-434f-b50f-f6b78ae4a4c1",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fef293ff-6a24-43f0-ae59-6dfa2409ae1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d01a682d-3cc5-4149-9749-34af6bae4d39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2af0c7b-8993-465a-b7d9-0c7f6728103b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "94fdff6f-18e6-4c07-8969-e6281cbb2e62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7284f722-3b7a-42e8-b9b9-d1ae486fe96b",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dbc4109-8449-4f72-a939-57a419d9e116",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aab809fb-bdf5-47b5-9131-eeedffedfbaa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2e4a6ea-1f58-4cbc-b43d-39d212e99bb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "df739c84-78ec-477c-9aeb-5ff917fd53e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91ad696f-67ee-4b0c-ba62-c53e3ab826e4",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d81fbaf0-1edb-4276-8dff-e460cf69f11a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d79f149-539a-4627-a845-fe0b75e74495"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdaf7301-e695-4e62-ac21-fda76f85a2e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f43a1e16-1fdf-4eb0-a2bb-1f6cbb38d1f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "196e57d5-0588-4e03-af85-cb347f2b499e",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a20923b4-6761-4ff5-96c9-1d2dd2dcd64d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "122cb7e9-5266-4ab4-acc8-2d5170d40be7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a2b9dea-b295-4cc7-95e3-0800b22e66b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "1cc6cf7c-3e28-46e2-84df-19a5162c7c53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a1d9d6c-1568-4bdc-a78e-c2403598adfd",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ab05baf-73c8-492a-8f23-b2abf11f2f96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad364f91-8abf-4232-aa9c-ae5ede28286b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f443e2a-95dc-4af1-a6a8-1e72ced8c883",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "d58b6862-049e-4fe4-9318-ce20f01d5f00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de6faa97-c226-4499-ac9e-8fc593c4c10c",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82c2bd72-150b-4c56-9b99-94d7b8500432",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dadb9d60-cf81-46ba-84a8-dbf8e10ab1a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8230a60-8173-4aa4-9904-cbb6d1085c29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "67eeff58-7da1-471a-8f81-92abed21dc70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e1fca6c-5bca-40bc-a7ef-659c982be753",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ac728cb-a1ab-4212-bf34-43575b39cea1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f135dec-3a38-427f-b494-77463685c4ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "898eb536-ebc6-44f4-a928-6dc81f713430",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "768e601b-5d8b-4386-b46c-db05de7286f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da1a1716-dc21-47e3-91e4-0e58bbedcea9",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5258f028-044e-4542-987d-b0b1eee1635a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdaecc36-d5a3-43e3-9719-2b63d9e68ccc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed3fb49b-fc8c-4969-9089-1f7716baf260",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "4c259ab4-4cb4-4203-b53e-87026097db23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee536590-1d29-41f9-8a63-d32b27be0950",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f0d31e3-c4a6-454a-bd48-20c35fcb2e2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "4a8d1aa5-e5f0-4741-82d9-36d2c1e1a781"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cea8c129-c4ea-44ed-9d92-fb00e15ba6d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "8b2c4029-f31c-4a1d-871a-5c91ca272615"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "9a2dc567-8488-444d-ad7a-51396848d624",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d0321951-7595-44c2-a258-9e2b5a913d78",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38b79423-8212-4b3d-a6a1-9ff3ea394cd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cf75247c-c4b2-4214-9373-a2385612dd4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d72deb4-faae-485b-9941-b51199bdb971",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "69a73b3c-8770-4d76-981b-1be1f5c7b543"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "589e4cac-4a1b-4691-af7b-3b969d4c1541",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e6f85eb6-9391-4c92-af4e-bba49d47ba3e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c8ba2f2c-5fe2-4d1d-a941-1bd7aaab30fc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b8eb401d-9350-4207-9390-4c31bf0765c5"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "40d0c478-f5b8-4723-acae-770d5d9bba70",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b06d7e0a-1349-4e73-84da-5ba8ce4d5c73"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "cb0e0ed5-4f00-4f3f-8c61-a6010fe784bc",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c1c80dcf-5eb4-482c-a9cc-507ce357a755"
                }
              }
            ]
          },
          {
            "id": "2d0603fe-c2b8-4a7a-b471-c51eab1fe2ca",
            "name": "Positive Testing",
            "item": [
              {
                "id": "6e0b1830-39d3-449b-b993-5d0b1e8264d8",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2854d20f-ee4a-4c80-b780-af151a29da69",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8cc551df-f547-4e7d-abb7-c6ace91ea948"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9bc94534-946d-473b-809c-95cf9e92f88e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "73b3ad2e-4802-49f9-981e-439412451ceb"
                    }
                  }
                ]
              },
              {
                "id": "f8e59b0a-f3dd-4018-aa5a-f2c933922081",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c9856ecf-fa8e-4016-be6f-73ea3cad6abd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0c91a620-880b-4ded-9da5-2800e6213233"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3c8151d1-9f7a-4eaf-bfe8-4b9e033ae297",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "76a0276d-0a5f-4a60-98a0-48de29fc83ac"
                    }
                  }
                ]
              },
              {
                "id": "bb561b9e-268e-4e64-ace1-d55f4c138d93",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5610d672-ad83-46a8-b9ba-6023e7af9037",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "98ae18a0-d23d-41b2-8a59-de35fcd46b09"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9f0aefbb-bf16-4376-b27b-916397b86c72",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "284271d1-ded1-4212-ab7b-2adc81a34790"
                    }
                  }
                ]
              },
              {
                "id": "e5899eb3-5e1f-4521-8b47-0a57a1c13a7d",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b0b15966-eb50-4107-8b12-c8c8ac14ed17",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "49aeba24-8768-4c03-95c1-f4cb427d1d5f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "69129e16-5a9e-4cf9-8925-a9927b1e4c84",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "eee60f2f-851a-4d4a-830d-a9ff03bef65f"
                    }
                  }
                ]
              },
              {
                "id": "978decfd-0f09-4269-a463-c92e86f98727",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b4a4b5b5-fd08-4be1-a959-f6cc82818ad7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5943121a-105c-4fd9-93b5-587da4c2a2ca"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a7843fd3-36ab-4dd2-93ed-62a1e62ff20f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "16a600dc-3100-4eb6-9365-f7bb2af1d34e"
                    }
                  }
                ]
              },
              {
                "id": "57dbcff4-e072-4787-8a64-fef2dda7dc5c",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "45da9539-1246-46c5-88da-9ab7880e8230",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "65cc6aeb-5f1a-4ecf-afa3-f6dc338064f3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "136f2c10-523f-4e55-9754-20f4cb578728",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "96c6f7cc-973b-4d74-a630-878bf937c1b2"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6d1f91ca-1953-4f29-8386-c0a1c4623edb",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7209f0c2-8235-4116-af24-c97a34ddd4e0"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "86e12236-ea7e-488c-8d40-7e37ce5367a1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c0b69a88-89b5-4b23-8ae9-2e2d0cbc8458"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d0aa5542-38e5-495f-b53a-9c2ebb784c04",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "9997defb-006b-4707-bc0e-fd2db589a120"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a19182e6-d842-4494-a04d-7822841eac51",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2ecb1ec8-1932-425b-88a4-a13d33f3d5dc"
            }
          }
        ]
      },
      {
        "id": "27f1ac71-91c7-42dc-b6de-3f015ce9779c",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "7f1f6853-0b80-4992-a4b7-78fec9f89b81",
            "name": "Negative Testing",
            "item": [
              {
                "id": "32e7c3c3-1810-4aa4-8fbe-dcf47f5effa1",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "eafc73d7-6107-46a4-89b1-097d51a211ac",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57e02477-0c84-4e59-b9e2-fc26e00e4cdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87a09c8e-e17e-4e84-b959-d655c1e48228"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a3a121b-bcfb-48de-8db8-a5c1898983d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "bd703f0d-fcb1-4691-9f81-9404ae47d07f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07bee241-38d9-4c5f-8a92-2047e55722f6",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ea0c5ca-ef54-4d67-83f1-610a8389d1d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5457f473-4614-450f-ba3f-d6032a17ea2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5afeb0d-f0b0-4346-a3be-a277cdca7b33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f0bc9b4b-a8fb-4b83-a700-119b1719f859"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8fbcd14-8328-4277-a18e-421ea07de2df",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9054e96-1f41-4731-8fcf-9397fe817882",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5194a041-eeae-476c-9708-c7dc128553ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37de7308-7b7b-45dc-888c-48c474f9d2df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0c737cd4-4cf0-49d7-a6ad-0c11bdb83f40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5df12f4a-1b50-445e-9d39-f388e8a67d0a",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "585a8e75-879c-4c8b-b056-2f8f89d01459",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "997b905f-0315-49fe-ab1d-fbfef19a3944"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6526939-cd32-41a0-945b-d8c66e6d6b24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "075ae440-9669-4901-8afa-d446fda65d32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62ef4f3a-20b9-4c27-ad5b-7b2b08108833",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3619d6cf-fed6-49fa-a80f-b88e2e1afa7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdf8a21c-08b0-4e97-9fd4-ef5b071c2770"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ee83686-c9de-4cd4-b83f-858254e539a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7169f773-6f38-4b91-883b-0664cda0596a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68c75729-e136-4fe7-ad58-912b9ae0f7fc",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e97d592e-f70d-4e1f-9237-b586660bffe8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9f00e28-717d-46a1-8ac7-666a3d6e1a1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f8bdd7a-f9bf-426a-a072-2eac0006107c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c4a69799-6893-46fa-9cb3-7772b216e86a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c53a6af-f989-4e12-8517-1aa34b4978e7",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74d2e1c6-60aa-4a2f-a169-decae57d086d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1991053-42a0-4d72-a383-155c78e330a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a71d6be-ddfa-49b9-8fdd-2dddd46fc02c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "619b3e1c-f916-457c-a4ed-0b8ab6e500e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f78f9838-f40c-4613-8c55-8c952e4eb4ff",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c38d32cb-c7f2-4303-bfdc-d37804fe571c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21523917-0b1e-4626-98c2-8cd9f0da11f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b764317-c04e-42c8-a90e-9028c5fb50b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "76990c24-df55-4ab7-a739-cf30cfe325fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30efe0fc-b333-4eb5-8fb2-fddb20c3a214",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "358f4596-8d0d-43a7-867c-8a29bd5f1e91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d37a7e1e-ad80-4e2d-9aab-d1c39c35de98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1855336-3776-49ac-aa5f-054b11753cbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2cc1b60e-08ca-4a97-9710-b03736b92e07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab86dc6a-fb28-4590-9f40-61a7ab37d6ac",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f39ef8d2-8179-4361-aeeb-302b248d73d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4564b7c-c037-46cb-83d4-e43521d0916f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d38db127-4687-4c73-b256-454070b74512",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bd5460dd-e269-4062-a398-189b737ff361"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf3fc138-fe99-4c66-bfb8-c260b995b7d5",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68d0833e-1181-4396-a1bf-a0bc63f110fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0f62fe9-c975-4ace-b6c8-274b45d80ea4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e21d618-5ed7-424b-83fa-5ec64ee34dde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "6ee59761-d2ff-4c1c-ba9f-f554db27539f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b98c6dc-3a15-493c-a9e0-73509f709aae",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7b78126-56ef-49c9-a935-7f92cfcd6116",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "600ab4df-07b8-483e-81d9-51c5e91b851d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f987d9af-bddc-40e6-a782-ee3bfb99b02b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4ec74739-9b9a-4bde-ae0e-89722a8fd990"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3d46c10-eeb5-45c9-a1bb-1199e593b5f4",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d793234-ec42-4fc7-a371-4cb60982165e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6461dfb0-d053-4d61-bcf5-e788cde391eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2582b964-ca25-4d6d-a454-df02c4c7bf99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "19a86e0b-018f-4de0-b9e8-90c73b64dca4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a9041aa-5439-4f40-aa27-4e69dfbaa616",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfef3f46-42a5-4481-9bb3-19bf5cafc7eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1596e96f-73ab-42e0-b85b-9cb7cb6d320d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66f61d9b-0459-4e64-8e27-fa854258844f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "8602791a-aa42-46c2-82d1-c86e152e2b30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81c6a4f7-9997-44bd-bcc0-feae1abcdbb2",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da64376f-6aad-45a9-a13b-6721f0ba58ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9957702-cf6a-4d12-8eb7-173f2c9a5538"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e330e8b-2f1d-43c3-bc90-ec35c3b5b80c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "1f1a46f1-9d80-4842-8615-7f88deb1dd69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0efc3492-7aa3-4554-83af-ed4a71c78b8d",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7c6b318-33f5-4106-9d88-fa69b1e7f21a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfc2d43e-e99c-45aa-89e1-3c62759e5e6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c34b333e-275e-43b5-94df-976726e7c194",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "00f72b9c-cd29-4eb7-a9e9-3dcd9437495e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cfbaab9-9141-4dc9-93c8-9984434ee2a4",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd8f79b9-19aa-4a4f-a77c-c6597f34321e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcb84de2-4507-41f5-9ec8-70730563dbdd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2050856f-11fa-49d3-b140-76ecea7bc69c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "d484466e-18aa-4420-86d8-23e93fe5ed03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c31ce84c-fbdb-4de9-bb08-c1a556ac311f",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12613843-47ea-47cd-a255-d769ac7db103",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68553198-ae2a-4d7c-adb0-b87fd0d96fa8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ab97e31-7e4d-4e08-ba73-7e7c85acdca7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e99e0856-5f69-4f9c-b1e8-1236baba6aa0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f55ad93f-c946-4019-9a43-e3682f0d12d6",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa028099-8d98-4862-bdd9-ebd9c85f2750",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c554943f-91bc-4629-bd96-e5a4ef93bf9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e6513fd-f776-4b93-97f0-2f14f2e69500",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2f136848-b9ad-4083-8fd2-c1d421f3fc3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfd4ae39-4bd9-4cfc-90d7-5604eb5fe762",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecc2587e-d0a2-4e88-8ed4-aeb1776f7a6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86799edd-a2d6-4d53-b280-8544dc6c80bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2009282-9853-46de-a130-b2c174ec5e31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "869bb851-7a3f-494c-ab1b-45b5ed943ada"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21707f2d-b439-4432-af5e-6442377a25b5",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4597a3a1-5143-43d5-8b5d-6752d0d39db9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "453fb4a7-6bb5-4044-9fca-da53d810dc76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72396125-9b4d-4733-b65e-d01cb865034e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "131abc97-f06f-4f0f-a4a8-cdcd9f30fcfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bd1583e-1a92-40be-b9c2-25efc2072e15",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77189c77-27a5-4164-862b-ae5bdf14400c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a77f04bf-ca98-46ac-a6de-f16b5a26881c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f74b060-283f-4910-9988-bda1c85838f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "49a4c4eb-a3a2-4139-8614-0f90f3ed1ebb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59087adc-e441-4092-a416-b36ef8ed6077",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd0e408d-a017-483d-856e-339fab846844",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "045782c3-a225-4997-b44c-0a23541150c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "111f23a4-8ceb-474a-880b-7801dd31555a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "621d0a9f-96d7-4c05-a3ec-85769c0acf98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e48efd1-d92c-43ed-a9d6-a689d6100aeb",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "698d0723-0cd0-4a0b-9395-9ecfbf174277",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b03b7e60-1428-4759-860e-0ab443f3e482"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cacdedd2-7945-4579-8456-980599882056",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9ec04216-db6b-478a-8a3e-7fb4e89fd3d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9861d30-eb1b-4572-b2a4-d672ba753c62",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c6fe14c-3a1d-4273-8942-67e9aceb170f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44784a60-c123-4c07-a810-a7b2c1196b82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2e71fee-c698-46b2-b000-b7eadcf4f702",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "59d0278d-49dc-4906-b8b1-53964de3d739"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c0e5e95-ddbf-47df-9170-7660c02394dd",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3710704c-5530-4ec6-a0e1-a5c7b529f112",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c3e393a-52f5-47f1-809a-4f783b54ded2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03fb8549-3bc1-420f-85ea-6cb081fbba4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "52a4c67a-9dbc-4a51-9405-f016749cfa6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9b77764-9efa-4a84-81ac-0bc0f78dc9b9",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3fc3321-8272-46ea-9fd8-1b04a218bfc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39ba4fff-293a-4643-9f87-49dd6edbfe53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a7773a4-bb41-4b65-ab64-ca10de88f3ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1e88711e-374f-4a3b-8e9d-bf7ca3d6e0ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc553dbe-24f5-4c4e-968f-063aac287b6e",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3d3f794-601e-48a0-a972-4c161b8ec0e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af769449-b6a4-40ef-aca9-ff88225cbaab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d086903d-1fcd-4aee-949c-bb584a8708e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bf6b6187-c232-4032-b9b6-8be2ddf4d29b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "814cf865-9f7f-44d5-82f3-d546666e312a",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c70bdfc-b10d-4bd3-adb1-70e2798ad3d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1aec6037-ff47-43fa-99e1-29bc4b103a57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c920bb04-99d3-4c3a-a3e3-6b69ffee023e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9f23e746-f34a-4ef5-b9b0-0901bf00e198"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4279379-465a-4c1b-95ec-8dc5ff34f5d2",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5de3a6d-1469-451d-a736-754cd68788ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b142b762-16f8-43e6-ab97-d739d67079fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e7139eb-493f-4167-8f08-a7ea9feeed75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "62b3d6d8-7bfb-4a54-91ec-71024364f61c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9245aa54-b255-48a9-8b66-42e756a8b55d",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e04d6b53-32f5-4222-b226-cdac5b70012e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e35d461-5ff7-492f-9b41-4e66740813c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98289c61-5fc7-4534-8bc2-e12cc8aad853",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6a5f6600-a2c8-4652-a423-2d0dcd588377"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90365768-1729-45e8-98d2-4e83b1b36df5",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f0ec6dd-aaa2-4c5e-a38b-3fd155a5c9e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac1785d2-297e-4444-8022-dbb17a710a6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa3f49e2-3499-451d-919a-59b9234ca043",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a0f29082-04dc-4d38-952f-ec499404c215"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "dfc8c93b-759b-4512-85b8-f54b65a54235",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f184a886-6eb5-4677-9f53-50b3c7223bf9",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7538b597-349f-4c04-b50a-4ee931b43eed",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "9e05102a-a99e-4bd8-9f67-ace03d5ed666"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1919fd5e-82b6-4355-8ced-0555ab105698",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "70e6e5a9-d127-49e7-ac14-58fc6bb3dd53"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4179d794-2937-4dea-872d-ab36c13e3b0c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1eadc31a-602b-4adf-b6dd-9e3ce8148607"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "56047ed6-21f9-4e07-86ca-3fd1954737c9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e8aee133-0429-470c-a658-9714cabc0729"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0227bf54-da8f-4ae0-a95d-14890e942c29",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "bd8e953c-d3c8-477a-86a7-57ebdb8d150e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "499d5d12-3797-4703-b128-e45362f5e3e9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f4e9c926-5afc-49d4-b744-71319246f2d2"
            }
          }
        ]
      },
      {
        "id": "7ffbb437-b5c5-4c76-9500-3de81df6c403",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "e54213cc-a332-477e-b11f-7c2bfa9723df",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7ebc0df5-ca23-4a21-b5c7-19675c9650ae",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "8bd6e757-56ec-49a5-9675-3e98e15822f4",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e261c8b5-312f-46ca-8638-4e0d0bceea70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bf2b975-a1a4-466f-8817-2c88ea421966"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e86f31f7-cc09-4c97-b95b-340b8a4a734c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "e10a9769-f28d-4d6c-ad56-0050702b91de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45b41fed-f79e-4011-9db2-9ba9d0a3b1c3",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42d7a941-0036-4780-9450-096eb4e46895",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6480695c-272f-49bd-829a-221c759e28ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28899059-17e0-4c46-889c-d4ee3d76c296",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ef565be6-9841-4bcd-930e-82c66fcc600c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcd27709-8529-4ca6-a2da-9a7a2f45514c",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16b3813c-6d86-4ea0-af4b-7596ca18f37e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "495feba2-f611-463a-bd05-7a20ba3a3780"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47bd74f0-8d8a-410d-a26a-8305e7cb4727",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "270869d3-907a-421e-a75b-ae01f3df109c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f96c84a-7e58-40ac-9d5e-32446e1aefe7",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73a990e8-8185-4062-b005-b8c891415ddc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b11c78d4-d93b-4503-8a54-52a3fce2275a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2767c74-eebe-4796-a21d-1b318f5a4c2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d8b837f0-4595-41b4-9fc3-1dbb9f7f4d29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1773617f-1360-446f-800e-0cd08c026fc2",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "234e9c7b-bc10-492c-b08c-dd13629f54be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e1ac761-1104-42e1-8128-2e3c28cabe24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "332de81a-f20f-4f09-a816-d681b1e9b088",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e4f4a65f-75b1-43dc-9806-6f74402eb2be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e449053f-2f98-46ab-96dc-ac00b63c47cc",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81548559-bfcd-4400-a54b-5a834e2dc020",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0649577a-abfa-4ef4-92a6-00c2df92b8ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "338d9143-f6eb-4c19-99aa-5d1e8483c444",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c96cf068-1d0e-42eb-955d-a200baf65a32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c89e989-e5ec-489a-ad20-d1f34fa23fe4",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b3383d2-7227-4766-8363-c246c7da8ee9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb3f3ccd-9a62-43d7-940f-9267e261b388"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b5eb16c-a515-42ac-a5f6-057ccca21c24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "d27fbece-96fb-460f-9ff2-f561b98e0556"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49f09787-1e2d-49a9-b822-c7483e16bacb",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9317d0a5-18b5-4040-87eb-f728d7f1e89a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "283fb72d-9983-421b-b43a-285368804e4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a159dfc-5084-4d88-92b3-2d09b018a929",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "56676ea3-b5ec-4b99-81b0-03aae48ab184"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ed8f44b-045a-418b-b704-abb1e4ade589",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2f35fe1-e0f8-4f10-86d8-0f69c627aac8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89328fa0-4b3a-4249-957e-5d472291e0f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c9398f5-5169-4460-849e-adc8c2100431",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "210987ee-d200-46a9-a3a4-bcc2f146d239"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fb547c9-0a33-4e91-8bc1-41c5096a75a3",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ada7bc1-d7e9-4deb-9e53-2f78ce480fe3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec73a63f-7bd2-46ff-b605-cf71f3c7e5c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7af524e1-ca26-4fa0-bd4b-887980142fdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ecd48a59-1dd9-4999-a781-4acbc561a367"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10e06bfb-2cf1-4b7d-b2a4-149658edb4a5",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21ef4960-a76c-4647-8aa8-d78b7c59dcaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5498c608-635b-4ccd-8935-6ed829956fdb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d436528-0f01-4743-8933-6776b0ae5326",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "fc115bff-d3e3-4fbe-90c7-491b24b43393"
                        }
                      }
                    ]
                  },
                  {
                    "id": "002cfcfe-91c3-4683-b420-7a8279228944",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58236e09-e6dc-4dfb-933e-514b96fa54e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f4c41eb-5609-4b3c-8005-ef3826412364"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86eb8e3f-e238-4df2-aa28-9f27f4730cef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "23b6eae0-30fd-4ebc-94dc-30df4437ff27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9625fbe3-9a2d-44b0-81fd-51656a78524c",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7900958e-67f4-479d-849f-fbd1bb17c8ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3d9ddca-28ac-450c-bcb9-f52ab85ac236"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d375b798-098c-4267-81cb-389a7cbbb836",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "10cb14ff-8dd4-4e2f-84d7-98a37a6015f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29957eb5-db35-4230-af07-7b232a2abcb6",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e263f3a-b538-4161-80a3-5a6d7aa2efd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75e5ee7e-acdf-4ae3-ac16-9b5bed525829"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52c5c96b-bb44-463e-9f06-ec6281746f5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "c299f2d7-aa22-414a-9fe9-1bd57610b3fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a95b29d-95c5-4efa-99eb-ee35df5a516c",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9df00d85-8bcb-459f-a677-083dc1e9d553",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bb29e86-01f9-4f41-8f47-3fcb4ce94702"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15746837-7bb6-44ea-8e51-d839b1475640",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "5f49b3ba-4247-4d34-b9e0-4c73b7200594"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9be844b8-5465-45e1-bdd9-8abd42247719",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5273912f-de76-41fe-a27c-6fc920375351",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bebcf7cd-577e-4154-8d3e-cd95f7938ab8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bb55eaf-b318-4a24-b5b7-b51cff9d63d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "7bcca6b8-425e-4168-a6bb-1c342e19ab64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6ea62bc-a3dc-4b61-8a80-f4b323189b01",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b35ad1fd-8a5c-4793-b6e7-f282e933829a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14fdad23-cffa-4044-9a5c-4dfddd4cbd31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b45ba4f-9726-4814-9fa6-605419376074",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "ecda908e-f7cd-4509-b808-4766a41b4365"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1393fbda-133f-46f7-9d88-c2e7ddf55a60",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2f56454-3c37-4635-ac6f-78275ca8371e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ef222a5-53dc-4591-8e5d-0f82f97384a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddc97027-0357-4d87-bc9a-821087b4bef4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "bfc45592-6503-40da-999b-6bbd5d8fe898"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87769882-1389-461e-99d1-64e307b84b2a",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "877c7c70-add4-4077-8a34-f1479cdb46e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "851b7390-5a9d-4fef-bcaf-bc310ce53021"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e75aef17-0b3f-4ecf-97af-d0c0cac08932",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "beb574f8-bd62-4b4a-9c21-8e60d9ec183a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49ecb71a-f539-45df-8a17-f6263ab58be2",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9244d3a-e6ee-4131-9b94-bcbba07acfc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "078cad95-1922-4f22-a605-aa73e06d8616"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0e8b7ec-c01f-491d-813b-daefca96cc0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dc9104b1-efea-42bd-a5fa-16b2f99631e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "913c3e32-dbb9-4831-961c-7cfd4e5b2095",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c81375cb-ff6a-496b-a5be-63645b2b5ca4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54625ff2-d820-4c0c-b1dd-b59efcb785b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80693bcd-9e92-45e3-9a4c-1067bf795f01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1245c7e1-c3c1-418b-95aa-1f0de2326e37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bc1dffe-fa09-401e-8908-d4da29ec1961",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41bb6c53-6e36-44a7-935c-5c11af29f6bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e32be067-68b3-495f-9b7a-e13fbd8c573d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64645c12-782a-410a-b23f-a8b1f4cecd14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d1c126ee-17f0-4d5d-9d93-cc1d878c14aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01391cbc-3221-4386-a5b9-a1eecd57a599",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad133fd2-1046-499a-b131-3ade548b4733",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fafd4c3-82b3-4757-a59f-34937e865c18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "579ba590-9366-43ab-b0ce-841ee42e68bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4ec8b500-0311-4e9f-8c3e-24fad31fb28b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52e714ad-b579-4f6c-9a2b-dc67aed80ea6",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc6e1203-2679-4710-8de1-c837a8cce9a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14980b9b-ed7c-4cd4-9f9d-bc85cd7b95f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87e0cd51-6434-4843-9fb1-44d2783f6ef8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5a16ca04-e24c-4745-9198-bf967cc67537"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e51c2fd-e471-48ec-bcb5-3fbd3e789e31",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "030478ea-085e-418a-8eea-add997733625",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65d3e5d7-f021-4bfd-8bd2-09e49ac8e0db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "caa94daa-c09f-4303-9735-b4a2cba584e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a817a5f8-9a5b-416d-8102-a6ce94483090"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e54f7903-98f6-4232-9356-649ab8c98d2b",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c0b9822-a586-4be7-bd4e-5e35d8c244dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e57d0e1a-22eb-4c7f-89f9-a904a672d788"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2ddad95-d7a2-4978-b9ea-2afb77701b54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "86e70c56-200f-4c7e-a463-273bb2df2de3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "334d12c5-e3d4-4b1e-b14f-773110e86c6a",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21422990-2b4b-44de-b062-785ecb21bb86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34845195-b917-4ef9-95f0-7b9a591c1800"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d4eed5c-7005-482d-91fc-8665c6402ded",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "564472b5-ed08-4791-ac80-2244328ba66d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce251913-5ea6-4984-9e5f-99fad7961f39",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf18204e-8d72-49fc-956c-dc067713bb91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4afbea09-667c-4d04-979b-46e3913c15ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "382ad11d-bc00-4508-86ec-73f7aa3cf550",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "42940e29-5447-4bdf-bcea-3f789d9d4528"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e55fd08-cabc-44ba-93ba-a081aac5bc3e",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe2a7898-0169-4ae5-9339-7489e6b54272",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c49a1125-9481-42b6-ac59-910058f83a63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4448b547-8f52-40b4-9726-bd5140c78884",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6ceb6ec7-390b-4e0e-903f-61c10659d199"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d620e9af-d9f1-4aea-a925-bb6d880d25f9",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bba24a5c-f048-4c92-9cf6-d6549bdbe1c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79805e28-67b8-4174-a043-9d19d86efba7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15b21c69-c5de-4cab-9c88-af7422004592",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "646f1d58-ab6b-4dab-bdd1-57556f49ba56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a9bdf50-5904-4bcc-bb8e-92effd0265e9",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3d6404f-dca7-47f0-9d4d-49916cba5d94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df501734-bdce-4aa6-99dd-2def56384bcd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e522e5eb-aadd-4791-9642-a596210140e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e6309a1d-5c2a-46bb-9945-3b60d54fac7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a65f9e0c-406b-43af-8c35-74066065c7dc",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "708907ef-53b8-434d-9c5d-d134e4369417",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c60ce5c-6cbc-44bb-8923-d119dd729cca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad9e7474-c8ba-4db6-908c-4f10261bb304",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e66d377e-2119-4f33-b8a5-4a343efeb2bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c459337-5d7d-41ed-9456-a25318daed9e",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "570b7028-5048-42b8-a469-5fdf294a33dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "726c24d3-e5f9-4d35-b109-5bf17be77800"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c01a601-2f14-49fa-84a9-569741002901",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8d255e5a-6d44-40c2-8076-cd5d5e0a4a67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "497d0808-f0ba-42d6-8e45-c2ced70aaf73",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fac31bca-f5ed-4bb8-98a1-86210c0541ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6707707c-7602-4af1-80c6-113acc29fb9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e01e33f-dd50-44a1-8e5f-00a4265ed4df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "777fd759-90bb-4bfa-8245-39d0a5e95b0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b450029-b309-4f8d-8652-6aea40c09f57",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89e58e52-5c8d-47a5-981f-f648cd23e5fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e99e451-89c8-48b1-82e5-ce3c6bce374b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56a48f87-41d8-4044-9bd5-df98d78184a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c8c5e61d-78c8-4e3e-a215-6a67b9b0f72d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6e0636b-9267-454a-af92-980403529f9b",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52539389-622e-4769-9540-3855cb653d52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "933f6c18-f19b-4d76-82bf-a3a5606b261f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49b9c5d4-7a56-4f04-9971-96ccaab475f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1886ef6b-7836-44a2-887c-c8fb1e0d53b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9e5ec51-2a6f-4bdc-bbd2-258d42f35cd8",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c44ff95-eaa1-4e58-bbc2-2d1c4cf3b131",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1388c19c-9a2a-46ab-bc72-0b40ba05e457"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f38803ba-2573-42c3-b500-d2fa514671e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7dca81f4-1011-4726-ac2b-cacaa3e680a8"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a1c3a461-f293-404b-a212-7d77de0afc10",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f12e45c4-d10d-4361-8145-e38fa8f667f3",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f17263fc-d1b4-46c7-b738-d64dca155328",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "6c98b703-015e-4e36-8439-62894618165b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8372506a-005a-4579-9206-cfc1bec69d9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5ac2135d-8688-4162-bc95-f052cfff8895"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ca23b532-b19f-4d50-86fc-0d4343be77c1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ce44ae65-e796-434f-8b69-e8439cd5c391"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f75bcc6a-5f51-4115-9a24-3db2915c45ca",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ca26e2fb-a470-48cc-af2e-3124ab3f32d1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "97b8e68b-d4a6-44f3-aa92-1c146e1247c8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "d7d90ca8-4c96-440a-a20d-0544ac144bad"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7d8930f0-95d4-4cb3-a0f6-315a19ac404e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8830e04b-2281-427f-ac31-b77ad7c3b330"
            }
          }
        ]
      },
      {
        "id": "3c3944d0-6486-4026-857d-9616ec3b7e54",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "fcb9f8b1-5762-4c61-b54f-ab0ca5d6d203",
            "name": "Negative Testing",
            "item": [
              {
                "id": "66d75803-24c3-48e2-8091-a19b7d662314",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "b4066fde-61aa-459b-a5bc-a873b9f6f20a",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38c4740e-ac28-4bd2-86b3-620b742df75c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd1be023-ef66-42a8-80ac-91f7eb1a0867"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22c10ab9-c050-481a-8598-c7e507030ba4",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6be1f109-c0a4-4883-90b9-71021eee4341",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94b1e711-15e4-478c-b371-4d2dc2918bd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b237b08b-b6b0-471c-b10c-faac76b16d26",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36a4a767-2700-48ad-ad27-40c730ea74fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd6fc50e-60ce-4e65-81f8-de76d005bdfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ba779ef-fe76-4756-93fb-d238342a0eaa",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31b0bae7-f5d2-481d-abf3-fbfeaf85311f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cab610d-0520-4641-8ed2-36db9a8f8796"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7faeca37-be83-42b6-bad6-3a244a0c6627",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25584ed6-5f1a-4f6e-8ced-93f7f2a4c116",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c3c033c-3fc0-46da-b22f-4864e606f01e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "319adfb0-be64-476f-89dd-825aba409e0d",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1efc0ef-0124-4dd6-8c76-f298147f67cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfdf0d8c-c0c3-494b-ba1e-3be3ea3e9cf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6eb6ebf-8ee5-4c49-acec-26e029f87460",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9a3912f-96fc-4687-bc39-beb164781e84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10a88320-fec5-48a0-b53d-df9ac5b2704c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17d50f96-dff1-474c-b962-0195e536ccfa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "554c4b99-b6c4-4758-b37a-4a6044175494"
                        }
                      }
                    ]
                  },
                  {
                    "id": "045278a9-a42b-4117-9177-2084b74dc6fd",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "804ffde4-b7bc-4eab-8164-6d27a62d38d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "98210155-046f-4a09-bffa-67d91549ee15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d68626ad-6c33-421f-b949-fc70887c82e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3ede7d2-56b6-4bb7-85a1-e672810dc6e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa5d1bf7-912a-4838-89e4-e7600be41a03",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1c766bf-8e2c-4698-92d5-e0b6191b5c03",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7f1e2866-7ec5-4225-8bc1-b57e0a6a78ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5b519e5-a8c4-4987-969a-4b95e893c534",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae979038-f76b-4484-89a8-be48650a17b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffcb8b69-29ea-4ad5-a2e0-6d6c913af87c",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "faf5fde6-9093-4a84-8caf-513e2da64337",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1a22d227-0722-4861-9a1a-91601bfb5b53"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e88bc43e-7583-47c5-a568-c99c784c3816",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e3f7e73-6a55-4a70-b4dc-f3d49d055872"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a92bc2d-c9b3-4526-b5d2-58eab612daee",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd29563b-c49e-4210-81dc-67221e2d8e7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1c5ce03-3a51-4f9c-8530-fecad0af92c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7db23f58-bc44-46f5-aef9-39402978592e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b7bc035-9a5f-46e4-92e0-b87d5524ebcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "479eacac-6142-4d79-90a9-593d32f6e42d",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a738754c-8aa2-49f8-826d-230c2e453756",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ccb5d68-8067-4bc5-af8b-d3715ed5a245"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4203c093-d402-4ea9-90c2-2b7ece0df0e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81a345f5-4502-4de4-986c-30787bb0f816"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b56ae86c-2b42-4088-9854-75c1a57b4e78",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed8c25cb-42c9-4b64-a1d5-2d2537198861",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e657be15-fe99-4a2a-9c0a-b3fbc0930344"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e3f4813-cb64-4310-bd40-6e46cb7f0dd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12c84646-8302-42b4-a9da-069f7b6d76f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4eafc862-7948-4707-b457-da30b4ffef29",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11ff37ed-a8b8-4cf1-90fc-b6c4b7e3d726",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "76e2a99c-5118-4ad6-9e8b-a61c28671d22"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e85ab53-d5e5-4e5c-9002-9c00fe5bf967",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09c9572e-0444-4095-91d7-870335a7948d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64bd4196-4f58-402e-ba9c-ff6a25177818",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34644f6d-f39b-4639-b9bd-d35fcd41d425",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "790eea0f-65ed-4b8a-9173-443fe219f3fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3575c965-f25d-4270-be41-aa78b6c42c5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f87764e6-7592-43da-b658-15c1b5dcbc97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f03985ab-6635-4317-88c6-3b5e1fb38501",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad907e6d-331a-4647-b417-b779686d78e6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5cc8c16b-464e-4bbf-aeba-953c014ccca6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b6e64b9-bbc6-4a91-b4f0-ddd8ebea9a44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f63aca8-f19f-4742-84ac-7aee1c499154"
                        }
                      }
                    ]
                  },
                  {
                    "id": "628f45e5-0c50-46d2-b8cd-eb4e7afa3d6a",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea996e6f-4a29-43c6-a34e-571a7e5a01c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77731a5c-9162-4b82-a89a-fbe130bbc2bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aee340fa-cc24-4e60-9af9-94cf6b46f46c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27447e56-2c9d-4824-be3a-b6ae412a7207"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9e65181-bab3-469d-bbb1-ec643b75990d",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "048be193-0b6c-43dd-8f65-7cc1d5ce4b76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b43d4e0-7176-4ee8-b6c8-0799a55a8859"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2da7a429-f2b2-416a-9b3a-906619e03683",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46c97153-a3f1-4af3-a313-9386c4c39c1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "734d8fa5-7777-46c5-ace1-0b54dee9a396",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e62c1560-58b5-41cc-9c55-f3a813d2ea4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e5f1c26-6a03-4855-9a87-b98746aa0bc7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c93ae1d0-d476-47c9-9edb-785271f9a385",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74a48caf-b312-4cde-9d29-b3144b9b17bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ab6c035-55b3-48a9-80d7-68f2b8f1c501",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20b551e0-bbbc-42b2-a7a5-b0542fd23b9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32d5fb11-81fd-4eb3-8eeb-43e55153c95e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa34094c-f2a1-40f9-b9bb-5945589afea2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5d3f82d-4c4a-47cf-a013-b7c343643378"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72871b3c-f834-4604-a354-93d18cea423a",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b26016ce-8e34-420f-b813-e2952e5f9d9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22583a41-91a6-48bf-8e0d-e5e1b2a707f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ce15ac5-3d01-4e29-a1c6-fbef257d951a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "340b4b58-c263-43d9-a9ae-9bad25cad605"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae41370b-5699-408d-8c40-7395d66d4a53",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2b7f5b9-8036-4093-80e9-a8433a4777ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a3ac234-014b-4f4d-89e5-6eb84cad857b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfe123d6-b797-40ee-b294-c6e458f20e06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be82913d-9902-4bd7-bb61-7ed83cac8f60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41816f53-1708-48c6-8ffb-965efd3ca7d6",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4878182d-32ec-4de3-b9d3-5a6d1b7eae14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24b57401-ffc0-4694-9d90-6af0675e0da0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e614a04e-7bce-4cbc-9a44-8bc24c31670c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4ff2182-58e4-4391-89b0-2fc886de5143"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a63e0c44-2eca-4396-92a1-01cbb8d61f29",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e439429-29b1-4ae6-820b-235be0c67a3f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "78158be9-aa3b-4168-8ac7-3252ed31cfe1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48ef1151-e5c7-4978-b8bd-aa15e14fdbd5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de53b9e5-6feb-4cd3-b74e-f586bde766db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94f7028b-1ae0-45e5-94b8-c00b6877a229",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17c8cac5-c623-41dc-8e25-8e22cd2d83c3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0b1df8c7-b496-4eac-94e6-beefea4dddc8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "101b375f-2062-4db6-ab27-2e830ea31f23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27817e05-4565-4f99-9daa-a3329b22fbf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e7b3b41-8e8f-4faa-bdc7-b142fbba5238",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "deaa43e1-b448-4156-a66b-4da23603b726",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "98f658a6-d962-4283-93a0-a22aca7052b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cc8331f-121f-4000-afc0-438d0498fa8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ac55ed8-07b5-4d14-af5c-46016c8d37fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85ef14c6-eba0-4680-9f3d-03bb8956ee30",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91d0e29e-a458-4f26-83ec-79cd1661f4d7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a4e6f212-069e-4ee2-9c92-085c48328426"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f393e58-c510-436d-bad5-c97c6aaea397",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0491e7bf-b09f-4acf-bbdd-ca6541962421"
                        }
                      }
                    ]
                  },
                  {
                    "id": "884035cc-1585-4345-b2c3-c91dbea6eb37",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53be4a09-3754-4dde-a8b3-1e4dd2949a17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f714a923-5ab4-4288-b4f6-1a787ca8c622"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca417356-88b1-4910-9719-6b5d6de582bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c5bf20d-f205-4dcd-8d2e-f55f7c940c12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cf33e8e-a5f8-43b5-90b2-d4d2828f9968",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1b4bd3c-eb48-4042-b138-5ea4e6b33ec1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4a247e2d-72df-43ab-9eb1-fedff041cbe8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f6186ab-c363-4166-97ef-50353f7c194d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "942d7ec2-cdc6-4a80-bb4e-ed670084e0ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ca97a7b-7fac-44a4-acdd-84d703927b88",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e7ad513-6e94-46f8-bacd-0077c70fd128",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "35f77922-bb80-496e-a0af-d17e3e1123cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68cfcfde-eacd-4d2f-b133-0311f9961867",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a209c6d-a9db-41de-ad87-ab7a8b0d0b86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da0301f1-69d6-4e37-8bf6-0b6c7bab5694",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e062889-1f0a-42fa-abc9-06d1a8a50521",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "159d72a8-1efc-4de7-bc2b-44d9133fb11a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "364cee6c-cea1-408e-ad5a-c0c8028323e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "466e3019-f61b-4fed-8145-cd390e13b81b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c35b23c-ae86-4284-8680-465ccb6a1907",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d0712cb-f2e5-46eb-926a-094a46331501",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "506cf8af-fbd6-49b1-bdda-eea90732b4e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f44563a8-59ac-45fe-9391-228fd3783b7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "feabdc17-4a22-492b-8ddd-34b03559ab12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "632cc531-ca77-4bc7-8efd-2a8b857eb37e",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df99e4a7-669a-46ff-8f2b-1d4265e69895",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ce512e99-0cd0-49a7-911c-472f88403fa4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35de7aec-a1a9-48bb-8a67-8eff94d0228c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ed6219b-0b05-4a03-89b4-5b89e12b0d80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52670011-2a0c-48de-8972-7406a01494bb",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d22fa489-e0aa-4220-ae0b-32785dfbcc2b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "96f69feb-9208-4c26-b25f-9e1ead3618eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a55269e-4ede-4975-a5a7-f5f47d73dd5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e8747d9-2515-4918-906e-3c1f0922f8f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1f72b3d-192e-4132-818b-292ae1b84e2d",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b9d28a7-4d89-4fe5-9d18-3621c2992b67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98949acd-a251-4e81-bf81-9def74bf69a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3266a990-db19-42c3-8107-5ae51963954b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1b898c9-4702-439c-8836-e8e0f4d5c086"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f4a1afa-ace5-4195-a6a1-0649ebacfd12",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23dd5107-3074-47ea-9938-5b4579fe0a88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c79f420-9e2d-4b17-abbd-341950a2ace3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46a49703-7f52-4086-a362-88c2d875b79f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f42e45b-211f-4f04-b3ae-ad811c85d27f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "526d93d4-ce57-47ed-b336-7d5bc76cd2f9",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d487414e-7f98-4d51-a71e-8f3bcd5d8dea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2cf1540-42ab-47cf-8b21-68a061e21f71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7270f174-29a4-45f1-b0db-9953afbcdd1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "224a03d1-c1ec-4cfb-b900-fda975afbf3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edd31588-ea19-4312-9dae-7edae13bea47",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16907e5b-06d2-44e3-ad42-5e42eaf49939",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34310842-1a16-486c-9559-f27c6fc8e2bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fd62cff-aa6f-4d6a-b3f9-45692e2d198a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37d13aa6-4427-4cf0-9331-6c3299bc3682"
                        }
                      }
                    ]
                  },
                  {
                    "id": "468fa2a7-a698-4d96-a1e3-8408c346b49f",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e0c9aa7-3a01-43a1-a70f-5d202fa632ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cd4f50e-e1be-4664-a193-57a88aebae68"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7265498f-3c37-4c90-9b75-85c887b330c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a987177e-a041-44e7-9b7b-275b3007e1fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21bbb3fa-8449-46f4-886d-09632f9723c2",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20c6e3fd-2663-4f6c-a051-79f8c2f0bc44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7023e1f-1d56-4bc6-ac2f-71bf915278cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fd8bf07-2b3f-4c1d-98ae-707e830f380b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1667e0cd-f109-4f6f-ac9d-ffc9c06461b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08108b5a-e1d5-49ca-80d0-3c0a2840be9f",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13c91348-5b9c-4b58-8cd3-358f72514172",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88a900be-1bdd-4078-b103-adcb3c19a1e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2875ad01-fae1-4e8d-91fd-993438b2c609",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cce7bde-6351-4aca-ab91-117737e2896d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "681586d5-1b08-4ae7-bc97-e7eeb22c2b9b",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b809c886-19f7-4b89-8990-45ddf1f731b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e052b24-4506-4208-bf51-1445ac7f6235"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0d31b20-d5f3-49d2-89b4-3a163468bf85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed02ca13-89b1-47b6-8f7c-f2d6208cd932"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de10cb15-09cb-48cb-9786-cbc529104c39",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a2bd173-17aa-4f90-a255-e5d513490811",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6f1288a-4ecc-477a-93a0-8337484b3574"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b79ed3ba-b540-4901-bf8d-94cef30f5d79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cee41750-ffdb-43ce-9a34-1c741ed72f71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "067aaadd-40fd-4b4b-b391-de572ba00e6d",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5448eeff-7c01-40e2-a247-f481a6268dd1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62ce3b14-6910-4826-aa26-32c747244054"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "659affa2-3e21-4916-9a37-58cce410362d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13fc80a2-715d-450b-8cdf-6018ced82657"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58bf8538-ff06-4b2a-beb7-7da802e9dcaf",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86a997c0-a7c7-4085-b31e-9ca64547c739",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8024a08a-4c36-4a19-96bc-1567f9f37329"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d354050-f60c-4c31-a18d-3a9b58e39704",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "960aaadc-35d7-4c12-a6a4-0f8348a52a3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5dc26cf-4104-4438-aabf-3b403dd24aa5",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4c95eb0-7807-4931-b607-4b4c890cc79d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61f6f1b5-3721-4da3-aa67-eb197e970050"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2e46616-10ce-41f7-a950-99137165f7d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "507ea5c4-70c3-4573-bcdd-a15d68d50493"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee73f60d-ac0e-4c81-b378-4a0e7ebfc911",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfe769bc-346c-49c7-9214-1271ca866beb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d722a3b-c02d-49b2-a590-491d797a8c9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23c4d501-fe54-4136-989e-6326163ced57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0cfe25b5-fd6e-400c-9655-97a10fc4f8c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52605943-b6d8-42e4-83b1-df94767192af",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "530a8adc-9f7e-42ac-b557-c1ac2ea12cbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ba7b785-09ae-48fd-9fd7-f6788c5a4a49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dd1df2d-b695-4f9b-b24e-dc7f8d2acb0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c4b0cfa-cf82-4201-a3e4-cb47a9f94fdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08f1d3fa-0bd6-4ecb-85df-028481db70b5",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d47b51ed-3181-4fcb-8dbc-bb5d02a9a135",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c7357f1-b65b-4158-84b7-5e06502c92e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "340f707a-287b-4928-a6a4-5b001ea3d523",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e05800ed-31cb-46e5-a0ab-f22630d0c533"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de648ff8-10cc-4a42-843c-b32f800b6224",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ceef4a8e-c4b2-4f62-9a55-4f7f7981f288",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14bfe434-4cb4-406a-b9aa-de2536e10f2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "811c6645-3cef-44a9-ae0d-722997256403",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "709c4f61-5ff7-46f8-8864-9e4ab9f87e75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47fc1cb4-3811-4a59-9cc4-0e828b637526",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4678dc9e-df27-458e-9b9b-9bf876bce717",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4c0985d-990c-4fee-8943-a01075eaa624"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77f16225-a0ea-43f5-88f9-2da47cf10e6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05ff2d68-9be5-4043-ad45-f1f6a70c1092"
                        }
                      }
                    ]
                  },
                  {
                    "id": "931b9f1b-b2f8-4037-b88a-701f6f1a064e",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e66de8b-4428-4032-a7e4-eefbc9fbc7a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb0e713f-0b42-4597-bc94-04ab7a58d782"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e55b4d6c-2784-4be8-99b4-7c28802190e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5f03b42-bea8-4894-8d35-2c352affc25f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9db229bb-c226-4cc2-b87d-2ae2a848aa76",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e31f329-84f0-4f79-9d11-99a6a7394eaf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a05a5065-32a1-47d2-bea0-006be0ebecf3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14e6d2f1-a8eb-44d7-9bf0-aa1ce6caef3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2330a1b0-f453-47bd-b0fd-84efb39f0f17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f64918a6-10f7-43ee-8436-f40d1aae5f83",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "821f2604-ea97-4760-a446-328035ad9a3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3eac205b-1c48-45aa-b116-3335258f4ab2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "555083c6-1935-48f7-bd4b-0c054d84c702",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67d69d8c-4cbd-47e3-a3ee-c1f9cfe0a6b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56e3f440-c6ca-4158-90cd-13e26c346243",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7f976bf-8106-4c55-805f-3d02ab5e5a35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d2f52a9-3b68-4546-9248-7d7302cd1dd2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d5773ab-4d03-4c53-834d-3bb37cc3d4da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d27bb6b-77a4-4b84-8f9c-9ace3159f8c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad592b8b-47bf-49b1-b681-bea630005c55",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "638a1fdd-7a16-40c5-b700-56576f62193d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80f6daf7-dbee-4953-ba54-bd79b01dd959"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "545509df-2242-4091-b5fc-23df5fa20cf9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a8bfcea-c9ce-4e4e-a80f-80844f1cdf47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dae7d049-1607-4b3d-ac99-ae650c678214",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5cdb0ce-376b-4637-9444-3eac8ad23436",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec524bac-0ed8-4306-88fe-8e124f32f4d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68684af7-49f0-4881-82b5-a8d1db460596",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe6e85d5-49fa-4451-a69e-86a9589ee1b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c287a9bb-b503-4c86-92aa-df5de5cfaa21",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc73caca-7894-4e27-86f2-8057bf65844e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3979fd48-2aca-46ce-86a4-c6ae5777ccf5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc6676c0-09f8-4ccf-8674-e53bcae9baa3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93c28e0e-8fef-483c-8ed2-384bd27566eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49f67e60-74b8-4823-928e-5f76b508eb8a",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3595efc-e24a-488a-8d7d-d0ca968a0dd7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17c76a82-d8c8-440b-be9b-9323f890305d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2b33a44-409c-496e-974a-24ab020447da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aefafd86-4dac-413e-9737-bb44ce8ba9b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4446e9c2-526e-4059-8eb4-757ffbd862b7",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16f66ccf-abfa-4455-8a2a-849ca5a68163",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8101dad2-f32b-4d6a-b77d-24a8a0f4e456"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "292373f7-68b0-45ea-9635-d365a6c2d514",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a53971d1-b3a2-4c1a-b6b5-5bc991b8d696"
                        }
                      }
                    ]
                  },
                  {
                    "id": "161dc5a5-e4c7-4810-825f-adc4a278b4c2",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66d6fa08-c278-463b-8dea-53b6cc7f407b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba54c795-e40f-47b7-8ff0-b481638a5a92"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "290b2b69-06ce-44ad-8c4f-7b58a4534666",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d14b1f7-f21c-44e4-9c2f-5067cded939b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81fb3679-e626-4d1a-ad81-e7c57b7078d9",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6027bb59-4d32-4588-8ebb-d7de35cdb80d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9473944d-2845-4e7c-8b48-f4ed090a0abb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d8b0615-3379-47f5-9f90-6272930e75a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7908dca0-145e-49e2-af3f-0cb560cfe44d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a0c87e9-9756-4eb9-9e4b-1f18a19df24c",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8d9d1bd-aadf-4d1c-8130-ff7156c09cfd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dad189c4-29cb-44ef-b4dc-e63ea3b771aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b8734ff-1ea5-48a6-883e-e4e27fd96623",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c45334c-7785-4413-bb18-bb8852323e49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6be111f6-0d4d-4caa-9660-c48fe05eed53",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1264b01-3272-4179-8df5-4e6b7e062505",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "73d7fd4f-e591-407c-b4c9-7d99ae527ecd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11cf1560-d84d-4a6f-be51-2de4a46bf953",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54addeb4-7747-4cea-8c63-30f29b6ccd25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aeae66e0-1f69-421a-9c00-8ecda84fa365",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff59a633-5512-4600-92cd-3ec0c920d4ee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4463060c-401d-40b3-a3b1-1f0e76b373c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb1a6da5-d804-4173-9041-d1febe736544",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca3b936e-5d3b-4731-b220-2925bb8d9f6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc5f0c48-f7f7-44a3-96fa-1f6c2e9a5ac7",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ffc2b6e-dda7-46bb-8115-31c895f84963",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "09ebe215-807d-44c1-bb12-0c53ca78e0d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bbd6542-e451-4ead-882d-c62ec31c2647",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1714fa5-6cd9-49b2-8077-c597bfa731c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "088bbe91-60e9-4c48-bdbe-efb39eab2863",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "548106b5-eb1d-425d-91ca-307eb1c6b604",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bf514ae6-4472-4301-9a98-532029d4a782"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7216d157-0be8-4fd2-8e5f-320230363b60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acaa023c-0c46-4fc2-96de-28d91e8ef737"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02caaaa6-bfd9-44c9-a931-7f8c366f62e4",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6e43cce-b05d-439c-9344-a6ed0569f096",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "92dced4c-3662-4ffd-99e9-92a766aab185"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a5851d9-31a0-4117-94cc-cf29033316e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d33dd2ed-465e-4720-a75d-862340841908"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6770c40f-9711-4a38-8c0a-202709157d73",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8021c30-5317-44d4-9718-9161acfc35b6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1eef089d-a20e-471e-bc8a-40df9179b5dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71da3a13-1798-41f7-b189-91fa6148169a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77334631-f2b3-4624-bef4-7a4b0912199d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e5cb941-8862-4b6d-9269-9c9d548784cd",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b75e657-5536-4851-9ba3-2ceee5adef5f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2bf79ad1-4ace-4046-aa97-e469b7bef2ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4adfc3b4-b6c2-44a1-ae16-e2b40d231b65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df4dbbf6-1028-4232-9246-de64d59aef34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3c61034-800a-422c-9a79-ed976fef54f8",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89e5aba3-3932-425c-afc4-fc39194c57e6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "346a324a-2768-48d8-9d56-87a627150c43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d00c06d-6f0e-41f7-af35-31e340d0d508",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50e6e70d-63e1-45ed-9cbd-671250aedc71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3785b773-0b2a-41c4-abda-307b74f3ebd8",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06b203b2-2db5-4d55-a0f2-c9fae33868c1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "944e1297-b9b8-4312-83a9-b7c431319b5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "220600d8-4383-4fb4-8e28-4aa31a6f78aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb05da60-5060-49df-916d-fc02deaf3fd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad2bbb77-62af-4177-9768-ed384ee39132",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4165d33-ca24-4542-8a95-4c5cd1a4f3bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f0528129-250d-49f1-ac69-6c55f82701ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58405dc6-3a2a-4a73-825f-65682a73b3c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03b866ca-4bf1-4288-815a-e305cbf9ce21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33d90f3c-edf1-4a4a-bf89-8e4270d206ac",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57027f9d-a141-4214-af53-315f568a0411",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "700d7462-e755-4b4b-8060-847aa5e9de7f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80991f8b-333d-4fd6-bc14-2ae7d3a96a20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ed255e8-0e16-4379-a6fd-34e38b3b15f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e255c1ba-3832-490b-8cb7-f4f80b85cc08",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "403e7789-131e-46ad-9b6c-f70a527239e1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "27033c22-4400-4640-a99f-a609acf47b38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc70ed45-2122-44d3-b6a5-c40caba833eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fe336e2-3490-46d2-a9dd-cc71f922b1a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30386993-6ddc-40a7-9477-3c7bd74040b6",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "271cd346-747b-472b-a4b0-ec15e8b576c6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "315bcf33-fdf3-4405-93dc-0c3969d4ba2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95a9eca7-bc39-4ff5-856c-f7e0e5ae4e06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e543b43-308c-41c7-9068-9a4e60409438"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e73e9c3a-56cf-4d24-b170-c83687adb85d",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c63b998-244a-41ff-aebe-d6ad1e27dd7f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e7067674-4713-48b5-9403-e9952c6a1f1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "351086a7-a12f-4e84-bfde-50430276d765",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c5e8c5c-86ec-44e3-89d6-428d1512a9de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "389e8e67-7abd-4d74-aa99-1a8dca6207ae",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33bcadc1-e6ac-4c0d-ab1e-aae3fae5718e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0d15192f-c58c-449e-821c-6acb5944ff92"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5359b55-19d8-4898-a5c9-b7d94c7193da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30c82982-89f1-4f0f-9add-df5c60005a4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fceb45e1-f1ca-476b-b285-de4bd5f253f6",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c67fc16-6a4a-4f9b-a98b-3c9e2abcc54e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f17b038d-8753-469d-bb91-305223190b6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbc275a7-4dbd-4eac-ad20-a4a035a0b6cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5d636e3-609a-429c-88c2-0182fd388fed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26f35132-17c2-409e-96d5-731900471d78",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da0b57ac-89fa-42c1-aa61-74b698bf4f4b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "38e5e787-5ddc-4bdc-8a0b-f6cc2e5802a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c90d7eae-a289-4bca-9635-00d51df9ed7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36de6065-be3f-4e1e-abd5-cbbdf03c183f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6d8fa7f-5239-4c94-b10d-ed5b5e817eb8",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89f1bb93-a4ff-42e6-8e65-2b728684166b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3f935593-3924-4a89-a96b-e03ad22f2762"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ad3b434-a765-4f4f-b1c7-a02a35f51d36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bc9786e-4c9b-4a83-a8d0-4818ba28ef0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "863b4265-b0ff-4486-9397-5f6569968a1a",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fa1cd77-b68d-4342-b61a-7f17cb247891",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "45621826-e7f5-4c48-ad94-05ccb2da3bb5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4b8f05f-31d5-4580-b3cf-8199491b3e9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5778264-f992-4e4d-b03e-b815e9f7ed72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2af2b670-d902-4801-9d28-6b17cd897f5d",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5df0f309-12d9-4063-bea8-b64d8f24b014",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "91af1278-3a7d-4bb0-aef7-15780c017027"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62dca3f7-8d06-4a24-8df4-b920e1ae1495",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9e2080b-d10c-4425-8084-7731ee60c318"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac1c406a-ad88-49f3-acc9-eee87674b3d7",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9444806-e5a4-4678-a113-80d6b401c07e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "330ba626-ef15-4813-bc3a-10be8d8bc700"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7f3d20e-f6f1-4c33-ad64-a5dc9a3b0cc0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c416f73a-1cfc-4f32-806d-6c41e5d4ff6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdecf1e2-12ab-4bd7-926e-a1339b2b13ab",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47eae40d-cd43-44c8-b338-3ca022e4dea1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4da79cb4-cb25-4467-932b-ccc0c610229a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e7bb633-3929-44bc-a5c9-c40494038591",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed0f7fb3-f41d-4a51-8b5f-193d8bcd3955"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bf2f71e-6323-45a7-b4e3-85447e6d93a0",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c24f4343-e31b-4be8-b730-825c49616385",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "64dfbc66-9c8b-4705-ba74-9a5eb529cd55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b35ae27a-0918-4fdf-9611-1cd61511be5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f64ba277-884f-4b9c-a9a4-bc36132160de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d489750-2cc9-4d50-9988-36ed28affba8",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71f52861-041f-49d0-8390-a6a7b9a5de3d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cb8d6210-cd5d-4115-bdb5-e2fe0a6dc79a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa847e2d-cce2-4742-a80e-64cb70aed9fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "414606b7-0b70-4d22-9403-261607903c6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d02c620d-bdd9-4b1a-b1af-a11871ad275c",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7c8ea36-a9f8-44db-83c6-1d8333258198",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "409ae584-a322-4211-8efa-f70ae94f954e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e82785a-efe9-4cab-b4fa-e278e7fb0105",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3eb229f0-7976-4222-b783-867da724804c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bcef59b-55f0-49db-adac-464c2dd0929a",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23a89c81-3138-493d-ba91-b1090fd1a84f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2071252a-67f0-4afc-a0e0-e6be000748ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78331f3f-7d73-4885-b60f-4213984fd74f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd4738ad-6343-4aa9-8986-d35bc749e7bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0df4141-5d28-4bfe-842e-ca90e9aca77a",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96f32d06-950d-48c6-b144-dae589c9fb07",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b91068d-33a6-42d8-9b30-b250d11d1aba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "939c0f11-47a4-4cdb-a22e-8f1cb045ce1a",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e81a1607-0ca7-4d2a-81b5-6220a5a7951d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a98ac97f-6635-47ea-b971-1e19f2c032cd",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f0673e8-0d47-476d-90d5-ececd500b8ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9cfc11a6-08c9-4a65-aa9f-8f53b5f53ad8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63d2ed7f-0023-42ed-ad8b-a8c26ff3ddcc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b24da16a-a783-4546-8c98-c85c158ba5d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8335dc4b-8969-4a09-9e9c-ed19cf2afc83",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "347c6785-13e0-478e-b68c-7b709080b772",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a4a0f7ef-4d7e-4167-8ad6-3a0325b16742"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d04199b6-436e-4da7-a54a-7a01ff375815",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c069d966-5add-4051-baf2-4713bdd7c181"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6bbf13a-0b56-4bd8-835b-28d034a588a7",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e73a0e56-85e3-4af0-b0fe-16b0294893ab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "856217ef-3e98-441a-b698-112dafdb4325"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "afeb55ba-c37b-45ec-acc5-baaf7b3ae51c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "835d3c8a-e512-4c06-afa0-e3e44dca4b19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd5fc8b5-1f9a-46b0-922d-59e525bad115",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6658765e-84ef-489f-87fb-7ba6370d759c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a6cd94c4-0932-4474-94e3-acb761ae5c24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "812fa760-ed8f-49a2-b503-907c91a7d9b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4648b7c2-ab36-48d9-8dc3-61e1bc8aebcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "322d1581-dcd9-4545-8c1d-60362f08919e",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ba07fb1-0257-424a-9790-3b36988ae6d9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cbc2d882-9de3-4dce-9585-ca346c33e3ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "755816a2-a0de-418a-960b-ec1b1c1e8114",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94414299-d2aa-4b7c-be02-350e25a18d0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f6ef203-e1d2-4fe7-aebd-52cd69568ed7",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06081065-be40-40a7-9ae5-9011e9323441",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9fd6e042-9e95-49aa-a6dd-7dafadd0f92c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d447001c-cf52-44de-8afb-239e5ce9232f",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71b8f55b-b00a-4e95-862f-86ca6d322933"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11086fdc-dbeb-469a-9be6-078e9b602b81",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e70fd38c-9c77-42d8-8ae8-0b42cd4d1be3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "34f0a918-ecad-4a45-9a6e-3ede515a08a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8af698e5-dee9-4c80-99a6-378cf4a48444",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36ee75a6-9fe3-4bb2-9e40-59fc8c554d86"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6ba92913-7a84-4869-8b89-90380ee33389",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c3ed6316-f925-4081-8598-0a1c008982ee"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d76451b9-ef33-4e98-9537-3f61ba5b4b5f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1ba28533-d065-41f2-844b-4cc99135a698"
                    }
                  }
                ]
              },
              {
                "id": "e1c0e26b-4390-45f1-bdab-bb7f02593e95",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "702cd84d-fe80-4b14-91f4-8c83ed906e13",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72017e3d-5649-46c5-862e-c6584beb420d",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "198f96e7-22c1-4e94-80fa-66f2199d9a1a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2512a6b6-f7c0-4d3e-bea4-6947464fb403",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b4c5e238-72a2-492f-bb22-a36a924cd621"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "78672266-2f21-4d2d-b62f-31082ca11e12",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "db3998dd-117f-4f03-ab12-0a0b60526c99"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3c53b742-5312-47be-93b6-b27dd0b84865",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9e78ff77-c6b6-4850-811a-23489363f81e"
                    }
                  }
                ]
              },
              {
                "id": "0daf3511-516c-4760-a6d8-7d2f6f209462",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "346634eb-30b5-4a71-b6f9-5a53f9a91eab",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1409be0d-05cc-43ec-9b90-c4b1efb261ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "35e9725a-6f51-4fb0-ab72-5bda6197b317"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e75eb0e8-67b7-49ab-968f-9ef99929fc26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31eb388c-2fc1-4fff-8a33-c1d568ceaf31"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "ca686af7-a5a5-41d8-93bd-f8a4a216b2cc",
            "name": "Positive Testing",
            "item": [
              {
                "id": "50730bbc-bddc-487d-8af4-b7c0ef5bfd86",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "aa511c8e-2a8e-4303-8965-e69f22f3a95d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "00fbc45e-6c5f-4c34-ae15-74eda4f60a80"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2d23613f-d2c2-4415-85ed-8231e3699ebb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "85b8f955-8e5c-45c0-9cfb-a5a9a8553ff1"
                    }
                  }
                ]
              },
              {
                "id": "c97e4414-b12b-4e57-8ffe-fc22655e20a7",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a52b4456-b2c7-4844-8254-39986ac23799",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "5af46772-df82-44d0-b6d0-0b9795ad1b15"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7f508677-c3b1-4610-8ca0-a5a71339eaa2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c4db27e3-f3c7-44d4-a68f-9f71b34b8d69"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b028067d-3840-43e6-bc7b-589d518d0e3f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "c5a73348-bad9-4f0e-83bf-045b603faa54"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "dd3c3a66-9fdc-4ffc-beaf-20b877535faa",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "383cf716-be5f-4dd9-9994-2bfb13c65d42"
            }
          }
        ]
      },
      {
        "id": "304986ec-83f4-4b08-90b9-48cad3289f6c",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "0131d2bf-c990-406e-b096-b8c84899674e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e74901fc-7820-40fa-a31b-95c5985ae33d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "935d5d22-97da-404b-b350-95d55ae75b00",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae4dee55-0084-4b74-9585-dc4ca25b6fad",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "8dd7e443-90b1-4eef-9480-f9d7374959d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7a01cfb-36e2-4600-af68-1078ef73f3f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ad8700e3-6073-4340-86bf-429413928031"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bca22561-f3fa-4716-aa11-ace62f907a96",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "35ef9e69-1792-46ae-97a7-1869dade8eb3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b98bd295-f63e-48a2-ae29-86d28e46bbe3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4d20f6c3-25fb-413a-985c-86f55379a0ad"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "eec16d4a-11d1-4457-a128-dce9fdda07c2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "4e3ffdfb-1da1-4b7c-ad61-fbe3ee197b49"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b05337ce-ca0f-4c6d-987c-72e6cf51d296",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "27dccdcd-ce02-499d-8be3-5219d0d7d332"
            }
          }
        ]
      },
      {
        "id": "a5540bf5-df43-46fe-b0bf-501e47d43a91",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "86a8922e-f33e-4fed-a31c-6e0d5c340200",
            "name": "Negative Testing",
            "item": [
              {
                "id": "62559ec1-b899-4093-b3ae-5dbe4ce77a2f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2dcc0685-b9a3-4b5b-b16b-bcccb6102867",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f099b2f3-820c-45f9-89f5-f63e80cfe7ee",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "01eff8ba-a92b-438e-a126-3a64c3787fb3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b39e51f-1292-4f77-a2fe-fc8ac77037c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f95b6d93-8286-4413-9512-8dbfd0766810"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5b4f5317-b55f-42ba-b1af-b978b3047e0a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0d537820-7422-43a4-893f-263a88746d29"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "18ea07fe-af68-4e9f-b1e7-f5f9e10f05f0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d4eb1e8e-4bad-41ab-ad4c-6333260d8c4d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e7857608-9076-4cc3-9c3d-6a4e24a62108",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "d0816a36-7111-4194-82eb-417a45b95a42"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6ded295b-ed40-41a3-acb2-93478acde760",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "71e506be-7c9c-476a-b852-445f3dc4f509"
            }
          }
        ]
      },
      {
        "id": "ce7edb46-0484-46c6-b2e2-260b344f9f7c",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "f29c9fda-f32f-4e23-99b7-a85973f78152",
            "name": "Negative Testing",
            "item": [
              {
                "id": "53f37962-0055-48de-a493-821f13991c2d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f0f58418-98b8-4116-800a-2855292d6586",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca433c25-9763-45c5-9bc4-33a99632b186",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "03e431a0-35db-41eb-9848-852295d259f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93615c31-600e-47cb-a40b-55852d005c89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2b29476e-cd38-44e3-b001-14af183f0b70"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "25ad6d13-5317-4104-a95b-289e3ffea2f9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "35f7f1bf-aa8b-4798-92fb-139fa5863e70"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4798f0a4-06c2-4f93-a527-f78d85dc83d4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fc3ceaf4-b343-4cf2-ab2d-cb061cfe740e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e944e1d1-181e-48b1-8eb7-c252bb633a97",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "a371e6f5-6827-4608-8214-14cf9fdef9c6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "61569ef8-7128-4eb7-b631-e77e68982ff5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "68de55e0-cc26-4ec4-8de7-14b26095d57b"
            }
          }
        ]
      },
      {
        "id": "3278170c-a39a-49f3-8e18-d5b21ed275bd",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0dfd5f52-6e88-41f4-833d-5c2754fcdfdf",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8c131018-68b2-4592-8777-102ddb309aa1",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "9d85909e-1d6c-4220-96d7-ba4182840c82",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3246cb10-3c46-4aab-90cf-7e840dd1bac1",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8a6a3159-5141-474a-a95b-0867bb936cf8",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2083,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 284,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 570,
        "pending": 0,
        "failed": 45
      },
      "testScripts": {
        "total": 1046,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1037,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 86.61619718309862,
      "responseMin": 7,
      "responseMax": 2289,
      "responseSd": 242.06858798065278,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1693528513455,
      "completed": 1693528552453
    },
    "executions": [
      {
        "id": "2eec1519-6065-41c4-80d9-79d4fdb5e67c",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 282,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "945ba09e-25ba-4c29-b050-55287e01ab65",
          "httpRequestId": "3eef8f23-4d3b-4497-b43e-cd27869407f6"
        },
        "item": {
          "id": "2eec1519-6065-41c4-80d9-79d4fdb5e67c",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "38979cde-88d3-4bd5-922c-2688a0033019",
          "status": "OK",
          "code": 200,
          "responseTime": 67,
          "responseSize": 0
        }
      },
      {
        "id": "ce928997-0831-447d-be7f-0fb47f138ace",
        "cursor": {
          "ref": "7f014eeb-b14e-48d7-85c8-cd83a2ce22ff",
          "length": 282,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "a963697b-e2b8-4d5e-86fb-893cd1f45dec"
        },
        "item": {
          "id": "ce928997-0831-447d-be7f-0fb47f138ace",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "a93578d5-9fda-429f-9b86-5303d6c8578f",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 0
        }
      },
      {
        "id": "16e63b69-cf8f-44b4-9b36-8364baf22dd4",
        "cursor": {
          "ref": "28d863a0-c653-4321-a000-47d9760096e2",
          "length": 282,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "2916ade1-3d5a-4a48-8c02-41e88f2e5101"
        },
        "item": {
          "id": "16e63b69-cf8f-44b4-9b36-8364baf22dd4",
          "name": "did_json"
        },
        "response": {
          "id": "d248463f-b031-4ee4-b633-4fb2df2ed690",
          "status": "OK",
          "code": 200,
          "responseTime": 365,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e6a248b-fc16-4a5f-ba8f-00abef4b1f86",
        "cursor": {
          "ref": "beb11480-4816-415e-b089-5711e6dc1ee7",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "a7d1692b-fca4-4f85-a2f3-2dbd937caddb"
        },
        "item": {
          "id": "9e6a248b-fc16-4a5f-ba8f-00abef4b1f86",
          "name": "did:invalid"
        },
        "response": {
          "id": "bd6f2bd1-a63b-4524-a2d0-3cc7d7bd6821",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e6a248b-fc16-4a5f-ba8f-00abef4b1f86",
        "cursor": {
          "ref": "beb11480-4816-415e-b089-5711e6dc1ee7",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "a7d1692b-fca4-4f85-a2f3-2dbd937caddb"
        },
        "item": {
          "id": "9e6a248b-fc16-4a5f-ba8f-00abef4b1f86",
          "name": "did:invalid"
        },
        "response": {
          "id": "bd6f2bd1-a63b-4524-a2d0-3cc7d7bd6821",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac93ddd9-f14c-4023-bdc7-7f4625ae6cc5",
        "cursor": {
          "ref": "78af3279-71fb-4beb-a227-e140740be73e",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "51ace5ab-6259-4148-86d3-3edafdf88509"
        },
        "item": {
          "id": "ac93ddd9-f14c-4023-bdc7-7f4625ae6cc5",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "f72423b4-a147-4559-8669-74339f46a522",
          "status": "Not Found",
          "code": 404,
          "responseTime": 92,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f11defe-c86c-4874-9872-1cedd205dadd",
        "cursor": {
          "ref": "fd15449c-8004-4aae-b2bc-48ef4ae0b9a7",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "29380f9e-14df-44a6-b6be-d8692a6d6878"
        },
        "item": {
          "id": "1f11defe-c86c-4874-9872-1cedd205dadd",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "3f1b898d-8487-49f0-8053-fe099ba5ff43",
          "status": "Not Found",
          "code": 404,
          "responseTime": 42,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11301ef1-bd5d-4135-aea4-ab194bbb170f",
        "cursor": {
          "ref": "a639eb98-6698-448a-9361-10e08976663c",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "b8fb0eb9-3df3-4e47-b8ba-826574c5079b"
        },
        "item": {
          "id": "11301ef1-bd5d-4135-aea4-ab194bbb170f",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "bfd8bc5a-62d0-4739-99ba-569a75e81782",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7139fadc-0bd4-4701-a870-2ab6d03a11f1",
        "cursor": {
          "ref": "2c72d14b-b55c-499b-9f32-f4988fa8f484",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "8e7ce435-3902-40a0-b15c-1d9a9cf11edc"
        },
        "item": {
          "id": "7139fadc-0bd4-4701-a870-2ab6d03a11f1",
          "name": "identifiers"
        },
        "response": {
          "id": "7e3849c1-6238-4202-b16c-869ef7ae2bd6",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74115aa8-9ab3-4498-9582-327e1568010f",
        "cursor": {
          "ref": "cca7b7ab-9962-4043-91cd-b64bb3ef5417",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "b2a68f4f-37f9-4146-a65e-6d76b63c036a"
        },
        "item": {
          "id": "74115aa8-9ab3-4498-9582-327e1568010f",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "525b83e6-fb4c-43c5-8a35-96209cfad3a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e066a95-6f08-4d98-8bfb-3ad91ee802e1",
        "cursor": {
          "ref": "90a6e012-7c24-4244-9c81-e5f8dd15a617",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "43f763ae-6f19-4540-8723-6eab6923792b"
        },
        "item": {
          "id": "1e066a95-6f08-4d98-8bfb-3ad91ee802e1",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "f2b282fe-225d-448f-b7db-2c1443008f1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d34e73d-0560-4a29-8375-d5e46f3f7327",
        "cursor": {
          "ref": "49821df7-6f35-433d-86c3-49ac8d3fe0fc",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "6262e907-06d8-4c7d-9a2e-a801e44f28c1"
        },
        "item": {
          "id": "5d34e73d-0560-4a29-8375-d5e46f3f7327",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "dd1c92ac-6cbd-421f-b7c3-fcd0763d436d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a15c94e-41b8-43a4-be15-a2a688e01ecd",
        "cursor": {
          "ref": "4722167e-8664-471e-b911-2414e21493a2",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "ae8c25f0-4f03-4735-947a-ae29021ae3bb"
        },
        "item": {
          "id": "4a15c94e-41b8-43a4-be15-a2a688e01ecd",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "34768e9f-ee2d-4d9e-8ed2-5bd334573c9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7d7a899-5091-4d77-a252-dd33fa72edce",
        "cursor": {
          "ref": "5a49f01c-c869-4646-b218-1d7cef972ab9",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "90b0a97e-9dfa-467b-aea0-0fe00a247bda"
        },
        "item": {
          "id": "f7d7a899-5091-4d77-a252-dd33fa72edce",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "19dd00ae-fe2e-4fbd-bf64-a7d4a1059d4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14e55271-5eca-45af-aa42-b8f8e5bdd07a",
        "cursor": {
          "ref": "16b0e5cf-6a23-4b17-b861-5d967328d511",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "7a3bd5d9-49c3-4211-9c0f-31de7b1317fc"
        },
        "item": {
          "id": "14e55271-5eca-45af-aa42-b8f8e5bdd07a",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "1ce68095-2f3e-43f7-ad39-36ca825c7ed0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca83c148-1705-4461-822a-c6292364ab58",
        "cursor": {
          "ref": "803c2ba1-b3c8-4e2c-a907-514baa528999",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "80779154-d52b-4fde-b7f1-f63781f40b41"
        },
        "item": {
          "id": "ca83c148-1705-4461-822a-c6292364ab58",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "929b82de-3ba9-49fb-8c70-80741ad867e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07b1e2d1-306b-4f78-ba19-da52e2f543ba",
        "cursor": {
          "ref": "efce83d7-9de7-453b-87c0-f80c8220ee26",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "f933cccf-906c-45ca-8a29-4a1b2c233656"
        },
        "item": {
          "id": "07b1e2d1-306b-4f78-ba19-da52e2f543ba",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "3b98bed5-09c4-4ca1-a1f7-1103fbc4b634",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2dd3dbff-3cb6-4fe0-a3d0-0bee7ac1bf62",
        "cursor": {
          "ref": "1f31e8ca-f613-40ad-9d40-141bab063871",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "1aae8b8f-7a8f-474c-b6e6-4eee679af404"
        },
        "item": {
          "id": "2dd3dbff-3cb6-4fe0-a3d0-0bee7ac1bf62",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "67caf0a9-0cae-4ad1-8dda-842d3f0e17c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7189d328-23e7-4ad4-88b5-525da309fae9",
        "cursor": {
          "ref": "1c9b1e47-3426-479e-bc93-97f2687c394d",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "ae7e476b-4f03-4ad1-b3b1-c1d5e6389ab1"
        },
        "item": {
          "id": "7189d328-23e7-4ad4-88b5-525da309fae9",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "5593a520-9db7-4c65-a175-73643df67b6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83d049bf-91fb-4043-adb8-ac8daf9c2494",
        "cursor": {
          "ref": "9292a4ba-c349-4697-8c49-0363eb49d23f",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "41bfed82-552b-4511-b746-8b243b1069a5"
        },
        "item": {
          "id": "83d049bf-91fb-4043-adb8-ac8daf9c2494",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "e492e744-89c0-4f17-8d54-b7a59a5e8abf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31e30da6-111c-417b-803d-0df6415b9325",
        "cursor": {
          "ref": "4726d058-9d19-43b4-9dfb-b8a7ad76552b",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "a432923f-cfdd-4dcd-adb2-b8873546932c"
        },
        "item": {
          "id": "31e30da6-111c-417b-803d-0df6415b9325",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "9bf4de50-561a-4d26-887d-301f26550ae5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "096c2033-aef9-4b04-ad3d-cc6413e909b7",
        "cursor": {
          "ref": "ae514821-7833-4851-bcb2-737cc851b49f",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "199c5b54-aa85-4619-bd25-a9e6059820da"
        },
        "item": {
          "id": "096c2033-aef9-4b04-ad3d-cc6413e909b7",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "47cbe051-011f-4311-bed4-ebccb6d142f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d07d763-22fd-442f-b11b-42c88ca7b0bc",
        "cursor": {
          "ref": "4726dff1-0968-44b4-b359-09411d4a6326",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "f0198ae4-1205-4688-afa9-0174f2f13f96"
        },
        "item": {
          "id": "2d07d763-22fd-442f-b11b-42c88ca7b0bc",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "ba06d089-e6fe-4a2b-8022-3a7e02441453",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f17e294a-9f6f-4237-94e4-705d02119747",
        "cursor": {
          "ref": "c66a206a-7196-4b77-9b8a-b7cb6bb238b4",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "62ff4d67-c500-424d-8ea1-1be873adf106"
        },
        "item": {
          "id": "f17e294a-9f6f-4237-94e4-705d02119747",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "3580994c-4127-4fe6-b80f-e7f8e1cabe9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e72ef7b1-57d4-4fd9-95f7-25e4bca94b44",
        "cursor": {
          "ref": "401b75dc-b663-4321-9abe-475bebf6a90c",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "04f6192a-7c00-420c-b3fa-35911f8a3bcc"
        },
        "item": {
          "id": "e72ef7b1-57d4-4fd9-95f7-25e4bca94b44",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "2f942cf1-2139-4c5f-8045-ef77e276cc1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8196725f-caba-4d7d-8a5d-64001cee3232",
        "cursor": {
          "ref": "9716afa2-5534-4c39-ab25-450a75618954",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "b7b7a518-5188-4922-a66b-3d65a462de58"
        },
        "item": {
          "id": "8196725f-caba-4d7d-8a5d-64001cee3232",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "1b8d21b7-b6cc-445f-8c7b-3aadc8688464",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da18c833-b611-42f2-9c0a-c0a9214bc531",
        "cursor": {
          "ref": "49b2179b-c314-4726-818e-8bacda3b7177",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "fb2d1893-4c05-43ad-a4b9-9245172c13fa"
        },
        "item": {
          "id": "da18c833-b611-42f2-9c0a-c0a9214bc531",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "e6742bb8-66ec-41b8-8dd1-dd7280c23154",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41e058b1-b051-4a59-b12a-b9a648dff1b8",
        "cursor": {
          "ref": "a236885f-f9cd-4a1e-a981-f47dde91c8c0",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "5d50eaa6-31ed-4966-9c58-897b00992ec2"
        },
        "item": {
          "id": "41e058b1-b051-4a59-b12a-b9a648dff1b8",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "75b1129d-1790-4d5d-bb79-6c942ce3cfa8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d40fb592-4fae-4caf-907f-b90669a3f55e",
        "cursor": {
          "ref": "b37df94c-bbfa-4e10-930b-84294e9f22ee",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "f051380c-804b-4a3a-9252-1a86bfdaf304"
        },
        "item": {
          "id": "d40fb592-4fae-4caf-907f-b90669a3f55e",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "8be5c76b-1f49-443d-8888-58553cd9bd0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fc67f9f-9496-41fc-a50f-44742ee4862a",
        "cursor": {
          "ref": "5356417e-4c33-4a78-8f58-6801ffd00063",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "f06bede5-234b-47cd-984c-c3731d9d63be"
        },
        "item": {
          "id": "5fc67f9f-9496-41fc-a50f-44742ee4862a",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "8f7372b6-d699-4972-8ad3-a9056fe93a84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0280ddf0-81b2-4039-9e01-a6c168afdae9",
        "cursor": {
          "ref": "44753f35-eb73-4d6d-8bbc-a51eb995ca67",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "c8a59a52-ff2e-4f1b-9d10-8fcaa3b09c4d"
        },
        "item": {
          "id": "0280ddf0-81b2-4039-9e01-a6c168afdae9",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "97acd983-f40b-4037-9988-4ef840b93ddf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fd549c3-9ce8-4308-8713-01a724ae659e",
        "cursor": {
          "ref": "4aacdb8e-7db0-4a5e-8506-c0039372739c",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "41024fd8-ec34-4440-9f9f-4b5123320167"
        },
        "item": {
          "id": "2fd549c3-9ce8-4308-8713-01a724ae659e",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "bd53aa6f-3ef8-40df-8197-70ae9883dd8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9cd9144-4c6d-4eec-b060-124c9a037350",
        "cursor": {
          "ref": "60f5ae17-806c-44b8-9695-6c6ad52a9624",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "914cc578-efc0-4763-9694-f2ceb3c68d93"
        },
        "item": {
          "id": "e9cd9144-4c6d-4eec-b060-124c9a037350",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "d1225417-388c-4115-91e8-178e10aef577",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31bfc243-3210-4a61-bf5f-f81343f7b6fa",
        "cursor": {
          "ref": "4b1986f8-a687-48df-acca-cb231919f040",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "38b9d605-b431-4a79-b2db-80501272d2e1"
        },
        "item": {
          "id": "31bfc243-3210-4a61-bf5f-f81343f7b6fa",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "cd674ca4-9d7b-4f0e-a169-92fdfe265787",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe2eee3e-c12e-4f8b-ab00-6443f891cee3",
        "cursor": {
          "ref": "298e3669-d9e9-4f40-b890-8c7e11d66109",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "34e12d22-1d8c-4a50-b807-12262222099c"
        },
        "item": {
          "id": "fe2eee3e-c12e-4f8b-ab00-6443f891cee3",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "852ad497-47ff-4b3c-aa8d-eefa9ddedcd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b913e5a2-4f60-47e7-a1a1-05f6607a5292",
        "cursor": {
          "ref": "bdbaa751-be8a-47ad-bc4d-bb8e0b1a847b",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "2a15b7c7-1bd1-4426-bed9-c7d31a97eaa5"
        },
        "item": {
          "id": "b913e5a2-4f60-47e7-a1a1-05f6607a5292",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "7caf67b6-74aa-482a-95e0-083bf906a43e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4547a75b-25c7-40bc-bb45-5d7dbfafa7dc",
        "cursor": {
          "ref": "553522ed-6317-4d5d-8052-dfceb38e5b89",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "6f24d3e1-572d-44f4-94fb-a12d0b6c366c"
        },
        "item": {
          "id": "4547a75b-25c7-40bc-bb45-5d7dbfafa7dc",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "8cfb01dc-a0ad-4eb0-ab6d-89205c496f20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b5e035e-d2e1-42ac-a694-a1c63f5b81bb",
        "cursor": {
          "ref": "8993073d-ddaf-45fb-b605-fa3b63f737e6",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "3b1fb7b3-3347-4bc4-a614-7b3d581e0492"
        },
        "item": {
          "id": "6b5e035e-d2e1-42ac-a694-a1c63f5b81bb",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "8ea31a09-2afa-4012-a993-d37709706c52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dbd425a-ddbb-4560-ad5b-b553d56bf04a",
        "cursor": {
          "ref": "158045ae-e352-4fdb-b77c-4c72eff09b4b",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "7be96bfc-7edc-461d-b5c2-a458d664f574"
        },
        "item": {
          "id": "0dbd425a-ddbb-4560-ad5b-b553d56bf04a",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "3f1b961e-d9c1-499e-83a9-13166dc933eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0178680d-d741-480f-b0e8-e2827fd67611",
        "cursor": {
          "ref": "e90b4b71-943e-4823-b39d-9e370c91509d",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "bf4cb87b-17d5-48c1-b2b4-0515882dcb70"
        },
        "item": {
          "id": "0178680d-d741-480f-b0e8-e2827fd67611",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "06ed091c-8cd5-48cb-95c6-05cd5e993694",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 38,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "6f819e57-e4ed-4bed-9fea-5e9c1ae65db4",
        "cursor": {
          "ref": "3afed160-f14d-4854-b005-2a6159a503a6",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "d90be654-015b-4a6a-92aa-92c943502748"
        },
        "item": {
          "id": "6f819e57-e4ed-4bed-9fea-5e9c1ae65db4",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "8e4ce12e-7c5c-433f-af2a-4cd8fef18128",
          "status": "Created",
          "code": 201,
          "responseTime": 2289,
          "responseSize": 774
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "be3f49ef-570c-4bf7-9845-624d3944e056",
        "cursor": {
          "ref": "d857b5fe-e8c7-432f-9d8e-ba97f18f608f",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "5cf3bef6-4e30-4736-ac73-a1d838cad0d8"
        },
        "item": {
          "id": "be3f49ef-570c-4bf7-9845-624d3944e056",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "97861978-20c2-446c-acdb-8bac8fc5d723",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 35,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "449fca9a-b88f-4ba5-96d3-55e44b854c78",
        "cursor": {
          "ref": "b7a3cb45-5333-4d65-8b39-55d78207a224",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "18a8fbe3-a272-4787-9362-776a2a7411a4"
        },
        "item": {
          "id": "449fca9a-b88f-4ba5-96d3-55e44b854c78",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "37b92fad-f510-4622-89dd-78a157a0abae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebc2c97a-a4b5-4694-977b-92b99ecfcc77",
        "cursor": {
          "ref": "a3fa8dc4-5597-4f4b-a3ce-94a2d6ecdfe0",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "5e292972-4567-460f-8c16-e2ebddab8942"
        },
        "item": {
          "id": "ebc2c97a-a4b5-4694-977b-92b99ecfcc77",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "c12b09c2-2c92-4bee-ac62-fa65ff8bd94a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 39,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "750e8f65-6a5f-4637-971c-d5185ee15fa0",
        "cursor": {
          "ref": "15997c41-a464-4efc-b8e5-297bb0df391a",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "8452218b-d281-4394-9bf5-f49caee0d5cf"
        },
        "item": {
          "id": "750e8f65-6a5f-4637-971c-d5185ee15fa0",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "fbb38ba6-0870-4db7-a99f-e34b865c962a",
          "status": "Created",
          "code": 201,
          "responseTime": 1531,
          "responseSize": 763
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "5a6d322e-682c-409a-8cf3-ed1630d34c52",
        "cursor": {
          "ref": "0d043104-d33e-455d-9090-1f8eebf2da8b",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "f76643cf-b11e-497c-97c4-52c627121112"
        },
        "item": {
          "id": "5a6d322e-682c-409a-8cf3-ed1630d34c52",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "67828f8a-d9a2-44d1-8f42-7f8ab0359f3c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 37,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "5ccb7dbf-0dc2-443e-a182-66ddb1a5ff63",
        "cursor": {
          "ref": "cf93ec8f-bfd0-4e98-a1fe-6f26428760bf",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "71c00eb5-b2ae-452e-a5c8-a491e12354b5"
        },
        "item": {
          "id": "5ccb7dbf-0dc2-443e-a182-66ddb1a5ff63",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "318a52c5-8a33-4ad4-aa4b-9d98faa6c906",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 806,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "d1dc5de0-cd18-454c-b15e-c1d4907f99a6",
        "cursor": {
          "ref": "50b1785e-2c73-4b4b-a5d4-8df0d5f84a49",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "ff9bb93f-0dd3-4334-91ea-f4c07e90be10"
        },
        "item": {
          "id": "d1dc5de0-cd18-454c-b15e-c1d4907f99a6",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "b92a2d4e-2f8e-409f-92eb-7e2281ea3545",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 36,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "f5e4881b-7bb6-45bd-9f82-f2a6fd1e0e2b",
        "cursor": {
          "ref": "51399fc5-7e47-4df7-8817-2a918ef59aa4",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "a13c2cfd-5acf-4577-8c21-3b37301b46a5"
        },
        "item": {
          "id": "f5e4881b-7bb6-45bd-9f82-f2a6fd1e0e2b",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "19d43680-798e-4381-a850-2f463368f73d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 40,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "1b6adaa5-9f87-4b5d-8f40-156fb1688e5b",
        "cursor": {
          "ref": "d0a97e03-b0c5-42d8-bb63-fa990f2b4287",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "4a7f7625-8d94-4a1b-9393-71ad59b6b8f3"
        },
        "item": {
          "id": "1b6adaa5-9f87-4b5d-8f40-156fb1688e5b",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "34e0462c-be92-4226-a11e-6f0a50d6ca89",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 36,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "39ab30d0-10d5-4f40-905f-2140cdc08611",
        "cursor": {
          "ref": "1599cf01-9808-46ed-89e2-717f7075cbd7",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "8f1ccbfc-3f64-42e1-95fe-0943e31ac7c7"
        },
        "item": {
          "id": "39ab30d0-10d5-4f40-905f-2140cdc08611",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "dc1a4bc4-9033-4154-a300-ca1132d57037",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 35,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "1c57146d-3152-4635-965c-070825846981",
        "cursor": {
          "ref": "2264f41f-2928-4603-8e8d-e014c63edd63",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "f285d049-09c5-44d4-9172-76f1a59c5dab"
        },
        "item": {
          "id": "1c57146d-3152-4635-965c-070825846981",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "2fc52c04-59fe-4fd2-8183-a51d60f63a65",
          "status": "Created",
          "code": 201,
          "responseTime": 975,
          "responseSize": 770
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "3ecac8e6-2300-49cb-997a-2cfde47032d8",
        "cursor": {
          "ref": "45cd1f7e-46a1-4714-9fb6-9430f038f4b1",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "ac278334-8d4b-4067-a336-9cf1ce97a583"
        },
        "item": {
          "id": "3ecac8e6-2300-49cb-997a-2cfde47032d8",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "b8e6d2e5-4519-4556-bb0a-41288f213b39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54a09a65-c4d7-420e-af15-7c4138853580",
        "cursor": {
          "ref": "c8faf675-6634-48cb-98e7-50c6496b55d3",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "135867ed-a68c-4eaf-ac6a-f025ee6698f3"
        },
        "item": {
          "id": "54a09a65-c4d7-420e-af15-7c4138853580",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "9cb2b439-d2c4-44eb-9d72-ce5f09fe8e1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a2a28df-d470-4d50-a792-70985db68ccd",
        "cursor": {
          "ref": "2e26ada1-4682-4be7-af8b-f2361c7d8f34",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "1f59b573-1cf1-427f-a3fa-eab0aaf799f2"
        },
        "item": {
          "id": "9a2a28df-d470-4d50-a792-70985db68ccd",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "8c876145-d0d7-42fb-bb1d-8c9466f80fed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12311c54-1a25-47a7-8779-771d7f69dc8e",
        "cursor": {
          "ref": "2ca40d2e-1f57-4087-a0b2-68db72743fda",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "a1099e21-ee1b-44d5-81b2-f240f64e0bca"
        },
        "item": {
          "id": "12311c54-1a25-47a7-8779-771d7f69dc8e",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "c6c72db2-e684-466f-a80e-4a845c3ad4fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af6733ac-fcd3-42c6-a75e-0b3ea659e13c",
        "cursor": {
          "ref": "eb008410-3bad-4baf-9690-22bef641acf4",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "f964ed7c-b530-42d5-8178-ef144fda4950"
        },
        "item": {
          "id": "af6733ac-fcd3-42c6-a75e-0b3ea659e13c",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "0de52280-c861-4fe7-9379-967f3aacaccf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be957b97-81d0-48ec-b28c-c3d1e946b1f8",
        "cursor": {
          "ref": "60fde906-6004-40d0-a767-451d86c85a21",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "f6489e8b-9a65-46b5-92ca-7dd46d4ef18b"
        },
        "item": {
          "id": "be957b97-81d0-48ec-b28c-c3d1e946b1f8",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "2ae1adb4-b280-47ba-92d4-492ba86d555e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2254932-acec-4ca1-9205-1f0759967a86",
        "cursor": {
          "ref": "3c71e6b8-e3c8-4ed6-add7-5f875519b55c",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "f04d2b8f-5f56-4896-b7f9-23501dc1a52a"
        },
        "item": {
          "id": "e2254932-acec-4ca1-9205-1f0759967a86",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "73fe9326-0079-4035-a66e-fbb0b299f235",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f5ac035-ed17-430d-911a-f91a2c5d1294",
        "cursor": {
          "ref": "631528fb-480f-43e0-bf0d-249890169946",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "039a5cd6-3de3-408c-afc1-18490c4a2db0"
        },
        "item": {
          "id": "8f5ac035-ed17-430d-911a-f91a2c5d1294",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "1edd76f2-8219-4ed5-9e13-18b13f3ed2fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71dc48f8-81c8-49eb-9c6a-d69b9cc6b12b",
        "cursor": {
          "ref": "69b5e2a8-d4ad-4be5-a8b4-d5ae14e4fa94",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "e93d6c9a-24b3-4036-80cd-aa3bff27c90b"
        },
        "item": {
          "id": "71dc48f8-81c8-49eb-9c6a-d69b9cc6b12b",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "74212fdc-3b6d-4f1c-bf48-05c5b1b63146",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6af9f90-9af6-4ddf-a7a3-18687e064ca7",
        "cursor": {
          "ref": "21c955e4-422f-47c7-bd31-7b387218deca",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "d0bc4499-34c4-445b-9eca-d4e5930fe49f"
        },
        "item": {
          "id": "e6af9f90-9af6-4ddf-a7a3-18687e064ca7",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "b8e60407-6d27-45a6-b837-5790758fcd15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36983ecd-5fc4-413f-b321-7a20111e40db",
        "cursor": {
          "ref": "8193207d-a94e-48f1-b848-9d0c08602fd9",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "d129efd2-f70e-4f3b-ba43-c29f5c6dd98b"
        },
        "item": {
          "id": "36983ecd-5fc4-413f-b321-7a20111e40db",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "657905fc-d1f3-418a-b07b-9cec8d9cbaf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2df3feb4-33eb-43b1-92ec-c16e1d4931a6",
        "cursor": {
          "ref": "ba1a3275-c8b6-4a6c-a88a-938c2433bf79",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "82d871c8-d2af-4bbf-971f-feb30b6a6572"
        },
        "item": {
          "id": "2df3feb4-33eb-43b1-92ec-c16e1d4931a6",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "fab3728e-fbeb-4d04-9f66-3578b44713b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0edb3e9-426f-4ee0-b99d-eec8e30053fa",
        "cursor": {
          "ref": "eeacb1ba-4e4c-4b0f-984a-8e1121d3c5a4",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "561891a0-6a11-442f-b400-6ee59e142c31"
        },
        "item": {
          "id": "f0edb3e9-426f-4ee0-b99d-eec8e30053fa",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "4ba95a80-5d38-4d8c-93c2-fec07b7f1d00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c14278eb-6b28-4525-84ac-51150b4d32c8",
        "cursor": {
          "ref": "71fcf8d6-3bdd-4c94-869a-5c564894a1d7",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "4e194970-cb27-455c-8239-5449013c3685"
        },
        "item": {
          "id": "c14278eb-6b28-4525-84ac-51150b4d32c8",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "39b321f7-237a-4af1-81c4-6968dd734365",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 754,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "66db2d84-0dcb-4be9-8da7-334bbd876c33",
        "cursor": {
          "ref": "4398ce31-e251-4662-b8a1-7306b792b602",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "defc5083-79e2-4d34-99ba-e7cf2604318c"
        },
        "item": {
          "id": "66db2d84-0dcb-4be9-8da7-334bbd876c33",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "76bcd3e0-69e8-49d6-8efc-e913d2f9d893",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 773,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "09328477-aa6a-4cab-9bb1-beeba1c4cb6e",
        "cursor": {
          "ref": "08f6710e-d3ba-4a29-8804-e9936cb35dab",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "1129a9ae-daac-4ce3-bb83-a39fbda7aaa1"
        },
        "item": {
          "id": "09328477-aa6a-4cab-9bb1-beeba1c4cb6e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "006b9843-c2ec-404a-a8e5-008362f94740",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 36,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "5de7ad61-0ea6-4e04-9a27-249bbecf8028",
        "cursor": {
          "ref": "84606e3d-65e4-4faa-8031-df3a2071af2a",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "3f487ec3-0a15-40f3-81a9-30974e67e0b0"
        },
        "item": {
          "id": "5de7ad61-0ea6-4e04-9a27-249bbecf8028",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "aef98d49-e4dc-4c1f-b367-285e36c76b51",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 772,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "5a76443b-6f3f-46f9-a313-f3739f5996a5",
        "cursor": {
          "ref": "ba209a3b-8f1d-4e7f-b466-b127b873e407",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "48ff95a1-9cd9-4fc5-86e5-934bb14804d6"
        },
        "item": {
          "id": "5a76443b-6f3f-46f9-a313-f3739f5996a5",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "fb00a5f4-b94e-4b8e-8b73-39936e937ac8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 39,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "e980c352-246d-404e-ae92-f253a10d935e",
        "cursor": {
          "ref": "9157bc50-290e-451f-a811-6702017d90b0",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "bd777760-0dab-4f02-b352-07c316cf0b64"
        },
        "item": {
          "id": "e980c352-246d-404e-ae92-f253a10d935e",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "e89d961c-0146-417e-96b2-ff3fa0246c5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2aea0bd2-00be-4165-af31-6d3aee2026e2",
        "cursor": {
          "ref": "ac5f1395-6339-47eb-9c38-2e4c6b2edc42",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "701c0d44-072b-4367-8b05-996b636f9d2b"
        },
        "item": {
          "id": "2aea0bd2-00be-4165-af31-6d3aee2026e2",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "2e44a199-4864-4fb8-92ee-7cc0e7e1f8e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1b2c1c9-9475-44e3-bf24-af46c2ceddfb",
        "cursor": {
          "ref": "0c1cea04-74ed-4e57-9877-0bcf3d76e367",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "03da3956-9e39-4df0-b3ce-152ec37465b7"
        },
        "item": {
          "id": "d1b2c1c9-9475-44e3-bf24-af46c2ceddfb",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "0f617e89-ac5a-42d3-a88e-efe7a06049a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d541c41b-bf62-4f94-bd89-9a6d0cf95478",
        "cursor": {
          "ref": "7aaf41af-c56a-4745-b59c-317ee6c66c3a",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "b350c264-6678-463d-93b3-f089dc4d4c26"
        },
        "item": {
          "id": "d541c41b-bf62-4f94-bd89-9a6d0cf95478",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "9f761f29-bd71-42f8-9b39-363513c7ed9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fdc7bbe-a6e5-4aa0-a982-c3f9009ae9fa",
        "cursor": {
          "ref": "c8cd6351-b0a0-4264-acdb-9b85f59b6534",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "798f9559-4075-43b4-8ccb-617da88ef927"
        },
        "item": {
          "id": "8fdc7bbe-a6e5-4aa0-a982-c3f9009ae9fa",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "9c48bef3-b44e-46a5-b0a9-f9ff59e074dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ddeeed3-9533-4643-86bc-dab5bb8580c2",
        "cursor": {
          "ref": "7057adcf-21b0-4f90-ab67-b9c86d49ce6c",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "38725c9a-082b-4849-b8a3-ccb53f09d0ee"
        },
        "item": {
          "id": "4ddeeed3-9533-4643-86bc-dab5bb8580c2",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "d19cbf0a-bfbd-40a3-8e71-f37598d304f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ca70db9-e508-4493-991d-e383de390924",
        "cursor": {
          "ref": "868526bf-4de0-4834-abbf-38d7368ac9d5",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "7d9e6ba3-c19e-4c74-a6e9-7e2d9c69956e"
        },
        "item": {
          "id": "9ca70db9-e508-4493-991d-e383de390924",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "265620f4-50eb-4801-9237-d532c33881a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4646d9a-839f-4ec3-8c72-a6fb888c0f1a",
        "cursor": {
          "ref": "902adff4-ae1f-44ff-9960-5516747a7592",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "41b8fa87-45a5-4864-805e-0d19bbbf7de0"
        },
        "item": {
          "id": "c4646d9a-839f-4ec3-8c72-a6fb888c0f1a",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "a7e832c7-9b93-4f42-8391-dca964eaea40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6c82b49-5f0a-4b61-bf88-7119f77a83b9",
        "cursor": {
          "ref": "1020b9dd-2f9e-436e-8058-279b83f75cf1",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "3dad571e-090a-40fa-9d7b-50c8800f4ac2"
        },
        "item": {
          "id": "a6c82b49-5f0a-4b61-bf88-7119f77a83b9",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "b46e1ac8-b28f-4255-8eb1-25567e31868b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee5fd1dc-5abd-4923-9343-ca518c2b6ec8",
        "cursor": {
          "ref": "c03fcae5-7f20-4115-a7a5-e890b196314e",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "7b765d4d-2567-4f45-bebd-9da723ceb515"
        },
        "item": {
          "id": "ee5fd1dc-5abd-4923-9343-ca518c2b6ec8",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "bc0ba22a-b589-4680-bd28-dae9892a8ad5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4881a43b-30c2-48e3-9855-c0b3094b54af",
        "cursor": {
          "ref": "79a2fa7f-f2a5-44ef-ab7e-038ccd68c5e7",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "ab3fa1f5-2dcb-427b-a5f0-b50a73649709"
        },
        "item": {
          "id": "4881a43b-30c2-48e3-9855-c0b3094b54af",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "0914c402-a063-4315-b657-03a20d75986f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fba9749-7025-49a9-928e-5e77bd1cbc3f",
        "cursor": {
          "ref": "515b1db8-4ae5-496b-a69f-9e5aa76a2d0e",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "4191fe84-ae42-44a7-b71d-4abc4dca5470"
        },
        "item": {
          "id": "3fba9749-7025-49a9-928e-5e77bd1cbc3f",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "52d4ca92-0bdd-443e-9cc8-522780e1c299",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77fb078c-1734-4e39-862f-b65fedc37c68",
        "cursor": {
          "ref": "f6b473ec-a669-4c3a-9798-b50d70abcd41",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "bc561a68-5e77-4e0b-a627-5fd5ef8db17d"
        },
        "item": {
          "id": "77fb078c-1734-4e39-862f-b65fedc37c68",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "98d9ce6e-d079-4357-a715-29feebe6994c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57f25be9-8737-40ff-815c-c4453285fe38",
        "cursor": {
          "ref": "e73b477a-9764-46b9-99d7-514d9d2c434c",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "5ad7800e-3769-4cd0-b0b8-87e66cd72422"
        },
        "item": {
          "id": "57f25be9-8737-40ff-815c-c4453285fe38",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "c1f552ba-6a25-43c2-af57-45768f780a93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08ad221c-b946-4fa9-8462-68116e0745c9",
        "cursor": {
          "ref": "91ac694e-6668-416f-99b9-8e459d02a757",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "77d7150f-3471-4936-93cc-46188cb9c8c9"
        },
        "item": {
          "id": "08ad221c-b946-4fa9-8462-68116e0745c9",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "2a157cb0-0f90-4695-8b7e-89f942ed2f97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "656da0f3-3672-4aa8-afc6-e4d826f02608",
        "cursor": {
          "ref": "4128784e-fb42-43fe-81f9-9bc4341139ab",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "b8e18e19-7e54-47c9-813d-57abb42a68b5"
        },
        "item": {
          "id": "656da0f3-3672-4aa8-afc6-e4d826f02608",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "1361f21e-5c29-4ec9-8801-42a9dd559380",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4ba60ef-75a9-4cea-a3de-e93ec224dd4c",
        "cursor": {
          "ref": "5f901b7c-cd60-4f50-9e7e-d3b4a8d48911",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "95d7af07-e8c2-4bb5-a016-a502fe9db701"
        },
        "item": {
          "id": "a4ba60ef-75a9-4cea-a3de-e93ec224dd4c",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "ef947411-4d68-4522-8262-6d2bcc8e070f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "575c71ce-afa7-469b-82bf-2674ff87fab3",
        "cursor": {
          "ref": "a501de63-73b5-41d7-8303-9e11223db311",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "3f2ecd9a-2a42-472a-b087-63db19467a52"
        },
        "item": {
          "id": "575c71ce-afa7-469b-82bf-2674ff87fab3",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "c986c2d8-1879-4c2d-9954-bd27e4e584dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9b3c8f2-e245-4e3c-acd5-ad660789c28d",
        "cursor": {
          "ref": "76c5ae1b-ec89-421d-9fb2-c65fff75eec4",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "f51d8b0c-6cc0-4d30-bc86-f176fc1d24df"
        },
        "item": {
          "id": "d9b3c8f2-e245-4e3c-acd5-ad660789c28d",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "2b132c20-1462-41ef-b90b-6d0401fda3a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c99a28ee-7d5b-4eb5-b6b1-809e7bb9d8bd",
        "cursor": {
          "ref": "fa4d0eef-501d-4be9-ad9b-a1354f73888a",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "ca717d32-558e-4036-bb10-9fdbbf4ee38c"
        },
        "item": {
          "id": "c99a28ee-7d5b-4eb5-b6b1-809e7bb9d8bd",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "af26d7c5-9d57-4ea0-95a4-547255d7e0b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14602544-1db7-433d-b7ef-cbd35198523f",
        "cursor": {
          "ref": "0b249c61-69f0-4851-bb4b-1dfa3ccd1862",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "ee1aa5fe-7ef8-42f6-a840-c893523262ad"
        },
        "item": {
          "id": "14602544-1db7-433d-b7ef-cbd35198523f",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "6a2b304f-b2db-41fb-b0a7-f0e7f28c24c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3313ea14-ccb6-4ba5-8de2-6d7bd8202348",
        "cursor": {
          "ref": "979604ed-1bc4-4734-93ae-bcefde0db5c9",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "38940092-08f4-4d35-854c-b7b0ba7a20e8"
        },
        "item": {
          "id": "3313ea14-ccb6-4ba5-8de2-6d7bd8202348",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "13dd39cb-1b61-40d1-90a2-dadce76967d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "148dda74-644b-434f-b50f-f6b78ae4a4c1",
        "cursor": {
          "ref": "e2aa3309-2baf-4242-b7e9-78158d630e74",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "121bd6f7-96b7-4c4e-9a4e-fb03a4039757"
        },
        "item": {
          "id": "148dda74-644b-434f-b50f-f6b78ae4a4c1",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "0c4438a8-b1cb-473f-97cd-e786d38f6f2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7284f722-3b7a-42e8-b9b9-d1ae486fe96b",
        "cursor": {
          "ref": "45565db9-5c43-468b-81a6-18c0004df141",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "9e7c00f7-38aa-4922-b26f-9f955f79e814"
        },
        "item": {
          "id": "7284f722-3b7a-42e8-b9b9-d1ae486fe96b",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "4aeff370-0c52-4520-9d77-0d47601b90e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91ad696f-67ee-4b0c-ba62-c53e3ab826e4",
        "cursor": {
          "ref": "f753f11d-1823-43ab-9d65-da14557ee716",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "0d877321-80c5-45a9-b3e6-71204b7bd514"
        },
        "item": {
          "id": "91ad696f-67ee-4b0c-ba62-c53e3ab826e4",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "a9860e61-5a6d-42f2-a1b1-3c71f27af459",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "196e57d5-0588-4e03-af85-cb347f2b499e",
        "cursor": {
          "ref": "ff08f3dd-f0d8-4f6b-91b2-acd6319f1463",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "b4018130-c967-40df-bba5-a5aca3cd17d6"
        },
        "item": {
          "id": "196e57d5-0588-4e03-af85-cb347f2b499e",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "c82c81a6-ab33-417a-a6e6-096cdd42a683",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a1d9d6c-1568-4bdc-a78e-c2403598adfd",
        "cursor": {
          "ref": "a6327830-2ad7-49d5-b2ed-c2dcf384a3d3",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "df72ab8c-5aa6-4af4-82b3-5210993780b3"
        },
        "item": {
          "id": "0a1d9d6c-1568-4bdc-a78e-c2403598adfd",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "c1bab359-f67c-4e98-bc3f-9420305dd07c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de6faa97-c226-4499-ac9e-8fc593c4c10c",
        "cursor": {
          "ref": "d648fcf1-b857-4e0b-a1dd-766d6cf881da",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "b17c1cc3-46ce-4fcf-988a-d1e25ed029ae"
        },
        "item": {
          "id": "de6faa97-c226-4499-ac9e-8fc593c4c10c",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "bc153c65-96ae-4806-9ab4-431e6a29f262",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e1fca6c-5bca-40bc-a7ef-659c982be753",
        "cursor": {
          "ref": "2a06ebf6-f9de-40e8-be7b-115a46b88957",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "f2c5f61f-7c9d-4700-bcc2-e7b860c31a59"
        },
        "item": {
          "id": "1e1fca6c-5bca-40bc-a7ef-659c982be753",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "69eee0e1-6e22-49ac-8f7a-c0ebf9fc7091",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da1a1716-dc21-47e3-91e4-0e58bbedcea9",
        "cursor": {
          "ref": "dfd988a5-9a05-4473-933e-92227c6c944a",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "74b195ac-4176-4267-8100-2253b90607e1"
        },
        "item": {
          "id": "da1a1716-dc21-47e3-91e4-0e58bbedcea9",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "c189253a-b5c4-4444-9e78-4656a39c7668",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee536590-1d29-41f9-8a63-d32b27be0950",
        "cursor": {
          "ref": "d325f14b-092e-4d15-8e39-8d85c1d88de0",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "5379ed8c-26a9-46dc-b55f-4d08ac9c456a"
        },
        "item": {
          "id": "ee536590-1d29-41f9-8a63-d32b27be0950",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "f8628143-0d7b-4be4-ae63-17fd0d9bc7e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0321951-7595-44c2-a258-9e2b5a913d78",
        "cursor": {
          "ref": "aa78f957-78d7-4a1a-9054-a29ba8ffed0b",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "0468599d-3634-4bdb-8a61-e193e1733cd9"
        },
        "item": {
          "id": "d0321951-7595-44c2-a258-9e2b5a913d78",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "51139011-0e11-463b-8329-d07a38ab1ea9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e0b1830-39d3-449b-b993-5d0b1e8264d8",
        "cursor": {
          "ref": "c4287382-39f6-4641-b0e6-ffc463c6c2fe",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "50bbcfe9-236c-4bb8-87c4-5adc137a5d95"
        },
        "item": {
          "id": "6e0b1830-39d3-449b-b993-5d0b1e8264d8",
          "name": "credentials_issue"
        },
        "response": {
          "id": "9b590cb8-a7dd-41cc-a136-d170c4aa071d",
          "status": "Created",
          "code": 201,
          "responseTime": 1512,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8e59b0a-f3dd-4018-aa5a-f2c933922081",
        "cursor": {
          "ref": "6250757c-963a-4559-bc6f-f40f81d11d97",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "0a871543-d934-44e4-bccd-d09641116766"
        },
        "item": {
          "id": "f8e59b0a-f3dd-4018-aa5a-f2c933922081",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "b7d99b90-bfd6-4953-82fd-388ac3c5fcef",
          "status": "Created",
          "code": 201,
          "responseTime": 961,
          "responseSize": 714
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb561b9e-268e-4e64-ace1-d55f4c138d93",
        "cursor": {
          "ref": "55567f14-0149-4b56-8fa3-17647bb88169",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "9a0b590d-a344-4d92-918a-df780e091618"
        },
        "item": {
          "id": "bb561b9e-268e-4e64-ace1-d55f4c138d93",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "cea114f6-90a1-433d-9fbf-913b5e3c94be",
          "status": "Created",
          "code": 201,
          "responseTime": 1012,
          "responseSize": 767
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5899eb3-5e1f-4521-8b47-0a57a1c13a7d",
        "cursor": {
          "ref": "c9be195d-9759-4a87-9608-9a266666b382",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "18c75ae0-c5b1-410a-a87e-d951cb90f86f"
        },
        "item": {
          "id": "e5899eb3-5e1f-4521-8b47-0a57a1c13a7d",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "cc39ac71-2af1-4d89-af67-c4e0167d7e0b",
          "status": "Created",
          "code": 201,
          "responseTime": 990,
          "responseSize": 771
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "978decfd-0f09-4269-a463-c92e86f98727",
        "cursor": {
          "ref": "7e898544-ba06-4ef8-b96f-27e96be2515a",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "5a8ca93e-d641-48dc-bffd-ed0e96e79f85"
        },
        "item": {
          "id": "978decfd-0f09-4269-a463-c92e86f98727",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "831b7165-de38-4479-8d10-b44a08cdbf8f",
          "status": "Created",
          "code": 201,
          "responseTime": 1017,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "57dbcff4-e072-4787-8a64-fef2dda7dc5c",
        "cursor": {
          "ref": "b044f93a-eda8-400b-ab30-624843c0a953",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "b5d1be0c-6f07-417c-9b7a-3a1dd2205e58"
        },
        "item": {
          "id": "57dbcff4-e072-4787-8a64-fef2dda7dc5c",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "1200c22e-b95d-4c08-a1d4-5fe1a1186f8f",
          "status": "Created",
          "code": 201,
          "responseTime": 1025,
          "responseSize": 1093
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eafc73d7-6107-46a4-89b1-097d51a211ac",
        "cursor": {
          "ref": "95bfd487-e781-4745-946f-55925ef80796",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "d0c3d140-7bb1-45c7-a2d6-dae3efdc7ff5"
        },
        "item": {
          "id": "eafc73d7-6107-46a4-89b1-097d51a211ac",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "a0063b77-bfa7-498e-8f39-71a784b4f9ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07bee241-38d9-4c5f-8a92-2047e55722f6",
        "cursor": {
          "ref": "e0787185-9e72-47ee-ad69-03f44028fff9",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "ad3e2259-e580-447d-9b24-44e21c08e0b8"
        },
        "item": {
          "id": "07bee241-38d9-4c5f-8a92-2047e55722f6",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "603f8a23-7fb3-4d9b-bd28-20a0bcb4b4e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8fbcd14-8328-4277-a18e-421ea07de2df",
        "cursor": {
          "ref": "7b4e5e28-b670-491c-916c-f13a2bdfbdbf",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "2cf4cd85-4bf3-40f8-8307-f27afca4a4da"
        },
        "item": {
          "id": "d8fbcd14-8328-4277-a18e-421ea07de2df",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "1a4a2cab-2942-4fa7-a74b-49a3e710bf09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5df12f4a-1b50-445e-9d39-f388e8a67d0a",
        "cursor": {
          "ref": "27053014-8229-4851-a788-caded966babc",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "77e360a0-8908-43df-999f-46852e2b0695"
        },
        "item": {
          "id": "5df12f4a-1b50-445e-9d39-f388e8a67d0a",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "0b8ef5b3-6f93-44f9-b434-2c2eb3b3390b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62ef4f3a-20b9-4c27-ad5b-7b2b08108833",
        "cursor": {
          "ref": "c8fba259-4d40-4fb5-b5ca-86d07b6dcee7",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "a6dad79f-844d-4f7f-8986-224538857e45"
        },
        "item": {
          "id": "62ef4f3a-20b9-4c27-ad5b-7b2b08108833",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "34bfbe7c-c7fd-4b07-b396-a0d50350ff54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68c75729-e136-4fe7-ad58-912b9ae0f7fc",
        "cursor": {
          "ref": "7df5c930-c18c-42a3-a401-e2fa5ddd3c92",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "627c0463-a0e1-4b0b-82cb-9a9c8c4b304d"
        },
        "item": {
          "id": "68c75729-e136-4fe7-ad58-912b9ae0f7fc",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "4d37595c-7862-466c-a3b5-279434649651",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c53a6af-f989-4e12-8517-1aa34b4978e7",
        "cursor": {
          "ref": "5e59ca42-c9c9-470d-bad2-6d4f5b4928bf",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "bbacb589-102d-4915-af21-81f20e190b90"
        },
        "item": {
          "id": "2c53a6af-f989-4e12-8517-1aa34b4978e7",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "b783d91c-e092-4119-8594-caf4506c02c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f78f9838-f40c-4613-8c55-8c952e4eb4ff",
        "cursor": {
          "ref": "17f8932e-5bb2-42ee-87e4-e982dac55f76",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "ce95f4f7-8182-4e1d-a093-4fcef84a9c4c"
        },
        "item": {
          "id": "f78f9838-f40c-4613-8c55-8c952e4eb4ff",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "d2bfde0e-b7d9-4e17-9fca-d113e8427d1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30efe0fc-b333-4eb5-8fb2-fddb20c3a214",
        "cursor": {
          "ref": "d1651455-4eff-499a-9b11-b7a779f0cd06",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "170e19e9-470d-4f4d-87f6-a21ef9dae219"
        },
        "item": {
          "id": "30efe0fc-b333-4eb5-8fb2-fddb20c3a214",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "c01e6cd9-1c13-4046-b425-7c1697e80a86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab86dc6a-fb28-4590-9f40-61a7ab37d6ac",
        "cursor": {
          "ref": "43c0a15b-7966-4e88-a86d-799b6341693e",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "f86021cf-9a6b-4075-b3c1-50fa11f1178c"
        },
        "item": {
          "id": "ab86dc6a-fb28-4590-9f40-61a7ab37d6ac",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "87e5dcf9-0791-4cdf-9756-6f4b6ecade0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf3fc138-fe99-4c66-bfb8-c260b995b7d5",
        "cursor": {
          "ref": "05db9624-7c37-4899-b929-e8715ab19558",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "5138e766-67fc-489e-9f85-fe874a3badfa"
        },
        "item": {
          "id": "cf3fc138-fe99-4c66-bfb8-c260b995b7d5",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "6862f24a-0bf6-4caa-81c2-8ec6d6b6c67a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b98c6dc-3a15-493c-a9e0-73509f709aae",
        "cursor": {
          "ref": "886af5d7-9508-4364-ac25-a798ac80fe9c",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "642e7fda-09be-4ab5-bd26-e2abf0740571"
        },
        "item": {
          "id": "3b98c6dc-3a15-493c-a9e0-73509f709aae",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "d0e7a5cb-214c-4f65-9ca7-e5fe76ac4e02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3d46c10-eeb5-45c9-a1bb-1199e593b5f4",
        "cursor": {
          "ref": "2820c42c-1c78-471c-b0c2-f04b0f191227",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "ab06812c-1521-4e55-a9b0-d9033da20f2b"
        },
        "item": {
          "id": "b3d46c10-eeb5-45c9-a1bb-1199e593b5f4",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "2eaee100-4cae-4452-9110-01302aee6a7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a9041aa-5439-4f40-aa27-4e69dfbaa616",
        "cursor": {
          "ref": "0ee6e7e8-553a-4d98-b46c-969a4cc70422",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "bde3ec03-dee6-4026-a406-1ee8d42f801b"
        },
        "item": {
          "id": "4a9041aa-5439-4f40-aa27-4e69dfbaa616",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "5dfb992e-fcc1-4d9c-9f0b-90e00c5eefdb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81c6a4f7-9997-44bd-bcc0-feae1abcdbb2",
        "cursor": {
          "ref": "0bf792e7-5145-4153-9879-36c13833287d",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "1e40a7e7-88d2-4c6a-93cc-225208a919c0"
        },
        "item": {
          "id": "81c6a4f7-9997-44bd-bcc0-feae1abcdbb2",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "f181dd0a-6874-48ca-b0a6-603646fd412d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0efc3492-7aa3-4554-83af-ed4a71c78b8d",
        "cursor": {
          "ref": "8bbe8b84-aa2c-4197-824a-941ae3a30065",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "cdf8b59e-dcf2-4ac6-b098-0b396d1b83b2"
        },
        "item": {
          "id": "0efc3492-7aa3-4554-83af-ed4a71c78b8d",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "e9560555-25fe-4f2c-b5f1-31212761c7fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cfbaab9-9141-4dc9-93c8-9984434ee2a4",
        "cursor": {
          "ref": "5946321a-9a94-41fc-ba3c-d5242bfa862a",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "3304a957-a4bf-46bd-b617-2bee58fc44bf"
        },
        "item": {
          "id": "1cfbaab9-9141-4dc9-93c8-9984434ee2a4",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "5bdfe5c2-879f-4e4d-b5e1-3a3e3dc834ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c31ce84c-fbdb-4de9-bb08-c1a556ac311f",
        "cursor": {
          "ref": "c1473101-bdd1-42e8-bd04-6ea69bc019ff",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "5672d5cd-dc9f-497b-9f47-dc062eb16cc4"
        },
        "item": {
          "id": "c31ce84c-fbdb-4de9-bb08-c1a556ac311f",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "843dd43e-ebc3-4abc-8fec-8595b13d2732",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f55ad93f-c946-4019-9a43-e3682f0d12d6",
        "cursor": {
          "ref": "b6a88a38-7fb6-415d-ace6-dd45d798736d",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "90463a43-efec-4282-854a-cc900e916c7e"
        },
        "item": {
          "id": "f55ad93f-c946-4019-9a43-e3682f0d12d6",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "77dd1b83-7c18-4f2d-b275-c4a5b99436e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfd4ae39-4bd9-4cfc-90d7-5604eb5fe762",
        "cursor": {
          "ref": "f60747a6-a3dc-4c91-b17c-0f6914f6dd90",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "340be84d-44b0-48a3-8e34-080d66aecd2b"
        },
        "item": {
          "id": "dfd4ae39-4bd9-4cfc-90d7-5604eb5fe762",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "74873ead-87c1-4270-8095-3f2cf46cef55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21707f2d-b439-4432-af5e-6442377a25b5",
        "cursor": {
          "ref": "428eb9cb-1359-425b-82c9-d669ff100b31",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "1169f9c8-e793-423c-a64c-526b250d4920"
        },
        "item": {
          "id": "21707f2d-b439-4432-af5e-6442377a25b5",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "eb797fc1-b792-4585-9347-c7cd58537d71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bd1583e-1a92-40be-b9c2-25efc2072e15",
        "cursor": {
          "ref": "9b860b8c-9482-4500-91e5-e23bd39651ed",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "197282de-9be9-4324-9cf5-cf537beefe6a"
        },
        "item": {
          "id": "1bd1583e-1a92-40be-b9c2-25efc2072e15",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "9520fdd9-134c-4026-8b21-87b8fd868fdd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59087adc-e441-4092-a416-b36ef8ed6077",
        "cursor": {
          "ref": "8d6e9339-5aaa-4037-a7a3-eb74d3e9cc7c",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "3f6a1062-bad1-4f82-90e5-9b7a63052740"
        },
        "item": {
          "id": "59087adc-e441-4092-a416-b36ef8ed6077",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "6c706364-9d03-485b-85e9-6ecec1251340",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e48efd1-d92c-43ed-a9d6-a689d6100aeb",
        "cursor": {
          "ref": "a5de2816-d539-4ed1-a585-e5f4e90feb56",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "304b213c-b1cf-47e0-ae6c-f2a07b410798"
        },
        "item": {
          "id": "5e48efd1-d92c-43ed-a9d6-a689d6100aeb",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "5fd0c083-b8e6-477b-a08e-587cca7cd85e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9861d30-eb1b-4572-b2a4-d672ba753c62",
        "cursor": {
          "ref": "882ba539-3884-4f4e-94a7-4bc2d572a136",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "525517d2-d6bb-4128-8893-9c4e859f2af0"
        },
        "item": {
          "id": "d9861d30-eb1b-4572-b2a4-d672ba753c62",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "23e950d5-1a04-4916-99eb-ed178c2f082d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c0e5e95-ddbf-47df-9170-7660c02394dd",
        "cursor": {
          "ref": "dbb1d23f-db43-490c-b845-d8bc2f6f40a0",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "fbed91ef-6c1e-4f13-b306-ff76964ce51f"
        },
        "item": {
          "id": "7c0e5e95-ddbf-47df-9170-7660c02394dd",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "1240f0d8-0923-46a7-9454-05740f5d3434",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9b77764-9efa-4a84-81ac-0bc0f78dc9b9",
        "cursor": {
          "ref": "e032bb3b-2463-4f0f-b18a-0d53c53981b5",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "732f4e52-2d1d-4723-91ca-e1552b4c58a7"
        },
        "item": {
          "id": "b9b77764-9efa-4a84-81ac-0bc0f78dc9b9",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "f2dc1f9d-2bd5-4212-b8e1-19d6d42fb5f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc553dbe-24f5-4c4e-968f-063aac287b6e",
        "cursor": {
          "ref": "286e2b63-66ec-4610-a0d0-114bf6389edc",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "59b3e596-563a-48ad-852b-9c1fc3285eab"
        },
        "item": {
          "id": "dc553dbe-24f5-4c4e-968f-063aac287b6e",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "127d2b15-9c91-4309-bc1f-a41721d1f2fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "814cf865-9f7f-44d5-82f3-d546666e312a",
        "cursor": {
          "ref": "95e66cfb-9520-4b99-9f88-4dbeb4b27655",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "12d3901d-9253-4935-9a71-b1dcfe7b4d3e"
        },
        "item": {
          "id": "814cf865-9f7f-44d5-82f3-d546666e312a",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "18f741c9-6c8e-4629-99c7-2b7f4b302a77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4279379-465a-4c1b-95ec-8dc5ff34f5d2",
        "cursor": {
          "ref": "8f3c40c8-b251-46d3-9909-7274a24c3c0f",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "28c436c0-3938-4a9f-8901-b0cd4263b701"
        },
        "item": {
          "id": "c4279379-465a-4c1b-95ec-8dc5ff34f5d2",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "712db3b1-1360-4367-af9b-58ede1bf704f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9245aa54-b255-48a9-8b66-42e756a8b55d",
        "cursor": {
          "ref": "792d6d98-b1cf-477f-a6d8-96e3f93b9bc2",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "d10697f1-a725-4be6-9ccc-7c08d856465b"
        },
        "item": {
          "id": "9245aa54-b255-48a9-8b66-42e756a8b55d",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "ee9c80ff-d6ff-45cc-9238-3c152590e0b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90365768-1729-45e8-98d2-4e83b1b36df5",
        "cursor": {
          "ref": "d254edc1-d9f9-4757-8484-33e792291245",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "d5c7715f-94ff-459b-93f2-225cf9a99370"
        },
        "item": {
          "id": "90365768-1729-45e8-98d2-4e83b1b36df5",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "c54adfa9-efb4-494e-b390-2459364d9958",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f184a886-6eb5-4677-9f53-50b3c7223bf9",
        "cursor": {
          "ref": "2eb2ee5b-403a-4755-b525-25954cc3dcb9",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "b776bf7e-54d7-4510-a8ad-865bab556583"
        },
        "item": {
          "id": "f184a886-6eb5-4677-9f53-50b3c7223bf9",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "e85d8067-082b-44c7-b0da-9d97a1ccd6cc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bd6e757-56ec-49a5-9675-3e98e15822f4",
        "cursor": {
          "ref": "44c8437d-9988-447f-8091-b7a681c7b107",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "34710ad1-75d0-4452-9274-f37726443786"
        },
        "item": {
          "id": "8bd6e757-56ec-49a5-9675-3e98e15822f4",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "211e7aa0-2fd0-4be4-af90-fac64cb9a20b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45b41fed-f79e-4011-9db2-9ba9d0a3b1c3",
        "cursor": {
          "ref": "29a67b47-8d7f-4bf2-b9c3-6b3118fa06f2",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "94175092-32a0-4ca9-85f1-a6ee18447e4d"
        },
        "item": {
          "id": "45b41fed-f79e-4011-9db2-9ba9d0a3b1c3",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "1382fbdd-850a-45b3-8c43-2c409577656c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcd27709-8529-4ca6-a2da-9a7a2f45514c",
        "cursor": {
          "ref": "de6f964d-2701-4059-a5d9-5b31af36f45e",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "f496c168-0a1e-4b63-bd55-87744f838475"
        },
        "item": {
          "id": "bcd27709-8529-4ca6-a2da-9a7a2f45514c",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "40797518-3bbe-47b8-9667-fda1f6b07917",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f96c84a-7e58-40ac-9d5e-32446e1aefe7",
        "cursor": {
          "ref": "f5c07e2d-93f2-4c88-a736-256eea297110",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "4dbd4599-ea45-48b2-ae48-119cf27340fa"
        },
        "item": {
          "id": "5f96c84a-7e58-40ac-9d5e-32446e1aefe7",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "e3232fe5-12c4-4848-b21e-954868369604",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1773617f-1360-446f-800e-0cd08c026fc2",
        "cursor": {
          "ref": "9af08b45-f6c0-4510-bdee-94fa202a73a2",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "0935949f-a31c-4839-b77b-9d3f380a99b3"
        },
        "item": {
          "id": "1773617f-1360-446f-800e-0cd08c026fc2",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "291f7c64-5ba7-4e03-acf6-bc2bf890bad5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e449053f-2f98-46ab-96dc-ac00b63c47cc",
        "cursor": {
          "ref": "4c1b9074-a294-4728-8af5-89edcf6d24f7",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "71294f96-a83b-4f75-9252-289fb60d387d"
        },
        "item": {
          "id": "e449053f-2f98-46ab-96dc-ac00b63c47cc",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "40ee19e0-e076-4244-abaa-9edfdfff7e8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c89e989-e5ec-489a-ad20-d1f34fa23fe4",
        "cursor": {
          "ref": "cf5a3c66-eb24-49a9-85e5-04a32e00c20c",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "6f32cb6a-f70f-498d-af21-c4a26dad0d51"
        },
        "item": {
          "id": "0c89e989-e5ec-489a-ad20-d1f34fa23fe4",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "db0b58cb-a498-4e82-acab-95a0f9fdc987",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49f09787-1e2d-49a9-b822-c7483e16bacb",
        "cursor": {
          "ref": "cdf1e7c2-f0fa-4e3c-b22b-a2fe5f3a4968",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "43744b4b-6239-4c33-9852-1408c7a7a872"
        },
        "item": {
          "id": "49f09787-1e2d-49a9-b822-c7483e16bacb",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "7472a1d0-cb46-409d-a6da-0bb8b6e2a970",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ed8f44b-045a-418b-b704-abb1e4ade589",
        "cursor": {
          "ref": "65ca114c-2592-4f64-9938-8f0f57c5ae27",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "0a700790-901b-4d4b-b24e-3593d955292a"
        },
        "item": {
          "id": "5ed8f44b-045a-418b-b704-abb1e4ade589",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "4a3c4a14-8562-4444-84dd-91b84579f95a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fb547c9-0a33-4e91-8bc1-41c5096a75a3",
        "cursor": {
          "ref": "41a63864-6d73-4337-9715-3dd6d1266f37",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "992e75ea-97d4-4afe-b6ac-57ec3ca5b3ed"
        },
        "item": {
          "id": "7fb547c9-0a33-4e91-8bc1-41c5096a75a3",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "93d2e6fb-e472-4d3c-8ea5-08032d681c24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10e06bfb-2cf1-4b7d-b2a4-149658edb4a5",
        "cursor": {
          "ref": "520829aa-f0a6-45d0-ab1a-1801ea5c12a8",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "e0c0d693-847e-49af-8d91-ce59b0f7e907"
        },
        "item": {
          "id": "10e06bfb-2cf1-4b7d-b2a4-149658edb4a5",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "eeff1cbd-3144-4aef-94bd-5065be5d29ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "002cfcfe-91c3-4683-b420-7a8279228944",
        "cursor": {
          "ref": "8af1989b-e7d9-4a73-9cbe-88587f5e92f6",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "e270bc81-710b-4026-a92f-3f2824437acd"
        },
        "item": {
          "id": "002cfcfe-91c3-4683-b420-7a8279228944",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "bc6938cb-9ca8-45f1-bbfa-6ce3cc513a08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9625fbe3-9a2d-44b0-81fd-51656a78524c",
        "cursor": {
          "ref": "f8e181ca-a469-413c-afe0-316bf955b5d6",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "9d4ca847-ce5e-48ac-8bb4-f35249f8dc74"
        },
        "item": {
          "id": "9625fbe3-9a2d-44b0-81fd-51656a78524c",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "9eb86266-d799-4512-a2de-979d9a1a76cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29957eb5-db35-4230-af07-7b232a2abcb6",
        "cursor": {
          "ref": "9777ba20-6669-4cd6-967e-4e1710406ae3",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "35df318d-0702-44d8-91f3-4c880aed12a4"
        },
        "item": {
          "id": "29957eb5-db35-4230-af07-7b232a2abcb6",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "7923ed18-cd37-4dc4-83d3-dde20bb9901d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a95b29d-95c5-4efa-99eb-ee35df5a516c",
        "cursor": {
          "ref": "8489e5f8-19bf-4d29-b10c-e98d3433d715",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "938541bf-fa60-49f2-a6a1-a39a08fc6864"
        },
        "item": {
          "id": "8a95b29d-95c5-4efa-99eb-ee35df5a516c",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "aa6b7cdf-ebb0-42f9-85d1-b0363bae148d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9be844b8-5465-45e1-bdd9-8abd42247719",
        "cursor": {
          "ref": "4478f7ec-9598-4531-8168-f14e8a702c2b",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "9227e890-97eb-4a98-be1a-e670d572c579"
        },
        "item": {
          "id": "9be844b8-5465-45e1-bdd9-8abd42247719",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "cdd680cb-6cba-4fb6-bbb0-316c16487c20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6ea62bc-a3dc-4b61-8a80-f4b323189b01",
        "cursor": {
          "ref": "6be3f4a5-780a-44df-81a7-01e2d5bb3f1e",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "91daa94c-398b-4db0-b508-d4566e235a00"
        },
        "item": {
          "id": "c6ea62bc-a3dc-4b61-8a80-f4b323189b01",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "f695108a-1e2d-4f76-8790-8728f0856e84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1393fbda-133f-46f7-9d88-c2e7ddf55a60",
        "cursor": {
          "ref": "7b4b02d2-306b-47f7-a04f-8cf06b105d42",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "4be1e2af-8839-4b89-97e5-a3a24c0511f7"
        },
        "item": {
          "id": "1393fbda-133f-46f7-9d88-c2e7ddf55a60",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "aabdedc2-c91c-47dc-a211-448e1aefca57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87769882-1389-461e-99d1-64e307b84b2a",
        "cursor": {
          "ref": "74fce1ad-5246-4646-b4ef-01d5f973647d",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "0060402c-ee72-4995-8892-b07f17c3b976"
        },
        "item": {
          "id": "87769882-1389-461e-99d1-64e307b84b2a",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "68c0e837-3612-4cb4-984d-9655ef843fc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49ecb71a-f539-45df-8a17-f6263ab58be2",
        "cursor": {
          "ref": "ba33d208-e119-4cdf-a565-887e206ac350",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "d62aa801-7925-4baa-9366-52e33a2c5e98"
        },
        "item": {
          "id": "49ecb71a-f539-45df-8a17-f6263ab58be2",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "ef626dbd-7200-444c-83dc-aafa4b33eab3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "913c3e32-dbb9-4831-961c-7cfd4e5b2095",
        "cursor": {
          "ref": "7228009b-8b4b-4c74-8a82-2c1eb1eb3212",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "ab470df5-c6ab-4bff-bbc4-9b55627b7fb7"
        },
        "item": {
          "id": "913c3e32-dbb9-4831-961c-7cfd4e5b2095",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "915b3ae0-77af-40b6-aee6-2ba980cf06ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bc1dffe-fa09-401e-8908-d4da29ec1961",
        "cursor": {
          "ref": "b7759a6c-3cda-457d-a4f4-3678c16160b5",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "ad71801f-a87e-44ef-b92d-40b3ae9ed93b"
        },
        "item": {
          "id": "5bc1dffe-fa09-401e-8908-d4da29ec1961",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "600b0bc0-06a7-4ce0-a7bd-e6f09dbad2d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01391cbc-3221-4386-a5b9-a1eecd57a599",
        "cursor": {
          "ref": "29fcd783-3418-457c-b112-ac25473159cf",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "cf1ecd73-e362-4eb2-9cd0-832c9948693f"
        },
        "item": {
          "id": "01391cbc-3221-4386-a5b9-a1eecd57a599",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "c000abb6-1043-436c-8ee9-af700d504385",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52e714ad-b579-4f6c-9a2b-dc67aed80ea6",
        "cursor": {
          "ref": "d47a9c25-f2e6-4b6f-95c7-3de57f09a013",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "846fcc08-ac79-4c83-af3e-6ac5ba771713"
        },
        "item": {
          "id": "52e714ad-b579-4f6c-9a2b-dc67aed80ea6",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "de341ab9-c2f5-43f9-bc5c-7a8d933294f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e51c2fd-e471-48ec-bcb5-3fbd3e789e31",
        "cursor": {
          "ref": "4fba7dfb-59e8-4ba9-839a-25bb1bf557ee",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "6f9b1d60-e8d4-4fdd-b68a-247172b76283"
        },
        "item": {
          "id": "3e51c2fd-e471-48ec-bcb5-3fbd3e789e31",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "b867a78e-5397-42ad-b020-e38043b38cba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e54f7903-98f6-4232-9356-649ab8c98d2b",
        "cursor": {
          "ref": "652f4d5d-1059-42ae-80c4-d4ddc0f4f9dc",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "b58b913d-2e36-4d3f-adba-30f225895dee"
        },
        "item": {
          "id": "e54f7903-98f6-4232-9356-649ab8c98d2b",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "407b3100-cff5-4fe9-88d8-19ad5a9c64bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "334d12c5-e3d4-4b1e-b14f-773110e86c6a",
        "cursor": {
          "ref": "d7cdda66-3129-439f-a9a9-456f4e5d0f67",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "0511690e-2a44-431a-ab05-d049b35afa6e"
        },
        "item": {
          "id": "334d12c5-e3d4-4b1e-b14f-773110e86c6a",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "789ecf92-cc81-481e-a68e-8d9d959df351",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce251913-5ea6-4984-9e5f-99fad7961f39",
        "cursor": {
          "ref": "7b4481c8-7df7-4f23-b36e-56e96a3f1afa",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "ca32399d-e462-4045-b67f-79da7826a2a2"
        },
        "item": {
          "id": "ce251913-5ea6-4984-9e5f-99fad7961f39",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "5d3d0508-4317-44b3-adfa-0ce575102ecb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e55fd08-cabc-44ba-93ba-a081aac5bc3e",
        "cursor": {
          "ref": "ce171443-bf24-4d51-b3ef-4b94248f507f",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "38f6ac16-219a-45e2-8916-c1159a6f8309"
        },
        "item": {
          "id": "2e55fd08-cabc-44ba-93ba-a081aac5bc3e",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "2ec29b73-8625-4b90-b31b-390364fb60e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d620e9af-d9f1-4aea-a925-bb6d880d25f9",
        "cursor": {
          "ref": "d65537b1-c17f-4f43-8978-ddd786d7e682",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "268499c7-174a-4aac-bb43-1430ff91d390"
        },
        "item": {
          "id": "d620e9af-d9f1-4aea-a925-bb6d880d25f9",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "c42d628d-3650-4bf2-afde-f7b5498b511d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a9bdf50-5904-4bcc-bb8e-92effd0265e9",
        "cursor": {
          "ref": "b9ed9fd8-5579-482e-9fbf-ef009c0224e9",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "22406eb2-080c-4e0a-9f9b-9de88c5b91c5"
        },
        "item": {
          "id": "6a9bdf50-5904-4bcc-bb8e-92effd0265e9",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "db79c26d-57c2-4038-ac5f-d23709689ad1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a65f9e0c-406b-43af-8c35-74066065c7dc",
        "cursor": {
          "ref": "2f32b033-837d-4230-b757-cea745dea88f",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "6c787711-1fc5-4167-8e40-08a019364602"
        },
        "item": {
          "id": "a65f9e0c-406b-43af-8c35-74066065c7dc",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "670c1ca1-c59f-4072-bfe8-8b84e9ed2a1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c459337-5d7d-41ed-9456-a25318daed9e",
        "cursor": {
          "ref": "3eae39f0-62bb-4cda-908e-f990661a10a5",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "fead58ba-ace1-41c5-a094-f591f8e58db9"
        },
        "item": {
          "id": "1c459337-5d7d-41ed-9456-a25318daed9e",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "463f8a43-eb44-471e-84dc-3754976822c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "497d0808-f0ba-42d6-8e45-c2ced70aaf73",
        "cursor": {
          "ref": "ddae97a9-6db4-4d9f-a25b-4c195787db36",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "4a8459dd-68a2-438d-8b02-6d58200fcef8"
        },
        "item": {
          "id": "497d0808-f0ba-42d6-8e45-c2ced70aaf73",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "6a0ed56c-d152-4941-88ac-5dddac299ac1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b450029-b309-4f8d-8652-6aea40c09f57",
        "cursor": {
          "ref": "b2620516-2dcb-4125-b56d-5761f3088742",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "61e4e29f-4c0b-4024-a61a-be4cb91df7ef"
        },
        "item": {
          "id": "5b450029-b309-4f8d-8652-6aea40c09f57",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "61307c86-2e2a-4110-a7d8-d6ce93b79f69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6e0636b-9267-454a-af92-980403529f9b",
        "cursor": {
          "ref": "ce3e10ac-70a9-4a99-bca6-55e1eefef7ee",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "d340ccac-f78b-442a-997f-a35b3ae99aa9"
        },
        "item": {
          "id": "e6e0636b-9267-454a-af92-980403529f9b",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "92ef633f-6a93-4fb5-b3f1-80af01fe5bcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9e5ec51-2a6f-4bdc-bbd2-258d42f35cd8",
        "cursor": {
          "ref": "895f0eda-4450-413c-b3b1-9c554ce792c4",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "8c704753-60de-41aa-934a-8bfe1dd5b189"
        },
        "item": {
          "id": "b9e5ec51-2a6f-4bdc-bbd2-258d42f35cd8",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "6afcca4c-cb5f-43aa-ad53-4ebffa4acc99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f12e45c4-d10d-4361-8145-e38fa8f667f3",
        "cursor": {
          "ref": "320798f1-fdb3-400e-87a9-5388f45bce6b",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "4544cfb7-15fb-4d1f-9d57-27c2ee788554"
        },
        "item": {
          "id": "f12e45c4-d10d-4361-8145-e38fa8f667f3",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "9d3dbdb6-d730-4eb5-ae20-43fea53989e3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4066fde-61aa-459b-a5bc-a873b9f6f20a",
        "cursor": {
          "ref": "24ee1aa6-32e7-4f91-9d92-1a9303be3fae",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "f0cde678-5e31-4d19-9d32-e246a6b34030"
        },
        "item": {
          "id": "b4066fde-61aa-459b-a5bc-a873b9f6f20a",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "500d484d-beaa-499f-aa7d-7b30df637c01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22c10ab9-c050-481a-8598-c7e507030ba4",
        "cursor": {
          "ref": "0b3b59af-bb74-4000-a0fb-7bbcf3cc9965",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "55f20550-335f-44ac-938f-248f9a839cdc"
        },
        "item": {
          "id": "22c10ab9-c050-481a-8598-c7e507030ba4",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "ce662bd4-1b94-468f-a661-2c990d7ed193",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b237b08b-b6b0-471c-b10c-faac76b16d26",
        "cursor": {
          "ref": "31c18688-0af1-4827-b025-2c4f4dea270d",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "c0a2fbef-3ecf-4d42-bcb3-369f4d1470aa"
        },
        "item": {
          "id": "b237b08b-b6b0-471c-b10c-faac76b16d26",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "562e40cc-80b8-4ac1-9ff1-ca0d34b55a11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ba779ef-fe76-4756-93fb-d238342a0eaa",
        "cursor": {
          "ref": "9749b69d-8a37-44a0-a95f-198dd6c139b6",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "dd85c754-fb13-4a9f-994d-d13338083feb"
        },
        "item": {
          "id": "9ba779ef-fe76-4756-93fb-d238342a0eaa",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "ab33125e-9a78-499b-84e1-57c402238b77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7faeca37-be83-42b6-bad6-3a244a0c6627",
        "cursor": {
          "ref": "e82d4f01-2844-4f37-8166-8975c5fe70a0",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "c31de85f-4a4f-49cd-b2a0-75a1300bd3bb"
        },
        "item": {
          "id": "7faeca37-be83-42b6-bad6-3a244a0c6627",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "6f9ac3a7-5b0c-465b-9059-b9985beb08e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "319adfb0-be64-476f-89dd-825aba409e0d",
        "cursor": {
          "ref": "6989e0c0-83ae-463c-983b-1f4c355b3790",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "55aab8dd-5cbf-4976-a5ee-a54b6d8f732c"
        },
        "item": {
          "id": "319adfb0-be64-476f-89dd-825aba409e0d",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "559d1dbf-91ca-48c3-ae0a-595e32ee0d23",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 33,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "c6eb6ebf-8ee5-4c49-acec-26e029f87460",
        "cursor": {
          "ref": "c36ef83a-2972-4bdb-82e0-0cd4db4e3121",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "a8fda05a-b5ae-41b2-ae2a-d68961a2d72e"
        },
        "item": {
          "id": "c6eb6ebf-8ee5-4c49-acec-26e029f87460",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "4039812c-3fe8-4fe1-892b-b00f7fd25b38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 304
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "045278a9-a42b-4117-9177-2084b74dc6fd",
        "cursor": {
          "ref": "ee0b8837-3913-433d-8634-8a6a31375a0a",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "e4cbd227-2110-4868-8ec5-2e194480f482"
        },
        "item": {
          "id": "045278a9-a42b-4117-9177-2084b74dc6fd",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "dbd55573-5a68-4d58-abb0-07b4c9636ff2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 367
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa5d1bf7-912a-4838-89e4-e7600be41a03",
        "cursor": {
          "ref": "ae98ee38-0ff0-4760-b46d-186bb7ea5c2c",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "bc80fd6d-20f4-4da9-aada-7579d5b4e392"
        },
        "item": {
          "id": "fa5d1bf7-912a-4838-89e4-e7600be41a03",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "5edea994-98fe-4d4e-b35f-e6bd26e71d99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 367
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffcb8b69-29ea-4ad5-a2e0-6d6c913af87c",
        "cursor": {
          "ref": "5a668419-16f0-4929-acd5-d323ac78a2d3",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "cf9bf237-d553-4e41-8a73-3449a33c97c5"
        },
        "item": {
          "id": "ffcb8b69-29ea-4ad5-a2e0-6d6c913af87c",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "2e777a12-e503-46ef-9430-96169e0914e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 367
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a92bc2d-c9b3-4526-b5d2-58eab612daee",
        "cursor": {
          "ref": "227118b5-4b4a-4c1d-ae59-ba27affa8133",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "b2d0f353-c963-4527-bd90-2539dc096df0"
        },
        "item": {
          "id": "9a92bc2d-c9b3-4526-b5d2-58eab612daee",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "0e21214a-1bd4-4a18-9206-3500663b471e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 304
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "479eacac-6142-4d79-90a9-593d32f6e42d",
        "cursor": {
          "ref": "d70adea4-677e-47b0-819c-00fdabc84360",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "81232dce-6313-47f7-80cd-7148e891db57"
        },
        "item": {
          "id": "479eacac-6142-4d79-90a9-593d32f6e42d",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "d9d1e7d8-8d6d-4b81-9af4-cd7c8b2d9c49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 234
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b56ae86c-2b42-4088-9854-75c1a57b4e78",
        "cursor": {
          "ref": "9c854a2f-9dd4-4914-a08e-f9a22886d531",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "0f8b8d23-1839-42ba-aa64-12f0638ffeed"
        },
        "item": {
          "id": "b56ae86c-2b42-4088-9854-75c1a57b4e78",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "ce88d620-9108-4114-b87a-9294e76dded3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 249
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4eafc862-7948-4707-b457-da30b4ffef29",
        "cursor": {
          "ref": "86a4df94-062d-49c3-88d9-7e2a2b79fb7a",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "876bf1c9-7071-4542-b742-8b52cb51a507"
        },
        "item": {
          "id": "4eafc862-7948-4707-b457-da30b4ffef29",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "18841833-96e5-42cf-9043-157ff72639db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 249
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64bd4196-4f58-402e-ba9c-ff6a25177818",
        "cursor": {
          "ref": "ac4ebe50-4eca-4e00-b242-2dd0a95741d5",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "d9335cc9-103c-49b7-b631-377af1fc587b"
        },
        "item": {
          "id": "64bd4196-4f58-402e-ba9c-ff6a25177818",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "a6f16375-7988-475d-9605-9405a929bd9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 249
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f03985ab-6635-4317-88c6-3b5e1fb38501",
        "cursor": {
          "ref": "b37f9990-1317-4680-a88c-41ff8ec7a3a5",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "492de2de-cf8a-4cf1-9f64-5ea3ccf6f9ad"
        },
        "item": {
          "id": "f03985ab-6635-4317-88c6-3b5e1fb38501",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "320473f1-f07a-4781-959d-bf378f9d90d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 249
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "628f45e5-0c50-46d2-b8cd-eb4e7afa3d6a",
        "cursor": {
          "ref": "461d7df7-2041-493a-b08a-2d26eebcc35c",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "1cd15890-20b6-4ded-9334-27955a0e0cd1"
        },
        "item": {
          "id": "628f45e5-0c50-46d2-b8cd-eb4e7afa3d6a",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "eacdd002-eaab-465b-bba4-4fe57b6c5ab5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 186
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9e65181-bab3-469d-bbb1-ec643b75990d",
        "cursor": {
          "ref": "57c5418c-71f7-4fb3-ad75-91d627ee8605",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "771c7544-6550-4c18-b0a2-f16b540c6889"
        },
        "item": {
          "id": "d9e65181-bab3-469d-bbb1-ec643b75990d",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "4103cae1-4cdb-4a88-b19a-1a7ab020b336",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "734d8fa5-7777-46c5-ace1-0b54dee9a396",
        "cursor": {
          "ref": "c76f7f6d-914f-4901-87a1-d5fcf1162313",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "d3e77a56-47c7-4cb3-b2fe-7bbaeb44f4fa"
        },
        "item": {
          "id": "734d8fa5-7777-46c5-ace1-0b54dee9a396",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "9428b56b-7757-44f4-acc2-a458d1c10d5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ab6c035-55b3-48a9-80d7-68f2b8f1c501",
        "cursor": {
          "ref": "107bdc93-ed56-4cbd-b62d-028c359745e8",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "23f8151f-2a9b-49e6-982a-be679f99cec7"
        },
        "item": {
          "id": "9ab6c035-55b3-48a9-80d7-68f2b8f1c501",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "557d7fc6-cdcd-4bd5-977c-0fdb179896a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72871b3c-f834-4604-a354-93d18cea423a",
        "cursor": {
          "ref": "023c450c-4240-44d7-8e23-601ffee0c2ef",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "3ea4e3af-53c9-49cb-99c3-bea9aa5587c4"
        },
        "item": {
          "id": "72871b3c-f834-4604-a354-93d18cea423a",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "44111994-d38f-4660-b926-9de2bd59cbb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae41370b-5699-408d-8c40-7395d66d4a53",
        "cursor": {
          "ref": "619400ec-d4c9-49f3-8343-2cee2e896f8b",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "34421bce-a720-4b9f-a9b3-0cb2ff3831de"
        },
        "item": {
          "id": "ae41370b-5699-408d-8c40-7395d66d4a53",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "02d3bce1-2d26-4d09-82f5-1431cfbad50c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41816f53-1708-48c6-8ffb-965efd3ca7d6",
        "cursor": {
          "ref": "13d5e541-7fcd-4b26-b434-8002f8a1b337",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "7d920f0d-4e41-4ae9-9339-7bc9d1728d88"
        },
        "item": {
          "id": "41816f53-1708-48c6-8ffb-965efd3ca7d6",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "3eb53d11-86cf-463d-9f56-21f85b9034b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 240
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a63e0c44-2eca-4396-92a1-01cbb8d61f29",
        "cursor": {
          "ref": "ee059886-63c8-4bee-b9e1-2af7a95d5daf",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "465e3cb3-1859-4420-baf5-27b26875c959"
        },
        "item": {
          "id": "a63e0c44-2eca-4396-92a1-01cbb8d61f29",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "ab818a41-b660-4f85-8e14-5bd5faae0899",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 240
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94f7028b-1ae0-45e5-94b8-c00b6877a229",
        "cursor": {
          "ref": "af2aa019-19e0-4406-9165-9ac5b8f31c1d",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "20cd4faa-0d3a-497b-9ae5-1b4912e865fc"
        },
        "item": {
          "id": "94f7028b-1ae0-45e5-94b8-c00b6877a229",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "3de1fac3-b969-4897-976b-94e5970396d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 240
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e7b3b41-8e8f-4faa-bdc7-b142fbba5238",
        "cursor": {
          "ref": "9b544724-bbf1-429b-9aee-0fb2d78d5c5c",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "aff4189e-5ac8-4447-9815-bebcec69c8c1"
        },
        "item": {
          "id": "3e7b3b41-8e8f-4faa-bdc7-b142fbba5238",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "75d8f920-4003-4979-bcaf-b4125ac422fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 240
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85ef14c6-eba0-4680-9f3d-03bb8956ee30",
        "cursor": {
          "ref": "56914b89-1ef4-4435-a12d-579f25c469ad",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "838514d1-77e7-487c-8b30-557b260a2eb7"
        },
        "item": {
          "id": "85ef14c6-eba0-4680-9f3d-03bb8956ee30",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "8ce3ec1c-236a-4813-bb22-0e5c0be55b93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 240
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "884035cc-1585-4345-b2c3-c91dbea6eb37",
        "cursor": {
          "ref": "2b6dc6d7-08c0-43ee-85e1-9d1530dd8baf",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "8b8b1a63-6073-4154-8d1b-ad5fbd20b426"
        },
        "item": {
          "id": "884035cc-1585-4345-b2c3-c91dbea6eb37",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "7320841d-5e08-4749-800e-5bd08260dd4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cf33e8e-a5f8-43b5-90b2-d4d2828f9968",
        "cursor": {
          "ref": "665fb889-eb2c-4209-8f05-c6fe5ba58a50",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "b8871773-4c98-4b0d-a8bc-f985bb34d0b4"
        },
        "item": {
          "id": "5cf33e8e-a5f8-43b5-90b2-d4d2828f9968",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "03f89157-3ac8-488e-a371-24a3e9d85d01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ca97a7b-7fac-44a4-acdd-84d703927b88",
        "cursor": {
          "ref": "6441d4ba-b4b7-4775-9131-c5d259c2c1f5",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "ec818050-bde6-4fcd-9090-a42281503964"
        },
        "item": {
          "id": "5ca97a7b-7fac-44a4-acdd-84d703927b88",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "3aabc4a9-3e12-40fb-b069-487a89d90fb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da0301f1-69d6-4e37-8bf6-0b6c7bab5694",
        "cursor": {
          "ref": "8ccd93a3-73e3-48ca-a294-80acd3ff567d",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "25d203fe-d0db-4e16-8d52-b420911950f2"
        },
        "item": {
          "id": "da0301f1-69d6-4e37-8bf6-0b6c7bab5694",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "c6d5cbb8-2587-4837-ab3d-90e942a95e3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c35b23c-ae86-4284-8680-465ccb6a1907",
        "cursor": {
          "ref": "acf3226c-ff12-4901-962d-e8127b474f09",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "f1b2f102-5818-4288-a152-d61618318180"
        },
        "item": {
          "id": "1c35b23c-ae86-4284-8680-465ccb6a1907",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "83364249-656b-4c4d-ab37-15e4099ce5bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "632cc531-ca77-4bc7-8efd-2a8b857eb37e",
        "cursor": {
          "ref": "5d607373-5f09-4217-b153-860afe931596",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "7b6e9509-a38e-46ca-be13-4cd58f8a5e7a"
        },
        "item": {
          "id": "632cc531-ca77-4bc7-8efd-2a8b857eb37e",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "acd4a619-6a34-44ea-8dcd-efa0a7bca330",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52670011-2a0c-48de-8972-7406a01494bb",
        "cursor": {
          "ref": "505a9929-d5dc-449b-ba10-736210f802b1",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "e09ea8bd-36c7-405d-8c7e-6f79b523677d"
        },
        "item": {
          "id": "52670011-2a0c-48de-8972-7406a01494bb",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "8c4cb579-4212-47ab-9de7-2d77fc4fdf25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1f72b3d-192e-4132-818b-292ae1b84e2d",
        "cursor": {
          "ref": "f94fa250-ee10-4bc8-9fcc-6363bc8e524b",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "64b7a2c5-979e-4089-959f-d0f4cd15459e"
        },
        "item": {
          "id": "c1f72b3d-192e-4132-818b-292ae1b84e2d",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "28f08a58-2573-47b6-a0fd-5c6ef7dff2e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 168
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f4a1afa-ace5-4195-a6a1-0649ebacfd12",
        "cursor": {
          "ref": "8d4e9d46-c988-40f9-b16e-361d9d0c7729",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "8a418b82-7911-421b-98b7-306f8be6c8cc"
        },
        "item": {
          "id": "3f4a1afa-ace5-4195-a6a1-0649ebacfd12",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "51347dce-44fe-4642-9dbf-ddc1fd32d5f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "526d93d4-ce57-47ed-b336-7d5bc76cd2f9",
        "cursor": {
          "ref": "10484efd-438f-4251-8a02-6d8a8358fdcc",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "30152ded-ac30-4443-b13d-0a1da16c9141"
        },
        "item": {
          "id": "526d93d4-ce57-47ed-b336-7d5bc76cd2f9",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "ddd2c92e-5be8-43a6-8ac7-90fb07d5a2de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edd31588-ea19-4312-9dae-7edae13bea47",
        "cursor": {
          "ref": "aea8a627-61a8-49b1-b659-dbbc66784905",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "e6dac87f-11ca-4da2-9dff-d82b6c225db9"
        },
        "item": {
          "id": "edd31588-ea19-4312-9dae-7edae13bea47",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "c63a660d-f6cb-475a-b6cc-27c656fcbf12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "468fa2a7-a698-4d96-a1e3-8408c346b49f",
        "cursor": {
          "ref": "edc4432d-005f-415d-89c9-52511aeb844e",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "95cd5418-c67b-4382-8b65-1316b22878c1"
        },
        "item": {
          "id": "468fa2a7-a698-4d96-a1e3-8408c346b49f",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "4060ab34-299e-43e8-a62e-3de002378342",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 168
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21bbb3fa-8449-46f4-886d-09632f9723c2",
        "cursor": {
          "ref": "c7444336-e49e-4316-872d-011e32448262",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "8431f4b9-b87c-4328-b41b-c1b07bcf2eea"
        },
        "item": {
          "id": "21bbb3fa-8449-46f4-886d-09632f9723c2",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "d277aa23-644f-4845-a285-72b5f86bd8f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08108b5a-e1d5-49ca-80d0-3c0a2840be9f",
        "cursor": {
          "ref": "0a84c9ea-b9dd-4011-8e05-6a4be69e7107",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "b223192d-34fb-4d01-affc-1d2970ccddbb"
        },
        "item": {
          "id": "08108b5a-e1d5-49ca-80d0-3c0a2840be9f",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "cefb19aa-aaf2-4a54-87a5-961e67d9ae07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "681586d5-1b08-4ae7-bc97-e7eeb22c2b9b",
        "cursor": {
          "ref": "98b31c5a-2e9c-4755-a22a-6edf0e67016e",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "8c1be379-2e9b-4968-a3f5-2fdcd25ba125"
        },
        "item": {
          "id": "681586d5-1b08-4ae7-bc97-e7eeb22c2b9b",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "1a831c7d-a298-461d-bbe9-2e55fb36458d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de10cb15-09cb-48cb-9786-cbc529104c39",
        "cursor": {
          "ref": "a4babb66-d574-4ba7-9b72-b271dc4f34d0",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "9cc5092c-d8d6-4a2d-9bdc-d7af8813d11f"
        },
        "item": {
          "id": "de10cb15-09cb-48cb-9786-cbc529104c39",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "6527dccc-3483-47c5-ad1e-0c8464c050a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "067aaadd-40fd-4b4b-b391-de572ba00e6d",
        "cursor": {
          "ref": "a57bb424-e563-43d9-9557-291a4693c28b",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "eb88ef85-c8e4-4095-a98b-0683edf4c0d4"
        },
        "item": {
          "id": "067aaadd-40fd-4b4b-b391-de572ba00e6d",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "a3d44ab8-b7cd-4d40-bbe9-0ad71341ff05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58bf8538-ff06-4b2a-beb7-7da802e9dcaf",
        "cursor": {
          "ref": "2a60b04f-553c-431c-8326-7100311dbc25",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "f0ca04a2-4485-41e3-9135-8a0e170f0ead"
        },
        "item": {
          "id": "58bf8538-ff06-4b2a-beb7-7da802e9dcaf",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "b0934875-f6d9-4b7a-8f24-5d83e2f9bb12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5dc26cf-4104-4438-aabf-3b403dd24aa5",
        "cursor": {
          "ref": "e6a67fec-0cd3-4d90-afdf-3b2194d2ed4b",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "dec9c745-673d-4b42-852c-3f1e01fe88f7"
        },
        "item": {
          "id": "e5dc26cf-4104-4438-aabf-3b403dd24aa5",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "93517851-16bd-411b-9079-808e3c14ad14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 249
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee73f60d-ac0e-4c81-b378-4a0e7ebfc911",
        "cursor": {
          "ref": "6136b792-f0af-4b63-abe8-aa09fd661b04",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "c13c6493-59da-4bb3-8116-abb186ea69d6"
        },
        "item": {
          "id": "ee73f60d-ac0e-4c81-b378-4a0e7ebfc911",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "c5442d26-747c-4864-a0c7-1500b84d7b24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 191
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52605943-b6d8-42e4-83b1-df94767192af",
        "cursor": {
          "ref": "dc95c9fe-3ec0-4774-ba2c-8bb1cc851319",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "34ea09da-33bb-4e2d-8dd7-ceda535fb26a"
        },
        "item": {
          "id": "52605943-b6d8-42e4-83b1-df94767192af",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "759a5c6f-5f94-4f60-b764-0b33bbafe584",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 191
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08f1d3fa-0bd6-4ecb-85df-028481db70b5",
        "cursor": {
          "ref": "f998c943-4fbc-470e-b460-128f862801d1",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "7318c5b9-cb68-465d-9e2d-6a569ad7020d"
        },
        "item": {
          "id": "08f1d3fa-0bd6-4ecb-85df-028481db70b5",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "8d0e9657-6eb3-4cff-b494-54a777ac7af6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 191
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de648ff8-10cc-4a42-843c-b32f800b6224",
        "cursor": {
          "ref": "4ad38538-22da-4ecb-847c-c0ab6a97995a",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "61dd45da-d88b-43c4-87b1-e97936d76b56"
        },
        "item": {
          "id": "de648ff8-10cc-4a42-843c-b32f800b6224",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "10747095-f342-4b29-b4f5-ab36323d7e21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 249
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47fc1cb4-3811-4a59-9cc4-0e828b637526",
        "cursor": {
          "ref": "5279f6a3-c36b-4a59-9178-891abb09aa5c",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "730c6ffa-4a35-4e4e-9966-1bf67b73dcb2"
        },
        "item": {
          "id": "47fc1cb4-3811-4a59-9cc4-0e828b637526",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "502bde3f-2900-4337-a5cd-1ede1f3ca08b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 191
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "931b9f1b-b2f8-4037-b88a-701f6f1a064e",
        "cursor": {
          "ref": "fcb6f1bf-2248-4106-abcc-d11ed54c2f89",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "7b51d16b-8ced-46ef-bad8-ecec0cbc55a8"
        },
        "item": {
          "id": "931b9f1b-b2f8-4037-b88a-701f6f1a064e",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "cbe39cb1-17c4-4c7a-b4e5-3833ce0d7825",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 191
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9db229bb-c226-4cc2-b87d-2ae2a848aa76",
        "cursor": {
          "ref": "c3992735-12ba-4903-b2b6-52d1e24906b3",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "4be49373-7e46-4d90-9606-daa4a4b60280"
        },
        "item": {
          "id": "9db229bb-c226-4cc2-b87d-2ae2a848aa76",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "34cb8433-e8ad-480e-bc31-5df2e9404a83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 240
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f64918a6-10f7-43ee-8436-f40d1aae5f83",
        "cursor": {
          "ref": "66187e25-dcb9-4a3c-aedf-fd0642b25767",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "934d5284-3af1-48c0-8079-65986b49f4f1"
        },
        "item": {
          "id": "f64918a6-10f7-43ee-8436-f40d1aae5f83",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "bb1b0a59-2f37-4337-8fc3-5fa26cd5a30a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56e3f440-c6ca-4158-90cd-13e26c346243",
        "cursor": {
          "ref": "94636671-6d51-4965-a590-267e51ea311b",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "0c369db8-f434-41d8-af9b-5896bf453c20"
        },
        "item": {
          "id": "56e3f440-c6ca-4158-90cd-13e26c346243",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "7cc523f7-7310-4c8e-9067-c52c952df40c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 267
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad592b8b-47bf-49b1-b681-bea630005c55",
        "cursor": {
          "ref": "ef4b62ba-9ef4-473a-aa41-b473a38729c9",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "4245de6b-fead-41bf-ae76-51f083548dee"
        },
        "item": {
          "id": "ad592b8b-47bf-49b1-b681-bea630005c55",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "fc8504c8-bd3e-41ff-a8f3-73aaed6234a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 267
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dae7d049-1607-4b3d-ac99-ae650c678214",
        "cursor": {
          "ref": "1fc0ca53-4090-49dc-bfdd-a286a89cb004",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "9026073a-c699-4aab-9504-05557684f7f9"
        },
        "item": {
          "id": "dae7d049-1607-4b3d-ac99-ae650c678214",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "d099af60-1621-44d2-8d83-48d09c494414",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 330
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c287a9bb-b503-4c86-92aa-df5de5cfaa21",
        "cursor": {
          "ref": "d101cc02-0631-4476-908c-8dbf640e8849",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "f2a7b754-5ffe-4234-b3cf-1422bb724ba4"
        },
        "item": {
          "id": "c287a9bb-b503-4c86-92aa-df5de5cfaa21",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "c2cbfcbc-56fa-423a-b96b-85d557610438",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 267
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49f67e60-74b8-4823-928e-5f76b508eb8a",
        "cursor": {
          "ref": "a2fb1065-f962-4edf-84c0-706c8433c850",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "35c4ca59-37f2-4a84-b848-ea8091fa835c"
        },
        "item": {
          "id": "49f67e60-74b8-4823-928e-5f76b508eb8a",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "2112a806-0508-450b-ae4f-b22b392f8ba9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4446e9c2-526e-4059-8eb4-757ffbd862b7",
        "cursor": {
          "ref": "0e357183-8db2-4178-b720-88de7f3444a5",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "3ec03c19-8cc2-4172-9b3d-3b33a74da62a"
        },
        "item": {
          "id": "4446e9c2-526e-4059-8eb4-757ffbd862b7",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "2de4f3be-0cf5-4c9a-aa73-a0c260913dd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "161dc5a5-e4c7-4810-825f-adc4a278b4c2",
        "cursor": {
          "ref": "d489458c-98ad-431b-9f4b-d462790033d4",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "ede7b99e-5b2f-4761-9be4-624535a6a366"
        },
        "item": {
          "id": "161dc5a5-e4c7-4810-825f-adc4a278b4c2",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "c8ee6268-692d-4609-b173-cc82f027a48f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81fb3679-e626-4d1a-ad81-e7c57b7078d9",
        "cursor": {
          "ref": "3b27aeb6-7a80-4071-8c36-fffe034e49a9",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "2d325447-cee7-4171-8d41-26a70b1ec6df"
        },
        "item": {
          "id": "81fb3679-e626-4d1a-ad81-e7c57b7078d9",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "12627a2a-0e31-4f89-8f44-a765f04c3757",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a0c87e9-9756-4eb9-9e4b-1f18a19df24c",
        "cursor": {
          "ref": "388020bc-3974-4e9d-ac06-6df697c46b24",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "8617a9ab-700e-41c8-91bb-983f6d70c972"
        },
        "item": {
          "id": "7a0c87e9-9756-4eb9-9e4b-1f18a19df24c",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "079b8e19-abc0-4732-8d78-b3cb81dbf07f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6be111f6-0d4d-4caa-9660-c48fe05eed53",
        "cursor": {
          "ref": "6d158bd8-2e7d-4bc8-af30-1014997d4e42",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "f6dcd7cf-e679-4633-a397-4dce083ed753"
        },
        "item": {
          "id": "6be111f6-0d4d-4caa-9660-c48fe05eed53",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "13d4f734-b6ff-482e-b5c2-5a9652e88035",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aeae66e0-1f69-421a-9c00-8ecda84fa365",
        "cursor": {
          "ref": "ffa35600-d4fa-4eb8-8f37-c4e5c426fb46",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "b0abcf97-46d4-4077-9e9d-c6e48ed17721"
        },
        "item": {
          "id": "aeae66e0-1f69-421a-9c00-8ecda84fa365",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "54f7e42b-2913-4f70-99c2-80a95c110744",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc5f0c48-f7f7-44a3-96fa-1f6c2e9a5ac7",
        "cursor": {
          "ref": "4eed86ee-8e0d-44da-9586-5928ede56125",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "152aedc2-e108-4c21-ae51-b2ddfcc97e96"
        },
        "item": {
          "id": "bc5f0c48-f7f7-44a3-96fa-1f6c2e9a5ac7",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "dc41e6d2-b467-4089-8e4b-36cab9913846",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "088bbe91-60e9-4c48-bdbe-efb39eab2863",
        "cursor": {
          "ref": "651417b6-6d3b-43af-8e1b-c23e5cd3379e",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "f10f75e6-2f97-46d5-b715-d08682a87ba6"
        },
        "item": {
          "id": "088bbe91-60e9-4c48-bdbe-efb39eab2863",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "bb97821e-d4e4-44f6-b053-d548a178cea3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02caaaa6-bfd9-44c9-a931-7f8c366f62e4",
        "cursor": {
          "ref": "2d221c01-238e-414f-aafd-7fc335aa3dd5",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "d1377a54-0621-4fb7-8a36-a665d9e93138"
        },
        "item": {
          "id": "02caaaa6-bfd9-44c9-a931-7f8c366f62e4",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "bb8b0cfd-9340-442f-919f-de61855dd779",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6770c40f-9711-4a38-8c0a-202709157d73",
        "cursor": {
          "ref": "3e6a93b2-a1e6-4b53-a785-8b181ee4416b",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "4812b818-2c22-4e38-a2a4-16ca026e3c39"
        },
        "item": {
          "id": "6770c40f-9711-4a38-8c0a-202709157d73",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "41b79e30-d473-4b73-bd79-892a7893bd2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e5cb941-8862-4b6d-9269-9c9d548784cd",
        "cursor": {
          "ref": "20011d5c-6de8-45c6-866a-f3b2bfac69a5",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "63cde44a-0b0c-420a-a24a-bb3c3dd825a1"
        },
        "item": {
          "id": "0e5cb941-8862-4b6d-9269-9c9d548784cd",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "93f6c1fc-bb84-4f94-a4d3-81d6294ec3d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 717
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3c61034-800a-422c-9a79-ed976fef54f8",
        "cursor": {
          "ref": "8d45289a-ef7c-4d60-b72e-b11bfbae05bb",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "c93fb0d0-2a5e-4701-a5b9-56754b3c83f8"
        },
        "item": {
          "id": "b3c61034-800a-422c-9a79-ed976fef54f8",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "9d627686-6b9d-4b28-826c-0051f62d3c89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 661
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3785b773-0b2a-41c4-abda-307b74f3ebd8",
        "cursor": {
          "ref": "b0582811-00ea-45a8-957c-d16c1874f699",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "6663dc86-1ad6-42d7-9b26-16bde90f3dac"
        },
        "item": {
          "id": "3785b773-0b2a-41c4-abda-307b74f3ebd8",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "269f1eb3-9eb0-4085-9cb6-32259f49e1fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 661
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad2bbb77-62af-4177-9768-ed384ee39132",
        "cursor": {
          "ref": "3b6bc120-b85e-480d-aa65-ef9319d1008e",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "fa875bf0-b4a9-4fe3-a031-fb13c31c8093"
        },
        "item": {
          "id": "ad2bbb77-62af-4177-9768-ed384ee39132",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "6d88a71a-581b-4375-bdbe-889a2b3c8d21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 661
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33d90f3c-edf1-4a4a-bf89-8e4270d206ac",
        "cursor": {
          "ref": "d04d68ff-e7b3-4241-b7fd-e224cee4b356",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "d3c72099-ee10-4792-8fbf-ee7694eb5575"
        },
        "item": {
          "id": "33d90f3c-edf1-4a4a-bf89-8e4270d206ac",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "0bf8de4e-c805-4a50-87fa-1551bd7c4b25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 717
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e255c1ba-3832-490b-8cb7-f4f80b85cc08",
        "cursor": {
          "ref": "14579c94-c7b0-4865-96de-40ba696c71e8",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "aa7f0ddd-f844-4edc-b4f7-206ecccdd15a"
        },
        "item": {
          "id": "e255c1ba-3832-490b-8cb7-f4f80b85cc08",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "0120294f-b6cc-4af0-9d01-d2627dbd2d92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 661
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30386993-6ddc-40a7-9477-3c7bd74040b6",
        "cursor": {
          "ref": "dfbf94a8-4596-42f4-b222-a9eeeee52b56",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "cd7a37ba-8955-4ebb-8df7-928f3d0bbea4"
        },
        "item": {
          "id": "30386993-6ddc-40a7-9477-3c7bd74040b6",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "8f9fb232-acf9-460d-a5f9-71c85d8aa524",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 661
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e73e9c3a-56cf-4d24-b170-c83687adb85d",
        "cursor": {
          "ref": "b85d9afd-75c3-4245-9bde-6cd5d4a52983",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "1b0dcc0e-9581-4708-9ca3-948a5bca0a4e"
        },
        "item": {
          "id": "e73e9c3a-56cf-4d24-b170-c83687adb85d",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "17ad5052-6f86-48c6-ae44-fdee775cf621",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 255
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "389e8e67-7abd-4d74-aa99-1a8dca6207ae",
        "cursor": {
          "ref": "552dc76f-462a-46d9-9a06-a4f0427b05c4",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "5cc11603-0104-4c62-9f48-94da6b6a00df"
        },
        "item": {
          "id": "389e8e67-7abd-4d74-aa99-1a8dca6207ae",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "936c6977-961b-45d3-817d-19fe9a5dcb19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 255
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fceb45e1-f1ca-476b-b285-de4bd5f253f6",
        "cursor": {
          "ref": "28df5cb7-f18c-4f1f-bb76-d989ffa36599",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "ac3f1257-ba44-4053-9b9b-2a37629b7ccb"
        },
        "item": {
          "id": "fceb45e1-f1ca-476b-b285-de4bd5f253f6",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "8a5d9937-b969-42dc-b305-afb56e70fb16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 255
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26f35132-17c2-409e-96d5-731900471d78",
        "cursor": {
          "ref": "61f23f3d-d0ab-48c7-8bf6-ba9d495437be",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "6480a364-a2f4-47a4-a2eb-0762f116c46c"
        },
        "item": {
          "id": "26f35132-17c2-409e-96d5-731900471d78",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "23fabe27-fd4d-4c33-84a1-31ae2c619820",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 314
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6d8fa7f-5239-4c94-b10d-ed5b5e817eb8",
        "cursor": {
          "ref": "de672344-43d0-47fe-a4cd-0c9591d37ee8",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "0858e4d5-5966-4dea-af55-58f9f6a2d712"
        },
        "item": {
          "id": "e6d8fa7f-5239-4c94-b10d-ed5b5e817eb8",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "f8bdeb11-acb9-4c69-8f76-0f4ea495001f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 255
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "863b4265-b0ff-4486-9397-5f6569968a1a",
        "cursor": {
          "ref": "276c59c0-76ac-4d91-a23d-30c352da6cf1",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "448e7e32-933f-4c02-88e0-7a67e61b08a7"
        },
        "item": {
          "id": "863b4265-b0ff-4486-9397-5f6569968a1a",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "643d12ef-1e1b-42de-9091-3572c7e23860",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 246
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2af2b670-d902-4801-9d28-6b17cd897f5d",
        "cursor": {
          "ref": "fad2b812-1179-4eb0-bebc-93725337e2f5",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "50c2773c-b746-410a-a5eb-d6edb108a67b"
        },
        "item": {
          "id": "2af2b670-d902-4801-9d28-6b17cd897f5d",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "33752750-07fe-4a8a-8dd1-debfe3461b77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 246
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac1c406a-ad88-49f3-acc9-eee87674b3d7",
        "cursor": {
          "ref": "2fcebed1-c7c0-4a86-9d07-a64eba27597f",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "de0949e6-e150-440e-a899-82fcea886593"
        },
        "item": {
          "id": "ac1c406a-ad88-49f3-acc9-eee87674b3d7",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "3b0e0c4b-b07c-4c23-a316-20c954ee0fde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 246
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdecf1e2-12ab-4bd7-926e-a1339b2b13ab",
        "cursor": {
          "ref": "ef88a8bd-877a-4ba7-b51f-a5990671d712",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "52ea4e3e-31f6-4a04-bc55-31aa2e3fd064"
        },
        "item": {
          "id": "fdecf1e2-12ab-4bd7-926e-a1339b2b13ab",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "e280761b-8530-4915-b7de-4c8e65366add",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bf2f71e-6323-45a7-b4e3-85447e6d93a0",
        "cursor": {
          "ref": "7603704c-409e-40b8-9b2c-c3dd51315e21",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "d0413bef-0e2a-48ea-abf9-c48bd768d460"
        },
        "item": {
          "id": "9bf2f71e-6323-45a7-b4e3-85447e6d93a0",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "ab0e328e-dd6d-4d8b-b844-ef0090798c81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 246
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d489750-2cc9-4d50-9988-36ed28affba8",
        "cursor": {
          "ref": "5db11ad1-e89a-4fa7-ac29-f1c551101c79",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "d4354d48-f4ec-41b8-993e-077f51a7f2cb"
        },
        "item": {
          "id": "6d489750-2cc9-4d50-9988-36ed28affba8",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "d09cf1a2-dbaa-47cd-9304-816157ab69e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d02c620d-bdd9-4b1a-b1af-a11871ad275c",
        "cursor": {
          "ref": "2941b366-a45d-428e-ab0a-488c4123bb8a",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "b2b64870-2da4-4fd4-8835-b4757c3e12e4"
        },
        "item": {
          "id": "d02c620d-bdd9-4b1a-b1af-a11871ad275c",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "6a209a99-b9b8-47b8-b309-733e196473fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bcef59b-55f0-49db-adac-464c2dd0929a",
        "cursor": {
          "ref": "5231c1ca-36ee-47e0-9cc9-cd3b1843a239",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "b9280b61-06b2-4f88-86eb-4dce5f7b80d3"
        },
        "item": {
          "id": "3bcef59b-55f0-49db-adac-464c2dd0929a",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "37f9b3dc-3ddf-4da8-a69e-dee40c1e324a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0df4141-5d28-4bfe-842e-ca90e9aca77a",
        "cursor": {
          "ref": "0ed6d48f-d47d-4d7f-9825-411e68b0236d",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "8ae4a1b4-8468-4689-a728-fc270a7e342d"
        },
        "item": {
          "id": "d0df4141-5d28-4bfe-842e-ca90e9aca77a",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "635012ee-50f2-4067-8adb-7c9f15178a1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a98ac97f-6635-47ea-b971-1e19f2c032cd",
        "cursor": {
          "ref": "cbc0e87b-b76c-443e-afbc-2cc57b581f72",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "e7234adc-2ae3-4259-9df8-02841fee5663"
        },
        "item": {
          "id": "a98ac97f-6635-47ea-b971-1e19f2c032cd",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "22ebca22-7588-44ce-9506-705d06ebc761",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8335dc4b-8969-4a09-9e9c-ed19cf2afc83",
        "cursor": {
          "ref": "7e3a5a17-2e74-4fe4-b7bb-d522e4fa0db3",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "820a5979-7074-4970-bf6c-8e8dd476c85b"
        },
        "item": {
          "id": "8335dc4b-8969-4a09-9e9c-ed19cf2afc83",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "7811b8bb-de0b-43de-b6cf-2b1f40b7d0d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 292
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6bbf13a-0b56-4bd8-835b-28d034a588a7",
        "cursor": {
          "ref": "d163a1a8-0067-477c-852b-48f1a49e621f",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "9bcc9aff-a97e-409f-bab8-0ef3deb776d6"
        },
        "item": {
          "id": "b6bbf13a-0b56-4bd8-835b-28d034a588a7",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "cf0f2748-7d84-4a85-9b21-fc8a574655ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 292
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd5fc8b5-1f9a-46b0-922d-59e525bad115",
        "cursor": {
          "ref": "e50481e3-ec5c-4d21-8f87-7437043ed82a",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "96937ad6-a64f-489d-946d-a5f2a29d4c86"
        },
        "item": {
          "id": "fd5fc8b5-1f9a-46b0-922d-59e525bad115",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "6d77e0ee-8c71-42aa-b08d-94d42d6d3ead",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 292
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "322d1581-dcd9-4545-8c1d-60362f08919e",
        "cursor": {
          "ref": "598e12f0-a027-4c93-9090-301bf4782b6b",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "70642157-0794-4501-90f0-88828109bb20"
        },
        "item": {
          "id": "322d1581-dcd9-4545-8c1d-60362f08919e",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "a81e4be4-ee98-4edb-bef1-ed917b6f9810",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 292
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f6ef203-e1d2-4fe7-aebd-52cd69568ed7",
        "cursor": {
          "ref": "e7634dc7-8c20-4584-a2f1-a69f88e32ab2",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "19c5d78f-e8f1-4cd3-b29b-6cdae156a3a9"
        },
        "item": {
          "id": "1f6ef203-e1d2-4fe7-aebd-52cd69568ed7",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "0556fc73-b2c9-4301-93bc-f4059726cc11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 292
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11086fdc-dbeb-469a-9be6-078e9b602b81",
        "cursor": {
          "ref": "825e5dcb-2d2b-4be1-81d3-2def6a5534c6",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "8f3f4fa8-32b5-4204-a504-818b94896f8d"
        },
        "item": {
          "id": "11086fdc-dbeb-469a-9be6-078e9b602b81",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "7f2cce6c-2259-4928-8c08-2b022ef70a12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 292
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "702cd84d-fe80-4b14-91f4-8c83ed906e13",
        "cursor": {
          "ref": "3b0f6015-d3a9-4384-a503-b9847bddbad5",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "e1a76e62-1b5b-4778-9042-f5a07b9c62b0"
        },
        "item": {
          "id": "702cd84d-fe80-4b14-91f4-8c83ed906e13",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "8315a3be-0032-40b0-98b6-03f8100e21a2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "346634eb-30b5-4a71-b6f9-5a53f9a91eab",
        "cursor": {
          "ref": "6c4c1619-c6cf-4f2b-add2-19478ea8b4a3",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "0847aef4-4d17-44d7-9897-1373ce0f7a7e"
        },
        "item": {
          "id": "346634eb-30b5-4a71-b6f9-5a53f9a91eab",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "92086279-40a4-4295-9843-7b47dad1b29d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:277)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:277)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:277)"
            }
          }
        ]
      },
      {
        "id": "50730bbc-bddc-487d-8af4-b7c0ef5bfd86",
        "cursor": {
          "ref": "9a629075-4c8c-4824-8e21-e06bb987fc3c",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "b354260a-7588-421e-bea4-c2e7f301b55a"
        },
        "item": {
          "id": "50730bbc-bddc-487d-8af4-b7c0ef5bfd86",
          "name": "credentials_verify"
        },
        "response": {
          "id": "e9d53d6d-0642-4195-8c54-70378b70a683",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:278)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:278)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "c97e4414-b12b-4e57-8ffe-fc22655e20a7",
        "cursor": {
          "ref": "8b8f888b-9d5f-4f74-a9ce-10b8c8b0dd4c",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "c4f7f860-e5dc-4e63-ad67-2d87aefdbd72"
        },
        "item": {
          "id": "c97e4414-b12b-4e57-8ffe-fc22655e20a7",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "5a170c3f-bd90-4c1e-b12e-4078f70f645b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:279)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:279)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:279)"
            }
          }
        ]
      },
      {
        "id": "935d5d22-97da-404b-b350-95d55ae75b00",
        "cursor": {
          "ref": "76356ba6-12e4-4f11-862b-883ba8569fa9",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "0fb5db54-2c12-4688-b9ee-296a87ec4979"
        },
        "item": {
          "id": "935d5d22-97da-404b-b350-95d55ae75b00",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "a9fdf91b-0d80-49e8-9493-478ca26faa50",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "935d5d22-97da-404b-b350-95d55ae75b00",
        "cursor": {
          "ref": "76356ba6-12e4-4f11-862b-883ba8569fa9",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "0fb5db54-2c12-4688-b9ee-296a87ec4979"
        },
        "item": {
          "id": "935d5d22-97da-404b-b350-95d55ae75b00",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "a9fdf91b-0d80-49e8-9493-478ca26faa50",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2dcc0685-b9a3-4b5b-b16b-bcccb6102867",
        "cursor": {
          "ref": "d2c63698-1b05-4637-bdb7-a63f4160f5a1",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "60890192-9112-4edb-802f-abdf589c09da"
        },
        "item": {
          "id": "2dcc0685-b9a3-4b5b-b16b-bcccb6102867",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "b00bd9c5-ae12-4eec-b165-414f7288d48e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 18,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0f58418-98b8-4116-800a-2855292d6586",
        "cursor": {
          "ref": "d60a90c6-bc88-4cc5-b82f-a8a91f003aa2",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "668fe240-33fa-4065-953a-a033296d2fd4"
        },
        "item": {
          "id": "f0f58418-98b8-4116-800a-2855292d6586",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "5e02136c-92f0-4d75-8872-854c767decf3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 18,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}