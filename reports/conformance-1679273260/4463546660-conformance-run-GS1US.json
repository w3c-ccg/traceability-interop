{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "d3880f4a-bdd0-412f-8107-c7d9ca273497",
        "name": "Clear Cache",
        "item": [
          {
            "id": "5616de3b-26f2-4498-9159-b77afd459f0e",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ce28a505-6bde-493d-86d3-a9686d1d14a8",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "b3d23e29-64ae-4645-a251-7c23fd1843f8"
                }
              }
            ]
          },
          {
            "id": "b2bbfc66-89fe-44b3-8579-202508aea1f6",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e63b26d0-4cf9-4f8d-b52a-0ec898d06ed3",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "7886f89d-6da3-4239-8b52-54751736d9e3"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "8b604c25-95e8-4ee3-b510-f769bf4df5ae",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "14515748-baac-4c94-9402-092da3849efb",
            "name": "Positive Testing",
            "item": [
              {
                "id": "258a46fc-b025-4b57-8457-973c652cea80",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "86770c3b-bccd-4736-8285-fc43af1211b4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0bd43030-9cd1-41db-b9d5-bd2d489735d9"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7076ef8a-d6e7-45a1-8b7d-80f18a4486d3",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4db6546a-c5f9-44db-b1bd-bcb05d9c9803"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "58d9b790-e229-4ffc-bdfa-e57e7b1ba3e7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "29fee26f-9416-4c01-b6cb-124222243375"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7e35782d-1351-4100-8da7-245a0097f762",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "709b1270-4015-4eed-8f53-ab4fc383b89d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "200b990c-be63-43c0-ad24-4989fbd68f1a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3f30bb9f-1e73-45f8-be4c-bf6b21fb50bc"
            }
          }
        ]
      },
      {
        "id": "cedc1fcc-71e9-41d6-9c89-ab7c7c40aef5",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "647f6e90-30ee-4514-af76-10ca9aaac39e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b3c9ab90-7f23-44e5-ba1c-47110d818c23",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "11bc61e5-22cf-4692-8f8b-4a63d8074c25",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23485be9-f9ef-448c-85ef-9e2a311dcc43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1b964bc1-4e16-4ea7-a9d5-11c14ad04dba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a16dc1c-d371-4ec8-8d1f-980543632f16",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d308174-d10f-4849-a7ec-76f354feb248",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "86b9478f-0b5a-47d5-b0a6-46f8977e771f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09d4f2a2-d33f-4a92-8c0b-feb83ef8ef21",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07ca2c1d-df12-4fb2-87ea-f362507ccf8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5a84a8df-7ba6-482d-89e6-f0c23f310e24"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "51679aa5-3b4d-439f-af0b-bb1cb250eb9c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "dea100bb-8b0e-497d-8be5-835a29d64869",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea275817-4e8e-4ea1-a8f3-e011b73b7694",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f495390f-6f14-465d-a93c-bb76fa12b00a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f64f560-00eb-4344-9a72-8b34a3bdae34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed5812fe-902a-4a2c-8614-de3409033ea9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "245f47e8-b6f3-41e8-9784-7ec204875894",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "faf7c674-9efc-46d4-9425-7bb17975b1f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a534d653-52fe-46c4-8be5-d0e18e95a1ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d1c005e-b8ed-4768-b1a1-537418a46bf7",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "7ce5a75f-0b93-4a8f-8578-a49a176bd662"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "000d6f58-32db-41d1-bd84-f54fe7d8cfda",
            "name": "Positive Testing",
            "item": [
              {
                "id": "4b11c62e-d5d1-46a4-901e-d0d4efc656a9",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "49cb3443-5b1a-48c7-aca7-358cfd4fd6e5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "45fe6990-0737-43eb-a14d-a45bf5cee916"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "76476d22-a51d-4c3d-a9a0-e9fede2487af",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "166f6807-064a-4988-8d76-49f0bf81b835"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1d5cb344-dc49-4513-9bae-9d79b9359a59",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6c24c043-be45-4432-ba65-0fff0ed1369a"
            }
          }
        ]
      },
      {
        "id": "8c9693ae-d3d7-49a4-a86c-d563d9e403c3",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "7bf2adca-1fb1-460a-9510-885d1eb38d33",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6e70b3f8-341a-4295-a0be-bd508572c40e",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "5da5ab28-dc3e-41e6-813a-0bef066129d3",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6315015b-0e67-4b20-a4b4-105d3463a609",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5aafd366-3d89-45bb-9e1b-ecbabfcf471b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93ad0587-7a08-43d0-af59-7c9a3509cf19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "57c7fb70-6ba7-40f4-af91-3f59f6eca7ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7b139dd-2704-4776-a62b-290f9f6fe8c3",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37540b03-ab1b-4f90-8511-dc002b2a11db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb8b28d5-b705-4dfb-83d1-ff90b13fa6d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c802b6d-2e79-422f-b6ba-de11d6ac04ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "583cf2a8-d83f-4421-a5fd-2ee85caee2ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b4ba551-514f-4765-b8d1-c23b58d4b1d7",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18dfd48f-eff6-44be-9397-36f53a86c699",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f5b8474-50f7-448b-a78b-9d8c3e03c567"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca9825b0-3142-4f94-8148-b4e8ed219a44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "17835692-3e3c-49cf-b0f5-64a07ad5509a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9d6b022-6600-487c-937c-a4abdfde179f",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95586f86-1582-4f90-ad30-0ddf66616d55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55dcced3-8db9-490f-9536-f65f7eafd236"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78d3fd76-941f-40f2-8474-0dc2403fb066",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cc9983f5-8d75-4103-ad88-016b9349790d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68757e61-92f1-4f68-a4c5-55d71e411ea8",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ee86bad-47e1-4fe8-8641-77a25a22608c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc6437fc-981b-45c7-bcef-7ee9a3068d47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "891f2d7e-3f6e-458e-9c7a-6b5eb35b88c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c6a7f97b-8181-4721-9413-3e14054551af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87b12aab-ed79-4182-b9b9-9f79fcf120d7",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a37c70ab-d17c-49ed-9896-4477b16c390f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "432d1d78-5add-41a8-8c57-1769c4050e04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c5b65cf-5b7d-401d-a584-127dda3ca962",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d55178bd-fff1-48b9-9c18-be6b6e15972d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0596de55-8e73-4779-8a9e-f92144df5485",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dafd9a4-4036-4ab6-9128-0aee42e421aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "294e8769-ab70-4b0f-b97c-0b5b1c7568f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a961b7d6-d24c-408c-9c11-4423278e9cea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "96ecc80a-af3f-4e50-86cd-a510e36a2262"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b537c4a-e505-4b3a-9a6a-39f99232cd15",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "faf7699b-1fce-4043-a5c8-663c67a0188d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b86f7dc-f167-49e4-8c2c-fe0f11c111a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb0c6e6e-507b-4973-af93-bbff6dbfaf29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fab430da-3cf6-4bdf-8c66-9d32a0d65bec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d1e0cac-2f2b-43a1-98cf-ecd32d0328d2",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7b479f6-3e28-4886-a3ab-037b907f8752",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7814ab07-fd2e-444d-921e-28e5efd48d68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc705a55-bb3a-47a8-9b5f-e3723b3053c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8238c223-fbec-44f5-8b6d-fbe1f105ed96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c303cf71-3be5-4e5f-ac2e-cef701fa478a",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80c588fa-87a3-4eb5-a03b-485c2250e0d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88ced3ef-aea7-49e3-a57a-ff03d7892c6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5b4d90d-09ff-4855-a4f0-7f25d4f8469d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "41b7dffc-3648-40de-81ca-f7488de0c792"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a6ae80a-8c4d-4602-adb8-832e52deb598",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "525ab370-3206-44de-be87-af9c261e9aca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5c0feaf-69c8-47f4-a631-9f18bdfb58c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00dc8ca2-1f18-48c8-ac9d-c731e97f2f2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "572ac1df-58e8-4c32-b30f-b5dcab668044"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25745dfc-b1f1-4b23-8d30-7274fe8ee07f",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40971da7-3dd6-4a9d-b351-084116bcc623",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "582c4805-8aa0-470c-8774-6dd0f535c5ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a8ebbbc-f657-4992-9958-c701edb806ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1fccf1c6-34f0-42d1-b87b-49b5c0f684d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6950a25e-731d-4886-b600-fbce76989539",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff4cf82a-78d1-4b16-85ca-155280a56311",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99aa8c20-5ada-47a3-98a9-8bb4dc64c002"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a690d74d-896a-4f49-bbe9-9a170beb2e31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ad04cc20-a830-4bf0-acbb-82579ea4a967"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a30fc0f-38a9-4647-84ac-3056cf8c5755",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e4fd71a-8713-4009-b7f8-dbab9a051810",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07473e58-2a74-4ed8-9909-ef1652c8a1c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d4f0566-84da-4653-acf9-e4c98fed19d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1d37a7da-913c-4546-8e99-13255c7a4818"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60564fdd-e14e-43e2-a713-2a20af8916aa",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2293010-2e2a-4f2c-8435-4a91228712cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0966dc3b-4d48-4fe0-8baf-55b7c5a8a95c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0dadf77-42c3-4b60-915f-d4e3fa3cb2ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7a8d4bea-1bda-4137-ba79-d5287401dde7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f16f07e-809a-412d-a79c-eded6da9d741",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a84eacfc-ac69-4308-9ab9-87bb8e0037f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f9955fa-77ec-41a1-b31a-96241036ec65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "083fa4cc-b100-49a0-a238-4f78f844640e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d573b6b2-0ed1-4566-9de2-f3a5c760893f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0d7161b-37c7-421b-a9be-22e04cbf9d93",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "550aa35b-fdbb-453a-bccf-edaac5c9059d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfd6f2e9-5324-435e-b1c9-7718bd1d41d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dcb04c8-6918-45e2-8538-4c36e106f0c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ba28b399-1a7f-41b2-80f2-d08c6324bf30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51f30ad2-a187-4622-bed1-f513b25e565d",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4042e339-657f-442e-bd07-b49179c16952",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "142f4cae-38bf-4518-84b6-bf6d2891ce46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43fd294b-8501-4b6a-9910-912d223df14e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "747f6d8d-432e-4ae7-9fdf-da71f5c947b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ffd77e7-c272-456a-891e-f9a9f5a75770",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6577e21d-f11e-4919-978b-1277b9b95d81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4473ae33-551e-4adb-9dc6-a45cb404fe02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dde65c24-b253-48f2-8d8a-24b25e50440a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9ee42818-6488-4146-8102-80886419a8eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa13aae1-2e24-4790-a3a4-b9af358e2fa1",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e78cdb2-2cff-4346-819f-59f0422aee9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcb543ef-8110-4814-81ab-649854189061"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ece1bbe2-e707-45a2-a6b8-e4d2634b2d0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7dbf039e-53dc-4a2e-86d3-7838270e4dda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "766eb40b-0588-4bf9-99f5-e96213ccccb0",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22c6dfdb-3093-4462-9285-e5bdc5ddd81b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0da41e73-a9d8-4ea0-8744-7b240fb01076"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "056880f1-dc11-4395-929d-c20b03df9ab0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "10a504c7-93a4-4f03-84b3-1fc6b35d38ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae746575-faab-4c89-8e64-7becf511785d",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c4ebd23-7c67-437d-9426-82c9a3d278c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78d551f1-eaa6-451e-b2f3-a167cfc4dc13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2660756e-130d-47bc-9c5f-fd36438f1dd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "cc4c057a-556d-4e4b-86bb-006364278a12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20645e11-43ad-418d-9699-03a979cbc825",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ea06dd9-2ef1-40a3-872f-54054af92129",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0aa1562a-3886-46f2-8010-7aec7d657c73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38c4e6cd-8153-46a4-a4eb-50229ee4aab2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6f8814e3-2868-4336-9b06-522d08f20e83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa8cfcd7-2a17-442f-9d0c-edc2169849c8",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a71b8e5-25cb-472e-b2e9-eecdbfe7bcc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39c98839-ef2e-4308-980c-959e0569f80d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d483ca3-b5d9-41e1-a478-775d70a30357",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "e21b1280-ac70-443a-9a5b-5ad8371c0ac6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20a55b5e-95c0-4e98-8e2a-a498be449267",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc88111a-65cb-4007-90f3-b70ba2669d8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a018a79-d205-4736-9bf3-f2ffdc2d8141"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b5b2de0-beef-4c10-8239-af20e49d9c0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "cb0164d7-5f70-4600-89ba-4105afb2e40c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2919e9a3-6546-465c-8fb0-235a874fd95b",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3adc1a3e-a49e-423d-b9ef-041f7ff4a173",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad30475f-7976-4f55-9dc1-36cc64271e06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a62f6e77-4ab8-4238-933d-4942a7839677",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "884b2901-5d13-450a-b07d-ed4b9a718ddb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd3ce6d3-f014-40c9-ade5-5126ed9120f8",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39391ed4-1cf6-4c81-9375-c78eacb6f6aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "851c88bb-cf61-48f3-86bd-3ac8bbe9f43d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51083731-145b-4e6d-a48c-ba20a3af6daf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b8259197-8290-4a69-9afd-568afd09e1d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88153164-e508-4f87-82c6-68cc96e3bc86",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b0109d9-0ed4-485b-9a1c-3fc8e06697f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4bbbb26-4a88-4eef-9c25-a99f97b5f6a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8e3c735-7111-4b71-a058-2918187327c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8e8e8abf-7ec5-4fbe-966e-1f9587d5210c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05a0235d-6b1a-4d98-9fc4-7f3b2cc98c54",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de788d99-48ac-465e-9ec9-3d85a1b234d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d45a4588-5256-436d-a846-b0b3bd744e96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60028c34-8489-4892-889a-23418996ca2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8a076658-62e2-4ae8-88b2-e08d38a63e23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a94d1db-fb72-4ca3-96dc-9c2c7ba5d9d2",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4938cbac-afcc-4bf7-a347-fd045eadc000",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29fb2905-34d7-4505-9be1-d37dc23ca8c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d963bb7-4821-4682-bbc3-555f02f04970",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "66645d9f-7835-43c3-95f0-5e31168fcad9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a18b7b54-af73-4016-9108-c6b61579acfc",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d39d8f67-b029-45bd-afa1-a79fd6a6b483",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd332574-64ea-4c68-b4e3-fe6968bef59d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "308f494a-7ce4-4cd5-b7f7-dc0a53b172e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1e2078b9-0ca9-4c38-aef8-b1511f1d6ca1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58cf7431-94c0-49b5-b112-614ff691c830",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ed0b511-d14b-462a-b393-af7078d05558",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5eccf3ec-5f53-4dd1-9af0-80db194bb6f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "418ba6a8-b575-44b0-9131-58ff759681a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "163f7ad3-ec30-41b6-acb9-36df85ef39d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "289e62ec-9d32-4873-81e1-1b43d0b270fd",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2421f8ed-250d-4666-90f6-9596d02f851c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d149c48-1e76-47c9-b86d-e5f4b8ea0a48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed1e729e-3ddb-493d-b0fd-a0346dc1c460",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "38201162-9a57-4a7b-b2bd-cf7084775ab5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e28a708-2017-443e-8730-ba5ea942e7a1",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4722d19-9488-444b-b30f-0e0d29323833",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fb24e07-a540-48ff-8af8-c1a098bd0e92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "808bef2d-d935-41da-9153-5e327a01e1ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "81e1b374-2899-440a-972b-9d3660e24a72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b87ce386-4141-4190-9c91-842451f4f9c8",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5815f7e5-5b0e-44c7-a136-ae957193120d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1417c5f8-5cae-4ffd-93d8-8421ee29cc78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91888025-2aa0-43ff-a052-06bf6e37084b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "ca9cc5a4-e1c0-4c8b-86b2-5594885714cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9f1a1ff-cf43-4da0-90f8-8ebf2b6487f9",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ab2863d-d6b9-4ea2-86ba-0ad373f73f1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2a691fc3-de96-4961-b769-e5f818b326fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1ec9fb9-5719-4cac-9c81-8e607eba03f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "42ffb5c4-9af7-4a1c-8cd5-bc37eb472119"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b42a61c1-1412-4a7c-a753-de9c88c11399",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bec18c97-2aeb-4b4c-bc17-f11d1ff8886c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd1f0fad-2a67-4969-ab7d-fc2f31c04dd9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7dd5d75-3fc7-4fff-8277-119a4fe132bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d59c1b4a-d894-4793-8f0e-69a4b5e3045e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fdfb1fd-b249-4eed-a556-6d3da3cea990",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f050ef4d-a47f-4d55-8f1a-06ad59c02372",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11269f53-75f2-4dd6-ab51-86685da9f2db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cfd283d-62d5-4a83-84dd-2f14fa4595df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "c6a83bc3-f515-4370-8fe1-3676c04cc167"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8575acb-c9f6-4ca6-9e05-1644d2fe511b",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9b6d892-ae3d-4ae5-a8fa-e20fd9b64780",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fa21530-dec2-476d-94c5-38b2fd9182c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e000865-bce4-4ba4-81e3-f15b8915b26f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "cd798004-b97e-4d37-acae-709dc9636218"
                        }
                      }
                    ]
                  },
                  {
                    "id": "daeeed63-5858-438f-8fb9-6367cf4aee67",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a03c415d-a06d-4ae9-96e0-e98324db4096",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ef09b5c-007f-4f69-9fc5-4000d06d8639"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e59dda20-ec0b-4200-919a-e09d2614c17c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "842601f7-6832-4dc6-a5f5-3cd35c1b05b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78c2dbd0-c8be-4132-a9b2-f691380623e2",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45477171-cd0a-4efc-a455-3adf13c722cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eec340de-4dae-46b0-9311-d1385f2defc5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e222b3c9-66b6-4d5a-8418-fa4014a8d315",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "38ea673e-9f9f-443b-be61-58e0d7c8c0ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c5fb02f-fcdc-4a05-b4a6-4a0358e3e798",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9fefa00-efea-47b4-8f26-5581e972cb33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c53ada3-2fea-4671-a0e4-1f8e5a410941"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b1ba402-9f36-4188-9785-6072acc230f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "9ac9de81-6658-4121-8989-0ebef805f0f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c480e80-5afa-4fff-8289-1a5b286a24c2",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c950c658-f541-4309-a2c6-d8a60c58d8d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69cef29f-1212-46ad-9182-4ca8542ffac5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92bf187c-f315-4025-ac16-83a590ae0df4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "12562609-f605-44d5-8940-65d1e247216e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc7f4641-da70-4dde-b4b4-9a08c9da6e6a",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2e728fa-969e-4e24-bba3-a607b4eef7e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57aa3fb3-2675-422b-948c-186292ab5b96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09f96496-0587-4a0d-a2f0-59cf0c23ed8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "7b339412-e16c-478b-93cd-ed5ab454a796"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b89056f3-4b7d-462c-b6ca-f11c4ba8610b",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40fdc332-c037-4b69-ab9d-21969b0a1473",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a056f44-104f-40f9-9142-9d2f08292633"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9b27459-e304-418e-80f2-ad0d1be69504",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4096c50a-10cc-4770-8aa9-5a1233cfc570"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4f09c57-bb63-4d90-9558-131bddcd281d",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0913de55-ffa3-498a-974e-e6aba730d712",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24c76d97-3006-4038-9fb9-cf75118ef639"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b1c9744-fe3c-42ad-9d07-f15cb41c77a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e8f0a76e-5b89-4092-99f0-2708d16e0922"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b4522e6-9053-4370-a598-de61a2d67364",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2b63e83-9646-4d94-8aaf-72b1832c1609",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68e8b52f-4fa7-46cd-8012-250ea2ec9e05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13228a27-757c-4b65-aedf-b4e65feeb012",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f5c8e244-dce4-4dc7-a10f-9d6567377943"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cba06dd9-5cd4-42aa-bcfd-bcb909505aaa",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "255910b2-70fc-4c38-855e-663481f5d532",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3232058-95cd-42db-98c2-f010dd0398cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cb5b3a0-ab5a-4727-8631-81e38c99f74e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7b6292e8-b982-4494-aad7-09230cca15cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "322d45ee-95ee-46b5-80c9-83964a5c1f8e",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dec3195a-6558-4f08-acca-a22e7b863d23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b00c397d-7d65-475d-b179-cf03025415cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c4dfb26-1f62-4f2d-8755-d5c4e4416d32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3aa5b844-f81e-4037-a904-3d87578da65b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7ff7639-96cc-4921-82e2-1ca83629ecd2",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f13aafe8-c867-458a-8590-aad0454bfa7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c09a8c80-74f9-437c-9d70-09c771c65b26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2356244-649d-4f5e-877d-e548f8519bfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6f79807c-bbc1-4b8a-a0dc-0563ad396cb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8ab1a07-dbdd-4c79-bb65-19e12169969a",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f796adac-2ee3-4384-b5a7-a561a63f6be6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9788cbb9-74f7-4f0d-adf1-23d4bb693083"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40392fed-43a7-4bac-9db6-95f6b14be334",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "6e088dd4-877a-45d5-9faf-53cfe42b0e3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "622c1321-144a-4b49-a1ad-695ec4d026aa",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb76f497-4851-4443-a014-9080940587be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "caa656e5-dda5-4b67-ab1d-db7d54cb5dfd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04ff42c4-b625-497f-9f13-b5df8af97d21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "baed11f5-3fcd-48ae-b15a-70f1c22347b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8782e83-c73f-4b10-943c-1ed9329e25e5",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1655af79-d3b8-4dc5-80f0-4530702ebe0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a8f1ab3-2c93-4fff-ab4f-a0c02de2479d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "806aa963-bdd6-4c1f-a39b-d0ce0bff3772",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "12836624-571c-4a79-affb-4b4ed2a10c09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b052eb7c-526a-4bb0-8022-dc77d228f131",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6d19183-f382-4ff6-b6f9-ad2ec7601012",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "383c9483-4aa1-4566-b4a9-9e218c527b14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4efb8306-0761-40d0-9f13-fa06a73542bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5a8b9fbc-0ea8-4887-9cfc-a7152569b15b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23c5980a-3819-4395-9475-6ad2787ae177",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e297d5eb-084e-44e7-90e8-b1cd695e3598",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc8a30b8-b0e6-4248-b9ab-413b75871d64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6274b4a6-8e43-4424-9619-9f9d0f3bf116",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "00cf03e4-7f90-4d11-849b-6498b7e24ba8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0dde6da-7283-4efb-9e66-83aac52e11e2",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "975e62de-b635-4589-abaf-647a5429ab28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03e10cf9-b496-43e0-a192-0e128156c362"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aced25ff-8a1f-4a5f-a8df-4bee9385de4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "075caf04-e622-459d-b243-349743b82afe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81a38b04-bbd6-43e5-8f83-21c0eed67f84",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc5b9d1a-dce0-4b94-9558-5175a838fdca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8410d77d-c79b-471a-8b1e-b1bd9c2c543c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3ba2a83-5ad1-4ebe-9c24-277d9f458e3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "a0141a52-471b-4e8f-8bb0-8fcfca7478ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc476aac-f4e6-47a8-8dff-97b7bdb36a57",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "463ee6c3-045e-4a0b-986e-046c731b213a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e93adb92-f29c-4f30-bfa2-164b51e1fd11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "609b7cbd-d6e2-4305-9881-6404a133ddb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "906ffa5d-9ff3-4987-a019-ca2fae5b3ae7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b7f7f5c-9b9e-4705-81af-ede806017612",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "349bd45d-c4aa-4cbc-90db-817c04304e30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9442daa-8cae-4649-a0f4-1ebff027a8a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d227db99-71e3-4076-8abe-140b94eb4b3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "199e8e7a-8a27-4d65-838d-a04b48afbd2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "851772ba-9541-4608-bb49-6560ee43ab14",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a59248b3-0ccc-494d-a6af-286ebc143b04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eafcec7a-99c4-4062-a03a-aeef28b25b1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9c028ee-cb7e-450d-8c94-7fa92d647f2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "e54c7e4f-a02d-4b85-bdc0-1c175e432026"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1331faa-d369-4f49-a11b-a69c014f7bcd",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a4c7727-ed19-4a41-b286-a0805d18fc31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c61afdf2-9c9d-41b2-988a-e898c4e0867d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f370b953-713b-4cf6-ad57-57049f8ebfb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "94b418d1-1d9e-438c-af1a-7c8feab0e064"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40c48d3c-cdd9-4968-a85e-03f6419b46ca",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9251b01b-2b03-490c-9a2c-097f7b3866d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b89df36-f32f-48b3-89ef-31532c01f003"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "838cdbeb-f029-4074-97c4-35626cb03618",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "ce622be6-4981-48c3-a907-f0f82434eb97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23edb21f-d5ab-422c-ae54-e19382b364cc",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "834d330a-a27a-47e1-ac46-ae005902937d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5648465-7125-4f07-9f21-1abb4c2e55e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a88e2842-ddb7-451b-9e59-118da2839439",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "4c5ac8f8-5972-42f4-ba17-46677acbae57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2545e43e-e228-46d2-a01f-db3e87a03827",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6b0254a-d2cb-4c4f-b46c-6d227c5da223",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd81ddba-28ca-48e6-ad9c-eb9e243b857f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f977a708-7872-4545-8f0a-7c94f16b4165",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "83f706f7-d11c-4aba-afd7-66a1f0417bfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f017c9f-04f5-4059-aa6b-15aae0c055f1",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6463a13-eaf8-4235-be3d-1e55559d6ce9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abf72694-7d0a-4c6c-8baf-fe92fbc90d13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe70967f-9d5a-4042-8ec8-b45bea837576",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6103b486-a9a6-404e-9dd9-299e48b74985"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f3f136e-e196-4199-a606-0f571a55078f",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0079b9e-814e-4941-9f2a-5a60ad1ebb9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03ded9ca-415e-4928-abdc-4c28bb1c2748"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "268ed48e-4dc8-404c-a589-f48ac8acf717",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fa2b4d0f-8856-4326-ab4e-c10200ef3f02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "903d4cdb-d393-4651-89af-189a07c2e7b0",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7196ec8a-63c3-432c-aeee-33b9d258cbc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4b67bd1-51ba-4ef7-8290-4c865c1b39ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dcc6035-d28b-4635-892d-ad5a769961b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ca2bfc97-fe39-4dcd-b25f-fc594f16b50c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cedbcc85-9f4e-49c2-9c12-1500aff3076c",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "851d2aef-7650-431e-acce-3e1443f5dcbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f0af01f-2d5e-4b63-a6db-1c5ab9a5826e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92fe2151-01a1-498b-ab5b-baae86c97dd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "41bcdbd1-ca7e-4f2d-93b4-2a0e2f959cab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33ce1b83-2183-431c-b875-95f87d0eaa86",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7f35211-1615-4901-aa4f-a9db4af989d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f7d0bb1-9592-4974-a337-ae9f2362abce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b38ebae1-6b40-4970-84eb-be4015b55b46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "85225f5a-25de-4f51-991f-0cd09394d761"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b1ebbab-6c1b-4f0b-91c4-3b6d3f94bc81",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aae19bbe-198c-4cfe-a5f4-a2388281b4d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64fa6c94-1f88-4a1a-a223-f44179f84a6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e519240-1995-4740-8b70-b70657294a7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d46b4c3e-2f1b-49c5-adf9-6e76e7c3a174"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dea59357-ad91-4412-bae2-9bd7aecd8f85",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aebec55b-6bd3-486d-bb6a-9d34097f506f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc9840fa-4619-47a7-a246-290bf465fc6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e743199-d488-4cc0-a480-9d570549680b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e14300e0-b6c6-4e09-98fa-f533f7848ade"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59b38715-00b4-4031-919b-45261afe12d5",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43c99a04-b528-4fc0-b100-82e929dd7d30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5df5b73f-7b1e-4a94-8005-f7d83181c76e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5517d8e5-593d-4a4d-a842-bcf568f4a9dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f2939c13-2d73-40ed-8460-31b584714dc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79b90f3a-69c7-41ac-86f7-be4c7b180607",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d268e9fa-0e68-45b1-a640-cf4066e74c80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d304eb4a-8527-4003-b65d-144c82894800"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec0f7d23-560a-482b-9b93-c029e4113822",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "78679848-805e-4e59-a06e-c28c0dbc95f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9229f790-f2bf-4651-8fed-ade67861e3da",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b3b63e0-7bcc-4bea-8511-507aafdc79ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5e197a3-c731-4837-b081-d1e1fad5f514"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bbad840-52b6-424a-b59f-b128a75cb710",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "210503a0-9900-40d8-88ef-2e99c38461c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e09bc258-2098-4b54-82f7-20ae702c1d4f",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7785cf3-71c6-4980-9ded-cddb4ecddb2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20f0861a-7b31-4efa-bdcc-290e2294a108"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61fb9c11-5f89-430c-959f-44297a9ed554",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ec8e18c0-dc01-4095-9f2f-1adb215f2a22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8029073-e3f3-4098-9e43-12705a0912f8",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b45189f6-88f0-4080-84e4-2fd7ee23e3d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2f050ad-92f1-4391-a3ba-8311af461ce3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b36582a-91fa-4b70-a94b-5b4fa73571a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ee45ec8f-3e7a-4e24-80a0-71d6bfbde37a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dec17775-8d0b-432b-a907-43a586e8630f",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50030134-179c-42fc-bc14-a6b5a8ef2c12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd953281-4c05-4960-bd5c-57befe1eb480"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a45b4e18-4819-44c1-8a6b-99d1b410936a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6a1a21f6-7e2d-4bb0-97cb-c401ba3eb4a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9c65283-8561-4d54-9216-734419958e48",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df45edd8-8f06-4461-9376-8f378b96772c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd5ed68d-a874-4a13-b6e8-3330ccfdd2a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb763d47-90ca-4c8a-adc6-ef6531f7e2a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ec3c6a2e-4cb4-4c9e-aead-3661d68ae8ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eaff375c-df83-4d78-9f44-2d46e79c20d7",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a84b4a90-1f2b-455c-8d72-6ebaa47e650d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e70aad1-d330-456e-9f7f-e6e6e07740c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5cc9b1d-55fa-4136-b549-a8eb3a074bae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d3576b5f-4c08-48a5-be2f-b39e5ab65e15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4626d8f3-9d32-4c0d-9b72-d0abd56b25d9",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07058661-5360-4552-8bda-07907fc7e15b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f7d9ee5-912d-473b-af0b-bffadc49d359"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffc91550-47a0-4b90-84e6-b40485f90a7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3fc21e24-3420-4ad7-b55b-380b87ffc334"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3f6b25c-a50e-4ecd-8324-b4252266316e",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c78c66bb-f61b-4b0f-8571-37fc22438100",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a728d960-050d-4980-b4fd-52141bd0d88a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75616e40-5114-44ec-abed-64c7c79ddedc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "59ef40d5-7c21-4f0b-b5b1-3f56939b7055"
                        }
                      }
                    ]
                  },
                  {
                    "id": "350c9c95-c996-49de-a457-66ba9cca467c",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c33c652-3bb8-4db2-b9b9-b49eb3876997",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58469dd7-5519-4521-b7ea-628aaf36a918"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc1a4e69-753d-4690-bcae-8bc21a028d68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ac527d5e-d554-4695-becf-2a8b96fd65ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18eb52c9-85e5-49cb-abad-49d1d8b410e1",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1bd0a28-8a55-43b3-9cce-6d837aa66280",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "887ceee9-42fc-494a-8db1-39f5d042fa87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0c1b279-c185-4b92-bd6d-8ac0f1fbb6a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c5b325ae-0724-47b9-8a17-fd632137270c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a53ba87-14f7-49bc-81b5-bc955120f342",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f825e97-1e71-4312-bb72-662ec06281aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99f8f90b-782a-4da5-9c9e-c2180dbd2c41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89f9c2e6-1692-4e77-929e-af4663539227",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ca35dac6-fe4b-466b-acfc-1b7350910744"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38ee6a46-5e44-46eb-a672-0aeffe1e3e7f",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea96df74-1dac-4938-92b8-968c6c92baa3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be15c953-6e22-446a-9f36-ca97b84a64b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30d24874-e626-488c-8b31-c3ec553ba1c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c1ca7bff-9fef-4d8c-8633-44b778ee00ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b0e5554-b435-4a59-a1f8-35b140b80728",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da65969c-9f33-43ef-8a0b-d7ae404d7dc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e434a803-3998-4345-a246-9e360bd74656"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0916ebc-b3e5-416d-ab9f-d452d6dc050e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d6cd40db-f816-40b0-a9f0-ea4234240546"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c43513fa-02bf-45d2-a15a-7f9c17e03b7c",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdbe0356-5b0e-48fd-8901-63f27300f568",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84723319-bf18-415a-a957-bd7a5a01a1d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e24b7ee-1d9d-4cd3-b806-e6f8d20b4f07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "3939c711-b7b0-495f-9391-c1397bae2e3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64aba06e-6df9-436a-9414-4f08de6cf399",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dbfb277-2470-487e-9629-f3aa3be24793",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd9670c8-29b3-4e4f-ac04-c9f74983ca30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23058b84-33d8-4552-aaae-91c73e6fdd2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "25dde79f-9952-4127-b236-ea63270f47be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99d326b6-385e-4b06-b308-0a99300c4a10",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac853f01-55cd-4d00-8755-c16c5a238525",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e686dd1e-4c7d-4a42-bd80-a1c3e795fa13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00dbe1cf-6449-4051-a9ba-4f2d5be9e6b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "d249aa52-fee1-410d-b134-1ad79cced70f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc7ab034-49fc-4ee1-beeb-5157a6c910fa",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "192b3294-7b64-4840-8ac2-d9a4d6b213eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b24a9bc4-2142-4e12-a8c2-72b4934a952a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ceb1b71f-3277-43aa-9129-0d0f26aebd21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "f83c1730-0a30-4a79-ba4b-d268aafa215d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb5e1bd2-ce38-4482-945f-600f0662067a",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac7a4bc5-aab6-4ab9-9c23-66aaabfba6d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edefec12-c95a-4b23-90b3-baab1f53a1ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9345a1b9-9ef0-44a6-90b6-313bfa1d4dfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "d70deef0-e96f-47bc-a65f-65b33e2fe6e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b91521f-8196-43b4-9ec8-8ef1f9b4a72f",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b1a1841-6999-457b-b604-0f8f89801206",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "81cc3550-6594-48c4-9d85-ea870c33d227"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09971a9e-0303-4704-a733-c4a0425b7290",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "4db94832-635e-4d02-8aba-c87b4929e4b8"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "53efb360-6820-4117-b6bb-4b6791d9c2d7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7378dc5b-4d48-49a7-8b82-30113f81b724",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "514a5e7d-95b7-43c4-84ba-d9b44e3948cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "398f9c10-72bd-4585-abad-c8e96a95df24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "995a21b5-ed7d-4bec-ac66-6544032c0078",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a3e8b524-d3cf-4a98-85e6-c71772bf734d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e9cd32b-a559-4706-888d-134474f74ed5",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff74c574-e9ee-4e3f-a201-bd80c08465a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7427ab86-348c-4104-9f99-87087aee6bef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5bc1d78-a03b-4e4a-844b-75ec9aebca78",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "51e67418-8747-4e33-b3cf-ae34a90ded76"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d31d9cf2-a611-47f4-887d-94dda7f6483e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0ae8765e-3c61-4323-8318-318f515f9746"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5b544250-5179-4631-b106-65e8d753162e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3f92cf85-a083-42e7-9dab-c2d691c69702"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0279f61b-d985-4762-bffd-1bff309ce04b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e8a74873-c2ae-4697-90f0-32258cd457c9"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e4a8312d-1b37-4a42-a7c0-27430b0bea5a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "40057651-7a19-498d-9a93-d75f3f7bdd02"
                }
              }
            ]
          },
          {
            "id": "139b9451-cf4b-4fa2-b2cd-2bcd27ff90e6",
            "name": "Positive Testing",
            "item": [
              {
                "id": "bf344338-e9d9-49ff-86b3-00f1a36ed88d",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ffc01246-89ec-47b4-8f6b-7e17f939cff8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "948263ab-aabb-457c-845d-cc7a3f738089"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a554dd52-9367-495d-9474-a3ec553b2d35",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b08a9a21-3440-46e9-aefa-5ac0c8288927"
                    }
                  }
                ]
              },
              {
                "id": "b92d2d1b-1cb7-427e-a8b5-cea7c3627ad3",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ceecefda-0e57-4891-bbd8-26c9fd0429e3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "62c7e6e1-6696-44f3-ac9f-d5357d0a5ad6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4fdc42cf-b191-4d98-9410-3f728f1e4cb2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "6e462cd7-5963-47e4-a983-e15aab338f6f"
                    }
                  }
                ]
              },
              {
                "id": "ae3a521e-b81d-4cfb-ba5f-af796fa60048",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c683aa7e-8d76-4784-b749-1a11c16c6808",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "60486ede-465e-4be4-a250-8745adf4ae4f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6c80764e-cb48-4375-a018-bc7e56378493",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "0f29653b-6a5f-4040-bba9-deb8a27caef5"
                    }
                  }
                ]
              },
              {
                "id": "1ea4f9fd-79e7-4816-bf71-1a1c495e2cac",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c2614f3d-1aea-4e2a-830e-5a80ae93b8ba",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b4234350-8119-40a9-af80-389034fb26bf"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d0200fae-d0a0-4f2f-913e-665dfe31d8c2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "a2dec7c0-e034-4ae5-9cda-30456dc5fdcc"
                    }
                  }
                ]
              },
              {
                "id": "07cd409e-d637-473d-97b9-b061e43a18e1",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0ee0b2c9-4191-46eb-b583-7de68f3e7adc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "95bdaf12-8fb1-496c-8c52-d8e03ff4696f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d2e5571b-d08d-4b29-b89c-1324ec71a17b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "6e7305c7-ce5c-45b1-ba0b-09904b135baa"
                    }
                  }
                ]
              },
              {
                "id": "a2e6ff98-4626-4b50-9c2d-652824cadca2",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8d28e66e-f286-4e12-917c-f63236252318",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "51931856-6158-404f-8741-7155e9fed6c7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bd806d0d-85aa-4312-a971-94f4d956b53d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "10e263fc-facb-447d-9339-4271a47b6809"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "cadc4f15-1b03-41a8-a522-34224c9bd524",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1c020e98-3622-499e-9cec-110af2017ddc"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "16365902-f1b2-4cac-ab81-004e697cf7e4",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5cc8c4dc-5761-473c-9a4e-a580b5dec7c1"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8225835c-4055-4d2f-997d-116249f96c96",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "b980fe53-26d2-4c14-b433-1204783bdc37"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "99459816-b86e-4774-8d46-c99f73502d33",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d2cdb29b-e006-4ee2-ba53-82f4c56fd428"
            }
          }
        ]
      },
      {
        "id": "44d67556-3b0a-4f24-9134-5aef10e3f5dd",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "a9f7f3bd-9cd1-450f-8e1e-773c06b5d72d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "60007732-ede3-4c68-8098-02c8b22e1ba6",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "e05eba76-cb32-476f-942d-9ca6ce000714",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca37a7ae-bbbb-4778-89ed-8f5a1a6f2e72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de02b376-d194-46f1-a1b9-ed8ab5704f8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1956c920-52b9-4ad4-84ea-ecaa7ca81329",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "f7d553bb-31cb-4e75-afee-2154b99a67f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32beadf4-efcf-4c3f-84a6-8ec97ed95dd1",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33292bfc-60c2-4e19-953e-6e0bec5e39e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b94fc662-5eba-49fd-98c2-cdd36a117d11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94089df9-0ca8-4f54-aa8b-64fed3935f22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a35fa6a7-583a-496f-a7f9-497a8a38a41c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac1e92d7-b72e-4f5b-8c9e-d6762bda288b",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4a069a6-61c4-4301-9fc1-63e7105f154f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70d68766-1d6f-4a69-abb5-fcaf6c3b7ca9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e488f5cb-027b-4170-9e0f-329623e78b11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "17276b9e-e8b4-4f27-8257-a1ede7280f99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "641481b0-a3e6-48bc-98a2-4c1d31ff151b",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bc2c76d-fe19-4416-89fc-231f50fcd975",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ab602f0-ef31-41f5-b2f9-78ac4b231511"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88c67029-2b51-4d18-8d61-053d74ec2e0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "21df7d4c-3479-43aa-bd7f-95041cd5f6b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba7ec3e7-5e04-43a1-a77c-a36439324a40",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65ff3af5-5646-4339-b95b-795908bcbb82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5982756-761b-46c6-881b-87c69569171f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfa69791-e5aa-40cf-a3e9-a63eea544589",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "51e8c84c-7f73-46a2-b3ca-726274ea948f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c867f7eb-1196-4bb4-9c18-8be4353ba53d",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5230cbb8-656b-408c-bbdf-0f1977b533db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57378bc1-bfd7-4267-9f5c-012cd802d99e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c829dfb6-0863-4314-8de0-97c94b3c09f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ab6cacf8-1862-4f2e-a204-3dbffe504b6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab1c8b46-01b8-4f4f-901c-55cf9dddef77",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e77dc6b-009b-4e58-ad3c-6048d581c708",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da6162a1-0833-4439-8f91-d34820579350"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85ec0cc3-1f2d-4d89-a6ee-e138c2ce881c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "b0ff5d30-ea65-42e3-8614-1721198a9176"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc4525ef-d020-4941-896f-b8f293c5ef9c",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "501c067a-6573-4952-9a40-4ecd40dd911f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae0f473c-b443-4942-b41d-719f3e7bc09e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b08b5f4-17e5-4b1f-803f-4db99956a649",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "242f6909-df88-4d8b-87de-2053e3e4ac6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e18a1c72-c772-4758-8f73-ef5e9bf36d84",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c6e04d1-3f18-4804-8a29-6235349ce89f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c5f9f29-f4e4-41cf-adc4-6aac8e9fe13d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a51b946-1315-41e4-af1c-ae4ed9829bc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2504c1a4-3c49-4c5f-b8e7-ab54d783d285"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78b181ab-3351-49d3-ad69-626cfc994bd6",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "080849ca-b58b-4260-bbcd-baf0fa3ab6a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d543b535-0e14-4cd5-8241-f60da5eaa866"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1244e6e-450c-4a49-875f-270c29f2e3dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "10ac2a05-0635-49dc-b159-4a789c5121ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "226c14b4-5ef1-4c8e-af11-1238f4ec7970",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b5bce6b-cdd5-4434-b8be-04afdfa8aaae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "331e2f7a-d1a9-41f4-af82-2d78a166db5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1da97870-a877-47f8-aa13-9ea407022521",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "90462359-d0c8-465e-80fb-824d4a090fb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e16f313a-ec30-4ce0-8c6e-44f61dba36ce",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1fab98a-f3a8-482b-a207-a9426e01ab36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa63763e-4c48-4890-8692-5425a8a9092b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6019798c-889d-4962-96f7-849017246430",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "daa36e6b-5336-4a28-ad37-b9e4bb0b5a05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11ac1baa-124f-418b-a4a9-5402d54f6e9c",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fedfefe3-fdc4-4206-bc2b-8dedab3f6f81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf879fb8-da6c-4eef-8f82-7116ed4c4fea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1aa1509d-752e-4667-bfe0-cd513dfba618",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6f9b613a-b273-4f6d-ba0e-c5904fbe7758"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54c7f3ba-faac-458e-9c24-d6316582c3ec",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65c128d9-e20e-4492-9273-eadc17e0b2f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90410360-4d5c-4dab-8d62-9edb96fd57a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bda64d3-5fd8-466d-897c-e39a13c3678d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "f620c591-cad7-4a7e-8db6-c3453a305789"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f132280a-59f3-48d1-987f-50cb37007c59",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a26e9641-f158-45fd-ab65-204f27a25547",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42e6eb19-dae2-46da-8b2b-ce2e410a4773"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6abbfe2b-f6c0-47e2-87c8-b40da955aa7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "3b3d7003-758c-4314-9d48-8cc803ce118a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d39e0608-c0ea-4e35-900f-43b8788b20c3",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6e789d3-b43d-4e00-a7c0-fc87e1b7f967",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "212c1a56-46fa-4b79-af33-85b470efb812"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd08f508-d2a9-43d3-ad40-f7dea73940e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "ee479ba2-eef8-4c92-b5c4-16167ebf2e01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "961fa882-0e97-48cd-b16a-681eb2aec2a0",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90009e1c-8b25-4d94-82b9-be53cf95d67b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc367ade-b316-423d-a00b-63a2be98e67d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47f65f4e-58de-46ab-90fc-d5843c66ccbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "a8fcb90a-6c6c-42ad-958a-039d6ce337b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42f49caf-a62a-4b8f-a477-e0e9f581ff96",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42f4f408-7429-4132-909b-4e091ed8d9a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fac3e49-e274-4e1e-8813-79a4457ff333"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d23703f4-5e6d-4ab0-b940-c96bff018f62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "b31f3a29-12d4-4e1d-aeb7-eebca7202ff7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be073113-b097-4530-be83-1bbbfcb4b9fc",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbdceb3d-132f-4a84-ac9e-2c60f633d600",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1c761e0-e982-4f6f-acd0-f458b1760804"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8a38512-f2c6-45d4-87cd-7a4faaa36fcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7ef67f47-5f4e-448d-8515-12fdc983df57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d53393c-8e26-4124-a23f-687cde72b0cc",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f82c367-e447-49c8-904a-27194ae80ce6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f63af4cd-1032-4072-8201-62e463384101"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76d85e17-d8ef-4263-8ad6-51712ca30b35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9c4d3e45-c46b-4add-9d37-9b9609d85381"
                        }
                      }
                    ]
                  },
                  {
                    "id": "507831c5-02ac-43eb-a5f8-4e8a713bd708",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9185e812-75fd-428f-82a9-25633d4b2472",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c56ac8a-4657-4fb4-85b9-383d654baf3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ccbd17c-8581-4ac3-a0f3-7ea2299c071f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "eb633ec0-5e41-49e3-9ad8-aafad758fc5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9173a5d2-1d92-483e-92ff-54d2a0fa67be",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "837ee94d-b2b0-4024-bd18-c4af7a552f16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fb7cebc-2622-42da-b0c8-ce7509a41cbc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dcb4760-98b7-4004-bbe0-8746f4c21674",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "59d11745-9688-49e7-b142-3dd74b745b1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27e269f2-2d8d-4136-bf3b-e7bb4f2ba442",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b258672c-c555-49b8-97c6-da72289e4458",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "595b022f-c10f-4ca4-b4e1-340fb99525e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8437bfc2-5dee-419c-86e0-4bdd06ff12a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b34c445e-752d-4467-8b6b-67b9ca232a1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a944b7d7-63f9-4ffc-8d52-6465071312bc",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "111eb5b4-0350-4993-98c0-92acfcb014c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8a89b11-8537-446c-843f-02d35d2b38fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9ac8530-1d9c-4f21-b20a-5769b9781951",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3a5a0090-a76c-4e1f-b65b-6607271772f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56b1175e-11e3-4747-8812-ba8ea880ebd4",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f86b505a-9103-470e-9eb3-32ba09ad53b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46cb3afd-3434-4277-9e8f-c3897e395a06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4644f7e-f88b-4d9c-bcec-8e3561fad1b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "751ffb74-9ed8-4bd0-8ad4-45274f927f15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5bf3eea-26bb-4a4c-955b-02cd821dfd4c",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b0b022a-5e8b-40b1-b18e-7420dd7d953e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e17cad54-79d1-4fe1-afab-3500aa5f8a23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "182af6d5-352b-41c4-86ad-9f5f07b02f8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e0b58ad0-e353-4e71-a2ce-8bd757d3f6fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f700d12-e192-4f4c-acc3-0d7748958727",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f46bc177-fbc4-4c7e-a7d7-ecaa4d0c5f98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3e564f6-54f0-47ff-a4e9-888f2112c862"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "038ebebf-d619-4429-947f-c69d74f9aa7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "37d98628-1b8f-4e46-a491-16e49c55c0a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12e34742-e19d-46b4-a246-f23af8048339",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc2fb611-df93-4160-8ee8-b50c46ec2006",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2edc9b1c-bcbe-465b-985e-7ceb204d026e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f97160d-5dd9-46be-a3fa-8163ee041104",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d7f8eaed-3725-4cce-b4a0-219cfe8b1b2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a77533b-f1ef-4ae3-83be-15189304154a",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bbcbb4c-eb13-4498-bf06-71c47f5254a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c7852f7-e6d1-43bc-b50a-84ceb5562d08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c71eb372-1321-487f-8e6b-e8ac595cabb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fcd82552-9e24-41ce-a715-940a77e396ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1675a36d-ae99-4ff4-a667-d05aef6276a1",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b689b4db-460f-4e6e-8971-2dde511175d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0551618-8bf0-47b1-8a76-850713c09746"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8100bc4-a54e-4b69-b479-f5fda09d0c3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9c8dd076-f919-4be5-b20a-9942e386531f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8b3f71a-f0f6-464f-9825-1442551cc5d5",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b186dd1-f4b8-4e2b-8aff-2b6cda78f9a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6bdc165a-48c2-4e56-bd1e-b8aefc37950b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6c74585-0a0a-4c13-b437-e09a5231169d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3bb25561-3526-4bac-a7c5-dea24591870e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e22aa7d-25aa-4c5a-aca1-6f810c41ee5b",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a07dad14-38e8-4fe7-a3dd-8da2bb80bb52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "854e5ca5-ad84-4997-8c5a-c6800de5de9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a74b5618-28f3-441f-b20b-6f7e9a14a751",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ada049b8-b6dd-4c6d-b4a5-a53ea7623c5b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a94af51e-8d57-46ca-a4e2-e0ce597549c1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "15921119-8697-4cbc-9c8c-fa124deca684",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "147a315e-4e71-4d88-8794-ccd7f7086864",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "770b35d4-bb7d-4b30-9772-d20aab3f7800"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "298ebbdf-4ce9-4f38-be16-becadc344c10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "173da10d-ce43-4a53-accf-a6651b46c04c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6079ae5-f5be-4442-a531-8fb861d76eb6",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8234fb3-bef2-49df-bd31-0fba1edd5d11",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "0288371e-d958-4eca-a688-e9251bda9799"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d72a3aa8-8c19-4f91-9234-d76dd0d27888",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "89fc0755-2fe0-4e28-8848-2e66079e2f75"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4b726720-3caf-4c66-9cec-a061a0a6f693",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9789ed06-9557-4f83-ba7a-def52f9f1b95"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ff1bfc72-1046-406c-920a-a624b71d69c6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6f6fb8d9-686e-40ce-be31-ddd6d978e1c7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ce0f9254-f987-42dc-b621-cbc4a186d3e5",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "c1eeab8f-b658-4988-a3a1-e2a2864709f3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a5ab20bf-7247-4187-a647-4902e011242a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "51fe3eb7-7341-415f-800d-8cbaf3a5a391"
            }
          }
        ]
      },
      {
        "id": "beccedd0-6623-417d-b8a7-d01ca3eb9fe1",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "dcb36c95-b5e2-403c-83eb-e3501fbe28ba",
            "name": "Negative Testing",
            "item": [
              {
                "id": "da5589bb-92a1-41ae-a048-6fd9d87fa643",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "14eda015-d77e-4f6f-b2df-c8a0750e3059",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb2c25af-207e-43fa-ae47-4693cd798e7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5e6e634-3700-4e2e-a34a-7c7216128d0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "534e0a40-90b8-4174-bf42-c72d4167faaa",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46e84e2b-0c88-46dd-8498-acf1585c55bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83e7127b-09ee-4d16-b7eb-756d940df3f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f47693fc-bab6-4ec1-b851-2a819b33461b",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1cbac11-13f6-4f83-b30a-1d7d444eb122",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fafd7d5-92d1-4dbf-ae46-2a2c0bf1cfe1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "080ca8b8-219e-4df2-a262-a29ec63a9269",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a436bdc6-5eac-4f07-94cc-b3e9ca452f17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53f97b8a-62c5-4438-a033-4d3c8543b010"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1532fb6e-50d3-4390-ad5c-5e5fbe253376",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db1d2769-1d7b-4b42-b001-a1417b4a031a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "877e0152-2fe9-4fd7-8acf-9cf5a6ba9f4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dd95df9-21e4-47c3-bd33-5b2b7322330d",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "872d6276-3ad0-411d-a6a4-98cfd22994b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbf6f61b-a5b8-4fc3-989d-63234d3e7f56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a924414-53a2-40f5-b120-4432d17cb03e",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4bfa805-2b90-45fe-b3e0-abfef354146c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3bb4391-9eaa-4ba1-967b-23b0615efd7b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e390a098-f68e-47e8-89ee-e6451f324c6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2954a80-5c49-4a47-a503-42f0eff27424"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef0fabb0-5887-453d-93cf-7e0eeef50dda",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b71e6c76-091f-482c-9abd-ea19f08875c7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "15d22bf2-97df-4a2c-a47e-165763387a6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "110b166d-7765-4139-a651-8b2d07186f74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc03812f-a38c-40ff-8f01-dd7e298d5751"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d1b2c47-3202-4d60-803d-00e524e0e396",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24c5841c-9fd1-4c9b-9b17-5bdc395fd450",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "28b8177c-51d5-43d3-9efb-610dbf1e9157"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b993a30a-659a-43d0-8fac-a6206a75b062",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc48a7c5-a884-4065-8bb5-66cdf40bbb52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "badf6262-eb85-4492-9ae9-eb5007b4da48",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "189bac57-352a-4fc9-8dab-930ac1b1fd4d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "679034ee-1b59-427a-872e-35153fe54f2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a47ac37-4ec1-433c-a23e-85516e01073b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "faca6d5f-94b8-4c63-96d4-1253fa9bebdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "009f8c15-d80f-4192-b1cd-ccd61dc3a7af",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba2d12e7-dc7d-485f-a2c3-730e676af024",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acd7125b-d13f-4a34-940a-6c52992bc38a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d539833b-2c60-4aeb-a444-fdffc4e71c05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e203e68-5532-494d-87a6-daa144b264e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3a548bd-3765-4963-9cf1-fcc731e8bc97",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "751285e4-a7fe-436e-a939-1b3248bc4e51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10509f62-9ccc-4294-a69f-5459c32c00ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ed8da59-357c-45c2-b6c2-45971552dcf6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d8aeeb8-a4ff-4f2c-877f-3650998d73df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3b28928-5241-46ef-abb6-d72a0c26297c",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8acbbeb2-f334-4e51-ae0e-dd52c096565b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "be47c4b8-8c67-4102-b2d0-723e03a5c1be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87989825-49f8-4824-96ee-4beecca7a6f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd2927f9-a983-458c-9810-0af81f145739"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea986850-e5b9-4594-9314-70ff0c15e764",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93ae75f6-cf45-46e8-8036-b184ef46f851",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4433bba2-fcc0-4416-8a27-c82a4b46505e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "382f04a5-bf54-4e02-9771-9fe325b16915",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbc0d25f-65b1-4e47-b629-20bdcba16123"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44134f14-74e0-47e3-a960-040c54aae1df",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cbdcaca-1f2c-4f30-9ef1-eea1b94f0ad5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "015c0b10-dd16-4ab1-bbd5-cdba0642521f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbe95c27-8f87-4aec-bbbb-742fc3ac1bb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a614064-f820-4bab-aaa6-46125bd7c857"
                        }
                      }
                    ]
                  },
                  {
                    "id": "567526f2-d95a-4237-9730-e0b5f39e1d35",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39497190-162b-45c2-8640-ab1f7543af2e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8072b7f4-c9ca-4607-9f58-8567ae383f67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17765a2f-a80c-4ae6-bcb5-cf46999d3650",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6392512-e464-4cd5-9345-eccd7c6a7388"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2100266d-2021-4128-b3f5-a1fb2c24d8e7",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a1ba629-1a19-4faa-8643-a9ef5f8e9cd5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b12e60d-0f9d-40ca-99e5-eac3d6b36e08"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c9735d7-ff0d-4070-a96d-f0fd03e2f56e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e40f5f9c-e393-4f4d-af7d-5864640907f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be01d9d0-55a7-4562-a163-8c1aa4977fab",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb00d998-e653-4e2d-8140-20e90c890b52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef035af5-d76f-424e-a1db-8eccc364b2dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bee578b-cecd-4d4d-a294-6c71feb2a5d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ae6588b-10c2-4c68-ba44-3ebe90fe0d0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdb3150e-2ca4-47b3-a562-4112b905d383",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "394af105-683d-4406-907c-c348d347e1d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40c743ef-f123-4737-93dd-5e5318613afd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a275036-ecb1-4310-b8a6-7ba07572a207",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58dd388a-2aa9-4721-b0eb-c7d5ed2cd13c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8cde12f-faa2-434f-82cf-aa700d73404b",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9037e768-d02f-4e86-89db-c1a6ed0bbd6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5bafc40a-03a3-4a9a-8723-3b867e2f41f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "addbcc4e-62a7-45cc-9c7e-940d5bef4d20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fae9d9aa-6441-4296-82b0-5d839c86473d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c759d8ae-9772-48d5-8862-d44f672e30de",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67f996ac-fc6e-4560-8fde-6af61f09e4ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b511dad0-6ce9-4fc0-bc93-505cfd28be69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a04d7aa8-5796-4fed-9fda-1dde909bcc21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6759f56-7396-4530-b882-564963dcdeea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e11c0380-80dd-47c6-bb9b-2b027278a022",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1c3c473-ca9a-4a89-8127-631bec22339a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfaa40e0-f5a7-4de2-94bb-50b65a372e4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ae420c0-7b2e-4324-a46a-8449a4b7d0ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "436b3c9a-74ed-4b47-983e-0a0520774f46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28dbf88e-d770-4503-bb77-0f94e6041945",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b209561-570c-49d5-ad68-d4dd14cedff8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e48a304-1056-40f4-be3a-462cd2ecad6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4b4a0aa-e9ec-4c96-8880-79ae7992124d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c59c3428-f4e4-43c4-9a57-5902d33d9960"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96b7a6a2-80ca-4ab3-8276-1e041bd26628",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dee70717-062c-48b2-93ae-788d955cdd36",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "46f03aa5-56fe-409b-bb81-b5dfa8ab0ee7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db4282ad-08f5-48b5-b6a6-6789bd18939e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "831fa905-7e90-4acd-bba8-85454f58f351"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abd356a4-c920-486f-84c1-8e15600e7ff7",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaf05338-d15e-4bdf-8ab3-245dc9f0c0ec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "afa5450b-eaa9-4107-af36-3735a7f92df6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b3dc1f2-30b9-4ce6-bf3e-9c1bf9834426",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "434ae769-a875-4b79-8b38-3cedaa0e98ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5e26653-782b-4c9f-867b-1d3402e063e9",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35be1456-c50f-43f7-99e0-e88cbdc9ffd8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4d8f5e17-9b0e-4a04-888c-849bbac528b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac590d7c-171e-48a5-aadd-36a809bb0eed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfb7f481-7529-4198-bd7c-cf5a5dc24f1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb3b86d5-d9ec-4f07-a0c8-1300a368dd77",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4d0d358-5221-4f13-85af-f8927510191a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f8d83985-6c3d-40d4-8046-0869e571d5a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "220ccf54-8e3a-4dc3-84e9-6cd8ebd6a485",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee932ab0-7816-4c9f-a3f5-7f7bccdad5be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0762bb9-51da-4d4c-846a-f7b5de89f569",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17b4d330-238f-412f-b3d3-48737a43c4cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad10cd05-f56d-4de5-94b2-c3b54ea0c48f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "274b79a3-f9cf-4ea3-b78f-91a1a0ee477d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "861c00f6-4526-434c-bf55-3200f70d174f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aec72789-38be-446b-947b-18a04e0d48fa",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fefcec6-420f-4659-9256-ceceb958356c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e856c398-6554-4d52-8d37-166ba9467d23"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0102fdfa-a967-4709-a054-bd7e9d78a8d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fac6957-04ad-4c64-9b0f-c99f1db60d09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cad6283-1332-46d9-a5bc-f564ef794307",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97428590-b8b6-4241-8a6e-b4c97e298c3e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2464d490-3bb6-4070-84a5-b516ad581def"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf08e997-1042-4f2e-9b19-64dfce8efc78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e274ce17-2845-465a-963d-08963a3e96e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce235c0d-da19-4c61-a77f-d6c2b559cc31",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4c2980e-2c9d-49e9-9507-bcda8ca4c9f2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5a503af5-de3a-4717-9c30-0335892a00a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b52fe28-034b-415a-b109-72f03a59d509",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18eb27bb-cace-45ea-98c6-cd27c3a65ee5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "001167a1-f5b3-46a9-a7bb-c4f680a3f354",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ba76d89-4f22-44d8-90b6-df438de5314f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c3a0c826-d109-407f-999e-ccf9ff265c2d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "256d2da8-3cc6-43b2-a459-53cb6a6d5f1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf79a86e-297b-474d-a238-5e5a939f277e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "000a9c1e-4329-4988-a739-96a13c392bdf",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73cf2a73-0a09-4025-8533-88a68d79c969",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9ffcfb1e-8e22-41df-bf6e-ceff84c2ebf4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63ab6cfb-990d-4648-ad8b-948e8939c1d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86b73858-21bc-4606-ba0a-d6f4c13d9841"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3833549f-983e-45ff-b838-14dd1bbdf912",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da02f823-ef11-4a4a-92ad-53f2d860730c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "419a2b8c-9279-4217-8ad2-791ba7a4371f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95324ee7-5ae1-4fc0-858b-261626236524",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4768ee8-44a3-43a2-8c46-e43d1187e7bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41a8d69f-a4c1-4a35-bc30-461508e0102d",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b4d316d-7236-4c61-bb5e-216264cfdace",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d44e2a2f-1ca1-428b-ac14-a254390e7e09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bcc7f57-80bf-49dc-ad45-b81b057f814f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe39cdc9-2275-4292-80b6-9630f8b13bf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1b3cabd-5717-4657-a332-8c3f52d183b5",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e3125c7-20b9-48e0-be0b-738ff454ff95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed0ce870-f440-4c35-b5c1-0f43aadbe31f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49266a90-7d2a-44fe-b718-e0fe7a34f7e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b60d394-ad38-4c98-810d-8a9e214c49a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ff3c29a-3eff-46ee-ad23-6795c790f0f6",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7ec753e-7a4d-4918-ba65-535a910d2fe2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2062946f-f7bb-4b55-ac35-4e9a32465a8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98dcd4ae-ddcd-4255-b169-20c86d9098a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "264d72cf-c7a1-4f8b-8ef5-cf752242313d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdcfe824-99cf-4269-bdfa-c327b8a23928",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eedb4ad9-37aa-4727-9108-838977a5c96a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13e5d7e3-05c2-473a-abed-cfd38032f010"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d614aca4-0864-4255-bf66-cd8562b717ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c257f69-6597-47b9-a693-bac932d0a4cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "881a23ad-6287-499e-9ff2-ae3eba280532",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43de91dc-a702-40e6-83b2-0bfecf19addc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f3354df-db93-42d5-aaef-15ab40af083b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92294fe9-4598-413b-b9cf-6b949a309b26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2dd1054-718a-4f0e-83fc-dc0e325ce10e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6260237-d703-4ebc-ae54-32773672a78c",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cdfbdb6-899a-4b25-ac28-3a129cda7d5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "790f064c-c384-438a-b89e-1e336f11c80f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53544c2e-7cb4-4e02-9f8b-496ccb57ae5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81787476-57e5-439e-8394-e652168e8390"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d57410c-434c-4c60-9051-bc94b288e5e2",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "216b4396-a03b-4c82-ba15-9823df9d6ea7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ff99ae2-41fd-482a-80e2-5e83d2f45231"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a63f474b-bd7e-41f8-b9c3-f23793d8a337",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff3df49c-3ccb-4158-bf43-557de0799ba8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e8ea354-57b8-4009-9804-e26c1503269c",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75bffb20-d41d-4a95-8f80-14bb8ae82680",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5aff439f-f50c-4b44-b53d-ebec99aded42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dec8525-c37e-4cf8-8bad-ac53526cd522",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9a4912e-427f-45a6-9d9d-f7ee14336129"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8ebded5-16b9-4928-bb2f-3df510a7c652",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5883407-9720-4575-b8a6-a50b05f692aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa1c6cac-07d4-4ab8-b034-0ac494774bb8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9145c340-b425-4f41-8d8e-57ab003c576f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52c489b4-e478-4a4d-be23-ad963b0b8152"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17c2300f-cc0d-4383-a2f0-f364eaf7dfce",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "069cd3d1-5344-4aae-bddf-b59a02ed926b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7793f93c-2367-4711-9f3d-42f3cee271f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fca6b7c8-e8e3-45d3-8fc1-ff06f548111d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "160b8e3f-ed64-4405-a034-c38759cce7d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ee27cf6-5351-46e1-8a26-d433b11475f7",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89de1073-07ae-4084-bf8d-bc9d751baa1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff23f27e-5e3e-4472-ad0f-fa8c7e21a50a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "417cfc3c-06e1-45d9-94a7-ca2b5b8ed52d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e17dcae-98fb-49e3-9228-d792f6c7ede3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7317a27-5659-4bbe-8bf8-5761fcdff38b",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da648016-24a3-4940-8ff0-2bc4ffe57cac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd4ff92a-2677-486b-83f2-d84e328571a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cedb2296-3c22-48bd-9a20-3ce1da3e7650",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86157fea-5925-4c1a-b089-04c552198993"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdbd5449-55f1-4192-b123-50b515881734",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3e709f3-762e-440d-91b9-d0c9baf4d658",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0a8739f-ed09-421d-a109-b79fd4526c3c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38261dac-7a13-432a-8380-0ffbd27dcb25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd27ca5d-5d54-4610-abc3-80ef229b5345"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f9fa470-734a-410e-ba44-9f0cd425650c",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b63ad9e-6efc-48c2-bf71-c780c450d8c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9cb28427-ab3b-47ca-b50f-a17f58d291f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1daef940-cb8e-471a-8e8d-1d86fdf1daa5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2297a2cf-ab5a-4a10-96b2-a5840ff7566f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2e82867-93dc-4927-99d8-e483a7c7faca",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06774c1f-2aa3-4186-8826-e1fff4337c27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57790fe5-1c83-4026-a244-c7111fbeff09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7644b27-2577-4e98-863b-2077e71943e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7672daee-4a3d-4101-a6f9-fa889943c07a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70de8d8c-7f4e-40a7-b7f1-dfa3d216fdca",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a6364ff-db58-449d-82bc-00749ed88677",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9252747d-1af5-4504-8091-bc1b9a124fa6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d886d07-b076-413a-a0f0-fce6c1d54cf3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03c452ad-04f0-4c95-9adc-ab2257631c2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d532b34-4183-428a-88aa-61c1cb807367",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22ffcb6b-7740-4526-860a-1e2f5cbee1d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28ce43a2-e9a8-41d9-a64a-5d83ead19dd6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8014350f-7c23-4b68-86c7-b0ef4268fb99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b19f2921-32ab-4803-9c27-840510fead37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c23172bc-3d3f-44a7-b06a-6b184f3a2a3f",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9fe0919-da33-4471-b37d-d961459a9612",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44f6856e-8d94-42da-8f9d-5c59f67714dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a68b3a04-a08d-427f-bace-015b098c1040",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5717158d-8744-40ae-b40b-c975c1c3d336"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ade1896f-5366-46ab-9a40-4fed845f29aa",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a78adf0d-f807-412c-8735-b744ceb581fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a21d4b4b-f466-4017-b063-a95f7697de15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d1dd6fc-6bb4-49f1-9126-eb631a3b5897",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aea365b3-3f2a-47b4-8235-44e287a93283"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2d92923-727c-42f9-a938-00051b2b3979",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "853779e6-682c-4a9c-83e9-b3535e4cabb6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d8207ec-6d0b-40ab-9b73-0b658f04d8eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c103885-131d-4d0e-9c37-4d66ad679c08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a628899-06e9-4c5b-b06c-5807954aa3d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "556cb34d-646c-4d2c-8d52-67be875f50a6",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57714bb3-6ead-4251-8191-61e0b99e3e49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bcc91cb0-8717-4361-9522-fa1687868d0d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c96393f-e6ab-4ace-b5bf-92e1c05ede10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e1dfc34-e765-437f-bce8-f16f0e4f7bd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d5dff64-555e-494b-98ff-d644a2aa2a97",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64c28f61-4ff0-42b7-8077-e770dc0af495",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7f14887-0a9b-408f-9c50-1132e965d3d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "683c0e74-c8e0-45ed-a334-17e8889ff5c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee3012e8-c74f-4cc5-b73a-0dcb1334db08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3810e76-9c6f-46ad-8ba8-eab5d03fc350",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0f973e7-a6d2-49ec-8bc3-e0c63c2176e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "368892c1-ce41-4936-9f6f-e3a507915e05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60d0eede-87a5-4bcb-8c92-e5e8f3e82aa0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d20be8b1-7cc9-4947-9152-66e69bf3d648"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed9591ed-316e-46ef-af9d-77a073b80307",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "784b3f8b-b4aa-43c7-8cdf-bd2b5bc4e93d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35947c0b-925b-42d3-991a-fffb1a10f649"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dec4f56-f921-41c8-98cb-920ad7633063",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2be38e3c-98b8-4076-8815-f35e9a831971"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1bfd8ef-9e41-45e6-b358-c9faa4e63dee",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b4e74c3-39dc-4ded-aea7-77318cec463e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b634fe5-6998-464c-8ece-03a64426980e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3294ec8d-4da7-43dd-b37a-330e27c486ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74c6c686-5f9e-46a0-bfcc-dde7aff643a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38d095d5-2269-449c-96ea-d073455732fd",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed3a9ab2-6fde-41b9-8085-b481d317da07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9da4cbe7-0bdc-41c2-8e7e-832b5bbb896b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da9eafba-ac55-4a74-9ae0-b39ed26c390f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3c65ab5-62ad-4b7e-b21b-428d131b5ae8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89879666-9374-4d7f-a3ed-713cc757a69f",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e76d4f2-1c91-4e1b-bc93-816e42883b6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "088a10aa-3caa-4faa-9cba-172a9441958c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6acabb9-6cbb-4b42-96db-e020907a7506",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80483799-45a2-4557-8b82-db8275b8484c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c262f3a7-2113-4591-895e-92664b8e6387",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8895ad7-fb0b-4025-9fb2-9dcdcb8614bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67570c7c-d557-4983-a349-3f7aa6ec4bb7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a12145b2-1b04-40a3-8da1-3f2e1e8de441",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4baeffa-1a81-4f57-a235-a3b137d3d69a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ed51b23-97ba-4bea-ac0d-42424022585a",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d994bc8-20e5-4c55-a0cf-fef6af3af246",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffca7dbf-8e7f-4d02-8d7b-b1d3dbfc08f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc359416-c93b-4d3a-b9bd-dbc39b1a178b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ecbfd49-a2ee-4100-8ba3-e06c02545028"
                        }
                      }
                    ]
                  },
                  {
                    "id": "536c5a61-a616-4643-af92-789be8972111",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c819b5b-a0f4-460a-b88e-f5df73e11d28",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a4b29458-0f62-4895-9f42-6610d65eee21"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ea49362-b7ab-4b66-b67f-385feaf16cd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c7097b1-55e9-4e29-ab58-25fd0a5fe685"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e16194d1-1390-4dc3-8c01-633fdf3e8e3e",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0c7cefa-10c1-48eb-a315-cf4327103688",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e7a598f1-65ce-4b92-81d7-b1d65bc77e9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16b874c0-76dd-4322-979b-b566d7d97d9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fa0e7ba-8b86-402b-b100-72ee1178d488"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12b541d7-eb4a-4548-919f-cad0d57fc4fa",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ea5e3a1-4a17-48be-8432-38eb2a554892",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fdbb09e2-e4b1-47e7-bcae-785c3b400934"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cca2008-d45a-412a-97f6-055e88268dfb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58817415-8069-4607-b661-f4cc2bbe98b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "366ef4f2-480e-494f-a097-c5cd9eccce99",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bdc5e0b-0549-41fa-8751-42600c9c5628",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "23c7af54-c2e1-4ee0-90ea-4d3bc564edbf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9451042-9f5b-4081-9976-933d9a4e713f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a6f2173-762e-4090-9551-46ea1fb3ac17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fe1cd25-b1e0-4e8a-9659-3634b6e382fe",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6698b421-823a-4639-b9fd-43e442cef6ba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7ca6fdaf-3f8b-416f-a7ab-3012c55699f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5eec3519-ca6f-42c9-a0d5-7b6d89a529ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba56a885-0b32-403c-a8c9-d3c0f1710b72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f440d7e4-9b7a-433f-9e8d-d08da3f90404",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e821aed-e6b7-4ed8-aea3-491db34f0147",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a0cfefb3-ae37-4428-93d1-6a79230345e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc88322d-67f8-4b1b-9cfe-e40f2e03acb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "021c937f-92a8-4495-b6fd-a46f905a6c35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4cad5fd-b57a-4a29-a3f9-abf8a36d590e",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8aec6edd-d29d-4262-8765-8b23a7defeb1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fb1abac1-6901-400f-80c9-a333a37e6484"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5a5d2ac-2a1f-4730-82d1-cba6435bcf59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c44f284-0ca3-492a-8e34-931816a35b7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d596a19d-5b83-4727-b4a3-7295549931a3",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b91a4a76-adb5-487f-b651-8ae6917463f5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9c25b152-34b1-49b4-a1b3-f88956d6cc11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64e883ae-4f41-424a-b226-f35662733a76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7229c66-9bd6-41e7-b6d3-5b1674cb4afa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03a3bd93-98c2-46ce-a0a5-77847643e4d5",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97cba410-17b8-4b1b-a0bd-0eadcb9a9271",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a15e2fbc-debc-4c8b-8c6c-f889dffd88fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dac1214f-b362-47e9-a540-e7622ebd583a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a968069-e5cc-455c-8dd3-40d9a8f15bfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd74dd89-93f7-46db-93cf-ec7810e00a86",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "517f58bd-caa8-41cc-b0bc-118e4358648b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "38ad4158-565d-43ed-88d9-85c81fe24039"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89cb0fba-8829-406f-bffa-95c621bb05fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b8d72fb-b18a-498a-b980-a7c7af4d8cb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4393aacf-f6a7-44be-8c6a-68bdc49bcd6d",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34fd9693-07a9-443c-afa2-748a7a8cc4de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ab6630cd-10a8-441d-bd75-1e1d417cd7b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00a161ff-e39b-44b2-b361-80fbfc0c0c41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cf6df85-42ea-4527-862a-90b846b15551"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c66aa939-fd80-4d02-8e71-7a5d21a674fe",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25a832ac-f910-434b-ba5b-f4bc2e9ddbf5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cbc225a7-6e33-4f4a-a480-ff02f2665040"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a266e98d-1321-45be-9a8d-1a0552550b48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c96c2ced-6a41-4aa7-9871-2be08d102e48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11a4301d-2f30-44d6-80c0-7ffba568331c",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dd5285a-a3f8-4e4d-84c6-4485ff722691",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4d250fde-3b51-403f-a014-47604082433d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6d673bb-e174-46f6-939c-95ca748ced19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffea5ed1-de31-4138-97f2-f93180dbbd8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be8ab90d-bbaa-44fe-b666-2bea30b112d9",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "110cceaf-2470-4f5d-b2ca-c327661805bc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cbe18f17-e102-4f99-923d-8505d09f5863"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4b726d7-0f54-447b-8035-ca3fc3b0a3f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05efeb66-4f89-4d99-81db-df24045f15b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cbe151b-3a60-4f43-a8c3-206b4dff7691",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38d8607b-5cd0-4abd-8260-99493c42b36c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c0580c6f-a0ba-410d-9485-52d295723e6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef4ba978-417f-4141-a31d-5fca63e787a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ba2d080-fd6c-4681-bbfc-829ec8a7b57d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6995ab69-0cc2-490b-9ee7-a68dd4c033a8",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cae5e8b-5fd7-4c64-ab52-550429df9327",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "de46df5b-d554-4784-855b-468010b9ec7d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bc41108-cee8-4938-94d2-fe7d03e1f999",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b94db874-920a-4ec9-9236-3d7891b150a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "140ac0e6-8c46-43e3-80e5-852cd3a8ac60",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a3988eb-f4ae-4343-bf6a-79f12a8d3c6a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ab9aba16-93de-4ac3-98d7-c5a60000d679"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30a98b59-44db-4e16-8fd2-ae1ef378dfdc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ffcfc6d-4caf-4e82-a56e-92c4da98134d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c80e44c-5f5e-4748-8a43-e20acf6a9ccf",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7907f83-7e3d-4422-9ca3-88bf0dbb67c1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f3fb8de3-ddbb-458e-8a0d-0ce80aea26c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bf005f7-2a04-462c-8f3f-a580e648abfd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2a323d6-2886-4378-aa41-5faba4eb2597"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7af6d67-5384-4b13-b584-e852151d0955",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86217241-dd07-4f61-ab19-c1ba80cb18b0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "434510f8-51b8-44c7-b4e5-114c5ec17454"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce76bf1a-4a2d-479b-b2bc-cee2d274c68a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "835230d3-8758-4c68-a3ec-0beddeb21568"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd3d2ce1-21b5-4561-bfab-ac193db4f670",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2bc8562-bdff-4295-8bcc-b12e4d701560",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a3c5b0cb-5cf6-443e-b0c4-8dbbfa0801a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c28f6029-16ab-4a7b-ab77-89b344ba43c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14a3f105-75b9-450f-b45c-1976d0ab7299"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e2cb95d-1a56-4801-8171-62f6337a1ce9",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04c3006e-d09e-443a-82b0-62f477c2b9a7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e8f4d0d-c85f-4e8a-9805-66aaca495518"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c1b61c8-452d-439a-8495-3382c93f03f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "faae3fb8-f0e8-4f7a-8f08-9b7d28401f6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a192ebd-0e7e-4c69-849a-38a15fbf069c",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6084e403-622f-405f-bb48-78e322df1f74",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f060daf9-4f23-449d-94e0-58551016591c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1865ce15-804b-4b81-86af-325492e819ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0104ab3b-c692-480d-b538-45e2c363c63e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72c6eab2-078f-480c-a892-b26d634a3fb2",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e437a4a-f82a-4263-9b37-478c38f7cde1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2fbf4449-8308-448a-a230-787a8dc59ce1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "644caff3-95bd-4c67-b80c-41fe0edba436",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afe2a21f-25fa-4dea-8a1e-ca6e4bc5110d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bafcfe9-7a1f-4932-b874-4a0aee4e7c87",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8030e88b-a5d0-4b8a-8f1d-7064bebb0aec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e173244f-3256-4a2a-bce6-7e757f75b32b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "350fb107-c25d-4d97-9f79-891088bee4b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd79ba33-1cd1-42cb-a3e6-054dba3a848d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86a15cfe-ed59-4f6a-ad64-128e43e13d55",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a69453b-12d4-4d14-8d92-35bd74066225",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "90f98888-f79f-4640-af95-2d5a9f82f8dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b6c6bb2-887b-48ba-ba4d-10b0573c34f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17b1aa9b-7c40-41b6-99b6-4d9d829ba9fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01f7a79e-bf7f-463b-9ed0-ca807953493e",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a530dfe9-7a82-4eed-a22b-a6881ee02f06",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "54ccb0de-6887-4722-8d21-3413b36b30ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1494ed84-ab4f-4369-9263-1c07828c94c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d185c71a-8358-4545-ac42-0616844761e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1a5bf9e-5e55-4af1-a376-340105e38c97",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "829017d7-8835-45e6-9189-a7b62e9403d8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d25a9eda-8830-45ff-980d-1ef5d2031bc6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67d21d41-6d22-4a7b-8d54-f15ef5eb7d65",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7da3ac2-e28e-4980-8614-56b6b8176d4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fb68e0c-915a-4288-8f8f-4d6d5088a862",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a346e757-9847-4913-a95c-1d78c5bf2587",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dba70df2-4eaa-4714-a26d-3c555ce447c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99463529-22a2-4e8f-abd9-fa63cfe5e43d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be9c2192-c9ee-4508-8773-d0dd6e1c0a05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "beb3ca6c-139c-4f72-a08a-3e3649d878db",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "843ffb87-c435-40c7-826b-0bcb12c3daa1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c0568329-37e8-429c-89c1-4aea2022d0a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c1e7d70-ffd1-445c-93ca-8c6ad64e8af4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1618a01e-5f4e-4c11-b7ba-a6e667fb9d31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19304d8a-8362-4d82-a8ef-e62a41afae16",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5e63268-7445-4749-96be-06c4223f103a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0d93bf0f-fd9d-447e-839b-2ec93b405c9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb6492f5-11f7-4735-bb16-4a4037b72d06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e07c05f0-b018-4039-a649-2a8227fc3313"
                        }
                      }
                    ]
                  },
                  {
                    "id": "545a2ff1-b6c6-42e9-925a-dd72bc31f336",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bcc9733-f2c1-4db3-8581-3d118c19f3c8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "16f98853-aa7c-4bec-a036-92cad9d8d41f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7606b14a-0308-4ecb-8a6f-bd211303a4d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e84a075-07ba-40b5-a2bf-49f60fd02e63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "255424b2-882e-4bfd-8929-ef2480fb5897",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7140e51-b347-4632-93b5-6f30f7ba473d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "89803472-e6b6-4243-9480-613887291076"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85c00aef-7668-4020-971e-2a69e8c34713",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70326914-e790-4741-a9af-e92bf864a246"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b99da07-0c4b-46d5-8dd5-3dc89b0cfdfe",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cb8a1aa-38b9-4745-951f-c70116d14575",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "723dd761-49f8-4768-85e2-d5dcea7e7160"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c525140-cff9-47a2-a0fa-a16b3e6e82b9",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86409f91-182d-4bf1-841a-35d14d1eca50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98f91103-18fa-4170-bb76-aded64fd65d7",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed340b1b-effe-429f-a435-59c83ec54033",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7ab1cfdc-0018-4988-b972-1374914706e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "055f5442-a5c9-42cc-8add-6332d8122f5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24db9e08-ff6e-47f4-96ad-5ae647b2dc12"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ab083bbc-c4ae-4928-bd23-3edc5f3df5d3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "63b3bf6d-3dc1-4738-aba1-aff7b621709f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "45d74cdc-5fb0-4c40-b8f2-16ec2bfd674b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e092ab3d-0021-48df-bfea-e67b47254bb2"
                    }
                  }
                ]
              },
              {
                "id": "529fc8f5-3ee8-4b0e-ab06-9f43752d58a8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "82814287-ef51-4405-b1d3-5d56d9cb450b",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a2c0411-e5ac-4c72-a95f-7f0a1acabb8a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "c4000a91-3707-4e2f-9e87-c7e5a3ed995b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17324294-b045-45e0-84a4-5f531e9c53f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5a20a2d2-b2ef-405f-a8a7-5081e3c6fa80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e55a804a-f877-421d-a6bb-201153d083d2",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a3d38a3-611f-484e-a1a0-aec2d0f043a3",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "710f78ec-d53d-4465-a199-e582c7877343"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60ac5e59-9e9e-4b30-8a9f-fad1ffabe1ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8355bcc5-a2bd-46af-8b3e-5c87458d9118"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8698e58d-adce-4c34-8a05-38ae38d4ba6d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cbc80980-3121-4336-88dd-936290f93f49"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e1325573-fe91-42f5-b680-c3397eaf6bce",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "487e6bee-62d7-44c2-95e9-2a64171a0053"
                    }
                  }
                ]
              },
              {
                "id": "79cd033b-eb71-4e4e-9fbd-adbe883f2240",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "8315b1a9-a76d-469c-8f11-5faac8f36a16",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "366b715e-6053-492f-a7fc-60339acf3d9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "28840c8e-be34-47e5-a93b-f0fe7e6893c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08e9e6a8-55aa-4007-83cc-7e5d11ec78bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "746b418f-bc1d-4213-8364-ca3aa6846802"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "b2d4ff6f-eca7-4e32-8b30-13487db7ec22",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1b778c3e-fc22-46bb-bc4e-a9bb08013e1f",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2ed47f38-c79e-4d34-8d74-18f81c099b90",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "9412e33b-dd7e-450a-87fb-afa618517fea"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4babaea4-329c-47e9-ae71-3283526ee467",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "49383757-b766-4fb9-921b-19cd6e7d2921"
                    }
                  }
                ]
              },
              {
                "id": "5517492d-2767-4ef1-b735-e16eed84db99",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "57d8b58e-5f12-4c5b-b464-c92705345574",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "075e2821-7ee0-4933-a6d5-2827804c7f90"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c07f40cd-a686-48d0-addb-84423d0b4483",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e653e7a6-faf0-401d-92be-90dc27f87cc6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "887b6693-f837-4056-8362-72af176c6fad",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "e9ee60cd-0e29-425a-85a3-bce773a888a4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d1c42a9e-0729-4040-8aa5-5a22e0503697",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "84ffd24d-7736-4662-9191-55ade5362980"
            }
          }
        ]
      },
      {
        "id": "6e231ed2-f8e8-42df-847a-4399604ddffb",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "c57fe93f-33e7-44bf-914a-2ca572f68abb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "919e19d8-1c62-436a-9ed0-7d60fae3393b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e57a8256-1445-40f3-8190-eefab84ea828",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbbe3a35-30c2-424b-94d6-9834b69e16fe",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "6d1de2e0-b775-402a-bdfb-c5a2638f94f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f05cf9e8-0ba0-41e4-9b4d-d5cf8e38df4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6a406a55-182b-438e-9f9a-1db314b404a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96fb06d9-23e2-4b39-8a88-12c85361ce12",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50bbf30a-8bb7-4918-a12e-354f86e1152f",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "333e5a41-b050-43bc-83b5-4fdab274366b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d88483bb-3201-43d9-ae82-98e0470e34fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a124b02c-eb2f-4e76-af25-8df90810744a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "11f911ab-2f57-4c0a-8045-468828e32403",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9095a486-a16e-448a-a0cf-d33518fda51f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ada46295-311f-4b54-86dd-8b42bd07178c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "464a4a0d-9e91-4d8a-bbf5-716abb415143"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ac4cf4e9-14ba-4887-8cce-b32e055321da",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "21d617b0-ebe6-446b-ac93-6a55713a75f4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8d50ef67-c809-429c-9c4d-e6451f01d1f9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9a6ea636-1703-4132-8188-e7c561e05c30"
            }
          }
        ]
      },
      {
        "id": "bb54c327-a942-4c21-bfa6-79065abf62c5",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "c6cb6d14-8eed-4011-a454-7d770bfa41fa",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6b2fe9f0-0dea-4db2-a211-dcea44709cdd",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "54e34b4d-c9df-47ed-a5f8-6841c8cb71ed",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cde61525-6618-4a2f-9942-a67a637d6839",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3690a144-d9f1-46a7-a019-b0594cfd0d5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f31350d-3201-4b58-90d8-52e690ef06e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c3eca7d7-35a1-49cd-a85e-382d55f15331"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82e4e3c5-814f-477a-93d5-08fea8d7eb9f",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fba4e88-3966-4baa-b8ad-8130b58880cc",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "b53c932d-20b0-4ee0-be3b-1e2bcf9245b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25c251f2-3acd-42b4-854f-134a54c97022",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "692571c3-c2df-4cac-abc9-5c411b1ff22f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f52d6c03-5b81-467f-b81d-2ab5489cb464",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "82986263-9f83-4d7d-b2ef-7ede7638467f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a1650f34-186f-4415-b137-869b144b20b7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c45eccf7-b5a0-4f53-8bd9-0d395e6ec4fd"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e809c66a-15ea-40b7-9b05-f7f024ccfbc8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "2151c58d-dd67-40ed-ae35-1c70f5d2cc7d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "74ff1765-f7ec-4fb6-921b-917e818e03d3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bd676dab-bfde-4324-bb33-9489ab2d1133"
            }
          }
        ]
      },
      {
        "id": "249a3117-9521-4ef8-aac5-1fd642708497",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "750840d2-2e33-4e4d-8dd7-0faa698e8e5e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5bca81a7-948a-4a2f-9387-8908ef268cbf",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "78bdfb36-a993-4e8b-9f46-b84cd086a884",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cfa2fbc-e885-4857-a704-2a9d837ce0dc",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6a4cb824-76dd-4d5f-b050-f5cdb31ac184"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65df4cfc-39d5-431d-b326-ab9421377811",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "94529fe3-b48e-4178-aa1b-5b7f21ef6015"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ca62266-417d-448f-b9b9-aa2dc6937217",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b77de63-0c9c-4575-94d4-d5f65cc5325e",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "a2f2e8ee-e6d2-4037-b85e-ef05702d6c3d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43f7790b-f42d-4be6-8ff4-cbc6ebb38ac9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3ce1fb7c-72db-4799-9991-51e5a34e7425"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4d6e2e38-4a2d-48f5-8d85-1295e0497d41",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ade6a6ea-de0d-4f88-94e4-7c93e4bb2a29"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9124b4f1-907f-4105-a64f-f01c2ad42d75",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ab2f75eb-2fe1-46c5-a938-4e50e8489c56"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a364cd63-cd6f-4573-9c06-cbe69d06f114",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "47ac025b-ad42-4687-b0f3-f637b7ce5e00"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "03bd6301-a21d-40f1-b438-2cb8ef0beb58",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2a1769df-f673-4163-82b0-638312458603"
            }
          }
        ]
      },
      {
        "id": "86c68dba-5c4a-46a9-a7b7-93cf0ae5c098",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f2f39b5b-cac5-4c5a-a9a7-923d6a594e90",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "95ce0e79-b9ee-4b3e-828d-d9d36cac851b",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "95d8056a-1b14-4bee-a835-8d2f73adcf70",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5be1bbef-87bd-4d74-89ff-c4d95b353c4e",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ee54d646-f755-41ba-9824-c9987d9fd21b",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 509,
        "pending": 0,
        "failed": 44
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 289.2500000000001,
      "responseMin": 7,
      "responseMax": 5787,
      "responseSd": 759.1958517709082,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1679272872520,
      "completed": 1679272961543
    },
    "executions": [
      {
        "id": "5616de3b-26f2-4498-9159-b77afd459f0e",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "7085f0ab-efff-4339-a0a1-ff23e436b238",
          "httpRequestId": "048ff887-4bd3-4343-9375-b1284958ba38"
        },
        "item": {
          "id": "5616de3b-26f2-4498-9159-b77afd459f0e",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "10696dcd-8bfa-463b-9ee9-272161781e71",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 0
        }
      },
      {
        "id": "b2bbfc66-89fe-44b3-8579-202508aea1f6",
        "cursor": {
          "ref": "e16a4c42-3f47-4911-b6d9-023bb5165548",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "67f38ff0-6021-41c4-b0ed-e731a45e04b5"
        },
        "item": {
          "id": "b2bbfc66-89fe-44b3-8579-202508aea1f6",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "02786992-483d-4055-a9b2-05b68a176056",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 0
        }
      },
      {
        "id": "258a46fc-b025-4b57-8457-973c652cea80",
        "cursor": {
          "ref": "0984cf1f-449c-4d0f-851b-7af97dca534b",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "7c8717a2-3e61-42d6-bd42-30e76638e4a2"
        },
        "item": {
          "id": "258a46fc-b025-4b57-8457-973c652cea80",
          "name": "did_json"
        },
        "response": {
          "id": "38755b9c-7587-4cfa-b2cd-a92b82d651ba",
          "status": "OK",
          "code": 200,
          "responseTime": 500,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11bc61e5-22cf-4692-8f8b-4a63d8074c25",
        "cursor": {
          "ref": "83641960-45ba-471b-a558-43ab1c089c86",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "cef53e4b-d938-41f1-9724-3dc10ac6d49f"
        },
        "item": {
          "id": "11bc61e5-22cf-4692-8f8b-4a63d8074c25",
          "name": "did:invalid"
        },
        "response": {
          "id": "a96f59ca-661e-4e50-b034-6b9fa9948633",
          "status": "Not Found",
          "code": 404,
          "responseTime": 3441,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "11bc61e5-22cf-4692-8f8b-4a63d8074c25",
        "cursor": {
          "ref": "83641960-45ba-471b-a558-43ab1c089c86",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "cef53e4b-d938-41f1-9724-3dc10ac6d49f"
        },
        "item": {
          "id": "11bc61e5-22cf-4692-8f8b-4a63d8074c25",
          "name": "did:invalid"
        },
        "response": {
          "id": "a96f59ca-661e-4e50-b034-6b9fa9948633",
          "status": "Not Found",
          "code": 404,
          "responseTime": 3441,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "1a16dc1c-d371-4ec8-8d1f-980543632f16",
        "cursor": {
          "ref": "6edf93ae-276a-4cc3-8770-89808e9fafc0",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "2c98cf50-76fe-42e9-aec3-af1f6cfac11d"
        },
        "item": {
          "id": "1a16dc1c-d371-4ec8-8d1f-980543632f16",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "d60b7359-9349-452b-b6b8-432b4468b438",
          "status": "Not Found",
          "code": 404,
          "responseTime": 76,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09d4f2a2-d33f-4a92-8c0b-feb83ef8ef21",
        "cursor": {
          "ref": "f5d01a89-ec80-47b2-a631-9a190d7454cb",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "d8e74e96-3b44-47be-9703-a856dd8c2748"
        },
        "item": {
          "id": "09d4f2a2-d33f-4a92-8c0b-feb83ef8ef21",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "bfa28adb-bb39-4092-abfb-140458033450",
          "status": "Not Found",
          "code": 404,
          "responseTime": 68,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dea100bb-8b0e-497d-8be5-835a29d64869",
        "cursor": {
          "ref": "695de25a-a732-4ceb-86d7-2e87bd9353c1",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "9ad96fd0-036f-4527-930b-c24be54621f1"
        },
        "item": {
          "id": "dea100bb-8b0e-497d-8be5-835a29d64869",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "20b2eecc-fe3d-4cf5-9425-a3cdc8e99a72",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 61,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "245f47e8-b6f3-41e8-9784-7ec204875894",
        "cursor": {
          "ref": "1a824a4c-61ed-4c42-ad0d-e571f37be00d",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "0c708958-76fa-4076-8d27-722f0db94484"
        },
        "item": {
          "id": "245f47e8-b6f3-41e8-9784-7ec204875894",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "b6039a54-e88d-4878-a90a-7e1ec2cffe69",
          "status": "OK",
          "code": 200,
          "responseTime": 76,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "245f47e8-b6f3-41e8-9784-7ec204875894",
        "cursor": {
          "ref": "1a824a4c-61ed-4c42-ad0d-e571f37be00d",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "0c708958-76fa-4076-8d27-722f0db94484"
        },
        "item": {
          "id": "245f47e8-b6f3-41e8-9784-7ec204875894",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "b6039a54-e88d-4878-a90a-7e1ec2cffe69",
          "status": "OK",
          "code": 200,
          "responseTime": 76,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "4b11c62e-d5d1-46a4-901e-d0d4efc656a9",
        "cursor": {
          "ref": "b68680c7-98dd-4332-891f-e03654ba220c",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "55a88667-7821-430b-9db3-4acc6dfb306d"
        },
        "item": {
          "id": "4b11c62e-d5d1-46a4-901e-d0d4efc656a9",
          "name": "identifiers"
        },
        "response": {
          "id": "b1045c39-7035-4be5-ac50-0b6ff3547331",
          "status": "OK",
          "code": 200,
          "responseTime": 74,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5da5ab28-dc3e-41e6-813a-0bef066129d3",
        "cursor": {
          "ref": "9aaba41e-472e-4131-a853-262426a55726",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "09d0227b-5fc3-408c-9fee-daf2e758dde9"
        },
        "item": {
          "id": "5da5ab28-dc3e-41e6-813a-0bef066129d3",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "1e0b2881-6031-463e-a364-82f6113291e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5da5ab28-dc3e-41e6-813a-0bef066129d3",
        "cursor": {
          "ref": "9aaba41e-472e-4131-a853-262426a55726",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "09d0227b-5fc3-408c-9fee-daf2e758dde9"
        },
        "item": {
          "id": "5da5ab28-dc3e-41e6-813a-0bef066129d3",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "1e0b2881-6031-463e-a364-82f6113291e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7b139dd-2704-4776-a62b-290f9f6fe8c3",
        "cursor": {
          "ref": "767d6b66-a8b0-4450-b1a5-ff4fe82e76ef",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "8d18c507-1ed1-4e9c-a832-70bb6cad42ac"
        },
        "item": {
          "id": "b7b139dd-2704-4776-a62b-290f9f6fe8c3",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "1703f422-8a97-49cd-9343-60dc568ae4c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b4ba551-514f-4765-b8d1-c23b58d4b1d7",
        "cursor": {
          "ref": "fe3a5a9b-cef1-4906-8692-e6d76aa5df2a",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "0f9d1c15-365a-4570-9ac1-3dda35c1e021"
        },
        "item": {
          "id": "3b4ba551-514f-4765-b8d1-c23b58d4b1d7",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "384e6a94-dc5d-42bc-ae85-a49a2567721f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9d6b022-6600-487c-937c-a4abdfde179f",
        "cursor": {
          "ref": "47bb65e7-9ce9-4fe3-aa33-6489b9ebd382",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "6e60c78f-adb9-4851-9bf6-a27fe1aa3f85"
        },
        "item": {
          "id": "b9d6b022-6600-487c-937c-a4abdfde179f",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "278e3387-6d03-4a26-8c6f-a073823a4970",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68757e61-92f1-4f68-a4c5-55d71e411ea8",
        "cursor": {
          "ref": "520f0fb6-f5c4-42d1-9f99-62f5eda94658",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "2003e7b1-7e97-41de-8b83-4a79cb60281f"
        },
        "item": {
          "id": "68757e61-92f1-4f68-a4c5-55d71e411ea8",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "91cd7a92-97f9-4adc-990b-fa0182c78fda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87b12aab-ed79-4182-b9b9-9f79fcf120d7",
        "cursor": {
          "ref": "6e211004-9daa-4f32-a53d-fa7ac4084820",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "f6afaa94-8177-4678-a4b3-3b1c6817288f"
        },
        "item": {
          "id": "87b12aab-ed79-4182-b9b9-9f79fcf120d7",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "0e8c1111-dcb1-4dbc-a446-15a6ab52a34e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0596de55-8e73-4779-8a9e-f92144df5485",
        "cursor": {
          "ref": "81a31c6c-cbec-4394-bc5b-32f246a8f596",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "aa539736-554c-4a43-bcee-f4c79474777e"
        },
        "item": {
          "id": "0596de55-8e73-4779-8a9e-f92144df5485",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "bb7ba239-6185-41e9-92cc-8afc18027362",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b537c4a-e505-4b3a-9a6a-39f99232cd15",
        "cursor": {
          "ref": "7b570bb7-0524-4f74-bf67-ef7ff3859449",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "db4dd1b7-7e51-4a25-8304-cbf0dfad2908"
        },
        "item": {
          "id": "4b537c4a-e505-4b3a-9a6a-39f99232cd15",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "822b73a8-2262-47e3-a36c-520c4cf76edb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d1e0cac-2f2b-43a1-98cf-ecd32d0328d2",
        "cursor": {
          "ref": "d2f69140-8f33-4b44-b801-ce8cca4b2397",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "cd7ad789-f4a5-4ed1-a75c-ff0d0211aabe"
        },
        "item": {
          "id": "9d1e0cac-2f2b-43a1-98cf-ecd32d0328d2",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "242b28e3-d2fc-427f-9f9d-5bc595dd6527",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c303cf71-3be5-4e5f-ac2e-cef701fa478a",
        "cursor": {
          "ref": "c0e64c2b-b295-41d8-9437-7ba3c0a78825",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "2a04bac2-1576-4861-aafa-da2f63e2601a"
        },
        "item": {
          "id": "c303cf71-3be5-4e5f-ac2e-cef701fa478a",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "2fc8fb3d-0f42-43ba-bd0c-a994ce740dd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a6ae80a-8c4d-4602-adb8-832e52deb598",
        "cursor": {
          "ref": "71c5751d-bfb6-4c99-8886-1c981ec7c057",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "558f9264-e0ea-41f8-b09d-e607db715af7"
        },
        "item": {
          "id": "8a6ae80a-8c4d-4602-adb8-832e52deb598",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "1d18393b-1719-4782-bf80-e90f079fbfab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25745dfc-b1f1-4b23-8d30-7274fe8ee07f",
        "cursor": {
          "ref": "990e15dc-4a08-44ba-8243-831149b1adb1",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "5504b5d5-5a4b-431e-a525-581f018a4cb2"
        },
        "item": {
          "id": "25745dfc-b1f1-4b23-8d30-7274fe8ee07f",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "a715a2d2-4268-43ee-b624-ada36711c298",
          "status": "Created",
          "code": 201,
          "responseTime": 1335,
          "responseSize": 982
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "6950a25e-731d-4886-b600-fbce76989539",
        "cursor": {
          "ref": "46edcb52-ce51-4868-b549-bac8e8a72c87",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "a7630893-c40b-476d-a2f1-aeedf0ace218"
        },
        "item": {
          "id": "6950a25e-731d-4886-b600-fbce76989539",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "ebdde134-46b7-42f8-9edf-66a60c31ca4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 112,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a30fc0f-38a9-4647-84ac-3056cf8c5755",
        "cursor": {
          "ref": "1db5f75b-e8dd-4563-a436-9e8760aecb27",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "8dbc4ebb-87ea-4835-aa69-139612539222"
        },
        "item": {
          "id": "9a30fc0f-38a9-4647-84ac-3056cf8c5755",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "3353c64b-43e1-4a85-adff-f24df7cf1a66",
          "status": "Created",
          "code": 201,
          "responseTime": 3336,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "60564fdd-e14e-43e2-a713-2a20af8916aa",
        "cursor": {
          "ref": "c61d1ada-6c28-4b3b-92c8-31ec0548b952",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "dce4ff35-cdac-4f80-98cb-26700eadb19d"
        },
        "item": {
          "id": "60564fdd-e14e-43e2-a713-2a20af8916aa",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "1ee76a06-1114-4c5b-856e-8f5f12b32ffb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f16f07e-809a-412d-a79c-eded6da9d741",
        "cursor": {
          "ref": "941d53e3-9818-4052-b71d-f2a0df09a94b",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "1f2e20bb-0c26-4ad4-ae74-253482d60557"
        },
        "item": {
          "id": "6f16f07e-809a-412d-a79c-eded6da9d741",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "f1f704b8-6fdb-40ef-928f-c44bfa7d27bd",
          "status": "Created",
          "code": 201,
          "responseTime": 5787,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "f0d7161b-37c7-421b-a9be-22e04cbf9d93",
        "cursor": {
          "ref": "c1e2201a-1071-4229-ae4a-ea0cb74057e2",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "afe3dd65-80a2-4097-a17f-f446de8c0e2b"
        },
        "item": {
          "id": "f0d7161b-37c7-421b-a9be-22e04cbf9d93",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "e9385325-8fec-42f1-99b2-879b2f88545c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51f30ad2-a187-4622-bed1-f513b25e565d",
        "cursor": {
          "ref": "3ed3127a-ced4-448d-aca0-d3610b3d57e8",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "aff69038-d685-4ebc-8ab1-8b0e9f2dd8aa"
        },
        "item": {
          "id": "51f30ad2-a187-4622-bed1-f513b25e565d",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "f718a9bc-78f3-41a6-872e-0696c6c3aa2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ffd77e7-c272-456a-891e-f9a9f5a75770",
        "cursor": {
          "ref": "b9bdb1e8-1e4e-4791-a0d3-489939e95cb9",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "526a69a2-0b8a-4f04-a50b-71460771cc2c"
        },
        "item": {
          "id": "8ffd77e7-c272-456a-891e-f9a9f5a75770",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "212ec4b1-5143-4aa5-bb1d-052f2b0a3c27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa13aae1-2e24-4790-a3a4-b9af358e2fa1",
        "cursor": {
          "ref": "d3da273a-043a-4a34-8fbd-09a75856acf0",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "74b41cbe-cb83-40a2-8874-f278f9834742"
        },
        "item": {
          "id": "aa13aae1-2e24-4790-a3a4-b9af358e2fa1",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "4ee692b8-284b-4bb1-a5e3-71af34754b21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "766eb40b-0588-4bf9-99f5-e96213ccccb0",
        "cursor": {
          "ref": "63dcb00d-d36a-4958-9ffd-5c82fd5f06c4",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "0c7d4270-972e-4968-95f1-c10ab11a86dd"
        },
        "item": {
          "id": "766eb40b-0588-4bf9-99f5-e96213ccccb0",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "b5d59e6a-92d1-4717-b47c-18ba95626bf5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae746575-faab-4c89-8e64-7becf511785d",
        "cursor": {
          "ref": "940c5b3f-7a20-40b1-95eb-be719be34f96",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "a59e6a55-9e46-4e46-8815-3b962f8f11f8"
        },
        "item": {
          "id": "ae746575-faab-4c89-8e64-7becf511785d",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "01e1a64e-00c6-4c42-afb3-7ac362401342",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20645e11-43ad-418d-9699-03a979cbc825",
        "cursor": {
          "ref": "32b421c1-c861-4b4d-ba03-fda5ad7d83fa",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "65bcdcf1-1deb-41ed-a5cd-d87419d985d6"
        },
        "item": {
          "id": "20645e11-43ad-418d-9699-03a979cbc825",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "f9411b0c-74a0-484d-b2f4-4afabde3733c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa8cfcd7-2a17-442f-9d0c-edc2169849c8",
        "cursor": {
          "ref": "c625b201-d2e8-4e0a-8bd0-1a976b3973db",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "b13267c8-891f-433c-b0f2-75856cfe2e69"
        },
        "item": {
          "id": "fa8cfcd7-2a17-442f-9d0c-edc2169849c8",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "8b7d88fa-6004-48ff-9273-11943d087019",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20a55b5e-95c0-4e98-8e2a-a498be449267",
        "cursor": {
          "ref": "4342b613-4c65-4263-a2d2-73ba0279f164",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "515dfb33-eec2-4bf6-9caa-7ba02434dbee"
        },
        "item": {
          "id": "20a55b5e-95c0-4e98-8e2a-a498be449267",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "d8f5e9c8-4a2c-48a3-a01c-7448ac65aa8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2919e9a3-6546-465c-8fb0-235a874fd95b",
        "cursor": {
          "ref": "1cef604b-9544-45e1-86b4-fc2ed3fbfe9c",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "c60206b7-a2b4-44da-bd4a-b3729460c2f8"
        },
        "item": {
          "id": "2919e9a3-6546-465c-8fb0-235a874fd95b",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "4a705212-63df-4b3d-81ff-61efdf0bd981",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd3ce6d3-f014-40c9-ade5-5126ed9120f8",
        "cursor": {
          "ref": "0b59e1c4-1a36-42d0-adca-003b13b44701",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "51636bfb-4d43-40b8-b3fc-62ff5afe1715"
        },
        "item": {
          "id": "dd3ce6d3-f014-40c9-ade5-5126ed9120f8",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "a2b4bc3b-fc70-468f-830c-82c23721bb0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88153164-e508-4f87-82c6-68cc96e3bc86",
        "cursor": {
          "ref": "c38b0a3a-9fbb-45a1-b8c6-a15f1b043f18",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "fa778bac-127d-414e-a75c-6cb89013e943"
        },
        "item": {
          "id": "88153164-e508-4f87-82c6-68cc96e3bc86",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "ff64d0c9-ab76-43a6-8c54-6967a4473ade",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05a0235d-6b1a-4d98-9fc4-7f3b2cc98c54",
        "cursor": {
          "ref": "6c0dc8ed-e74b-4404-91c8-cbb597779e2c",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "5f548c10-7772-4896-92a9-b01321d5802f"
        },
        "item": {
          "id": "05a0235d-6b1a-4d98-9fc4-7f3b2cc98c54",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "8dac6459-0b9c-4aeb-b190-cc310814febe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a94d1db-fb72-4ca3-96dc-9c2c7ba5d9d2",
        "cursor": {
          "ref": "d5d7202f-60d5-4333-9faa-634f718be159",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "baaf6b75-afb2-4986-bd23-150df473bd33"
        },
        "item": {
          "id": "7a94d1db-fb72-4ca3-96dc-9c2c7ba5d9d2",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "17caf7dd-0fbe-4cc7-a147-c24cdd838b7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a18b7b54-af73-4016-9108-c6b61579acfc",
        "cursor": {
          "ref": "75a7727d-89a2-44af-bfb1-95ebb2926d2f",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "d6e85a92-2c9b-4e09-bb59-0b14b0514596"
        },
        "item": {
          "id": "a18b7b54-af73-4016-9108-c6b61579acfc",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "799b450c-151d-4983-8506-8738969a7fe5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58cf7431-94c0-49b5-b112-614ff691c830",
        "cursor": {
          "ref": "73347ea4-0bdd-40cb-b73a-e12f5f550b4a",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "9c5b47d4-aa73-4337-9500-1e774959c5e6"
        },
        "item": {
          "id": "58cf7431-94c0-49b5-b112-614ff691c830",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "aba1144a-830b-4d2d-943a-23516c5255f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "289e62ec-9d32-4873-81e1-1b43d0b270fd",
        "cursor": {
          "ref": "12a6e311-31d6-4a93-b125-7e977184d3a6",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "685ea665-3ad5-4468-a0a7-15f6b31b6970"
        },
        "item": {
          "id": "289e62ec-9d32-4873-81e1-1b43d0b270fd",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "686c79c5-b515-4ae1-a05d-93f0a207a44e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e28a708-2017-443e-8730-ba5ea942e7a1",
        "cursor": {
          "ref": "5703e137-93c2-4aec-9116-847a53d0e31d",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "d2f64e17-b1c6-4e12-92ea-ee1dd5827bb0"
        },
        "item": {
          "id": "9e28a708-2017-443e-8730-ba5ea942e7a1",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "27302cc0-4fcd-47e4-b17c-7945a5859857",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b87ce386-4141-4190-9c91-842451f4f9c8",
        "cursor": {
          "ref": "72cab371-7c39-4019-9c9d-fe71172065cd",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "007ef6d6-6a68-4243-9355-1898d9247431"
        },
        "item": {
          "id": "b87ce386-4141-4190-9c91-842451f4f9c8",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "fff93c03-2519-446d-8709-60c25d02a5f9",
          "status": "Created",
          "code": 201,
          "responseTime": 2668,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "f9f1a1ff-cf43-4da0-90f8-8ebf2b6487f9",
        "cursor": {
          "ref": "c21d27e0-5de9-4096-b886-21b2dd40d867",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "319b12b3-c6d7-4f92-b8da-9e462695b358"
        },
        "item": {
          "id": "f9f1a1ff-cf43-4da0-90f8-8ebf2b6487f9",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "689db49e-b46a-4571-a490-517bb84ee8c5",
          "status": "Created",
          "code": 201,
          "responseTime": 2414,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "b42a61c1-1412-4a7c-a753-de9c88c11399",
        "cursor": {
          "ref": "9a7d6da9-ca0c-47f0-9193-3ef9b91d9a54",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "2f4ec758-f8d5-419a-9589-0d80e059e96e"
        },
        "item": {
          "id": "b42a61c1-1412-4a7c-a753-de9c88c11399",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "fbe8af8b-f559-4a5b-922c-861eb3d049f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fdfb1fd-b249-4eed-a556-6d3da3cea990",
        "cursor": {
          "ref": "5a996f69-01d5-400c-a8cb-b5eb9be6b752",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "ba7fa25d-8fb5-4f97-b5c6-16659577f1d1"
        },
        "item": {
          "id": "5fdfb1fd-b249-4eed-a556-6d3da3cea990",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "26d13811-f3d4-42ab-9b5d-86dc202016d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8575acb-c9f6-4ca6-9e05-1644d2fe511b",
        "cursor": {
          "ref": "4f66c537-cb81-4690-9973-a3b242535c5a",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "346db299-0b19-4bcd-a918-a7022c022d97"
        },
        "item": {
          "id": "d8575acb-c9f6-4ca6-9e05-1644d2fe511b",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "6cb3f89d-926d-4d55-bab6-e6eeac79e579",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "daeeed63-5858-438f-8fb9-6367cf4aee67",
        "cursor": {
          "ref": "11aec1e4-8b98-49e5-8bca-fde74a30efd8",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "da64d2c6-43a5-4ddd-ae35-6438ea53b47c"
        },
        "item": {
          "id": "daeeed63-5858-438f-8fb9-6367cf4aee67",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "779320f6-4cf3-47a0-86a6-8beb640bf682",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78c2dbd0-c8be-4132-a9b2-f691380623e2",
        "cursor": {
          "ref": "208dda18-cc57-4a19-ac46-b572b0ea761d",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "41bb8f9d-d897-4798-a8a3-bece5d72d019"
        },
        "item": {
          "id": "78c2dbd0-c8be-4132-a9b2-f691380623e2",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "b597fd90-4ba1-46bb-9245-5c65a116d4c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c5fb02f-fcdc-4a05-b4a6-4a0358e3e798",
        "cursor": {
          "ref": "c76bff8b-c2aa-4f85-8fbe-fcb47e7a7106",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "25b676cc-70c3-4b22-9bb2-b665c757bb11"
        },
        "item": {
          "id": "6c5fb02f-fcdc-4a05-b4a6-4a0358e3e798",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "6465911c-dfee-43e3-8a9d-f5d10b2cc06d",
          "status": "Created",
          "code": 201,
          "responseTime": 2462,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "4c480e80-5afa-4fff-8289-1a5b286a24c2",
        "cursor": {
          "ref": "e187ef4d-b03f-46a4-8e82-b94c79a04f43",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "c4ff6990-586c-4abe-85ab-62ca28e3ee1b"
        },
        "item": {
          "id": "4c480e80-5afa-4fff-8289-1a5b286a24c2",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "ebcc6b27-8cd7-433f-8fbd-7c3aaa610e5d",
          "status": "Created",
          "code": 201,
          "responseTime": 2548,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "dc7f4641-da70-4dde-b4b4-9a08c9da6e6a",
        "cursor": {
          "ref": "3dd15b7e-dd0a-4f80-9302-8011af961308",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "e372e731-1070-4ce6-b130-2426ebdf53ae"
        },
        "item": {
          "id": "dc7f4641-da70-4dde-b4b4-9a08c9da6e6a",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "36033149-61a2-4af6-bb01-34acb7fbd44f",
          "status": "Created",
          "code": 201,
          "responseTime": 2731,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "b89056f3-4b7d-462c-b6ca-f11c4ba8610b",
        "cursor": {
          "ref": "da3c5f3d-3f76-4425-bc97-fc68e7122a59",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "224d8100-ccb7-4bd8-998a-4ddabfa99fa1"
        },
        "item": {
          "id": "b89056f3-4b7d-462c-b6ca-f11c4ba8610b",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "72f7c35d-6791-4bef-b4cb-c181b4c72e30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 141,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4f09c57-bb63-4d90-9558-131bddcd281d",
        "cursor": {
          "ref": "da12f221-b279-42fd-a504-952aca45eae9",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "e4b5373a-900e-4bc0-84b3-993fe924607a"
        },
        "item": {
          "id": "a4f09c57-bb63-4d90-9558-131bddcd281d",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "3529d59b-66cb-47b9-a393-72a33217c123",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b4522e6-9053-4370-a598-de61a2d67364",
        "cursor": {
          "ref": "41bc6053-cd21-4d57-a0dc-2fde3762b889",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "f9193d26-291c-48f3-9fb5-92feaac3dddc"
        },
        "item": {
          "id": "8b4522e6-9053-4370-a598-de61a2d67364",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "34904704-c013-4b24-a336-b95494f24d7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 166,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cba06dd9-5cd4-42aa-bcfd-bcb909505aaa",
        "cursor": {
          "ref": "82f3f2ae-86db-46dd-8c59-8bec39c2c4ed",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "edec1514-7f39-495e-bd33-e10fd422eb9b"
        },
        "item": {
          "id": "cba06dd9-5cd4-42aa-bcfd-bcb909505aaa",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "0d123e27-00d1-48a8-8b82-a2010a6053de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "322d45ee-95ee-46b5-80c9-83964a5c1f8e",
        "cursor": {
          "ref": "b3d16e0f-b0fd-4c63-9adf-e5f2a8b67ae2",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "e23e3687-2f0b-44a1-aee5-aa6dcd07bdb5"
        },
        "item": {
          "id": "322d45ee-95ee-46b5-80c9-83964a5c1f8e",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "62f361ae-f285-4b8c-ba22-d7bcf8dee624",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7ff7639-96cc-4921-82e2-1ca83629ecd2",
        "cursor": {
          "ref": "c21de578-71f6-4b25-97a9-bc008982395c",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "3bc7b85b-ca20-4432-bf2c-ed4f93bfcb0f"
        },
        "item": {
          "id": "e7ff7639-96cc-4921-82e2-1ca83629ecd2",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "8824eac2-824d-4a06-94b7-d68d773b8368",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8ab1a07-dbdd-4c79-bb65-19e12169969a",
        "cursor": {
          "ref": "022a27a6-717c-49a1-815f-95f16e1bdba6",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "eb26b522-610b-48df-9600-caf856d17f2d"
        },
        "item": {
          "id": "e8ab1a07-dbdd-4c79-bb65-19e12169969a",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "3c7c4a8e-6351-4622-b8cf-f7cf90f993a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "622c1321-144a-4b49-a1ad-695ec4d026aa",
        "cursor": {
          "ref": "f495492a-2932-4e7a-95f0-651d4e47c38a",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "4f983948-9cd3-4bc8-85f0-eccf78e02b07"
        },
        "item": {
          "id": "622c1321-144a-4b49-a1ad-695ec4d026aa",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "82b5225c-0ed9-45e8-81ad-e9ea7f72c1b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8782e83-c73f-4b10-943c-1ed9329e25e5",
        "cursor": {
          "ref": "d0048a5f-c756-4215-9871-e26ad5154fc8",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "dae55179-5019-400c-bce9-1265083477d1"
        },
        "item": {
          "id": "f8782e83-c73f-4b10-943c-1ed9329e25e5",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "a2fa1ca5-af9c-4a50-8a5a-2518155ba034",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b052eb7c-526a-4bb0-8022-dc77d228f131",
        "cursor": {
          "ref": "ce506093-ebc5-4d22-a7a4-984e79084c39",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "119f6011-d66f-4632-a678-4c657359abd3"
        },
        "item": {
          "id": "b052eb7c-526a-4bb0-8022-dc77d228f131",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "aec58866-75fc-4d7e-9367-a926532281ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23c5980a-3819-4395-9475-6ad2787ae177",
        "cursor": {
          "ref": "38f4c320-ee95-4be8-b21d-4bd9ca9565be",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "b8603bb1-f6f4-40bd-bb96-d505ce4e3d97"
        },
        "item": {
          "id": "23c5980a-3819-4395-9475-6ad2787ae177",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "8cb2b8fb-b145-4a9e-a518-e7d4fd6cc040",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0dde6da-7283-4efb-9e66-83aac52e11e2",
        "cursor": {
          "ref": "4f0b386e-7aa6-4622-b496-69f664bae706",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "9b5654f5-56b5-402b-adff-0d29e6c4072f"
        },
        "item": {
          "id": "b0dde6da-7283-4efb-9e66-83aac52e11e2",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "d8315bdd-e4e3-4ff0-a892-6ce01f2f3ae3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81a38b04-bbd6-43e5-8f83-21c0eed67f84",
        "cursor": {
          "ref": "35866201-9235-47c1-860b-3563ed42befc",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "653918c3-1ba2-4765-81f3-9f467d1ab8a3"
        },
        "item": {
          "id": "81a38b04-bbd6-43e5-8f83-21c0eed67f84",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "7c5e27d4-f8dc-41ef-a0da-ae706d5e39b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc476aac-f4e6-47a8-8dff-97b7bdb36a57",
        "cursor": {
          "ref": "b709c7ea-fbb4-475a-bd3b-0479eec1011b",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "efa183d4-6a6c-43ae-baa0-cfc47c1f37a8"
        },
        "item": {
          "id": "bc476aac-f4e6-47a8-8dff-97b7bdb36a57",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "92a51d04-50ee-457c-a014-82e48872d3d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b7f7f5c-9b9e-4705-81af-ede806017612",
        "cursor": {
          "ref": "719cfb26-675c-4160-8e0f-68a6c92fddaf",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "367cce6e-37a6-4156-9238-36f590b5ff4a"
        },
        "item": {
          "id": "8b7f7f5c-9b9e-4705-81af-ede806017612",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "37cad175-e80f-4b43-8db4-d0021c9495a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "851772ba-9541-4608-bb49-6560ee43ab14",
        "cursor": {
          "ref": "96f22597-0ebb-4523-bf98-2610bbdeaa6c",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "a51e08e8-027a-4315-82b2-5c1586c39eea"
        },
        "item": {
          "id": "851772ba-9541-4608-bb49-6560ee43ab14",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "6e35fdeb-9097-49fb-ad01-06722ef9138c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1331faa-d369-4f49-a11b-a69c014f7bcd",
        "cursor": {
          "ref": "c7053678-e8f6-43f2-ae47-782bfa506db2",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "afbe5c59-d4da-45a5-b22e-6b9ff4093ab4"
        },
        "item": {
          "id": "a1331faa-d369-4f49-a11b-a69c014f7bcd",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "a994d6f6-39d3-4241-a089-7af5b03c1759",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40c48d3c-cdd9-4968-a85e-03f6419b46ca",
        "cursor": {
          "ref": "5401caf9-864d-4713-91d3-e9eb23dbac1b",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "ecd466d4-3f0a-4fb0-87dc-d1c56d7d0363"
        },
        "item": {
          "id": "40c48d3c-cdd9-4968-a85e-03f6419b46ca",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "26bac239-e617-4ed5-93a8-dc1654c4af39",
          "status": "Created",
          "code": 201,
          "responseTime": 2075,
          "responseSize": 976
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "23edb21f-d5ab-422c-ae54-e19382b364cc",
        "cursor": {
          "ref": "88276cf3-521f-4d38-90a6-e5c15842d33a",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "1cb6224d-f953-4558-a9b4-0813dee782d0"
        },
        "item": {
          "id": "23edb21f-d5ab-422c-ae54-e19382b364cc",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "307f63f0-a633-4faa-be14-6735fe8c19cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2545e43e-e228-46d2-a01f-db3e87a03827",
        "cursor": {
          "ref": "86958b48-3933-46e1-b90c-cabedc361e61",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "1f2552ac-e457-49ce-bc8d-ca0358d754a6"
        },
        "item": {
          "id": "2545e43e-e228-46d2-a01f-db3e87a03827",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "c7a03b6a-1370-494d-a160-019865421822",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 144,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f017c9f-04f5-4059-aa6b-15aae0c055f1",
        "cursor": {
          "ref": "8eb35693-62db-4da8-bc35-642960ef89c8",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "7430182b-3307-4164-991a-2ca1cd213a95"
        },
        "item": {
          "id": "2f017c9f-04f5-4059-aa6b-15aae0c055f1",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "6cad25a5-54c2-4a8d-8aaa-e829681287f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f3f136e-e196-4199-a606-0f571a55078f",
        "cursor": {
          "ref": "a3d348f8-d500-49a3-8ae1-5b22e1bf4a49",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "ecca559d-f7e2-44bb-81bd-d948c0f66b80"
        },
        "item": {
          "id": "1f3f136e-e196-4199-a606-0f571a55078f",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "f75a9a65-a846-455a-b7dd-88c45461e212",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "903d4cdb-d393-4651-89af-189a07c2e7b0",
        "cursor": {
          "ref": "07cd8c8b-612e-4002-b7d2-785822ebf2f9",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "3bc0fb28-944b-4f8a-8afb-619e2c3fb0fa"
        },
        "item": {
          "id": "903d4cdb-d393-4651-89af-189a07c2e7b0",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "133ab655-82cc-4777-a453-5ee12a1a159a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cedbcc85-9f4e-49c2-9c12-1500aff3076c",
        "cursor": {
          "ref": "8bd8b3ed-24ae-425c-b162-fc2b1a2135ae",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "c2555554-9739-4294-9504-2633c9212b65"
        },
        "item": {
          "id": "cedbcc85-9f4e-49c2-9c12-1500aff3076c",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "5bdb3f37-9699-45fb-a8e8-501d2a4da756",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33ce1b83-2183-431c-b875-95f87d0eaa86",
        "cursor": {
          "ref": "0d574bd8-50a9-4925-a15e-6576bb7754cd",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "80ce1c27-d562-441a-a619-715f6d86e5a2"
        },
        "item": {
          "id": "33ce1b83-2183-431c-b875-95f87d0eaa86",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "df63c54f-9a78-4ad9-8446-453d4a8792b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b1ebbab-6c1b-4f0b-91c4-3b6d3f94bc81",
        "cursor": {
          "ref": "1422a5ee-6456-439d-bbd4-64d09fa23592",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "90edea7c-dcd0-4ec5-a0e5-8bdd9560314d"
        },
        "item": {
          "id": "4b1ebbab-6c1b-4f0b-91c4-3b6d3f94bc81",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "2df66012-a0ce-4b74-887c-bbf0b05fb924",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dea59357-ad91-4412-bae2-9bd7aecd8f85",
        "cursor": {
          "ref": "1ea52308-18b0-4d30-8ad9-9a4c41b651c7",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "60f74ef9-d941-4043-9783-b37359aadb75"
        },
        "item": {
          "id": "dea59357-ad91-4412-bae2-9bd7aecd8f85",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "faf64fcc-8562-432d-8d49-b4b4b9002a6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59b38715-00b4-4031-919b-45261afe12d5",
        "cursor": {
          "ref": "4a898627-d6b1-4e74-ad8e-c939949c1e11",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "092f3550-fa46-42ce-be1a-db32778bbd30"
        },
        "item": {
          "id": "59b38715-00b4-4031-919b-45261afe12d5",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "019b7943-0218-45cc-a3c5-bc9f5a7fbda3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79b90f3a-69c7-41ac-86f7-be4c7b180607",
        "cursor": {
          "ref": "96dc85d5-87fe-4966-b588-54599f4fe002",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "9839fcfb-22dd-4a98-b99f-8142cf93e1b4"
        },
        "item": {
          "id": "79b90f3a-69c7-41ac-86f7-be4c7b180607",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "be6e7c35-dcea-4dbe-9e1d-a4ad13686f1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9229f790-f2bf-4651-8fed-ade67861e3da",
        "cursor": {
          "ref": "fbcaa6e1-476e-404b-ab01-1629d686c54e",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "944fe886-98f7-40d5-83ce-f1548e51cfdc"
        },
        "item": {
          "id": "9229f790-f2bf-4651-8fed-ade67861e3da",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "4ac430c6-d6d3-4984-99b4-2730f4fc52fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e09bc258-2098-4b54-82f7-20ae702c1d4f",
        "cursor": {
          "ref": "230aebf5-3891-40f3-9644-91e18f91d391",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "5c588afa-5d05-41c4-b7e2-087574196979"
        },
        "item": {
          "id": "e09bc258-2098-4b54-82f7-20ae702c1d4f",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "a7cae212-dfcd-4ab0-b341-d2e614ed02a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8029073-e3f3-4098-9e43-12705a0912f8",
        "cursor": {
          "ref": "ec38f7eb-147c-4ea2-8405-e241e6b358c3",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "c6448922-cce5-4313-9a54-07b3a44e3380"
        },
        "item": {
          "id": "f8029073-e3f3-4098-9e43-12705a0912f8",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "668ad433-2d98-41e6-9c77-e97f13f6bf20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dec17775-8d0b-432b-a907-43a586e8630f",
        "cursor": {
          "ref": "69ebd8f8-1291-42ba-812d-8aec2bcdaa48",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "437578ee-cdc5-4d4e-8d78-c2ca6f528ac4"
        },
        "item": {
          "id": "dec17775-8d0b-432b-a907-43a586e8630f",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "180048a3-d76d-4753-af00-8feddbfeb465",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9c65283-8561-4d54-9216-734419958e48",
        "cursor": {
          "ref": "7fcfa5ac-a6af-460d-9971-f8d606f10c5e",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "efbbb121-6173-4953-93b6-5522eb6000df"
        },
        "item": {
          "id": "c9c65283-8561-4d54-9216-734419958e48",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "b8ffedd1-39a6-4bbf-91c4-22aecbbe60ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 111,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eaff375c-df83-4d78-9f44-2d46e79c20d7",
        "cursor": {
          "ref": "130f865c-3cec-4353-9ca5-b89d1e659606",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "a6d7c25f-d8ed-49d5-b6ef-711534a8d06e"
        },
        "item": {
          "id": "eaff375c-df83-4d78-9f44-2d46e79c20d7",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "5feedb9d-a14e-4a70-972a-0d1dde0e0e34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4626d8f3-9d32-4c0d-9b72-d0abd56b25d9",
        "cursor": {
          "ref": "c27baf8a-c6af-479e-9025-9cd421c70484",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "abe61501-a490-4069-931d-df3c69d88029"
        },
        "item": {
          "id": "4626d8f3-9d32-4c0d-9b72-d0abd56b25d9",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "abce945a-ff84-487a-b4a3-61921a7fd2e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3f6b25c-a50e-4ecd-8324-b4252266316e",
        "cursor": {
          "ref": "8301b9ef-4ad4-47e3-b440-192a7304b9fe",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "8b49abc7-c4cf-46ac-ad38-31b99c1f78c4"
        },
        "item": {
          "id": "c3f6b25c-a50e-4ecd-8324-b4252266316e",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "87d41128-ad11-4629-8e6e-b5d1a06ed062",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "350c9c95-c996-49de-a457-66ba9cca467c",
        "cursor": {
          "ref": "50fcb2cd-a164-4b8d-a86b-c3d5658e67b8",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "ec894782-bff8-4db2-8a0b-8871e7367578"
        },
        "item": {
          "id": "350c9c95-c996-49de-a457-66ba9cca467c",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "8aee368d-6530-419d-a110-d5337421e418",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18eb52c9-85e5-49cb-abad-49d1d8b410e1",
        "cursor": {
          "ref": "7fac6b72-af8c-4a45-a695-b5c49dd3e1ec",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "c936c2c3-c425-4054-bafa-430eb26e2569"
        },
        "item": {
          "id": "18eb52c9-85e5-49cb-abad-49d1d8b410e1",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "e21b670a-b7f0-4e83-8597-f86c339854d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a53ba87-14f7-49bc-81b5-bc955120f342",
        "cursor": {
          "ref": "5b09cff9-ce6d-4bde-b00b-00d7186beb4a",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "03f81501-3c1f-4b21-8c9f-1ac6a1432d5e"
        },
        "item": {
          "id": "9a53ba87-14f7-49bc-81b5-bc955120f342",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "ccd22f49-6e4a-463d-91f1-6cf77bc97544",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38ee6a46-5e44-46eb-a672-0aeffe1e3e7f",
        "cursor": {
          "ref": "323bb005-4583-4f20-8123-1ff892b6536f",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "88ff983c-c347-4689-9cc5-bb6eda49461d"
        },
        "item": {
          "id": "38ee6a46-5e44-46eb-a672-0aeffe1e3e7f",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "e7b49949-42b1-49bd-a935-1f269c8e4dbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 184,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b0e5554-b435-4a59-a1f8-35b140b80728",
        "cursor": {
          "ref": "1ce852bd-d0f7-4a4a-9c04-d9db05bdb151",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "8a71821d-5beb-4d9f-8ccd-1adc43843142"
        },
        "item": {
          "id": "9b0e5554-b435-4a59-a1f8-35b140b80728",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "c9fa67ec-b2dd-430d-8f55-5585845c142e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c43513fa-02bf-45d2-a15a-7f9c17e03b7c",
        "cursor": {
          "ref": "8979817d-edfa-4f82-bcf3-55b574d15e1f",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "ff378b77-fbd3-4076-be5e-19d20a9ab1dc"
        },
        "item": {
          "id": "c43513fa-02bf-45d2-a15a-7f9c17e03b7c",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "7535662a-b682-4161-b990-430e4e5e5db3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64aba06e-6df9-436a-9414-4f08de6cf399",
        "cursor": {
          "ref": "a3011dfa-cf43-44b7-a037-2a635a16c8d0",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "73ae851f-b2df-4286-99f3-11119de972ba"
        },
        "item": {
          "id": "64aba06e-6df9-436a-9414-4f08de6cf399",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "11b1b27a-3f9c-42f2-866d-8b067ac0a5be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99d326b6-385e-4b06-b308-0a99300c4a10",
        "cursor": {
          "ref": "c3ecbf3c-25e1-41f6-a6cd-d6ccb3028e32",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "5ce18c42-08bb-4038-a2b7-114ff13f29ea"
        },
        "item": {
          "id": "99d326b6-385e-4b06-b308-0a99300c4a10",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "9d8407e7-3b51-4ec8-a5ff-f4fa42ae9058",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc7ab034-49fc-4ee1-beeb-5157a6c910fa",
        "cursor": {
          "ref": "f77c0579-9c31-4c29-a349-67de8dbdb9de",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "bf5ddf08-3221-4b9c-b606-7a67bc110fac"
        },
        "item": {
          "id": "cc7ab034-49fc-4ee1-beeb-5157a6c910fa",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "99daa568-176f-4c0d-9d26-2fde53a45b80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb5e1bd2-ce38-4482-945f-600f0662067a",
        "cursor": {
          "ref": "b413f356-a923-40e3-9b14-ff563803a755",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "f0c80744-4905-4488-9607-d60e601faa81"
        },
        "item": {
          "id": "eb5e1bd2-ce38-4482-945f-600f0662067a",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "a7bc25d7-5a10-48ff-bc3b-a28ffadee15f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b91521f-8196-43b4-9ec8-8ef1f9b4a72f",
        "cursor": {
          "ref": "df5afc3d-5335-4167-90d0-1085697f1c99",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "9bbd02fd-e8ce-49ac-8720-bd81d6186b38"
        },
        "item": {
          "id": "0b91521f-8196-43b4-9ec8-8ef1f9b4a72f",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "c40e7634-406b-43c6-a2a7-16aa565b0bfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7378dc5b-4d48-49a7-8b82-30113f81b724",
        "cursor": {
          "ref": "c5bf20a0-b29c-4a36-99d4-86d8016534d4",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "856b8c53-7ae9-4ea0-8da8-60fb4b7144e7"
        },
        "item": {
          "id": "7378dc5b-4d48-49a7-8b82-30113f81b724",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "7b8a5589-cdda-4614-8bac-cd7adad1599b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "5e9cd32b-a559-4706-888d-134474f74ed5",
        "cursor": {
          "ref": "a8f18949-677b-4932-9597-0de5b3557f4d",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "bb7eed67-a155-436a-aa58-60f10f3a2f3e"
        },
        "item": {
          "id": "5e9cd32b-a559-4706-888d-134474f74ed5",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "94fadae0-7e59-40a2-8426-390554efaa82",
          "status": "Created",
          "code": 201,
          "responseTime": 1942,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "bf344338-e9d9-49ff-86b3-00f1a36ed88d",
        "cursor": {
          "ref": "c86f4cf5-6189-41d0-94f6-206681566ea5",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "58b83a45-6fb0-4971-bcd8-cef799a019a6"
        },
        "item": {
          "id": "bf344338-e9d9-49ff-86b3-00f1a36ed88d",
          "name": "credentials_issue"
        },
        "response": {
          "id": "01b2852f-ac36-4b6f-8f27-88b4704175f1",
          "status": "Created",
          "code": 201,
          "responseTime": 2274,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "b92d2d1b-1cb7-427e-a8b5-cea7c3627ad3",
        "cursor": {
          "ref": "e7a3ee33-5a63-4e5f-afad-9bc6a20b3834",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "7b1b319f-7f7c-4e29-a438-8be1771a8cf3"
        },
        "item": {
          "id": "b92d2d1b-1cb7-427e-a8b5-cea7c3627ad3",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "1fc03ff5-2a55-405e-9c10-9d90c65ec6b6",
          "status": "Created",
          "code": 201,
          "responseTime": 2678,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae3a521e-b81d-4cfb-ba5f-af796fa60048",
        "cursor": {
          "ref": "69454c1d-0da4-42ea-b667-8fedbd5df44e",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "43578368-d81c-407c-8a43-34308d749c34"
        },
        "item": {
          "id": "ae3a521e-b81d-4cfb-ba5f-af796fa60048",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "b8736cfe-ec45-453a-bcd3-43d4ce7e98b6",
          "status": "Created",
          "code": 201,
          "responseTime": 4300,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ea4f9fd-79e7-4816-bf71-1a1c495e2cac",
        "cursor": {
          "ref": "6322f491-ec28-4318-b696-e6ea5931baac",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "3835acb5-2af9-4ff0-bed6-66219ebef042"
        },
        "item": {
          "id": "1ea4f9fd-79e7-4816-bf71-1a1c495e2cac",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "d055d2cc-8e7f-40a7-b46e-6dcc025b7cb4",
          "status": "Created",
          "code": 201,
          "responseTime": 2454,
          "responseSize": 993
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "07cd409e-d637-473d-97b9-b061e43a18e1",
        "cursor": {
          "ref": "44ca2f9d-9940-4fc1-bce0-82f8b0a861ad",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "5a5a2c33-f053-44b7-940d-bf77927ee9be"
        },
        "item": {
          "id": "07cd409e-d637-473d-97b9-b061e43a18e1",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "6ba89c20-0f4a-4623-9d9d-15bb78bcf629",
          "status": "Created",
          "code": 201,
          "responseTime": 2558,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-03-20T00:42:13Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-03-20T00:42:13Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:108)"
            }
          }
        ]
      },
      {
        "id": "a2e6ff98-4626-4b50-9c2d-652824cadca2",
        "cursor": {
          "ref": "5ef95aec-2c38-47c7-a559-3cbfbbb45709",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "403e7ecf-07ad-47df-9479-524b7278e994"
        },
        "item": {
          "id": "a2e6ff98-4626-4b50-9c2d-652824cadca2",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "3b67d33f-4897-463a-b38b-5165f4de20fb",
          "status": "Created",
          "code": 201,
          "responseTime": 2466,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e05eba76-cb32-476f-942d-9ca6ce000714",
        "cursor": {
          "ref": "1de2216f-939f-4912-8d07-9c8d80e0b42c",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "93052270-74a9-47c9-82c8-3a2132347064"
        },
        "item": {
          "id": "e05eba76-cb32-476f-942d-9ca6ce000714",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "a62f1470-591a-4956-85d1-0b2c231026fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e05eba76-cb32-476f-942d-9ca6ce000714",
        "cursor": {
          "ref": "1de2216f-939f-4912-8d07-9c8d80e0b42c",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "93052270-74a9-47c9-82c8-3a2132347064"
        },
        "item": {
          "id": "e05eba76-cb32-476f-942d-9ca6ce000714",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "a62f1470-591a-4956-85d1-0b2c231026fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32beadf4-efcf-4c3f-84a6-8ec97ed95dd1",
        "cursor": {
          "ref": "3f1f577e-dca2-4a7f-bc58-04e1b0f8568b",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "f9c1f009-8489-4802-aa33-67c5b6d9f74a"
        },
        "item": {
          "id": "32beadf4-efcf-4c3f-84a6-8ec97ed95dd1",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "e4df81fe-95d2-432e-ae18-9ff4b7d7c25b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac1e92d7-b72e-4f5b-8c9e-d6762bda288b",
        "cursor": {
          "ref": "609cccee-2610-4c43-86c0-83def86075a8",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "611b5c8e-2574-4010-86c7-62adde3d0695"
        },
        "item": {
          "id": "ac1e92d7-b72e-4f5b-8c9e-d6762bda288b",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "5694385c-81fa-4ece-8548-89697980dacf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "641481b0-a3e6-48bc-98a2-4c1d31ff151b",
        "cursor": {
          "ref": "044e42c5-335d-499e-a10a-bcabdc2d0a5a",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "b8cc00d8-108b-47da-80a2-3480008d6793"
        },
        "item": {
          "id": "641481b0-a3e6-48bc-98a2-4c1d31ff151b",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "d3662a28-ba41-4c3d-bac8-5a344b6046f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba7ec3e7-5e04-43a1-a77c-a36439324a40",
        "cursor": {
          "ref": "79ab2d3b-95f0-409c-a531-5d147c20b0d2",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "5f561422-b30a-483f-8e64-d904895237c2"
        },
        "item": {
          "id": "ba7ec3e7-5e04-43a1-a77c-a36439324a40",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "79a95cf0-22b6-4037-b8c0-830809b183d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c867f7eb-1196-4bb4-9c18-8be4353ba53d",
        "cursor": {
          "ref": "55e3c02d-a7c3-4a93-8ec6-25724aa2f366",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "f52a8475-ac2f-4950-8b47-0c1e4749dd6d"
        },
        "item": {
          "id": "c867f7eb-1196-4bb4-9c18-8be4353ba53d",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "544cf98a-49de-4e08-abb1-6c0e90589f9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab1c8b46-01b8-4f4f-901c-55cf9dddef77",
        "cursor": {
          "ref": "dd26afea-44d9-4a8a-b835-4fabbb1305f4",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "aa721c31-6041-4ecc-b1f3-ace71e4466dd"
        },
        "item": {
          "id": "ab1c8b46-01b8-4f4f-901c-55cf9dddef77",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "78fe4c8d-d0b0-46ce-a773-90cbd0294943",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc4525ef-d020-4941-896f-b8f293c5ef9c",
        "cursor": {
          "ref": "bcdf831d-b9d9-4db3-a6c6-92847dcc128b",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "49062125-1480-487a-b66c-5e57e5c8e946"
        },
        "item": {
          "id": "cc4525ef-d020-4941-896f-b8f293c5ef9c",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "eeee3e26-87da-4dfb-9792-e2208a72e78c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e18a1c72-c772-4758-8f73-ef5e9bf36d84",
        "cursor": {
          "ref": "3e2766b4-9822-4563-bc9a-a3bceef03afc",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "1473c450-3073-4448-b6be-bc7df07d8abf"
        },
        "item": {
          "id": "e18a1c72-c772-4758-8f73-ef5e9bf36d84",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "f20f5f9a-af37-4ea8-ba23-5ef08fdfe411",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78b181ab-3351-49d3-ad69-626cfc994bd6",
        "cursor": {
          "ref": "ca5a1c74-c479-4a1e-9032-54fbfdd5a221",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "0e324764-9860-4922-b40a-dfe9507a98e3"
        },
        "item": {
          "id": "78b181ab-3351-49d3-ad69-626cfc994bd6",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "a8d97c39-43c8-434e-beb5-9f1120feefd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "226c14b4-5ef1-4c8e-af11-1238f4ec7970",
        "cursor": {
          "ref": "459c866e-16d2-48fd-81f2-b1cbbfc2bda1",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "8ed6eacf-3597-42ed-ae95-26938f3d6f9d"
        },
        "item": {
          "id": "226c14b4-5ef1-4c8e-af11-1238f4ec7970",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "e2a141e6-5e5f-4e21-a674-b5cde48ef8d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e16f313a-ec30-4ce0-8c6e-44f61dba36ce",
        "cursor": {
          "ref": "bd19871b-3819-464a-b171-5fb29ae6d26c",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "1499d184-6ffe-47ff-946b-4b96d528f707"
        },
        "item": {
          "id": "e16f313a-ec30-4ce0-8c6e-44f61dba36ce",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "de005616-a5fa-4f0b-8387-d41e70416ca8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11ac1baa-124f-418b-a4a9-5402d54f6e9c",
        "cursor": {
          "ref": "b5a4b0be-e0b8-44a6-a68a-96e6ad6cee99",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "ee077eda-6dd2-4d32-b49a-d5fea8f20345"
        },
        "item": {
          "id": "11ac1baa-124f-418b-a4a9-5402d54f6e9c",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "f18fc9e5-eb5c-4ab6-a8bd-49e0a3970c8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54c7f3ba-faac-458e-9c24-d6316582c3ec",
        "cursor": {
          "ref": "dcaac0fb-469b-40fe-99ea-55ee10f34755",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "f0cedd5a-f075-430a-a481-93ecc2bd9cc4"
        },
        "item": {
          "id": "54c7f3ba-faac-458e-9c24-d6316582c3ec",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "bfcaefa7-a9d1-4521-a488-871a655f0e27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f132280a-59f3-48d1-987f-50cb37007c59",
        "cursor": {
          "ref": "0bc0e03a-dfad-4588-8d75-7753d5cc5385",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "4e791537-754a-4df6-b089-1a6799f530a3"
        },
        "item": {
          "id": "f132280a-59f3-48d1-987f-50cb37007c59",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "38f852aa-b735-412f-870b-bd18421e5012",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d39e0608-c0ea-4e35-900f-43b8788b20c3",
        "cursor": {
          "ref": "8fcbe80c-5320-4c64-aa3f-caee4e30cffb",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "16c0b4b4-1c43-4714-b54e-521cf429e6e2"
        },
        "item": {
          "id": "d39e0608-c0ea-4e35-900f-43b8788b20c3",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "8b53a38a-3932-4440-ad02-223c9537ef5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "961fa882-0e97-48cd-b16a-681eb2aec2a0",
        "cursor": {
          "ref": "2bdfb3dc-10ec-40e4-8b81-85e3676c783b",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "06e86e4a-33d6-4b42-909b-df4f13557a4f"
        },
        "item": {
          "id": "961fa882-0e97-48cd-b16a-681eb2aec2a0",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "38b04fa4-e3fe-41ae-a597-223d5bb3d6d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42f49caf-a62a-4b8f-a477-e0e9f581ff96",
        "cursor": {
          "ref": "bd7de9e6-52a1-44da-9b75-c4ecd8480415",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "bf82b7c1-a228-436a-a094-77a690997859"
        },
        "item": {
          "id": "42f49caf-a62a-4b8f-a477-e0e9f581ff96",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "b3fd04af-341a-4d7d-9293-d815660e5f44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be073113-b097-4530-be83-1bbbfcb4b9fc",
        "cursor": {
          "ref": "dd306a7c-7df2-49cd-aab8-0c5f6201dfb5",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "07ea6dfb-9fc2-4098-8a3a-bb32b1ab701d"
        },
        "item": {
          "id": "be073113-b097-4530-be83-1bbbfcb4b9fc",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "5d7eb4ab-997e-4244-9994-6e3932805385",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d53393c-8e26-4124-a23f-687cde72b0cc",
        "cursor": {
          "ref": "36ce7ba0-bf31-481c-a6fa-c016ea08f16b",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "3a8c7e77-e920-4a0b-9a04-de58e6cbfaa5"
        },
        "item": {
          "id": "5d53393c-8e26-4124-a23f-687cde72b0cc",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "a564a695-12d7-4968-82e6-77e8e09941db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "507831c5-02ac-43eb-a5f8-4e8a713bd708",
        "cursor": {
          "ref": "ece69cb8-200a-497e-8589-564be37e613e",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "88c6233d-0ddf-4627-ac0f-3f930dcc05c2"
        },
        "item": {
          "id": "507831c5-02ac-43eb-a5f8-4e8a713bd708",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "367dd663-d432-47a1-9b94-bf78d43b76e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9173a5d2-1d92-483e-92ff-54d2a0fa67be",
        "cursor": {
          "ref": "bb403ef4-5738-4a5f-b868-acc709d43d0c",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "c1084567-c971-4fdf-8274-b67095534b92"
        },
        "item": {
          "id": "9173a5d2-1d92-483e-92ff-54d2a0fa67be",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "13be33ad-70bd-45e4-b17f-12da682f2efe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27e269f2-2d8d-4136-bf3b-e7bb4f2ba442",
        "cursor": {
          "ref": "f49b2fa1-9d54-4cef-a8f1-a5b12ca85d18",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "ee63c396-ad70-409c-a7a9-9e94dcc95218"
        },
        "item": {
          "id": "27e269f2-2d8d-4136-bf3b-e7bb4f2ba442",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "ef1cce51-4eae-4776-b94d-6f911618b785",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a944b7d7-63f9-4ffc-8d52-6465071312bc",
        "cursor": {
          "ref": "f1cd0e4f-b895-4b74-aaac-8ea14f6b0ef5",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "439e6180-d05f-47a6-9293-b3cd308f345b"
        },
        "item": {
          "id": "a944b7d7-63f9-4ffc-8d52-6465071312bc",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "faa4d65f-811d-4629-9793-064f1b4aa163",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56b1175e-11e3-4747-8812-ba8ea880ebd4",
        "cursor": {
          "ref": "595528f2-2292-4801-9a7f-5283a3ebc7af",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "607308bc-4aba-43f3-84f0-f8b513812e6f"
        },
        "item": {
          "id": "56b1175e-11e3-4747-8812-ba8ea880ebd4",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "36affa64-57ce-4a14-891b-17cb363ad774",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5bf3eea-26bb-4a4c-955b-02cd821dfd4c",
        "cursor": {
          "ref": "9f376f9b-47a9-4631-9694-f5cc98f35544",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "abb41263-bb65-471f-8909-dd23b26dc193"
        },
        "item": {
          "id": "d5bf3eea-26bb-4a4c-955b-02cd821dfd4c",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "4f62656a-4692-4bd5-b559-dc83804cb490",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f700d12-e192-4f4c-acc3-0d7748958727",
        "cursor": {
          "ref": "117d11ce-b7a4-4b07-a246-b5a7bb9eda60",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "b688ad59-3e59-4714-a772-bf71ebf6e017"
        },
        "item": {
          "id": "4f700d12-e192-4f4c-acc3-0d7748958727",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "d4df4fdd-d0b6-4cf5-91d7-20ed8f296ddc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12e34742-e19d-46b4-a246-f23af8048339",
        "cursor": {
          "ref": "fc7c58d1-2817-4c24-a851-a9c76926c983",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "a402167e-b552-423a-b5f5-07afb16756a4"
        },
        "item": {
          "id": "12e34742-e19d-46b4-a246-f23af8048339",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "f45c3cdc-766c-4f66-8b8a-c00cf0b8235e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a77533b-f1ef-4ae3-83be-15189304154a",
        "cursor": {
          "ref": "81dcbafe-4d10-4546-8038-2c64a895c66e",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "3df32fb1-2580-411c-9ce6-7df4f1efb815"
        },
        "item": {
          "id": "4a77533b-f1ef-4ae3-83be-15189304154a",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "50d4d6b5-f757-4c87-b05c-717ede8bfd04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1675a36d-ae99-4ff4-a667-d05aef6276a1",
        "cursor": {
          "ref": "7fffad72-8a0b-4247-ba09-4b3bd1c6f8c8",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "9f15b7a2-0143-4777-83c3-e3d00390d6bf"
        },
        "item": {
          "id": "1675a36d-ae99-4ff4-a667-d05aef6276a1",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "5bbb45f5-1a0b-48c7-bba4-e2fe4642ef9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8b3f71a-f0f6-464f-9825-1442551cc5d5",
        "cursor": {
          "ref": "2a51cc95-cf18-4407-8038-b0b5892eba95",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "7d89d649-3402-4fab-b966-582314b75747"
        },
        "item": {
          "id": "a8b3f71a-f0f6-464f-9825-1442551cc5d5",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "51babdd1-bdc3-4a6e-848a-c191a52c94c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e22aa7d-25aa-4c5a-aca1-6f810c41ee5b",
        "cursor": {
          "ref": "1be2e003-ef80-4893-a727-7ac19368662b",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "6b5ce8e2-1784-41a4-8395-d797b5935b22"
        },
        "item": {
          "id": "3e22aa7d-25aa-4c5a-aca1-6f810c41ee5b",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "8e78e0d5-6202-4e34-9c28-37805a4573f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15921119-8697-4cbc-9c8c-fa124deca684",
        "cursor": {
          "ref": "ad0d293b-c13d-4619-92c5-3f0860fc5feb",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "5b52d349-5f71-4127-8ec7-3055b26724e5"
        },
        "item": {
          "id": "15921119-8697-4cbc-9c8c-fa124deca684",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "2ed15e4d-27c9-4800-9a5d-ba7d9771d874",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "e6079ae5-f5be-4442-a531-8fb861d76eb6",
        "cursor": {
          "ref": "e5fc633d-f20f-4a1a-b369-497a2fc94f0d",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "70dc6ebe-c49e-4e87-a4d3-75ee98a6599e"
        },
        "item": {
          "id": "e6079ae5-f5be-4442-a531-8fb861d76eb6",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "a9ee0cbb-e9fa-4232-aae9-d552d597c53f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "14eda015-d77e-4f6f-b2df-c8a0750e3059",
        "cursor": {
          "ref": "ffa5e043-08c5-4e60-8b6a-03f487b2cce9",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "0f0732d2-29cc-488a-b617-f072a8d456fc"
        },
        "item": {
          "id": "14eda015-d77e-4f6f-b2df-c8a0750e3059",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "598198db-c915-4fb5-8acd-88e5d1af0617",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14eda015-d77e-4f6f-b2df-c8a0750e3059",
        "cursor": {
          "ref": "ffa5e043-08c5-4e60-8b6a-03f487b2cce9",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "0f0732d2-29cc-488a-b617-f072a8d456fc"
        },
        "item": {
          "id": "14eda015-d77e-4f6f-b2df-c8a0750e3059",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "598198db-c915-4fb5-8acd-88e5d1af0617",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "534e0a40-90b8-4174-bf42-c72d4167faaa",
        "cursor": {
          "ref": "b2597ff4-936d-436e-8fc3-7c50c76f2d85",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "2091a5f6-3a14-454b-8861-fd88cbbd8097"
        },
        "item": {
          "id": "534e0a40-90b8-4174-bf42-c72d4167faaa",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "34c58cce-15dc-496c-8577-087ca2c6a27b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f47693fc-bab6-4ec1-b851-2a819b33461b",
        "cursor": {
          "ref": "76a4d9fc-3559-46a0-bf73-f753d579f603",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "423ea726-f11e-4f54-8779-fe78bc24f663"
        },
        "item": {
          "id": "f47693fc-bab6-4ec1-b851-2a819b33461b",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "cc70f4a0-0e37-4ba2-8a94-47e6aebae0f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "080ca8b8-219e-4df2-a262-a29ec63a9269",
        "cursor": {
          "ref": "b886ca66-7f6d-4f4f-95ac-eb26e4ad0911",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "44ced096-e750-473e-af7a-823ccc234647"
        },
        "item": {
          "id": "080ca8b8-219e-4df2-a262-a29ec63a9269",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "f5c35920-9f7b-42d5-81b0-98ce4d010083",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1532fb6e-50d3-4390-ad5c-5e5fbe253376",
        "cursor": {
          "ref": "aaedd1eb-411b-4e8e-8e7a-a8b5a07c51ea",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "5900dd51-a54d-4788-a1e9-06bc3006e53a"
        },
        "item": {
          "id": "1532fb6e-50d3-4390-ad5c-5e5fbe253376",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "0f020d81-92e7-4c3f-a867-8cdc68d1a148",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8dd95df9-21e4-47c3-bd33-5b2b7322330d",
        "cursor": {
          "ref": "961b58a3-5b9e-40b7-bb31-499ab8200822",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "59c1ea4c-5b0b-44a9-8f52-9f59dca25b27"
        },
        "item": {
          "id": "8dd95df9-21e4-47c3-bd33-5b2b7322330d",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "dc0afe4e-b86d-481d-99e3-7dec22815e6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a924414-53a2-40f5-b120-4432d17cb03e",
        "cursor": {
          "ref": "7d693a17-237d-497e-8cad-46d6b02a2ffe",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "dfc0516c-47af-493f-aceb-95b1094e423d"
        },
        "item": {
          "id": "4a924414-53a2-40f5-b120-4432d17cb03e",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "21fe6584-5482-4770-bdbb-fa5da9355a41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef0fabb0-5887-453d-93cf-7e0eeef50dda",
        "cursor": {
          "ref": "4dc4294a-ab6e-45ea-b88c-b8efe103e802",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "243a0320-d5cf-40a6-93f4-54316ffae4d4"
        },
        "item": {
          "id": "ef0fabb0-5887-453d-93cf-7e0eeef50dda",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "831f5c28-edfd-48e1-9017-7ac9815dcf37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d1b2c47-3202-4d60-803d-00e524e0e396",
        "cursor": {
          "ref": "4efc253f-0517-4967-8d8a-0cae8d7cd06e",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "633084bf-9d24-45b5-b560-4659612f30ad"
        },
        "item": {
          "id": "5d1b2c47-3202-4d60-803d-00e524e0e396",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "0c0f59f1-49f7-46f5-8bd5-aa2edcd6fa28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "badf6262-eb85-4492-9ae9-eb5007b4da48",
        "cursor": {
          "ref": "7969f4f7-f909-4efc-9bf5-809773a98563",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "2e4d0ae7-f036-4367-b817-ec5d237b2f02"
        },
        "item": {
          "id": "badf6262-eb85-4492-9ae9-eb5007b4da48",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "e17b442a-962e-4a75-8597-6e4b0d4c8a39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "009f8c15-d80f-4192-b1cd-ccd61dc3a7af",
        "cursor": {
          "ref": "eaef3918-a192-46b5-95ad-95d4451e8411",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "b5b62cca-4850-4d12-afbf-1b433dd1ef76"
        },
        "item": {
          "id": "009f8c15-d80f-4192-b1cd-ccd61dc3a7af",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "01314cd2-76d1-46dc-ad94-af637774fa4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3a548bd-3765-4963-9cf1-fcc731e8bc97",
        "cursor": {
          "ref": "95cb6bd5-2f44-429b-a5b6-f60ec06dc97c",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "03d959b9-1ca2-4d80-b394-f59a1f254be5"
        },
        "item": {
          "id": "c3a548bd-3765-4963-9cf1-fcc731e8bc97",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "d5b2a886-e1dd-440d-8376-865c799ac533",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3b28928-5241-46ef-abb6-d72a0c26297c",
        "cursor": {
          "ref": "fc476588-8006-4029-a252-519926daa5a8",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "c09f29d8-5979-4b62-b011-b3b2529d9be4"
        },
        "item": {
          "id": "d3b28928-5241-46ef-abb6-d72a0c26297c",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "bae4a834-32e2-4b35-b2b0-fb44e4e23253",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea986850-e5b9-4594-9314-70ff0c15e764",
        "cursor": {
          "ref": "984d1c10-f17c-4317-9838-7e69a39fc210",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "7a68d3d8-7efe-4c49-afef-b075c9208aeb"
        },
        "item": {
          "id": "ea986850-e5b9-4594-9314-70ff0c15e764",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "ae28f722-3655-4733-8ace-f9a352b06f69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44134f14-74e0-47e3-a960-040c54aae1df",
        "cursor": {
          "ref": "d83c4f9a-c33f-45b5-9698-18e13328be40",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "21a1ccc8-21fd-4c82-820f-6571419ab06d"
        },
        "item": {
          "id": "44134f14-74e0-47e3-a960-040c54aae1df",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "bb7bfe47-f04d-4144-9d2c-0eccc42ca2c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "567526f2-d95a-4237-9730-e0b5f39e1d35",
        "cursor": {
          "ref": "093fbc0f-0250-4c5d-b8d6-ced73d89e03a",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "1587aef9-a9ff-4944-a367-e65d60e03753"
        },
        "item": {
          "id": "567526f2-d95a-4237-9730-e0b5f39e1d35",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "25cf4bd6-095a-42a6-868e-2087c932cab5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2100266d-2021-4128-b3f5-a1fb2c24d8e7",
        "cursor": {
          "ref": "a361700b-b025-4e93-a267-34234e0810d2",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "09e2d506-249a-4df7-9c33-260613cbfb25"
        },
        "item": {
          "id": "2100266d-2021-4128-b3f5-a1fb2c24d8e7",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "258124af-cfce-450e-bc59-863910e15d9d",
          "status": "OK",
          "code": 200,
          "responseTime": 269,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "be01d9d0-55a7-4562-a163-8c1aa4977fab",
        "cursor": {
          "ref": "cb389d06-9cd5-47e6-adae-3960c465c562",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "db650dfa-5455-4004-b937-35d69b9b2ffe"
        },
        "item": {
          "id": "be01d9d0-55a7-4562-a163-8c1aa4977fab",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "53ae315c-35d2-465b-b687-dc4f9e9667f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdb3150e-2ca4-47b3-a562-4112b905d383",
        "cursor": {
          "ref": "eacb7ba3-97e1-4009-a308-cda4cc042d85",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "4c711b0a-73da-485a-86ad-e48ef113ac8f"
        },
        "item": {
          "id": "bdb3150e-2ca4-47b3-a562-4112b905d383",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "97f75e59-b208-4b69-b3ea-0e11aa143cb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8cde12f-faa2-434f-82cf-aa700d73404b",
        "cursor": {
          "ref": "112dc45d-ab30-45d1-88d6-653e287b9059",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "7390a364-ef5c-4ea2-8087-b20a2de789ed"
        },
        "item": {
          "id": "e8cde12f-faa2-434f-82cf-aa700d73404b",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "0cafc36b-69c8-4f2d-97a6-03362b0608a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c759d8ae-9772-48d5-8862-d44f672e30de",
        "cursor": {
          "ref": "5cd47200-3bef-4c1b-9936-c4263c6706eb",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "188262d3-9c6a-4021-babd-51666d79e7ee"
        },
        "item": {
          "id": "c759d8ae-9772-48d5-8862-d44f672e30de",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "be1dbbf4-25d6-4fce-b380-c21a7207ee38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e11c0380-80dd-47c6-bb9b-2b027278a022",
        "cursor": {
          "ref": "ec56d172-ce78-4d63-8532-5497e9b3c845",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "a66f06b3-fa98-45ed-9cbf-d41cbc2f8b66"
        },
        "item": {
          "id": "e11c0380-80dd-47c6-bb9b-2b027278a022",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "d01edd3d-5118-4e54-8723-cfbc2aff43dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28dbf88e-d770-4503-bb77-0f94e6041945",
        "cursor": {
          "ref": "3038e6ad-d7aa-4263-b6cb-a655adea622f",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "adc60101-e5bd-4995-aebc-b4d3ea601578"
        },
        "item": {
          "id": "28dbf88e-d770-4503-bb77-0f94e6041945",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "66f43de3-425d-494d-b7f9-8c3f7ceb4956",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96b7a6a2-80ca-4ab3-8276-1e041bd26628",
        "cursor": {
          "ref": "df285ad2-f84f-466f-8967-5acb49a54b5e",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "df10e99d-730d-4bda-996f-69755d83fd3a"
        },
        "item": {
          "id": "96b7a6a2-80ca-4ab3-8276-1e041bd26628",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "d9f32214-5e68-45b1-8d1a-f6379189fee0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abd356a4-c920-486f-84c1-8e15600e7ff7",
        "cursor": {
          "ref": "10af863b-4aca-475d-8d3c-58c817572ba0",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "0af64658-3b7d-4556-b69b-7e1bcc9e8542"
        },
        "item": {
          "id": "abd356a4-c920-486f-84c1-8e15600e7ff7",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "7377d63d-2755-454f-b814-ffed6617fe6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5e26653-782b-4c9f-867b-1d3402e063e9",
        "cursor": {
          "ref": "6444f106-766a-41ca-8735-dedd47c6addd",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "db23fd7b-b38f-4844-81f9-7f48676b950b"
        },
        "item": {
          "id": "a5e26653-782b-4c9f-867b-1d3402e063e9",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "2d434622-e2b0-4cc9-bf85-9081ed594cfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb3b86d5-d9ec-4f07-a0c8-1300a368dd77",
        "cursor": {
          "ref": "e10e041d-ab4a-4a1a-b362-231c621fcb67",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "af4a0ed5-f26f-4d28-9f27-fb66cd99c5a4"
        },
        "item": {
          "id": "bb3b86d5-d9ec-4f07-a0c8-1300a368dd77",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "7a569e25-e0f6-406e-87ce-ef44f2d854f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0762bb9-51da-4d4c-846a-f7b5de89f569",
        "cursor": {
          "ref": "97a5609d-d3ab-4404-a52c-caa41d233205",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "fcbbb0e2-e340-4233-a4a0-8b80596d5147"
        },
        "item": {
          "id": "c0762bb9-51da-4d4c-846a-f7b5de89f569",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "303040fe-e17d-48a2-94dc-58cbec46c7eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aec72789-38be-446b-947b-18a04e0d48fa",
        "cursor": {
          "ref": "d0923b8d-d4b9-4d5d-9b0d-64c8a75addf2",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "0cb66f55-64d7-4100-a2bf-63e78522a3cf"
        },
        "item": {
          "id": "aec72789-38be-446b-947b-18a04e0d48fa",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "7ebaa0fc-52ac-4aa6-ac55-bd3ec178cbb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cad6283-1332-46d9-a5bc-f564ef794307",
        "cursor": {
          "ref": "e08847a0-7822-476a-adf6-d96d58f39802",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "e3e92024-96a0-4464-ab76-bcb166fd18eb"
        },
        "item": {
          "id": "4cad6283-1332-46d9-a5bc-f564ef794307",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "4ef6225a-852f-4979-8c12-ea2914536300",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce235c0d-da19-4c61-a77f-d6c2b559cc31",
        "cursor": {
          "ref": "a1d5ecc2-a7e6-4706-b0b5-5334dcab5c98",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "31e057ff-0479-4a2b-a38c-499e21e8f07a"
        },
        "item": {
          "id": "ce235c0d-da19-4c61-a77f-d6c2b559cc31",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "8babb6be-b273-45a3-bdf6-c9c44249af8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "001167a1-f5b3-46a9-a7bb-c4f680a3f354",
        "cursor": {
          "ref": "ffe0a21b-6331-4e5f-9727-c09230469fd5",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "7ae8d6d8-a324-41eb-85c6-ef5b650c5ae3"
        },
        "item": {
          "id": "001167a1-f5b3-46a9-a7bb-c4f680a3f354",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "e2d5657f-896f-43fa-a7cb-fd291064ef88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "000a9c1e-4329-4988-a739-96a13c392bdf",
        "cursor": {
          "ref": "d3ce7c6b-adef-4e38-8813-6402d3b69eec",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "17339db9-b72f-4ed4-8330-fbcf98c0a28f"
        },
        "item": {
          "id": "000a9c1e-4329-4988-a739-96a13c392bdf",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "1d27319d-a264-42b4-b4fe-477b9f0cf2f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3833549f-983e-45ff-b838-14dd1bbdf912",
        "cursor": {
          "ref": "f77c0353-944a-474a-b648-bec5b319c05b",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "0fb8ddcc-c76f-40c7-ba1a-2fc5858d2aec"
        },
        "item": {
          "id": "3833549f-983e-45ff-b838-14dd1bbdf912",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "ee516eb9-dbb3-47df-869d-d151b5f583b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41a8d69f-a4c1-4a35-bc30-461508e0102d",
        "cursor": {
          "ref": "91110248-a34f-43be-a7bc-9c686b64b5c7",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "a68fb34a-e342-434a-9e8e-546d161394a0"
        },
        "item": {
          "id": "41a8d69f-a4c1-4a35-bc30-461508e0102d",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "58397a42-d2d8-48e0-9a83-a0d90fad7086",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1b3cabd-5717-4657-a332-8c3f52d183b5",
        "cursor": {
          "ref": "f10fa2e8-9215-4f72-94fe-27ac010f3102",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "e1cfcef6-5f20-4df1-a832-6db4b7b9c0d2"
        },
        "item": {
          "id": "e1b3cabd-5717-4657-a332-8c3f52d183b5",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "49c6d6b9-978b-44eb-b347-68ed39a14e8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ff3c29a-3eff-46ee-ad23-6795c790f0f6",
        "cursor": {
          "ref": "32841424-ea82-436f-be32-db3c3d868619",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "3a46052c-f73f-4f2a-9ed5-2c8913eb7246"
        },
        "item": {
          "id": "0ff3c29a-3eff-46ee-ad23-6795c790f0f6",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "ba0d0c0a-a914-47cc-abae-5c02e0ae9731",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdcfe824-99cf-4269-bdfa-c327b8a23928",
        "cursor": {
          "ref": "85712357-5fca-422b-976f-d52325d29ec7",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "db2918ed-f1da-4ace-8e27-27adfd93b171"
        },
        "item": {
          "id": "cdcfe824-99cf-4269-bdfa-c327b8a23928",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "df488450-e907-4948-a780-9378b69e9963",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "881a23ad-6287-499e-9ff2-ae3eba280532",
        "cursor": {
          "ref": "3e6f50bc-d0aa-4582-be54-e0bc41e1da1b",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "f74acb35-ec00-4e7b-9ab6-79c96fc66405"
        },
        "item": {
          "id": "881a23ad-6287-499e-9ff2-ae3eba280532",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "1decf62e-9f42-4769-9611-5e916c9eb75d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6260237-d703-4ebc-ae54-32773672a78c",
        "cursor": {
          "ref": "9220cd28-26c6-4ea5-a6ac-d2622e191cbf",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "9081b34e-c085-49ba-94cc-cf6a8717b3f1"
        },
        "item": {
          "id": "d6260237-d703-4ebc-ae54-32773672a78c",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "687d1a0b-e697-4596-aba7-6feee054c294",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d57410c-434c-4c60-9051-bc94b288e5e2",
        "cursor": {
          "ref": "46573d80-0f46-4461-a4de-aed4c66cf2b5",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "e4607f6c-1482-487b-94ac-85129e84933c"
        },
        "item": {
          "id": "7d57410c-434c-4c60-9051-bc94b288e5e2",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "0e1b26a0-f680-4288-9206-df668049f71a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e8ea354-57b8-4009-9804-e26c1503269c",
        "cursor": {
          "ref": "4792cd02-32e1-4aca-b76d-9208e1822fb5",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "b3b3802f-7867-4f86-93ee-db0134a07b59"
        },
        "item": {
          "id": "2e8ea354-57b8-4009-9804-e26c1503269c",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "5611a630-a4c5-496c-a967-67cbade8de3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8ebded5-16b9-4928-bb2f-3df510a7c652",
        "cursor": {
          "ref": "9588cf67-e471-4bda-a067-537f0875ab53",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "af5f9b5f-7c94-46ff-bb27-273d00de1337"
        },
        "item": {
          "id": "f8ebded5-16b9-4928-bb2f-3df510a7c652",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "3aea1763-781f-40c9-9801-c6dc6dc8603a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17c2300f-cc0d-4383-a2f0-f364eaf7dfce",
        "cursor": {
          "ref": "0d51f1b1-02fa-4393-ab32-cf52d28c6b89",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "acda21dc-1a44-4997-b113-321268913070"
        },
        "item": {
          "id": "17c2300f-cc0d-4383-a2f0-f364eaf7dfce",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "bfe1d0c9-85b9-4b80-992b-56e83074c4c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ee27cf6-5351-46e1-8a26-d433b11475f7",
        "cursor": {
          "ref": "bfbfb9ec-f60f-42d8-89cd-549d9e3d027d",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "5d31947b-4276-4821-bc14-04f316f50ad0"
        },
        "item": {
          "id": "9ee27cf6-5351-46e1-8a26-d433b11475f7",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "67564371-03ff-4b8f-80ae-cc0988202079",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7317a27-5659-4bbe-8bf8-5761fcdff38b",
        "cursor": {
          "ref": "cdc4b500-9c53-4b5d-ad09-932df7ff02fa",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "51ef5ad3-bd6c-40f8-a3a6-52d47052fd92"
        },
        "item": {
          "id": "c7317a27-5659-4bbe-8bf8-5761fcdff38b",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "23c0ff0d-3f8c-4ced-b726-b4064c702a52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdbd5449-55f1-4192-b123-50b515881734",
        "cursor": {
          "ref": "320ee664-0ec4-4d7b-bccf-8d5a02e545b7",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "c686d673-f216-4816-ab96-b59aa9cc1a56"
        },
        "item": {
          "id": "bdbd5449-55f1-4192-b123-50b515881734",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "0a8ad585-36a0-4bb2-9830-2495c339c7be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f9fa470-734a-410e-ba44-9f0cd425650c",
        "cursor": {
          "ref": "4f1af066-6a5e-4218-b527-b14270153f26",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "3d38965d-0bb8-42c4-889a-58c984c77491"
        },
        "item": {
          "id": "5f9fa470-734a-410e-ba44-9f0cd425650c",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "888fa063-d561-4979-a294-ced720643fdd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2e82867-93dc-4927-99d8-e483a7c7faca",
        "cursor": {
          "ref": "fce62626-cf30-4d4b-9455-fbeb9d12122f",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "70240226-7c78-4179-bfac-38aa67a14bf6"
        },
        "item": {
          "id": "a2e82867-93dc-4927-99d8-e483a7c7faca",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "0f444156-1547-4a1f-bef9-b5485ba2e480",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70de8d8c-7f4e-40a7-b7f1-dfa3d216fdca",
        "cursor": {
          "ref": "44a7499e-5f8d-43c1-affd-9b495831f4ee",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "191835f1-eb91-48c7-b6a1-6bbcae429512"
        },
        "item": {
          "id": "70de8d8c-7f4e-40a7-b7f1-dfa3d216fdca",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "7cfa8416-eedf-4dff-8d48-59c8702d445c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d532b34-4183-428a-88aa-61c1cb807367",
        "cursor": {
          "ref": "5d793262-fd10-4f46-ba11-ee737a187633",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "c5848756-5b47-48c9-8af1-bdbc34d8922f"
        },
        "item": {
          "id": "8d532b34-4183-428a-88aa-61c1cb807367",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "7fa087f9-5982-4ab9-9400-d1eafaa0bf31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c23172bc-3d3f-44a7-b06a-6b184f3a2a3f",
        "cursor": {
          "ref": "1e52b6e4-077c-4aba-b08d-3eda9f5a9ebb",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "486adfc8-30a3-42d3-b2be-2db33f78657e"
        },
        "item": {
          "id": "c23172bc-3d3f-44a7-b06a-6b184f3a2a3f",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "0e901223-1a71-43b1-824b-f8a9e23c9d25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ade1896f-5366-46ab-9a40-4fed845f29aa",
        "cursor": {
          "ref": "e4b939dc-5d90-4e4a-995a-921a046f0271",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "cdf20812-4028-44e0-94dd-63bc0e889267"
        },
        "item": {
          "id": "ade1896f-5366-46ab-9a40-4fed845f29aa",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "93bb6173-c098-4d5e-9712-9e659ddedbaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2d92923-727c-42f9-a938-00051b2b3979",
        "cursor": {
          "ref": "4ee39f87-fe96-4557-abe5-9f853df3b8ef",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "d3a7fa60-46e9-48c1-96ee-7e4dc4ce65dd"
        },
        "item": {
          "id": "b2d92923-727c-42f9-a938-00051b2b3979",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "5cd44f6c-1a16-4997-9282-e1a6b3afb507",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "556cb34d-646c-4d2c-8d52-67be875f50a6",
        "cursor": {
          "ref": "a12a3d89-ff90-40a5-bdd7-90e3f6d203a6",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "0a449684-2fa6-4378-a8c2-19cbe689847b"
        },
        "item": {
          "id": "556cb34d-646c-4d2c-8d52-67be875f50a6",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "513990f0-e7a1-490d-85f6-0e8205f01292",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d5dff64-555e-494b-98ff-d644a2aa2a97",
        "cursor": {
          "ref": "5879de79-4a70-452a-bd56-b0c925826642",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "5eeac6f4-c082-40ac-8a53-f89f57ab7e5b"
        },
        "item": {
          "id": "7d5dff64-555e-494b-98ff-d644a2aa2a97",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "1084564b-05d1-4945-9c01-dd1b1d4f482b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3810e76-9c6f-46ad-8ba8-eab5d03fc350",
        "cursor": {
          "ref": "ea2df84b-b554-4b50-97ca-e45e723203bd",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "c1600db3-3a66-4ab1-a1d6-dcc07fe7c209"
        },
        "item": {
          "id": "b3810e76-9c6f-46ad-8ba8-eab5d03fc350",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "f67f0415-7eb2-4e7f-a817-e6f35d1b67cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed9591ed-316e-46ef-af9d-77a073b80307",
        "cursor": {
          "ref": "6fb66a98-6862-4d92-8ef9-031978792092",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "0b835386-d2a0-4b7d-8491-a1e887a57ea8"
        },
        "item": {
          "id": "ed9591ed-316e-46ef-af9d-77a073b80307",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "27e5adc4-5dd8-46f9-bfcb-e35c3d350a9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1bfd8ef-9e41-45e6-b358-c9faa4e63dee",
        "cursor": {
          "ref": "a4f0c1a9-5f13-4eb5-ba25-1754b1fcc0e8",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "354b56d3-c2b4-4d7a-8f92-ccfedbdc6c75"
        },
        "item": {
          "id": "d1bfd8ef-9e41-45e6-b358-c9faa4e63dee",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "343997a4-f071-4da9-a78e-fdd68ce1b68d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38d095d5-2269-449c-96ea-d073455732fd",
        "cursor": {
          "ref": "8d953885-edf2-4371-8ef9-5a5979dff048",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "dad9ef40-7250-41a6-ab44-b27479ca58b1"
        },
        "item": {
          "id": "38d095d5-2269-449c-96ea-d073455732fd",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "b06b4cec-539e-4855-9afa-c54f92405f34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89879666-9374-4d7f-a3ed-713cc757a69f",
        "cursor": {
          "ref": "81d32382-bab7-4569-8a65-933b0f6525e9",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "2b14fc79-3d64-44a8-b980-56fb879bba51"
        },
        "item": {
          "id": "89879666-9374-4d7f-a3ed-713cc757a69f",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "ff5af61b-769f-4578-bdff-ecedb35489dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c262f3a7-2113-4591-895e-92664b8e6387",
        "cursor": {
          "ref": "475cc692-21ab-48fb-8fcf-b6d28b338a9c",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "7d86cf36-ee6c-447b-9af3-c08e70b194a2"
        },
        "item": {
          "id": "c262f3a7-2113-4591-895e-92664b8e6387",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "47a9f444-8af0-4b19-b190-ab8d68a9ec3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ed51b23-97ba-4bea-ac0d-42424022585a",
        "cursor": {
          "ref": "6e117a82-08ac-41f5-8346-bbc4e40b152a",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "cb6e4efb-a2bb-41fe-9542-e1049ef8cc7c"
        },
        "item": {
          "id": "9ed51b23-97ba-4bea-ac0d-42424022585a",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "307463d7-80b1-4fa0-b60a-0702206d1633",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "536c5a61-a616-4643-af92-789be8972111",
        "cursor": {
          "ref": "d1e4f160-e496-4586-8f4c-e579c2470453",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "29a094ab-458f-4ed5-811b-b27d78039cab"
        },
        "item": {
          "id": "536c5a61-a616-4643-af92-789be8972111",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "3368d2f8-31c0-4528-aefb-ab239eaac997",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e16194d1-1390-4dc3-8c01-633fdf3e8e3e",
        "cursor": {
          "ref": "9a6bb10a-2fb4-460c-902e-2067cad48ed4",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "e56361ab-94d8-4aac-8f52-35d953ffcaab"
        },
        "item": {
          "id": "e16194d1-1390-4dc3-8c01-633fdf3e8e3e",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "54ff7b30-5587-4ace-9f9d-e7d0c6b19d79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12b541d7-eb4a-4548-919f-cad0d57fc4fa",
        "cursor": {
          "ref": "ca2bb640-4d4c-426f-9266-4e8477cd7658",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "0dc50d0c-26df-497b-b47b-89279dcb74f2"
        },
        "item": {
          "id": "12b541d7-eb4a-4548-919f-cad0d57fc4fa",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "d37c4a7e-8608-432c-a479-fa57c4def864",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "366ef4f2-480e-494f-a097-c5cd9eccce99",
        "cursor": {
          "ref": "0ef445aa-8157-4c05-aeca-eee06863747a",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "49a9d77c-4a58-4f2d-9489-64855853e18d"
        },
        "item": {
          "id": "366ef4f2-480e-494f-a097-c5cd9eccce99",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "15a2fd95-103a-4959-89ee-8289d717c72b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fe1cd25-b1e0-4e8a-9659-3634b6e382fe",
        "cursor": {
          "ref": "18e85a06-6baa-4c0d-95fb-4a1dfd7c67c1",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "0afd188e-5436-49c7-aa84-104fe6b38265"
        },
        "item": {
          "id": "8fe1cd25-b1e0-4e8a-9659-3634b6e382fe",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "a62e11d9-442a-48c7-bac8-0ad86f8b3889",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f440d7e4-9b7a-433f-9e8d-d08da3f90404",
        "cursor": {
          "ref": "86043c8f-675c-47b6-8f65-123f207aac57",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "958b3529-8ad2-4b63-b97a-dd9deb6bd7b1"
        },
        "item": {
          "id": "f440d7e4-9b7a-433f-9e8d-d08da3f90404",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "a2277734-9fec-4b5d-9af1-15b6b50795e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4cad5fd-b57a-4a29-a3f9-abf8a36d590e",
        "cursor": {
          "ref": "95f0c55f-53b7-42a5-bc3e-e517bac4c42d",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "48ed326d-b478-4dfb-b9ae-1586b4795c9c"
        },
        "item": {
          "id": "d4cad5fd-b57a-4a29-a3f9-abf8a36d590e",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "6488971c-42d2-4468-a20b-6e7c69b16cb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d596a19d-5b83-4727-b4a3-7295549931a3",
        "cursor": {
          "ref": "b436a20a-178a-495a-8a91-f6f584a6d1bf",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "45e4776b-dfe5-4d1b-b508-b8eaffc0469e"
        },
        "item": {
          "id": "d596a19d-5b83-4727-b4a3-7295549931a3",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "62795800-a079-4e36-9a2c-3e8fc71a1989",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03a3bd93-98c2-46ce-a0a5-77847643e4d5",
        "cursor": {
          "ref": "c1be21bb-4b62-4380-85dd-bbb5749ecbba",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "0b765028-d45c-4e2f-9f1c-f2786bdc3254"
        },
        "item": {
          "id": "03a3bd93-98c2-46ce-a0a5-77847643e4d5",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "cbad2028-bf56-4df9-a89a-634ce97ba275",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd74dd89-93f7-46db-93cf-ec7810e00a86",
        "cursor": {
          "ref": "3a74c04a-d636-4a60-8067-a0d172afdb5b",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "df4a3377-e266-4f81-8d9c-8f678dec5283"
        },
        "item": {
          "id": "dd74dd89-93f7-46db-93cf-ec7810e00a86",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "1d3f9990-4d13-4205-b2b2-026b5291294e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4393aacf-f6a7-44be-8c6a-68bdc49bcd6d",
        "cursor": {
          "ref": "b4d774c3-bb37-49c2-90f8-a42fd9b93058",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "d112d30c-565c-4179-9564-92b8695a31d2"
        },
        "item": {
          "id": "4393aacf-f6a7-44be-8c6a-68bdc49bcd6d",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "97d84471-13e2-4051-9879-4e2fd1c17942",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c66aa939-fd80-4d02-8e71-7a5d21a674fe",
        "cursor": {
          "ref": "f1c00991-d6d5-4df6-b390-6eca9c174484",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "17895757-e9f4-4999-a928-6de7e6412657"
        },
        "item": {
          "id": "c66aa939-fd80-4d02-8e71-7a5d21a674fe",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "4397bcd9-0ba8-4ed6-879b-6b69a85c5277",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11a4301d-2f30-44d6-80c0-7ffba568331c",
        "cursor": {
          "ref": "dac958d7-9e61-4acd-9728-f12355d3cc7f",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "1575f915-6448-4c34-814c-d59348c9fe3a"
        },
        "item": {
          "id": "11a4301d-2f30-44d6-80c0-7ffba568331c",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "678fc1fd-aa95-4847-bbef-140940229943",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be8ab90d-bbaa-44fe-b666-2bea30b112d9",
        "cursor": {
          "ref": "f5fac059-0626-4768-8cdb-3f45437ec3cc",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "0c94d533-584a-41f6-bb9f-33b7e89d1fef"
        },
        "item": {
          "id": "be8ab90d-bbaa-44fe-b666-2bea30b112d9",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "1f055e15-2ecd-444d-8250-bcb5af0151b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cbe151b-3a60-4f43-a8c3-206b4dff7691",
        "cursor": {
          "ref": "12ec01d9-55cb-45c7-b1c2-7d514af3eceb",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "894485e4-7309-4b64-9fd9-cee5a4520a75"
        },
        "item": {
          "id": "8cbe151b-3a60-4f43-a8c3-206b4dff7691",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "c1c7c649-4c2c-4063-93e2-10b5b0956416",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6995ab69-0cc2-490b-9ee7-a68dd4c033a8",
        "cursor": {
          "ref": "3c1fbba9-ae09-4f26-969c-31cd66c5ea84",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "22ddccce-8725-4b78-aed0-d916bb1d500c"
        },
        "item": {
          "id": "6995ab69-0cc2-490b-9ee7-a68dd4c033a8",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "f86456d4-72f2-4f16-9d78-94e4a3d5029b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "140ac0e6-8c46-43e3-80e5-852cd3a8ac60",
        "cursor": {
          "ref": "76bc1ff2-6b37-4c5f-8480-ea3edcfe8575",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "25742733-f130-4002-b768-613590961ea8"
        },
        "item": {
          "id": "140ac0e6-8c46-43e3-80e5-852cd3a8ac60",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "d76d5d51-2e06-4840-b34c-f5f5b4789d90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c80e44c-5f5e-4748-8a43-e20acf6a9ccf",
        "cursor": {
          "ref": "db7f3099-b9df-4635-b47d-08ad19fa76b9",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "a74b6ca7-2e02-46f3-af70-629b23b46be8"
        },
        "item": {
          "id": "8c80e44c-5f5e-4748-8a43-e20acf6a9ccf",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "ab20f345-07e6-472c-94d3-cb0956098645",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7af6d67-5384-4b13-b584-e852151d0955",
        "cursor": {
          "ref": "cce94577-24b0-4435-8f05-d3ff3a1ce74c",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "846052d5-e83d-40ca-9ed8-9744b8611b9e"
        },
        "item": {
          "id": "b7af6d67-5384-4b13-b584-e852151d0955",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "72e8fb17-487e-4556-b11c-72c9d897913e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd3d2ce1-21b5-4561-bfab-ac193db4f670",
        "cursor": {
          "ref": "be1748ca-980d-4983-9751-24fb2830be77",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "894c692e-980b-4b0e-b479-49d74d827207"
        },
        "item": {
          "id": "dd3d2ce1-21b5-4561-bfab-ac193db4f670",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "5653bae7-ea2b-4f4a-b140-4dd90590b72e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e2cb95d-1a56-4801-8171-62f6337a1ce9",
        "cursor": {
          "ref": "94d9badb-14fb-4eee-ac40-845550f8e4df",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "ab4e9bf7-fb83-4b32-9b92-f1684c3c5a93"
        },
        "item": {
          "id": "4e2cb95d-1a56-4801-8171-62f6337a1ce9",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "f36b42c9-09a3-4db5-966c-102e9d8185df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a192ebd-0e7e-4c69-849a-38a15fbf069c",
        "cursor": {
          "ref": "f93670ed-6681-4788-8050-5790703101cb",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "c01426ed-0a3f-4ba2-b1a8-496a9d7240e9"
        },
        "item": {
          "id": "7a192ebd-0e7e-4c69-849a-38a15fbf069c",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "8be630cd-267c-4766-b832-fcbe5c9342e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72c6eab2-078f-480c-a892-b26d634a3fb2",
        "cursor": {
          "ref": "906c3464-93c8-4458-bbf2-c55938a711be",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "db9aaeb4-7978-4b1b-9df1-f121e6700618"
        },
        "item": {
          "id": "72c6eab2-078f-480c-a892-b26d634a3fb2",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "cdb0def5-761d-47d7-9d59-cc291fef3ecf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bafcfe9-7a1f-4932-b874-4a0aee4e7c87",
        "cursor": {
          "ref": "ddb3359f-6732-469d-a984-42f9e30b2c92",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "e9ec1c3d-1196-4450-bbdf-68d525f2f669"
        },
        "item": {
          "id": "5bafcfe9-7a1f-4932-b874-4a0aee4e7c87",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "f8050f14-9241-448e-8568-6c4c83b07ee6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86a15cfe-ed59-4f6a-ad64-128e43e13d55",
        "cursor": {
          "ref": "15914f3f-448c-44a8-b006-f785f5fdcb70",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "de5cde92-0cc5-4119-b218-f7de0d71df1a"
        },
        "item": {
          "id": "86a15cfe-ed59-4f6a-ad64-128e43e13d55",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "98e294c3-fec8-4aec-b33a-e2d9b09cbff9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01f7a79e-bf7f-463b-9ed0-ca807953493e",
        "cursor": {
          "ref": "f1ec8493-d35b-43a6-93e1-b96a394d8f0f",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "37599479-1504-4056-bfe0-293a66282976"
        },
        "item": {
          "id": "01f7a79e-bf7f-463b-9ed0-ca807953493e",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "f025ce60-97e1-47f6-82ff-29d28e973618",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1a5bf9e-5e55-4af1-a376-340105e38c97",
        "cursor": {
          "ref": "6bb1b78c-20ff-4f42-a0a6-67582d9a00f1",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "17c46cb2-cf2d-486e-933c-1e0d9d7af855"
        },
        "item": {
          "id": "c1a5bf9e-5e55-4af1-a376-340105e38c97",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "a9c4ebe8-e2be-4582-a3a9-904c91ea8c36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fb68e0c-915a-4288-8f8f-4d6d5088a862",
        "cursor": {
          "ref": "422bd862-6839-4f61-b9b8-ef9e13a6b70f",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "7909eab3-b12d-489d-bc39-751ec3136a83"
        },
        "item": {
          "id": "3fb68e0c-915a-4288-8f8f-4d6d5088a862",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "4b4b6905-70db-40eb-a843-c433102d6ef0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 150,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "beb3ca6c-139c-4f72-a08a-3e3649d878db",
        "cursor": {
          "ref": "51801106-aa12-4b30-b91f-4414d27116a0",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "7ac83fc7-f59b-4388-8e01-49eb7f3fe7d4"
        },
        "item": {
          "id": "beb3ca6c-139c-4f72-a08a-3e3649d878db",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "6080c782-5c85-49b3-b4b1-8982c51230c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19304d8a-8362-4d82-a8ef-e62a41afae16",
        "cursor": {
          "ref": "7a99e832-4480-4662-9a4a-4fb1aac177e0",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "2958b5b8-ebce-473a-948f-4d8fbe37f888"
        },
        "item": {
          "id": "19304d8a-8362-4d82-a8ef-e62a41afae16",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "ed027e5a-3ccb-4821-b119-ce8d8a4beb91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "545a2ff1-b6c6-42e9-925a-dd72bc31f336",
        "cursor": {
          "ref": "c42a99fb-a588-4688-a93c-74224d70489d",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "875ace03-ecdc-4290-887d-f8d07b23d16a"
        },
        "item": {
          "id": "545a2ff1-b6c6-42e9-925a-dd72bc31f336",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "079b39ba-3c74-4901-b25b-8a3e31d5454c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "255424b2-882e-4bfd-8929-ef2480fb5897",
        "cursor": {
          "ref": "88476a87-cfe7-482b-adbc-3f649e34c1d1",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "55d6ca3e-1ce7-4dbf-a521-4c501859ae90"
        },
        "item": {
          "id": "255424b2-882e-4bfd-8929-ef2480fb5897",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "4d70e5fd-3e0a-4fa1-9b1a-4ccf7a3b656a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b99da07-0c4b-46d5-8dd5-3dc89b0cfdfe",
        "cursor": {
          "ref": "a47cd0f6-bb43-41af-ab44-96e8f7ead8a4",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "481ec86e-0b60-48c2-b7ee-251daa24b646"
        },
        "item": {
          "id": "9b99da07-0c4b-46d5-8dd5-3dc89b0cfdfe",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "1cf99aff-1185-4ce1-8d3b-aeb1b7edc940",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98f91103-18fa-4170-bb76-aded64fd65d7",
        "cursor": {
          "ref": "d310f9a9-b005-432a-b91a-ab9be7f53986",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "a4847b29-5286-4344-9954-34fa46ab6f9c"
        },
        "item": {
          "id": "98f91103-18fa-4170-bb76-aded64fd65d7",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "3e848e47-f336-40c0-9107-119f9c89569f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82814287-ef51-4405-b1d3-5d56d9cb450b",
        "cursor": {
          "ref": "0d032f48-2dbe-46d8-8833-cbfa54065f77",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "03df4724-570f-4810-bb3b-70a6103313ac"
        },
        "item": {
          "id": "82814287-ef51-4405-b1d3-5d56d9cb450b",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "06055017-6d03-4924-8df8-0c302f7745b7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "e55a804a-f877-421d-a6bb-201153d083d2",
        "cursor": {
          "ref": "3d648965-eefc-4f4f-95cf-2b628c6b7f7a",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "8dbffce6-ecb2-445b-85ca-966b01282862"
        },
        "item": {
          "id": "e55a804a-f877-421d-a6bb-201153d083d2",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "2a3a9c2e-ed92-4580-8163-579b6e61a4c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "8315b1a9-a76d-469c-8f11-5faac8f36a16",
        "cursor": {
          "ref": "26f26307-a8c7-400b-81bf-cfa25d9d519d",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "5ba26e37-6233-41c2-b335-4ea330513cd0"
        },
        "item": {
          "id": "8315b1a9-a76d-469c-8f11-5faac8f36a16",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "76efa15a-dc3d-476f-9788-2118565b530a",
          "status": "OK",
          "code": 200,
          "responseTime": 112,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b778c3e-fc22-46bb-bc4e-a9bb08013e1f",
        "cursor": {
          "ref": "15c60e8a-1461-4448-8fed-e81de4865d1e",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "0ddef7e4-6e64-4883-8384-487c6683df58"
        },
        "item": {
          "id": "1b778c3e-fc22-46bb-bc4e-a9bb08013e1f",
          "name": "credentials_verify"
        },
        "response": {
          "id": "b76679eb-5ce0-4729-9907-d9ca26fc00c8",
          "status": "OK",
          "code": 200,
          "responseTime": 2431,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "5517492d-2767-4ef1-b735-e16eed84db99",
        "cursor": {
          "ref": "3329cf25-e630-448a-868a-5ab8118b27c2",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "71ce6390-7a01-4f61-a8be-581eadba49bb"
        },
        "item": {
          "id": "5517492d-2767-4ef1-b735-e16eed84db99",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "003705fb-27e1-43bc-aefe-e9ee3ac16899",
          "status": "OK",
          "code": 200,
          "responseTime": 2303,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "e57a8256-1445-40f3-8190-eefab84ea828",
        "cursor": {
          "ref": "d7d857c5-8751-4d25-8518-e85e1675c454",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "4d296f52-5e6c-48be-9d68-2a9e30b53785"
        },
        "item": {
          "id": "e57a8256-1445-40f3-8190-eefab84ea828",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "5cec5b18-291e-4bd4-90b8-9d946bce811a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "e57a8256-1445-40f3-8190-eefab84ea828",
        "cursor": {
          "ref": "d7d857c5-8751-4d25-8518-e85e1675c454",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "4d296f52-5e6c-48be-9d68-2a9e30b53785"
        },
        "item": {
          "id": "e57a8256-1445-40f3-8190-eefab84ea828",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "5cec5b18-291e-4bd4-90b8-9d946bce811a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "e57a8256-1445-40f3-8190-eefab84ea828",
        "cursor": {
          "ref": "d7d857c5-8751-4d25-8518-e85e1675c454",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "4d296f52-5e6c-48be-9d68-2a9e30b53785"
        },
        "item": {
          "id": "e57a8256-1445-40f3-8190-eefab84ea828",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "5cec5b18-291e-4bd4-90b8-9d946bce811a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "96fb06d9-23e2-4b39-8a88-12c85361ce12",
        "cursor": {
          "ref": "b9c4895e-a52c-4e96-aa8d-71b00c46b893",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "3fafd608-d858-4844-acfa-49ec6771ba46"
        },
        "item": {
          "id": "96fb06d9-23e2-4b39-8a88-12c85361ce12",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "1848a243-a1ba-44bf-a9af-e008941d8c74",
          "status": "OK",
          "code": 200,
          "responseTime": 127,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "54e34b4d-c9df-47ed-a5f8-6841c8cb71ed",
        "cursor": {
          "ref": "36593171-1f11-4099-8d38-2961b2c3f278",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "070f0465-45bf-42ce-ab76-20a78e83e043"
        },
        "item": {
          "id": "54e34b4d-c9df-47ed-a5f8-6841c8cb71ed",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "3fd9416e-94b8-444c-a391-54f41a7a1c28",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "54e34b4d-c9df-47ed-a5f8-6841c8cb71ed",
        "cursor": {
          "ref": "36593171-1f11-4099-8d38-2961b2c3f278",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "070f0465-45bf-42ce-ab76-20a78e83e043"
        },
        "item": {
          "id": "54e34b4d-c9df-47ed-a5f8-6841c8cb71ed",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "3fd9416e-94b8-444c-a391-54f41a7a1c28",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "82e4e3c5-814f-477a-93d5-08fea8d7eb9f",
        "cursor": {
          "ref": "d5b15fc8-c627-449e-9fbd-0a7adfe49936",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "c2816e6f-a70a-498e-aba1-10cbbbe6dfb8"
        },
        "item": {
          "id": "82e4e3c5-814f-477a-93d5-08fea8d7eb9f",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "f969f4d1-a2d6-422b-9141-009be5ddbe2e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 153,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "78bdfb36-a993-4e8b-9f46-b84cd086a884",
        "cursor": {
          "ref": "748fdc5b-fd3e-4059-9639-e80b59f1ed43",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "914ed634-4afd-4c80-8196-266e96b0deb9"
        },
        "item": {
          "id": "78bdfb36-a993-4e8b-9f46-b84cd086a884",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "93c9202b-a7ad-4190-970a-de47f717f189",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "78bdfb36-a993-4e8b-9f46-b84cd086a884",
        "cursor": {
          "ref": "748fdc5b-fd3e-4059-9639-e80b59f1ed43",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "914ed634-4afd-4c80-8196-266e96b0deb9"
        },
        "item": {
          "id": "78bdfb36-a993-4e8b-9f46-b84cd086a884",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "93c9202b-a7ad-4190-970a-de47f717f189",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "3ca62266-417d-448f-b9b9-aa2dc6937217",
        "cursor": {
          "ref": "432b86dc-b610-41e1-a31c-8801139df59e",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "12876425-dc4e-46b4-9abc-8a2f059dd456"
        },
        "item": {
          "id": "3ca62266-417d-448f-b9b9-aa2dc6937217",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "f2a85744-dbfc-4572-b4e9-4474ba0418df",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 101,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      }
    ]
  }
}