{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "2d12d3f8-9b27-4eb4-a3d6-efbde790e93f",
        "name": "Clear Cache",
        "item": [
          {
            "id": "ca8e52a9-8b86-4595-ae79-980f4ceb3a56",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "144533aa-a5ad-4bcd-9466-226a45e9ac4c",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "b4711b9c-8b2b-44cd-b372-d83a4c5c67c8"
                }
              }
            ]
          },
          {
            "id": "d5703a0c-48cf-476c-9f80-3abf223686f7",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e6accec9-406e-4c9e-b214-dfb093fa4ec1",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "bcd4b4f8-5654-4ae2-8262-e2835399ed16"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "0276fa56-dfdc-4207-b538-2a881e1204e1",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "4644a98d-424e-4844-9530-ac497ba73c99",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d8782283-2aa7-46e0-9ad9-f3f22321bb83",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4e04f43e-c001-42c2-bdd6-99d7abf39075",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a3ebb72a-3c49-4d70-8675-09d9df64d1da"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5f05f956-6687-4d63-8294-666b144133d1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d19f2627-d89c-45b8-8bd2-ade6525cd1a4"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "0361cd21-7104-4cee-b1cf-7e1abc88b1b1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "81fc9dbf-2d88-425d-bff4-a6992b524ee5"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "21b7d5a5-a72a-42c8-bc06-d159c3a41f9e",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "a42f9123-1b47-4370-ad09-089ef28e958e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d6220c23-5e85-4bd2-b3ba-260716797950",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "93887af2-d63f-4ee8-b409-ec13073a7037"
            }
          }
        ]
      },
      {
        "id": "7709e949-1f78-446c-b047-0d6d50a65ecb",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "1b913810-188a-451c-b9ec-1ac1e509305c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c9e59261-4199-4b4a-930c-958c57d49c50",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "12746307-5f43-42ca-af25-ebf66a95e0cc",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97b204e6-cff0-4bd1-ae57-10cb35ee75ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5b5a87b9-2a4f-4274-afa9-b9c9799df392"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b3d8f3c-fe96-46d4-90c1-a15a77c6e71a",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49f98592-613d-4d54-a625-275d020c10d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2f3e0aac-7702-4575-8da5-c9f74e7e98c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71a078b6-3e2d-45d4-9d0c-23f8058f4cb7",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96e56d7f-c719-4171-98db-d35326af8ffe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e75c7300-19a5-4bdc-a8b4-fa28417b6116"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "3254e7a4-be74-42ac-b8ba-8c80ebfc9fbb",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a219fc5f-5755-4a2e-ad8a-0768d1f6c4b5",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "845edbc9-d107-40c9-90e2-ff0294fec7b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c7f8afa6-719f-40eb-8179-07f472a4ea93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf5a59a0-8ac7-4b4b-a863-9c1368b94704",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef71239f-ff44-4554-ad72-64b11df0941c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "0e92c5a3-77ca-4308-b6e4-632c1b02398b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f75a55d6-35bd-4773-902c-8beb0dc2961d",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7a0c54cd-1452-4f71-bd13-d322f76253bc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "08f96d70-b6a1-4fac-9aca-f24c730e2a3d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0a924044-8f26-44a1-b943-30d04c32d909",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "f1994c82-7a7b-4dd8-a25e-aeb0724cac66"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0dd70141-ca7e-4ec8-bd89-12318d4e70df",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1e444d87-853e-4537-a347-169638492a53"
            }
          }
        ]
      },
      {
        "id": "c494ae6b-61ff-4a86-a6f9-a7737adeab81",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "bd970037-a6dc-4eba-8cd4-1fda9acf9cd2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "943d9fab-1e27-477e-bf25-97140ed9bd85",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "0326c59a-f9b1-4b15-ab6c-0f4dcdd2c566",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4b08179-898e-488a-9a27-8eb46fab3f7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22a1f6f9-6df1-4873-91ff-49789be7e3bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16733509-099e-4777-bac8-c211c4465899",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "46c929ea-6d4c-459c-8222-548e09731d90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22ba644a-a6b7-4401-bf56-df9edb0cf2b0",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd79d4c2-6ec8-4d46-9c62-bfbdb07ff604",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73543216-c147-46e1-bf92-2875c1579b44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d071cab0-38b5-457c-b97b-f9db96733bf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cb513177-7004-44b2-8d86-d25d32be2fb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07b97127-0c07-4a22-a050-0d4fb28050b0",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8ef0c5b-a602-489a-8deb-876bf7c44743",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7431d5e-2e0b-49fe-9b31-28eb4635108a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc29baf6-3c45-404a-a5f8-a9d58df77054",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "864e9213-5428-4277-beea-957812b841b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c83a24e1-681c-4b79-b3b1-9a0bb3d98ef1",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ba764de-3466-4ab7-940b-080bd4c65c55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3195469c-9cbb-4fe9-ad91-5bbdf50124ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0199d37-93a4-4ab4-8b7d-b89ead2d258b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1f5aec53-76a1-4dec-acb7-33709e9f8629"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07f2ad51-90bb-4dbc-8fa3-5c27efc86f47",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7538e80a-7f7c-4247-9b98-b05b3c14364b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d877420-0ded-4d2e-be69-37fbbee794ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a76cdcd6-ff91-49d9-8196-96efaa6a4d24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5aa74add-1f34-45f1-860e-b7025151cf25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12f9dd81-b5d4-4a2f-81e7-be3443e31135",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f22ba7ee-061b-4d44-a6ad-9c392b0cb0ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd4ef288-d8d4-48be-9bbc-ade307430954"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d8f9f19-c537-4004-be9c-1dd927aee3ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ea4294a9-942b-4be7-a741-1b373d43c01f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35072e52-0d31-4e13-af93-a446154f913d",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03e7ae68-2cfd-483f-8b0a-41161177b590",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "972167d3-486a-4554-aa2b-800c2afc528e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a77d1b0f-9100-490e-86d3-d56e8de211cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6d2d8963-6538-4b1c-9426-759974110d8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "916dd1e2-62e7-4c6d-bd7e-a8dd7dd7b54d",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca852f96-b5a8-4141-91f6-c73adc362b56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11b9380a-8dc8-4c62-89a9-f6e99a94e303"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "311b777e-2fef-4dc1-8ca0-c9097af39821",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "72a767c0-8939-40e4-a1e1-c3d89d17f233"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4a86c25-3e46-464e-a461-fa77ab92a77d",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc44aafa-e2e9-423b-81b5-771791c3255b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "165e7447-98fa-4ffa-9177-7a78a7da5602"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d620e26b-7dd1-4289-b1a7-57c06d2fffb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d7346a0e-41b5-4432-8fd0-9dbe57da114d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cca6fcd-9b1c-45e0-aed3-8859cf2f8cc7",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1398b701-273d-436a-8fa4-207892769086",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c2d2b00-c947-4273-9ad9-9d14a3b35bfc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d140500-bfdf-4196-b0c0-b2aff509ac22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "698872e2-fa3f-4a1d-bc24-288994059cea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "703330bf-49ce-445a-bac9-3d7902ba6805",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e54d927d-6791-4c1c-a5b7-3340f2649e4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "019b8bea-5ec2-4c42-b27b-a9ff076e396c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41fc2151-5b4a-4a41-9265-94678b2c093f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6a239716-c63d-4b97-9026-3b5ac1c20a6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee9920e5-94d3-4bff-b85d-c3087536b015",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52567c6c-6c79-4f2f-9e47-4c27d90ad560",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bef79621-365c-4de3-99a9-80cf7840f0fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "758ce89a-6635-4d59-a173-6a96d41d0b24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bffb1989-ea70-48b5-8584-aeaa470a01fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "385fb906-3f50-4f34-9fb2-8eced797b471",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "796dc011-ad69-43cb-8014-ca75dea9ded0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6cd9be5-63cd-4465-9c50-2770d27031d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad93a3ca-c33d-4ca1-b1ce-36f9fd1265ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "37978326-446c-4ae1-a929-ad80bd387347"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f30b4be1-44c2-4f24-86a2-5e24962154c5",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa167084-fe11-4925-bd9c-e181a443eaa9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70fd74be-b344-4e8f-b96d-0881d68cc37c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "446b2796-82a6-4a23-bdeb-e80f0701658e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ea8583fb-fc26-4f21-baa2-54a42843b3d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17748e01-ec7b-486c-a14e-77f4dbd78a1a",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b06629d-890e-4257-99e4-5b3a44a502be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfa7df27-9e3f-426f-a937-5fc3f79a23bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01a738d2-be6f-4410-91e9-e0e3cbe1a23d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "280b1d7b-7560-40db-84ca-88417b304cbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5342c23a-a897-4a9b-b401-62996df0d924",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02fdff93-a310-4db1-bf7a-69213e3af943",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e77ecf87-1a7b-4835-8000-8a1b85d54590"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36c69a18-293d-43e7-b74e-759065a20817",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cd1fd3cd-a511-44e5-b6db-6bc8cc4e14cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f45beef-d665-48a7-a250-6b453f6f1d85",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80a500f3-1e5f-4632-9da0-ead4422f9722",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5270e806-c808-47e6-9bcf-1c77ae82a381"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "672291ff-b766-435f-b857-b278296c643a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5e5d98e8-85e9-4768-ba75-27a611ca7cbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c2995c7-f228-4d0e-a0f2-d8329d2b60c6",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b72a3085-1a47-4568-9dc8-077496f888ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "664ea3cf-a093-48e2-938f-e7910aa07ac6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d48ed49-54f4-4b65-93a2-fa98ed46113a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "825ada7c-f29b-4643-9cde-35cae923d5ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa15fe3a-97a3-4bb4-b63f-2a1a2a15ba2e",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c7bcbd9-2b7e-4b13-b40f-1fb1cd16f6a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3c2e941-146d-4a1a-b75e-94fac33f212e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a79539cb-92d4-4d1d-ba90-2e8b9e63c8af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "82cc2036-81f3-4ab1-99b9-13fa31cddf3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cfa073c-6ee1-4c1f-af09-f050f47e8c34",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7edc54b-db9c-43e7-9ffa-25d58c34c67d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41323920-3c2f-4b0f-84f1-f9d62ed48325"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e24aa27-8672-4c15-9796-871704830d01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cdd131de-3669-45a0-9872-8711a04f43c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a33e3728-c79e-4b09-b4b9-4aa61fa4ff12",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9300275d-a224-446e-b7f7-a75dd4fe7fd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0d34c5e-02a6-4b74-809d-902bd2936164"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7e45dcc-e2e2-42f5-b041-d155bf758496",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "407508ef-0756-446a-b756-2f4ef5e7cdc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d365944-e228-4c15-8b7f-1a5738d42d3a",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f6a932c-3ebc-4056-a46d-b17c25191485",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d66f3b8d-544b-470d-aa5f-46887e5ec1be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1362347d-43be-490b-ac00-b51d99d1d2f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6e1735f0-7ec9-4714-aaae-6b78e7575bdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3e82316-98b2-42f9-89e3-56f597900e6f",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4d67eb1-9bf3-45ab-bace-3d5db900f2ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c38bc0d-6650-4c1c-afaa-1df7f20c84f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "186483ab-5763-4a00-a41e-0de0bd881b7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9dac6ef7-5027-4beb-a1e5-ff89320ad8ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e85d3fb5-5679-41c4-8477-b14a32111c72",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5f58433-095d-4786-8ff3-35147552b707",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "108780f8-281a-4d25-a97e-aa534ee1f8bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74e4d7bc-b3b2-4ac1-a242-785000d6ec34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "906ac366-6ea8-4647-bd76-03a610ba9252"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efcac426-3137-4ce2-8b74-d60f5952aea7",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2426dbc3-54ba-4263-9722-ed007034760e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0212b86a-53fb-4d04-ad84-4356f9e63966"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8a591f2-9c0a-4601-92a3-77efc4135288",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "32f6ac52-dcf2-4e14-acc7-0a2820c2dcab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bfa7209-5310-444f-af2f-05c641648d6c",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58ff144e-1047-4364-b80a-37803a188037",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dddb2bdf-09dd-46c2-a774-9448d38b1a16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c072026-25ba-4caa-bbb0-2c19f4255b94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "91eb4ffd-aee2-4721-ad0a-def2d3dc6d69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a76165f-bdb0-43a3-bd0b-fc51d2c72cca",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38e20207-baed-4a2c-b8f5-1fd0c9a0fc1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63774f48-4d0b-4eb9-8b12-171d66728800"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3baad841-7f15-4808-8acd-b3e6ab8b0288",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "80c3d345-7cdb-42e7-abe9-fa47d7abbc5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "882d2b49-e4d3-4edc-bab4-3ea5b114b9e8",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4add5f1-03b1-47d7-9a56-c992eaa12cbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4e4bb1c-633f-426d-820f-61a0d12d6aa8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a61784b4-e82a-4497-8a62-fce19e96c642",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9906a47b-74a5-4684-be4e-50acf0d45737"
                        }
                      }
                    ]
                  },
                  {
                    "id": "987b7af0-d0e7-429f-a109-c297c9a5159a",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d28ac5c5-9b5c-41a0-abf3-8e79f6cda51f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "984a975f-9f0e-4d26-aadb-76950a02ea18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "997545c1-d624-4359-a6f9-e86117aabd43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "dea4ef73-89a4-4bf2-854c-0f4cd1938300"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edeed38f-bfce-4d94-95e5-a53bddc8ca5e",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5be27cf-971f-4c79-9aad-fb976c3f72b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50e6cdb5-b2e3-495e-bd96-78e2a9f8e5ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1f92fbc-a402-4b90-927d-9ba026f16ec6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "ce31a079-23ea-4a8d-ae29-23c02ecd2c0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c85eb44a-3477-465d-bccf-89f651744150",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9f118bd-d907-4942-89f4-b6894ff6a5c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23d2a1e1-0430-4212-8a8b-2e7abea07f00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8650996e-3dfb-4990-9c92-b0afda329051",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "016bade4-6527-4afb-8654-280ceb279ad1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21ee8250-aca0-41c9-85a6-814d56eb3f37",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d06c36f6-7e58-4740-95b4-d98558c9ee14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8102e712-5842-4ec7-8fb1-4d866e7af582"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bef5213-5050-4650-943c-317b68802db2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "687c4782-d982-4909-b671-5a30806948d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eceb5501-79a7-4722-a1f8-55eff5ebc073",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe21f8b7-ec88-4023-9bc0-f45487935921",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d57fc93-fca0-4260-85f5-a3264658a417"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f677a6cb-cba6-4e50-9ec8-6161d7e8a30c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6f8ccc24-6101-4204-ad91-44871dd49e92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b755c5c-f821-45bc-99d6-29795e2e03fd",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c2a5536-1a1f-4059-b86e-c7e95a90e09b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfe23b30-3198-43e9-aa1b-e49ce378891b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adcd631f-0192-4168-9cd3-40150740d01b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e749a781-0ee2-4d10-8c18-b82cc938b69b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e25d745-1057-4932-9d71-c3f32af9f194",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "231f0dd5-7acb-4932-b7ec-0e94dfbc6d82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ee697d3-e824-495d-ab65-0722d8b171b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a190797-61af-4848-9b5e-d03e8ec953f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "2b9fa63c-bb0f-472f-ac17-fca9221e023d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42774583-cc31-4d56-86d2-c1d872b509b3",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bb2114c-1813-46cf-93ee-9dda1cbda9bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cde1968a-1888-4e19-aded-8d7be1a371b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ce4cf4d-2342-4073-b66d-ca8ba174c9d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f9644358-eea6-403c-af00-33aea5a6890b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3cdf492-a300-4781-ab00-3d61ea7d0d95",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "345f7f3c-6d41-4181-b890-f0d584595408",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56239c29-d159-4442-8070-4fd706f114d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7150930-1395-4fd3-937e-de5537287ae4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7b127e0a-26f5-41b3-971b-a5155f512d24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52509dec-aeac-4e45-b33b-1be7ce94bc96",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4da3bd3-c300-4b0f-b2a0-808615163154",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7235defe-2033-455e-9df8-9ede70b7e3bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6686cf73-0150-4c2c-b2a0-43f10de98b2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "a24163e5-a21b-40c5-94dc-9fa4324793ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b127965f-1ae0-4973-b2e5-551fdb2e1e9f",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07435f4b-3454-4e35-9466-0faaa34bb690",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1433bf8a-1df4-4e1e-8d37-470676638d5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06018a47-a59c-40fa-be10-7319b3547488",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "9afc83ec-d089-4b53-85a0-eaddb5235752"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1286b6dd-11e7-430c-9526-4c5830c636e2",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3290b8ee-cead-403b-aebb-9409e29ebbc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f0e4254-cb41-4c8f-86f7-d75edf1dbcd6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0150ba52-705f-4a2d-939a-5c76d4ffafdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "b0e293ff-2b53-4373-a12c-b55e0ee59e0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bc66cae-0327-423e-a5b0-7bd86c996fa4",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec7b3171-9e1a-40d4-bc6f-2fa663143bf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5039346c-64d0-49f0-bd59-96fb7fcbbee6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6abb527b-fda6-402b-9b17-31107f050517",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "0fccef6b-768b-4925-8b83-839f65074ac4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c0ca9c8-bf02-4bd3-94dc-9ccf237e5cc0",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffb866a7-98da-4cbd-9042-277b1ec92a28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a99e5be-f939-479f-8cef-0f4fa6ffdad7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdf985e5-37aa-43d0-97e9-1ff0c728d343",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "6aeb0dd9-0394-4afe-be67-c295a252623e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0091b0b9-bca0-449a-a447-726881adfcc6",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86eaa491-42b8-4352-b6f8-f4bb26a367c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2daf2039-6222-459e-afc1-1a988f905dd4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "754cf680-0993-45c0-8490-d10246880045",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "8afd35bc-cc68-4353-869a-5afe45588207"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3594adaf-c6a3-4c01-bfe3-857ac26ae47d",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42dc8e96-3434-46d1-b4d6-3ec9e76f6596",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59f77c79-e31d-474a-9bce-7501b9328b05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c7f8d61-fb1c-4419-b423-9b8cbe76f578",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "20ca5404-cf66-4515-a82d-2e57a82e82f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b40afbe-1b96-4ed8-82d7-6d23fcb995d9",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48ca5904-3100-4eaf-83d7-382fad2ba1c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3079c9b-d449-43b3-a0a9-596fbf65440f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41a3aa74-e67e-4a3e-b3e7-8f81d8705f06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b979bd6d-1519-48ae-8ed7-52ab40edfe5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "783f408a-4b62-4415-9fd8-05d10d18e286",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "332a67b4-afe6-4730-a339-2bcef73efedf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d65bf2fc-52d3-4ce8-918f-57d1b1bdfdb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15043a0b-941d-4406-8a5a-9fb4dfa28c45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9b781d26-0048-4d26-8155-c0d2ed2e59a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a08fba8b-d93e-4afc-b457-d0e7d4d4cb24",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "501f2330-7550-4689-a4a0-03028b52e101",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55782582-37a0-49e5-9b39-10165555c843"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8522a6ad-a0df-4ae6-9a22-d2fdfa5d39f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b9daf199-cc52-4e96-98da-99845ecc9fed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3445f532-5506-4421-82eb-9a89566b0e85",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45c7cdad-57e3-4bc1-9131-9551697f2cb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f44c4ec-3807-4207-8fe3-4ff9696925c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "198a2f04-f117-482a-bafe-3f5584639005",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2412bdda-3b8d-4c7a-b635-a2bb0018a982"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38a98006-3197-47fa-8ace-fb9d55013c6a",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36d4660e-a8be-42a8-a1bf-3475012b6f3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbc55d4e-162d-4c7e-82a6-b71338542de9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bfe74ad-d1fd-4de9-b260-d7b7b31764d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7c154d06-6790-40cb-8ae2-5ad473eedeae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09d415da-4b69-47df-8bd7-bdb7921f15b6",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d3a77aa-43e5-4ddd-8e2c-8fd96336bcd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21a6577a-0189-42ac-a9f9-41aa78e54f4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a50b2396-6a39-4e32-89d5-ec6e8f4e4bed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8e0aec7c-f29a-4683-85b5-2c8a04e7dd37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89c8e428-15ef-436d-a9ca-e94234fa6b22",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "feb45da0-32e9-4e10-a872-26294160d23b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fd0bb87-c518-4e44-89a8-7744f2e72d67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe810afd-a0e1-46f0-9921-2eb914741bc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "26a290ec-3e73-413b-8939-8a302167f1bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d841532-2405-43b0-8b10-7de444982caf",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9c38369-d924-46ed-9d1b-37a0baf4f49a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d54cd62a-7197-46d8-b7d5-5a58404a9fd3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecdf86cb-822c-4243-8cf3-7af0230a5eb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "520aae7b-6b9d-4649-a66b-e4b34e267483"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c050f5e-ac1c-4b42-9c0c-fd4147c56365",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "716c3ef8-a564-47fc-9773-fd3502377aa5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e97f0715-b494-4f3d-ba34-11abfe789fdf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ccb789c-8902-4edb-a077-8bb3f12bc9cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8d1293f0-5d6c-4c9b-be86-ed711291eab4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16bb07ea-a233-456a-a542-5ce2acd6fd1b",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c76a92d4-199a-4241-be53-ad57c08d9ae3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "062bfe64-c306-4c92-9774-7f1e4a75ee68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecaddaf9-949d-4ce6-a2db-237bd7b7804e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2500af31-a30c-4729-a84b-8680d3ae3e4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17de4924-e197-4418-aa22-fc442d29075c",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "486f4a9d-4f9a-4d31-85b5-e8f40a6c189a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be743a34-124b-4df8-a56c-b334af893647"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44a2a2c1-9575-4883-858e-0b0553aaf55f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "34810b91-e856-4611-90dd-214007915e09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e88122f1-13fe-4e37-89e6-7cdd1c56e564",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02a5370a-ac8e-4ef1-88ad-0795b7d18ce2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efe802f0-0b81-4a3a-9cf8-e563fe200d80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e7e4942-bebc-4e1d-97c8-a6be8aed6f17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "be18b8b0-2808-4275-97d8-7a7b41999744"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b34fe7f-12ca-4fd9-8436-cadf58be878a",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4065e8d-d54b-48da-89e9-cf4ea152ca5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd06b813-9702-4048-9673-d8957bddce8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa1e4b45-2f5b-444f-a94c-36990f590dda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "c2c5cb7b-08a7-4a6e-bd54-6b2614de9640"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f18cc5b8-687c-43ec-99a7-3591ef91810c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd84ffb1-8a21-4c0a-bcd9-9821c9d184eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b825c177-f1df-4d66-8d08-af778a3fced3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bca54166-8fa3-4fff-b537-6bed4017b0cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "45cd8bce-c57d-419d-baf4-b5ea995215de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47ea5dee-a28d-47cb-a9fd-b81322cf088c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "222ad9b9-d1e7-4cb5-9aa9-0900dcc34310",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe64872a-6fe8-4323-8662-7c5114266e90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce8c9b7d-be27-449f-a158-17ab554aa838",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "9891c545-095b-4e2a-b4ed-92af7f41a14e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9bfd9e2-d2ad-4a19-aca7-3e52c14ef15b",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83617fd5-c85f-4d8b-a273-76dc0ef5af8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba6f4d08-2b75-4ac6-850b-9f9a7e42ca58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73096638-273b-4c3a-a553-f9396985b406",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "cb74efb5-e146-47de-bba6-e483a1b866bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98cec064-49e9-4564-ac8d-a0b1d2f498b8",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7ff4df9-1d46-435c-8555-567afbcdb2cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "159840ac-98ac-4e11-8e9e-6adfa82cf620"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e41f71ea-eee8-4362-8a73-25e30fe30edc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "31c1c625-19aa-41ad-84e4-b8618c672145"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c68630fe-d5e4-415d-8f89-ca3cd01cf6fd",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c281b20-3328-4155-9dd0-067103dc7261",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c682a37-ef73-4e19-b5cc-754e35fc46b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d087211-ab09-4a8f-bba7-38be874bf3ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "50642c7b-eec1-477e-9acb-3fb07632b005"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f757b36a-4266-4325-a945-f7410287f614",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e9787a4-7b47-4d97-9fac-4ffc2fd2f57f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "465bc7fb-1a41-4738-bdce-4a063090e58c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0de80727-a660-48cd-b3a4-8337504c634d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "683e5f8c-b5f6-496a-8172-266ccf650db9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4051395e-5b05-4d79-9893-313f8b8e4ef3",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1715973-fa58-41cb-9c71-30e17c56b085",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a258a892-2b4e-48d9-91b1-fedc95a42211"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c6f0b36-cb63-4bec-883f-c5885c1042d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b57327cb-abc9-445d-ae49-de97edb25b17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcbebcd4-2725-423b-9c2a-139933b53f2f",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9de65676-04f7-48b4-a2b7-c87421daf4ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "799ee998-2694-4625-b98c-70c5c0188628"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fb1e7d7-27b8-4d4e-9a81-5d4ecff3a09a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "358dec5e-653b-4471-83ff-45057c221703"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b56bcd24-ca67-44b7-8dd4-6bca80fd69c0",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1fcaf0d-bf54-4fcb-9d99-a492183e266f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c64a0f3a-12d4-4946-9ee0-6b32f707278d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1354ca97-8140-4944-a523-df9db7db5a3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "27a8f72d-e156-4148-b74d-812b58ca0d2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd1bb196-73d5-4a1e-b299-e1ee536f93ac",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "756a6497-98b9-492b-9bb8-47ef070be917",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b883e867-27c1-4a0d-8f84-08808348aea6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9323269-e3a0-4d07-a9e4-a3ed9f0d5b93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b4ca247b-ce5a-4e85-b4b9-1565f4b372c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec88d247-a5e8-40cf-bb81-5c3d1dc35648",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d83c4424-b7c9-4bf4-a12f-0d337bd68383",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0391445c-b707-480f-b9a2-2ce55e53ffa7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a67336d2-a594-4467-b5c3-5818e4faf4b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "03c53589-cf45-4fe6-8ce2-e0ec1dfca016"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2659f297-2918-4b08-b832-76e4afb58180",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "962bb737-296e-4d1a-8ccb-3bdd7c1ba969",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12eecbbd-dd64-4237-a04f-e0575379c4c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24c47496-9352-4f51-a102-e7c395bfffa2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "6db26e66-7d47-4d83-acaa-8d660fca0d58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a49d93e-d581-45a8-8fa9-67a7c3e4b6bb",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6091609e-b81c-4781-8eef-47dd655ef860",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "143d38e1-3c1c-4e1e-b001-ad6df0b7e455"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c076c06d-0b49-4165-871f-733b11818be4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6549ed14-d47a-46fe-b6dc-4c9e91d2f3e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b6b7614-0002-470e-a280-4063d023c32f",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f83e61c9-01bf-46bf-9908-92466bc5c1f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf823734-d476-4050-ba3e-b9bc10abc3da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27e2d696-ebbc-4dbd-be84-81f551297d5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "63f81ea6-03c4-4700-8027-4752b68a13f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ea794ed-aa51-47a4-bcaf-fbbd1dec718b",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eeb08122-f3f8-4036-a62e-a14d7c021016",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3941f23f-ded0-42c4-8103-566d16056b52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e69968f0-35ba-4839-afcb-06fcec49b183",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "999811b8-ffcc-46ba-8e29-b907506eab84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6a787d2-2587-414f-9f52-f25999f05c20",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "848ae200-7b3d-43f8-bdd3-732d0e19427a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "425d68e6-1c4a-443d-b685-9d4bcbe5e6d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b6a59e4-d037-438e-baeb-3954d2dd4529",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "bb8702f7-cab9-4f91-9a99-bad38ffbc44e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36e7fd5f-f2f6-4b52-8628-35743b603f6a",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c038080-503f-48f2-8591-7a7034cf2d5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1424cdc4-6f83-4c51-87a0-617e9cb98752"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01cdb715-e4c1-4f5a-848f-a981c4c2250a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1244ee7e-a8cf-489d-a567-90709de4539b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8b9ad01-c484-459b-b84b-2f4acfb40594",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02bf5ae6-bb85-454d-a304-e76c6e0e5d69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cb5c46c-6e72-4455-a916-411f948b9dc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ab16298-8e08-4494-ab00-3d437bb57266",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "52fd0ffb-1e8a-4168-80a0-cdd359791005"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd8bb83c-700d-4405-80d2-3765358ea480",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c04510d-b187-4bb7-9d20-27d0576acd82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69a131dd-7bd8-4adc-a548-c52a9ffed5db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31b99f03-c7ed-402c-a9a1-cce0301c3ed7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "062b3688-143f-4321-81de-8a26de48a7ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1c37f2e-4e94-4ce0-b55e-840a7d1f22ca",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62901a1f-c9f8-4525-96c6-f76da8449c0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d413aa49-8006-46c1-bbe3-dbcf9eab5c9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "617fd6ec-74ae-4080-b666-197635169208",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f6709814-dbcb-4db9-ade9-5ef3b759ead3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1284c3fc-2d7f-48cb-be63-c2445556dd9d",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f1a906d-d100-4f2e-bf3d-d0d1bbb02f61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7093b9d7-ed07-4c2b-b620-d0eb9741b6ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99e0f7a0-542f-49e1-8b1b-5df62472e4ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b699211f-e887-465d-bd6a-08ebc876d44c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "460364d5-5e6e-4030-abba-4efd2fc34d05",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6f9960c-837b-4ab9-b22d-1760b61bdb45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65e76526-6356-4e9d-9f9d-d02dc2310838"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b34b636b-e297-4059-9947-c1939c8ffd64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c986c818-9563-42dd-9627-93657183cf2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99e44db4-7ac2-456b-b876-6805858a27cc",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b68b9a01-438e-4a94-989f-a1a8f1c4b3b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42338be0-7e49-4c05-919c-7c0849657acc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90c9109d-8ca3-4842-8414-7c693a73ed32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a9573270-9d9f-48ec-a0d6-a992ccae9ca5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55c1d158-1bfb-4cf2-96f1-5c833aae6036",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f031bf1-4697-4aaa-a52f-499a613f8ee5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4629f44-0dc3-4c68-a932-e134e2b9722d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b920f5de-6610-405e-84f3-fe4d67a49bdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "5db8bb3d-0539-4e37-9525-85cd2d0db539"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4f237bb-2275-4bff-9ffb-c966e7990e04",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "100ac21b-b8d1-4af3-acec-c7b0b38ef556",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87318ea3-7e73-4529-948a-f3171091e15d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b31ee069-5c82-423b-8c9f-755cccda0cd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "39ad7917-fcdc-4b3a-9505-b8a100f48d99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6cec407-e769-4ccf-ac3d-8893b1d741f9",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca08596f-271d-4e6e-8cbf-53558450b420",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b79e8a7a-62e7-420f-85f6-367b595e41aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65873e4c-459b-47df-a79e-a07437aea4f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "39d7114e-cac7-4eae-9839-d51215a4d2df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19df04a6-d807-43c4-b73b-127ea96e8e2d",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d2e9cf9-9bd1-4af7-a286-637ae47bdeb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f92c2058-860c-4cea-891a-e7fc7c69ae7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4989bf5b-b343-4a96-be3e-47366824e241",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "63704e90-52eb-49e5-87a4-41e158136e1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad609fce-4b5d-436f-9ce9-2c3af508da12",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9df63d9-7a7d-4451-ac1a-59c884f10ad3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "918964c7-34b6-42bc-8514-f481b2c3baf6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "191899ce-b221-44cd-8e64-0483275461a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e8c55126-c23b-4f0b-b4a8-71ab9f2e69f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b8509e1-83c3-4ed3-8cb2-528df991e3f9",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a25c6c9-5203-463f-9623-86a4923b2d3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e93cccd8-58e3-4c99-a68b-0eb28f2c0fb6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83b9d6e3-1952-45bd-aada-5c85454515ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "00f72361-4b95-402a-8c72-f85a20b22597"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d75adf15-f0a4-436b-aba0-f109bfa86a40",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89304f58-d598-4b60-8a79-f4f6d81b8035",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0721b69f-dafa-46f9-9f7d-12b79254764d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0825e00-e958-4f1e-9cce-7e833a4e66da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "8b7f1e9d-24a0-4fcd-ac62-0c75acf0ee1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac60b9af-9b9a-4cbf-a651-fb4949482db7",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dcc4457-7bae-49d9-846f-687fe62b35a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6db21a09-4714-4f3b-a781-dbae15f007d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3716121-5715-4f97-920f-0d2c8c57ae03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "47a09982-d741-46b4-bf7f-96038001b398"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1d4dd7a-0d76-4bcf-944e-d3483d121abf",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b846c66f-4199-4680-963b-1414d5afffac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4157b07b-2216-468d-a871-f03b7993a5e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b235c0d-62b1-4603-a74e-7bf39c3e017f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "a3787561-11f1-465b-999d-f81bb159cb72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7967035c-8ed2-4121-af3e-18d0f2985774",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb73fc92-193d-4539-a526-420a6ab523c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6e8099c-435a-4f50-9cfb-36631a9c08e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c50b05e6-c8d7-4f90-a6e3-92592a78b34d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "ab30e6d6-9521-4b00-8967-749ff493c893"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b66646b6-27b9-4bbe-a24a-547622e1092d",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b4691ee-2201-403e-9bbb-0ca983346ad3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a88223c3-6032-4c2a-ac83-053e6a785138"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0ae3e65-da8d-44d0-b5e4-e26b3aa4cd09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "895b5dfa-859f-429e-a898-cb81d90e9220"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfe99453-d8ee-44ef-8d86-4f5158aff1b0",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73561e64-a1c2-45d2-8c12-1ffd4ed34b3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "ce2d5832-ace2-4731-a97c-bfd4882eeb28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1886c3b-822a-4f0c-998b-b35488ec03ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "875ac88b-da52-42b8-a6b1-303fe0d18832"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "3f9eb262-a813-402c-a320-811b7a849793",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7c3ddbd3-62fa-4206-b390-13e7fce5d93e",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7984817-e6de-44bb-8414-49670ae4f739",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "da0280fe-d648-48e4-ac38-4c700e4bc9c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e1471f7-66af-4379-85d5-7329e1b200b8",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ffd6d456-7714-4016-a7ba-550f3092fe01"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "facb0719-7921-46b8-a95f-b0546ee9ac8f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8e50594f-f1fc-4ab3-9a0a-2726380b756a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7e06740a-3e87-452c-a7a6-4e2f456970a0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f2a3a51d-f3e9-40a9-81eb-33b306f15bc4"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "818f3535-602d-4171-8897-41975aa5ab0e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "39325d24-bc0a-4935-9b0d-0f345e0b4823"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e715def3-4d55-440d-89d4-ad5fd254b2ae",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0d9ec02e-d902-4503-820e-ecfb661aca3a"
                }
              }
            ]
          },
          {
            "id": "9845fff7-e947-429f-a75a-261a038ff5e2",
            "name": "Positive Testing",
            "item": [
              {
                "id": "8c94c75f-630d-4cef-88dc-9d05c82df106",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "91c0866a-4203-47cb-bd7d-0a480e168b7d",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a757c59-3e98-4078-910c-d5d15a8a0424",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "1e5de5b6-7871-47d8-b004-6d2612f691e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1a5848f-0564-4314-8e13-a254fdc05aad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c143a603-e3a5-47d6-98ff-6afdec2a2ae3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "4c2134b0-856c-4005-a67c-eb1cb0049da1",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "29bf5436-8aab-4a2e-b09b-33f515ddfdd3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4cc5c98a-090f-4390-9b63-d30b154a6d88"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "21486ad0-fc3b-4200-85f0-d429c0c59ba4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "d8ea739d-8e19-4dcc-8cf7-32bdcce0b8a7"
                    }
                  }
                ]
              },
              {
                "id": "0537e99e-cdcf-465b-bfc7-5d5a168c5084",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fcf1c912-2660-40b4-a4be-73b46b349bab",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a176cf7f-a39f-43b1-badf-758f25ceba83"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6b296910-4303-4af3-a9eb-9d0afb7b5bc6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "6b6eef81-3486-4547-858b-d3ddd727cf7a"
                    }
                  }
                ]
              },
              {
                "id": "bb3debe5-a352-4950-a33d-e2acd02abcfe",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "182741e2-59ee-4cb9-b8c1-22469ac832e0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3e36940e-a065-4857-8243-525ffa77fda8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "336273ca-1cc6-4352-acdc-85e5f88b40cd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f010bcd4-6a6f-4769-8c55-d4223f86b7ec"
                    }
                  }
                ]
              },
              {
                "id": "165bd858-24e3-4602-872a-64c294116ed9",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7d750d58-a61e-4e3d-a4a8-24c7943ab077",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "da0d8f04-d5ca-4eaf-b410-c69a62cef50d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8cc6d84a-448f-4fe7-bb00-153cf5adb64a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "dcc53805-b7b2-4d15-a7f8-a4d3ba92bcfd"
                    }
                  }
                ]
              },
              {
                "id": "c34a3ab9-e959-4a17-9c2b-e6966696769e",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "39229dd0-f5d9-4fc7-8df6-1de3a139160e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0e4b7908-c969-4363-8abe-2d99f385db0b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0b1412fc-65f8-4967-bb36-2e8c0ca84f4e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "b9b80092-1881-40be-abbf-f50e1449e224"
                    }
                  }
                ]
              },
              {
                "id": "d687bbb6-7116-451a-9b18-66e5d7029aae",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "afc0fd04-95d4-4927-9c4a-855e31f886ce",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a484b5c0-53a0-429a-a13a-01e3c65c3c6a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "846a8176-2e72-44d3-9d76-8f32ab53a069",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "027e67fb-cb87-4ae0-9681-2785eb41ebb5"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6a592948-ef45-4000-bc37-3aa6e1728861",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "decfe482-870e-47eb-8a36-fc1ee2407774"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "05b370dc-8191-4bc2-b0f0-38ded1001048",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d22c5d5d-bb9f-48ba-90cb-181be7a95b2c"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ddb59eed-929b-4d38-a4e8-c9d25685e5ed",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "0688721e-55da-4c40-b043-76518ad2769c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a282a07b-2095-4eab-ade8-a3d2177afc9a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8d92c0bd-e2a7-4dd6-8016-52e85d47ee70"
            }
          }
        ]
      },
      {
        "id": "81481cb9-34af-4f82-af91-7fd470159ac5",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "92df9e8b-3c51-4569-84a8-1410bdf74b5b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "856f1eff-e551-4a13-a28e-8e3313ce653d",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "4647554c-e5a5-424b-a97f-ff62db9d35ed",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e6ab8a0-f063-4a0c-8e2a-aa78d3a77510",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55ac1d3e-f4df-4382-915c-c985e702840d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b56ed04-911c-408d-a7c7-0d019798c0e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "11c9d2cd-2c32-4dfb-9587-cb7447dc2315"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43c3fa6a-38ab-4425-9ad6-c51a38b7fc46",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b87c91d-acf9-40a1-973e-ba0c81ec0e71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e645b360-1b28-4943-a5d6-6bf1e741c017"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b4b1e72-6771-4d89-afa5-7c3a4cfd1e7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3b53f33d-4cc6-4982-b0ba-c2681fc41874"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89f1a180-a7cd-4ad2-aa7e-6356244087d8",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f741bfe-c575-41bc-8b57-7f592f76f193",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "914d9f16-a43e-44c7-8697-d933f8569b97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "174dbc64-289d-44db-bc8a-4eafcd95c0d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "571fd982-657a-4e7a-a92a-170a6da0e4f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49363792-83ce-47ef-8c55-82da45f40f19",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dc041b6-932f-43e2-81ca-d8732d27d7f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdd3c440-a5e1-4529-9040-622854622428"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fc974d7-6cc9-4a26-b5eb-2c3f833c6de4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e7bfa1c3-29c0-45a7-8d97-397c8b1c5b4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da3ae2b2-5b1b-4e85-9baa-49c3a39decd6",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03f39a6b-5758-4f6a-8469-21f11a8bdfd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9a8c6d2-2d02-49be-87b1-28a3b5699ea4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef1377b5-e5e7-4054-ba43-ddd1f59c479c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "437278ee-8d0e-43b7-b89a-2cd2578cb481"
                        }
                      }
                    ]
                  },
                  {
                    "id": "560138a6-0ec1-4601-a6ce-c0cdec5a472e",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d856b34f-8702-473d-8ca3-b8d0bf76337e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d753afa4-0a04-418a-8c3a-849f0d42eed1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26f5965c-b072-4261-965f-9a2125c275d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "af65311d-d98c-4cc0-bf21-ed0dcfb8a69d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6aad3680-905a-4d5f-bc88-63bd6bdb7d4c",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c54e3db-1ee0-4779-9eef-8b4acac7f8cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fb30c33-1e20-4b5f-bb99-64176895a435"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93acec37-6404-485f-81f3-71a76a8d5823",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "9632828f-cbd5-4f0a-83a5-878ac9ae0018"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb2832ef-254b-4b02-ba5c-0a525c5bcb6b",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f226a62c-98ec-4780-a01c-9d3a489cc244",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8480b9e-ab8e-4014-ac7f-0d9f33921ead"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "528d630b-d290-4b82-a9c5-cf5283e8d4fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "61506820-5d4c-4e82-8193-ae90e23852a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0eb2b6ea-ad4c-4b8d-b7f9-cde76a6ecb40",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2c2e108-f3af-4712-a095-77061372f325",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec3d8cb3-d41a-4520-a055-23cffcc0d13f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5815bc3-7f31-45a1-a17f-816008edb240",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bf93edb3-592c-4ec7-b3ef-a4ec3ada0ead"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24e0cfa4-54c1-4a27-b113-be6167e67fb0",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbb8fac6-30ca-4701-948b-f9e42478fc28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aace3546-8fe8-403d-b37a-6953544a4dfb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7f06761-7523-4404-9254-5481e26406c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "db732a82-ddd5-4d9f-add8-922a83df4eea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56f8f084-51c3-462b-9cb9-87b33a9b904a",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99aadcaa-8fca-49c5-a267-f9ef2a51f6ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3ea9b36-257b-42ec-8ae7-ca143811ea1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38a3c4c0-c106-4d8d-9291-da08e9de1ffc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "50a1a8cf-e1cf-4b9b-9f59-3018aadd5626"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af985a80-dbbc-4f7d-b68d-8b5fb848525a",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4bcb345-37ba-423e-8c28-9b1587aa5e8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3524d1af-6800-4b84-b7d3-f9283f255f1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea79dcb4-bdc1-4ae1-98c6-b3143f24e7b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b9d10cfa-667d-4530-9f3d-e649d41aacb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c8f8c5e-dd16-40bc-9cc7-737eee284244",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d45ed9cc-4559-42c2-8edd-b24c0af9ce65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c93540ef-b7b2-457a-82e7-541146c48256"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c88baf50-d2e3-42da-834e-fc9af1284f1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4280fa43-6c6e-4d0e-888a-0533d9d54f9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "214a360b-7dd1-4366-940a-31a1aebaf7c9",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e82132e-f305-47ae-a4ce-0a2d2c8971b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c88e9c45-35bf-41c0-9519-a8742d311db3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc040b2f-2ace-4f06-979a-0d3de7e5aeb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "60c22e1a-1f6c-4b8f-9006-b43271869f41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f40ec3f0-d05c-472a-8b82-791d82ae38ec",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c1b98ad-7773-450b-a926-ea239b9fe0a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82482365-8033-4b1c-bb66-904de043c61e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8826bf6-7a61-4783-a61a-b4ecf80dfdee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "908c5711-5d5f-466d-a576-8c27b8f07cff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3945ae55-991b-4bd6-8fbe-f59c26ca4487",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "286c93c1-b595-45f6-ad87-ccb993461ae0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "053ed50b-ab7c-494e-8d4f-1bedac866015"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01ec29c8-c918-4ea3-8264-39e70ff0336f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "15ec1e32-321c-4eea-9909-22ac95703cbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "daa81d3e-a33c-48aa-a2bc-93fe2aa8e4db",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f575cd80-e312-41a9-83bb-31f3a4c46c4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "daf9907d-0fe6-4d5d-97b0-982e9fb7134e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "256211dc-3dd7-4cb7-9beb-4205e58c4a68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "71430ae4-ff46-4e89-ab4e-3cc83aca8fab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b56a855-ce01-4dcd-bd8f-86e84604e609",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a75dc18-9c48-4525-8c49-70930ac48c47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f84f28ae-ca3c-41ea-97f4-e3aca2465eb4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8613f178-59f5-4fc5-b249-07480ae95203",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "6e20a328-c195-463e-ba1d-ba9cb0c53473"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e628e86-bbab-4ba7-a109-1e5cbc9d12ce",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fed177b-caed-4c60-877f-0578ed732357",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0f8bc75-735f-468d-aefe-b79a4b1e7152"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5deaba4b-9ce4-41a6-848a-45655296d99f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fc5f9d70-7fc0-46b1-b8cd-7d0535ba99b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bb55bb7-4e2f-4154-a14f-7a421340d4f7",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "826163e1-e69b-46fc-83b6-1a62222da7ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c9d03c8-a76a-4e2e-a23b-d18a09e36f86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfe6a49a-ef9c-407e-865c-f15aa633cf18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "359a0fe1-e6d8-4375-bdeb-e081f1173589"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a355165c-94c6-4f49-9329-7226d9d87fb8",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f13c0f50-35eb-4d56-820d-c3a7af10c688",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c2b206c-99f6-472a-82a6-5471edc62a52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47d24262-5b00-4538-9f23-6801207bdbc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e7143467-153f-443c-bc59-c2fc94aeb8f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6527ba3a-0753-412d-b322-7aea992036f7",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "226363e9-34af-434a-b166-23200f72aa52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53bc2441-f564-4fd7-b47d-c2b2d307212d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41317418-1a8b-4006-926d-6d92c7fc2bfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b5e3656b-d954-47e7-9993-cc391db88b0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eec0261b-82e3-45e3-ad59-bdc2e4660610",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1f307e5-f283-4c97-8cb9-913a760e8765",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a026503-abe0-4c62-8145-f03f8e821db8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b54c8f32-0e83-42ec-b888-169204103bcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1ace9758-2a90-4ca3-a459-165dcda21a82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5d92099-5892-4466-8ad4-4b83c448cd6e",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc2ec2db-220c-4762-adaa-76d15b6e1293",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87cabbe1-26d4-4834-add9-b702ef2dce55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4b9d0a8-741d-45e5-9d24-e055b2b7ec24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ddf6cafa-5de5-4b72-a9e0-043071baf8c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc1fa870-9571-4e18-b36e-a4e50521cee5",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5697d3e5-0b81-47cf-9932-9f675ecb50b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04ef204e-940f-49aa-9c91-c65ae8bb4bd4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c83d859-fd34-4f9b-9852-fcacfd2758af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "aad93bfd-c1b3-4f9d-8dbe-dd486b20ea96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cc5386c-a350-4a2a-89bb-bb755f92f80c",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dad9b51e-c9e9-400d-9fc1-4e551fc75d73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "913dce77-8c61-47a3-bfbd-215be24ef8f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad1d8d66-1eec-4f0f-8ec0-f771f3aad562",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "346e0afe-a1d5-448b-a080-a68044517049"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a36909e-e190-4a5e-9611-3ba742466008",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "834bd475-6d4a-41ce-a045-4dac805568c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a241271d-45a9-43dd-961c-fd1d9e68b4a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e93bdb95-d0de-45da-951c-8588db9b256b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7f03d48a-0469-47c3-8a0a-35a1e3e59139"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e14ef342-a5ed-4e10-aedb-9f7a171ee67a",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9350ad84-30df-4b4e-a17d-9be8e97f0849",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9263f22-adf3-4b64-a22a-f238a8213d75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e422bae3-5ac7-4a27-918d-38d7393dd466",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8f207a77-fa07-4035-b6fa-37622ff837d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e47bdc52-e4dc-4126-81b5-698c13d6324a",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e4cd01f-70e1-40d7-bee1-d14c4be0a73c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c60b6ce3-96a0-4b16-a5c0-4becc58df830"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f01a407-b33f-43eb-a995-4b0b06ec0b48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f1ae3b8f-2f99-4ea7-8009-81b09db9e765"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93075194-8e6b-43c6-ae57-6ba25f5e0c5c",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3eff716-2ab6-43aa-9233-9404f81e6856",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8199c40-acc5-4477-a147-35015300a178"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66e08e91-aa24-47ea-9cfd-1ae22abc3c2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "85a2c4ef-7665-49ba-ba88-61467b33a16e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bbeb88a-e40e-43a7-9d38-4ba97ba9e254",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eba554bc-1656-416c-90fb-48eb54682614",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ece7474-9e08-4d02-ab58-7f75a9ee53be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "119c6ef2-5344-428e-a444-be187a5735dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f9d78337-e6f1-4d0e-b56d-fc18c6fb0aa3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e45c4e66-4390-458b-a8a1-6f098442572a",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b605db1-903a-4dbc-9555-0f7a47123f19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33e9f85e-cfb6-43f7-b591-aba74d3986c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d84a2a7-ce3a-428f-8ade-188c78cc02ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a80b138d-7010-48bb-842d-b4ce74ccf4a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6fb7510-df3f-44a0-b6f3-68d3be551544",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78bca754-4841-4cd9-8a40-1d2fd9a90e7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66f137cc-f155-407f-be44-1157530c5710"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28ddb998-e8a2-424b-821c-dda6ca14574e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b25a4125-1f7f-45c5-870d-f1f79a10caa8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebe05dd7-5a1b-4445-81c5-f11956504aab",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "513d8253-96d4-4ac5-ad8c-5e640b25cc7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3541953a-7234-457e-a39e-97acea62bccc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c38a4f7e-54a9-4d1c-af93-7d199b450121",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b866dbd0-f263-43a8-aa26-97625de22027"
                        }
                      }
                    ]
                  },
                  {
                    "id": "404f3763-0e3c-4533-a3b4-34360d8b9446",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89e34406-a499-4a12-80b4-3a8f8c915471",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4cf399e0-1296-4e00-9ee4-219b620c575d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f87dd93c-6a7d-449f-aac5-103d49a89f81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "edc0ee87-c479-4b98-b76d-bdbf7ecdd084"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e98b151f-84cc-4224-8416-e7cb20e39873",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "021ddd84-77e2-4a66-ac2c-506b5313dbc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c11d3db-a8b6-4c79-abbf-8c9fc73d178b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfed5135-2832-41c9-ad0f-26e64d52f82b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "378c6f96-f81a-4e58-b2de-563895ac42b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fc223ff-9f17-4bad-9155-cd709db4551e",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "274e09e4-06de-4570-9898-df7525d46922",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11aef9e2-56c9-4c0f-a9a2-3287fb208ce4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5477a642-32c7-407e-8ec6-386ca479fb9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "173b71ee-57bc-4440-993b-9083f91f0e55"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "20db9c67-587a-4a78-85a4-f4f38966e141",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d30a18f2-d4f0-4ec2-ba9c-f152f3211fa4",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4cd5932-64c7-474b-9fbf-b3f04f341ed6",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "b552ae9d-654e-4214-b8f1-ae9ad9e8d660"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b3065ef-19f4-44d6-8b5f-733615074185",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4dd0fffe-0a5d-492d-a485-64f34503bc5a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f114a381-0fc4-4418-beb7-08aa6f80d80c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "74ae6d3e-4256-4097-ac6d-1433ee876945"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c77b4fc4-519d-4ebf-b3f5-7eb02907ed7b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e932dab3-15ca-498c-a3ad-716a336b43f0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "12e84c29-b3e0-4113-96d1-2e449e19daf7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "d24598dd-8a1b-4445-84e5-34e85ffa7d1c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "18fb29d7-7c74-49e3-a365-e07bb4fd9205",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ddc055d6-6913-40b2-8760-1f29cb03989d"
            }
          }
        ]
      },
      {
        "id": "6f6c5946-b699-4d9f-8c9f-9b30e1918184",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "9233e540-549f-4d71-a072-079f1daa13b4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7c905a3a-7f7f-409f-9591-82ef3b74dce6",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "019b3403-6c7f-4c7e-b7db-9497ebfe7da8",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2b6168c-63a9-438e-b489-3e93e643f368",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55bcb070-3b4f-442a-9e4b-ecbf2ed53a9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cc53c76-10d5-4861-97b0-d910ee86d415",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0692265a-266b-4d1b-8581-2acafb425897",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d56493e-cde3-4b49-9f7f-d6838bbffe6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "215a4453-2aa2-4457-96ee-96e2d7e48621",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21f48930-7374-42ed-8889-c506ddc9cc97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45e71bca-8518-44cd-8285-cb3da9d1041b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b17df2e-1fe8-4d90-9a2b-719c8610e8de",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54379b2c-224c-4113-86d1-3bbf8d78d3f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f5ee893-7d2b-4208-9335-846914b8fc88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc4e8630-a3fe-4995-b774-24f3f05db810",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9560e77b-fa6a-4690-bb0b-a7f3a012c58b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aad2d1ee-ac2b-44ee-b10d-8d434c8f3780"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43cf2c80-4777-424b-86be-e554118ad73e",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aaa505df-f255-49fe-a93c-c8ca03d5532f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1849c05c-b30f-4368-8979-44948c854945"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a33fd1ae-a761-4ebc-bce2-166c9629024a",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b03f343-c96e-474b-939f-6ff1dc238144",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecd7c327-1106-4b36-bf36-f27bf5b8c4e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9193fa57-5f68-4600-83f2-3794f1d269c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e522bef-7765-45a2-b5f0-13e4184d34f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52a23758-9c10-46a0-bcba-b0cf9a5a2272",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9c40886-9dfe-412f-9513-cea6e4ead68d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8ca42a28-8045-4282-b1a6-b695a4b5df9b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4e6260f-0716-4f04-a05f-b752891ab165",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "897f319d-0379-45de-8750-f469edac9539"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bff1ed0-8ceb-40df-a0dd-ccc517f03edb",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53cfa4ae-bf03-4383-af58-47366ef7a018",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "981356d0-5fad-4012-9c0c-d1487bd83121"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f57c85ef-aa18-4cae-a798-93b93be81ef9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cabe13f8-e0ee-4233-968a-f7d688f087d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be0036b3-caf7-4c29-b9d8-991fe6f2fb8e",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "487740d3-fc6c-4389-8c3a-058ba5c970a5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f2f489d-3691-4924-8cf0-0c49fa0d141b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f70a8c2c-1df4-464c-bc43-fe3310483aad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2857afb-d777-47f2-aa62-09a5136480dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cf71f35-8057-4bd9-8903-f80e83743ff7",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "deaa7900-68fd-4eed-b133-4ededc6d71b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6105c467-e423-4618-ba03-acc87fd1f95d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7468c85b-8268-4fe7-ae2a-814032e6a6eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd5cc17a-15dd-400a-8bc3-bec0d4f57467"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2021d7ed-bdbe-4209-883d-fa7760a4eba8",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ef9b592-88f3-4ec0-98e0-183f6bfef745",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ae3d214-58cf-45dc-81f6-acce5cf580a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73b1b75a-7a10-492d-a703-2749c0c86a4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a0e2cab-3928-4d7f-9e1c-182bf163bcdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8a055e1-acb1-40e7-89b2-d40b26b2e9db",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb0c5678-ff4f-4a8e-96ee-948bc9fdbd4a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8fc34fe4-0c3a-4b1b-8493-89f43c6a2784"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7254744c-f488-4a03-b55e-c7c288d38b40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "305d1f5e-f73c-487f-aaf9-4ee2efc251c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "458e48cf-840f-4eaf-be8b-19ca3dc395f6",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bb74987-1111-4bd1-946f-c634d741b80a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d60db9fc-9091-4d10-842e-ce7adde57aff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71d8393a-5e43-43d6-900a-3b29cee7aa3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afc836a9-6174-464b-8a68-3b15ec871b65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b814b4d-831e-4221-a3a5-4ba7e9041957",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0590f5b9-9cfe-4b0d-991d-6e5ef85f037a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b66be07-84f5-421a-b58f-8b862d5b0684"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b40e1d2c-39fc-4034-8f61-0dadc2dc695f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac97a49b-728f-4ed2-a35a-fbf245513145"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2833a69b-5645-425d-9124-443dc0f8fe92",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2941d82c-7426-48fd-bcee-2f38cbf68aa7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "13cd8266-cd1e-4a0a-b032-8ba238c2fcf3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fb44077-9c51-4925-897e-330b54657577",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e70ada5-3915-437f-81c5-e3e56341ce7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf6d4e1e-f1d8-4614-8c76-d946b219f7d4",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5c8bce8-62f1-4f7a-994f-2fbc2b4fe11a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0610e7fb-cab5-4589-ad90-b3fee7799c98"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d59983a-936c-426f-9d4d-cb3f232d0dca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1920168-1077-4fc1-abe6-f8042fd3da93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74f203a4-cd30-41d7-8680-2587c0a47d96",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "594969bb-c45d-46c2-8200-0aa502dd3c9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b75b3c64-762c-4272-ac32-ed922db4c043"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2689cfd8-c457-4bd4-b599-a77b54fb3979",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d34f0b9c-dbc7-4f35-af98-001839bd50b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b16d333c-a1ff-4730-b5d4-b9871c043139",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3a3c188-1d57-4567-b09c-73b981e6f249",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c333d13-506c-496c-88b6-3f9ebe101b44"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2597512f-510f-4b08-828e-d370f028c8fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7f4928c-4959-45ca-a9f3-7e6816a6bd31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d27c5fa7-9d11-4c89-87f7-5b1f220bf911",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83c2f616-5d4b-4ecf-aef9-87d7f63686e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efb1fc57-a9f8-4eb8-b04d-4eb2f9c25d28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80d5815c-e5dc-4a17-a49c-5d76909743d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c097345-4d00-4a21-9ab6-918baa34f79d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a39b0f56-1615-47cb-a54b-503add683a43",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f479d0f-86de-4b96-a0fc-d901ca8ffe3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08ec0587-ee2a-4bcf-b010-1399e47bf226"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "deb03ecc-190c-4136-b9f8-52e75c113442",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "627c6ebb-39c9-4c36-ac16-1861312421b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66545d9e-1f00-4d94-98b5-a663593a6d62",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1be900d7-b887-496f-9407-0ebcbacde2c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cb0afb5-b1b5-4ccf-bb52-b19e3cf92c3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63534174-3fb9-4011-b64f-05dbe8788287",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b758ec2a-b4e1-4c29-a26d-7aa7a7f429d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "082e36cc-c29b-4c22-9cd7-3c5f0fd764f0",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e590d488-3a7d-407b-acdb-67e849440bd0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a26bface-cd4c-4326-908f-c98902e72852"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1032c335-f229-4654-af6b-bcd65a3e93dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e048c944-97b0-4ad5-a7d0-0511feb2fda7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8caa25f0-f88b-4d3a-b843-e48099339cb0",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f8655d5-a940-4ce8-a4dd-6247b0bd129b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8c33bd6c-9acb-4ac3-ab5d-4c06a734b3ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8db0b255-0021-4a55-9314-4c16b299ff19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b039b4e-020b-4cd9-8cf8-7da71b332214"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02367c50-6b86-4218-8f7a-f4f020e74c92",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bba78be7-545c-4aeb-abef-626935e50c3b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9962b35f-aa37-4916-b469-e1b95c0ea583"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f4b6226-e4de-4842-89df-3c245ccc3aec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae4b2712-c0c8-48c6-844e-af727824a309"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37a99558-6e74-466f-8fb9-f7a9b90733b8",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fd74d4f-c229-4fa8-8563-170a9df12e8b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "96244fc3-1df6-4e38-b6b9-b773de5cf131"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "727e316a-ce6d-4923-9d20-5c8137c4f83c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64315f87-7045-4e45-a57d-3170d8e92be1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a9ad1d0-3632-42fd-bd33-4cabdb7f0c12",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2944bf67-7564-4210-9778-4a9e2449c481",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9da3ab51-98c2-44f5-b8ca-9a42eb947a3f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8302103-7f69-4f1d-8d4f-21aa9f845306",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca000e0a-cea2-4066-aecd-fc1f9b7a4bf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ceaca966-be19-48bc-97a4-28d92277e271",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe616c55-f7a3-4bee-acbc-1cb98b3c1883",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "454d7afa-76fc-4168-b891-ee72390867b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d501d2c4-ed25-4d7d-abf8-e64ee6414381",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74a1e289-b19a-414e-9da2-99569a87a810"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61641d71-5231-4f53-89b5-1fe02f59adf7",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbfdedb6-b324-42ab-8738-49708c1fad9a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "318bd3cc-c0d7-4c2b-a891-1ea2b3b4da87"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "057141c7-4dff-4cf4-b9fc-af1408b324b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b28a883-aa29-40b9-94d0-3d9b70da5aa3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d49c1cc4-32fc-4c7f-85f1-e0eb6534053f",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cb178a7-1850-4250-9ec2-aa6eb43420b1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c62cd7bb-0ff4-4330-87e8-9e3214fbb9a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6872da5b-97d4-4091-b269-38491389aa65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4218a30-313a-4e9a-ab2c-d74abc05a3a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f103c5ee-87d3-4857-a875-c4d89bf4bbe2",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed93f96d-6e42-4e17-96a8-a2ce4eedd948",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "519a324c-cadb-43a8-a944-32b83000c972"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1155da89-3819-4f10-94ba-0bc780367604",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8716f86-592e-49a3-9910-68fc08e6cf66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fe2e9ea-9466-4761-8f11-0c72eea74848",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79708d59-73a2-4a6e-8f24-12c3b77fa325",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6e5f6b90-4488-447d-bc4d-b0ada4cfe9c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f64703d5-2f79-42ff-933a-c9ad0da0741f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35cadf6b-3638-4f30-87b1-ff93e6875022"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa4bb78d-b8d3-4b39-86ea-21eb1f768ec8",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "019909b3-ca14-4eb8-8a48-56cb98eb7e6f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "38ac5e4a-b7b3-4772-87cc-c2e01039b091"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a225880c-f4c8-4a73-8d1b-138edec02971",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b7fb5a3-14e0-4f37-8be7-2c8feea732ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8325c71-d9ff-474c-82fb-7d23744d8ede",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a1b8fe5-7d33-4bc1-8979-85a30f474c0d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dcdb3e06-e6a1-4ac2-9bb6-2fdb0e4eaab7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "262d701f-ba19-47f1-9f7e-bd526d49cf74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2b36863-c877-4d31-a136-4d4af6d6d293"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9688b923-cc4f-4d1b-b1c7-38843feba058",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d78cd1a-6a23-4ce5-af51-7b0500b32bde",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94bf6a9c-64c1-4673-9c54-5386152bb866"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db5808a0-404f-4fac-af69-840ab7d1c505",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf544e38-0e52-40a0-be0f-1fcfce72f87b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2c36479-9a78-421d-bb81-3873a7cf8229",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5129177e-8be8-4d62-9078-1d4e421c4447",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cbf8568-8282-4399-8c03-12a158026f72"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f812149f-012a-4b86-99e7-79bedf316994",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44e52293-98c8-4a62-a004-45aebb496ee8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2dab2e2-5093-4e66-9afa-d5915d90e94b",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19fc0bdc-ce70-4b6c-b097-c268a7b10b48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e91ef04-4b74-45f9-a93e-6e186401266e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dae38bbf-2dc8-4e34-b9a3-71cbd8f21c85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00c65188-c5e6-4755-a8f7-2a9dadf3b5e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be33caaa-a0b8-4bb9-9196-7ca50c547f65",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "918ebb37-8cb6-44b4-b235-0694cc4e7cd8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bffdd00-e95f-41d9-9e62-17b9dc9ecc68"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35522cac-dd6b-4964-9e9b-8302dc788fb2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea8a5776-ae40-482d-9cf2-7d520cccd190"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b5fce96-f35d-4779-a388-81986a1d6a9a",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2704125-d05b-4cf1-8461-21eaf4947064",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d9b1069-c32a-4193-975f-1c1bfcd9ff5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0763bd6-c78b-457b-831e-cf02a207c418",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "883e0260-11ff-43f6-b784-2681a4559a1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "697851fb-6d66-4a46-84da-2afa79d30bcd",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6fc3ab8-005b-4254-934b-0980d40da756",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef533adb-98c8-43a7-919f-4213b5409030"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "efe5bfac-daa7-4b63-a0d9-1dbd03bd3010",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e588869c-5af8-4190-99a7-72517a2fbfe6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a89c723-3c25-41d4-b40a-efa1848e0b67",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c8f4c00-5eb0-4b02-aa7a-377d554d269a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27683e6c-51c8-446f-8f3b-7e54ff049417"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdfd6bc4-ec52-4e93-a5d3-9419a5dc6477",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f29825f-a4bf-48d6-9296-9fed0919dcd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "178ea0ce-54e8-432c-8223-54627eca4a68",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc5ac865-a7d7-42c5-a4b3-ce5e0b6dd13a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bdc3636-b1d5-4fc4-95a6-48ce4105bb15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91444cef-6f6c-47fe-83fa-bb3ef272167e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95248434-1f1e-4cf4-b5ab-4ca17f5d7799"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67848bf1-64fb-4240-b3f0-4dee5a1b1e33",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24f51bce-46f4-41d6-91f8-683ecb67072e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9eacd7b0-d015-461f-a8e4-048ff3ad839a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54fc606b-f021-4842-8688-cdfecae421f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c97aa9b-5321-47c9-929e-52b19470cb70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "770a6407-bea9-4c29-83b4-b728e97d00b7",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ad942c2-0213-4d41-9e88-de8e0739c2e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e262af1-263a-4dfe-9e5d-d752ce6ebbd0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9de2acd6-9cda-4170-992b-4b08444ec1f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc872ce6-9f0a-4824-82dd-2017ecbd3d29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d645ba1c-b40f-4dcc-9cfa-e05fb1bde89e",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99b5bb56-8ba3-44ae-b1c6-f8e3751d9df5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8b948bd-b6a2-40ba-ac71-69d8e5348f33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d8e739d-67d6-4a83-8317-0423cf288069",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d28ca23a-5733-4ae8-a9f1-768c094dab75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44a7ca15-f734-4a5f-8c34-c4f9eaf46038",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1400640e-7a28-40cf-b177-f7deb5aeca0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11744bf9-7059-4634-b604-4c135602c65e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a665df6-58f4-4f94-ab20-cd158e41c7b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "978dc1e9-4566-4548-9f8d-d9e7d4f842df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f39ee730-152e-412f-8121-0f2986c7bfb9",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ff91189-babc-4550-89b3-f3f9adb85f86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1f908ce-f86b-42cf-89f1-fd66a570dff3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74fa6687-5bb5-43ce-929e-b9c9462eb926",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ebd300a-46ea-403b-94b5-4a06bc5cc3ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24259c3b-9a0d-4af1-9f41-c743df55c1dc",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47304d18-b4c4-415b-8183-1b50beba848c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2eba8f50-e037-4e21-b125-36bf6dc12077"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fc20e20-cf43-4015-9ada-cc71f4bc56ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "275e9458-e8d2-4edb-a0d5-5aad18657ba6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "084a785b-9e1c-41a9-ad9a-b2e0945a8c36",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b86f03b9-fa16-4952-b073-a7dd097aa114",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c08523cd-fcf1-45bf-88d2-5d892fe209e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b07680f1-5cdc-4d15-84c5-8c1e52b8029f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "107481d8-0fef-4321-8af8-0b846c92f07c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d02839ef-1655-4deb-a17d-f09299773a5b",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d1b955f-43ea-4887-b893-1b6c418c94ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7332368a-a8d8-4410-9fcc-3cb6c44b70d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "965a80bf-ec2f-4621-88c0-bf1afe4caaf7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8d21858-60dd-4000-9baf-dfc63f093e2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fd91aa0-c8de-4fef-9ff2-16b153ab4791",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51adafa7-cd4d-4c75-a529-d45ec01c75b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c43b887d-7c69-4529-aaf3-af561f1ee068"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c97c8283-0de3-4775-a65a-84cd2d5457b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bea8aed-8ed4-4c88-8723-53afd5fa3c7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1d65b1f-787f-4d8e-8c42-52481fefcbc2",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e51bc354-2d2b-4325-82d0-6814ef8b30f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3278cf6-0e76-4fd2-b23e-7287058e68a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "911d1729-69e3-49bd-93e6-c362a78d39bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83cb0907-4c26-44bd-86d1-10dd357f6075"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54c412fb-451b-4aa1-bfe4-5dc642595204",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5941d0e0-0b36-47bf-b00d-fd1ad1aa65e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ace8b35d-a186-41e2-ba76-934db0543702"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc0a9c8e-88c6-4cd9-90af-1a793a65d95b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0a61aee-54ac-4411-8d99-69a24cd15eb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3760afb-1c93-4faf-93a4-ea9da09406cb",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9598702-599d-4385-80d9-69723bf4301c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82f7f8db-e514-41d4-9e18-19ce4e1e0eb7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "532f7f3d-3ff9-491f-91b1-bf6e96aa8698",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67798fdd-160d-48a8-bc16-6fa5223685bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eab2d4bf-baa1-465b-bc8b-4b6049a087da",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a400c247-a5d6-4be5-a9e8-ac9d083ceff6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a04f0f70-44f8-48d1-874c-a4144062e239"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb4b497e-2efa-44f7-bef4-c06a84cae386",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94ba4c52-88e8-4f54-9b33-c737c2862c8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20603de4-5809-4fbc-ad22-e873966c92e2",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96cb4ea4-86e4-47c7-8fcd-a0275c70099b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b29b5ba5-ea5a-4a07-ac3e-9ead8c036ffd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e72a881-6fed-42d7-946a-fa1168ad8261",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b893bdb9-6ad8-401d-914a-c66d901b1396"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76d0ef36-455e-4165-aee7-09859e4c4fa7",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b407a3f-eb1b-4328-bd83-2e1eaf8675d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4c85d8c-4a39-4daf-96e5-16d52dd7414d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44e6c3e2-3f39-42e7-bf8f-f9914be767ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "add7e19f-981c-45b5-b43d-7d829e93e74d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a70f9607-beee-4ca6-bf08-ab2c5a92c3fb",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5165049-da69-45b0-b86d-e611bbfab57d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cc9406d-470b-459d-887a-bcd57b0d689c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "329462a8-6e8d-49b0-b70c-30a1ddfb18af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "613b4e43-faf8-465c-9057-7004fee4a5ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0c625b0-69de-44b9-a6d1-54abbef8d58d",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9273e902-14f8-41cd-ab0d-ec50b66e92c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5f3f635-ceba-45fe-bce4-2762c1f90bda"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95bc7797-6276-40a3-af48-c43e3522ae08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b96c4ef-a6c2-45fd-9925-66b493125cb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f8b1490-f5df-4599-9cc0-dc730f0f3b74",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3442c502-b052-4477-b2df-b69705b9c091",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97cf001a-b484-4487-a103-643e59ea29b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59dd23bd-ad15-4e1d-a8bd-8d9b1641bc05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f132c9ee-9f74-480a-8226-dad0515697e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5cb4202-468f-4655-984a-50ad6eb8304b",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f63f8ef-a9aa-45cd-af99-1814bf6f1a91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7821c2d7-30c9-4dea-979f-4f4b7ebb1941"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60c9d23b-461c-48af-9fce-f34132d51193",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f966ac0b-7209-422e-80b7-00930d94ee12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f565ab93-68a7-4b2d-ad65-a27e60fa9796",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a72cc2b-48dc-4fef-a5a2-dfa6f1f56069",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "670c17b0-4b3a-4715-967e-d05681e3e2ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "051b0e77-a196-4626-9411-f7455906a114",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fa0b9ff-18b1-41e7-b515-875ec2fb4cc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "047606d5-a174-4937-a360-d4549cc7c64b",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebbcc9ee-5d39-400b-9527-43929f2ced69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97611d10-a425-411a-8f63-9d82fbc93f99"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50e894a0-2f59-4672-b60a-1d5ad6d94b1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38a24d15-7a93-4c99-a4b5-2840d0426578"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32defed1-b573-4274-9cfb-27c8933c99f7",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a86f0db-9ed1-47d7-999f-4fa2fb8d8211",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd47e4d5-bdcb-4245-98fd-9d4140e02f47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "528b5ba9-c60f-469a-bf66-2dd173952bef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7060334-aa10-4202-8f48-d7ec1d52a150"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05adf151-e69e-43ec-8128-68b5dbf745fc",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0074657-f127-43de-943d-a242166c92e7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "87fe141c-4b62-487f-be25-fde08425974e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae0338ec-6bbf-4313-888a-23c053784e79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9314b6e1-7bbb-4968-b27f-e5509736cc35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b397e4b-654f-44d2-a513-ed2ff82dd27b",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "167f9ffc-0e58-4e00-a8dd-6e569598decb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ffb45c9c-8a4d-435d-ad9d-9d6e839262a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49cb53d1-bb59-4f47-be4a-9609f469aeed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e46081e8-5c64-4c1f-b77f-7bb1bf237a8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74f47260-9719-496c-88a5-ef101c937001",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccef19ee-5ace-4b5d-b382-c80e9c5d5c90",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2be7627f-c99d-42d6-a4c4-d6be3fdc7feb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1bb3e71-cd04-4ddd-92c2-96a42639c4db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db2eccc9-f758-4115-9d2e-7b5c80b7bcd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6229786-e39a-4b37-9d0f-37f9ec798a7f",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff747b59-1754-4886-9035-91ea1952eec1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a7a6bd99-d52d-4cac-a3c4-03f38eb0cda9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d1e8499-37e2-464b-a282-501a7becf74f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0df50556-33df-4804-b3d5-f5016f95a349"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e384a47-232f-4463-b162-a818a8e0d81d",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "693d6dd0-b6a2-4707-9c15-efd613bdd7e9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7cf3af21-7717-4a99-ad7a-08465a7d674d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "773dedf8-f8ea-4cfb-af6f-42e3e2c24e45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47ec29ce-02bd-41e8-ad46-560aa22c38e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f854422-f81a-47b3-bc9b-41cccbedad83",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1f00848-0318-4fa8-ab2a-7cc4ca76523b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "644177f6-6d56-4041-920a-cf4bcfa8ec38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f611a38-8800-47ee-9e99-fecb9e73830e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3ab0983-17f6-4bca-b60e-1cfd48c75da5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed0d4706-3e68-4f23-acaa-ce542efdb4cd",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a56c4b12-8132-4690-9d29-13dfae86dd74",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ffb378c7-5e71-40a5-b131-19b1f14f8d61"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5046a03-79c8-41e0-98d0-a9cb55c0fba6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c362830-4761-41a9-8178-1017e3b0e8c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c59c630-1426-4c7a-a9d3-b0a9f34176b4",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05bbea36-df63-43b4-bff5-0be17ecd0e67",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ea69a0a8-0028-4fe7-9c34-84de429289e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7546cb96-23b2-4ef0-80cb-8d9abc14731f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e17595ce-cb0d-4cf8-b451-dc514bbe366e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30302926-1399-4722-8b36-a7cdf269dcc9",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68a92768-dba4-4e2e-9e12-48d5c1456368",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3cba4cbf-a92a-41a3-95a7-99b63a67ae7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "275b6872-2147-4849-a61f-edb38c5a3653",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22f1052b-5ddd-4c66-a594-ac986da6df97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74efd0d3-3722-4680-8b03-0c9e7b05bebf",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3cf8b3a-4c2c-4f19-a7ca-27295f589cc2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e817a030-cceb-432d-ba8c-70cde56646ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bff55a1d-3d9e-49f5-ab95-087a0845ccaa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "806e92ed-09ca-4459-9795-1dcd2ece1c63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4238366-a656-464b-905a-492e89aa9540",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d32348ba-39cb-4e10-b949-b1cc5f33d4fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7c408eeb-1112-4a3f-8237-62aa81bf8323"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6831b871-459a-48f4-9e42-f3c97af68615",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23a37231-5993-4abf-b247-8c7999da2d11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "829f1242-04fb-45e6-92f3-25b3f76b2bff",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fa9e26f-c17f-4909-bc50-e83f75ce239b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ac38b62-7287-4c93-a9b2-818efeadb904"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "731a850f-02eb-4abf-acc1-26e6537c2c59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99c9292a-13af-4031-a37e-44e608cd7556"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70c48fd7-8c28-42c2-b1b6-bf7cc8afc1f5",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f396d4ee-4eb1-4db9-bb00-7817d22c4569",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "329fee72-2840-44ed-909f-fb35b9275c95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b93c34e-28fb-4f32-a30d-c116d981826a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "966e4d4e-3ffc-403c-96e0-f506e44d0a19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1943c90-430b-4030-aa23-4cdf026135b3",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5f9824a-e563-44d4-b291-ac83cde0ce53",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6ca35465-71ec-4607-b393-adf3bfe737c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "078f81a8-f919-4dee-a211-0e43bf943280",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f7dab66-bd12-4af7-8312-c55afc872f14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7d702fe-cfe9-4dd4-bfd7-7ecc4f8ce670",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "981eb587-b384-447c-af3c-3541cd528c53",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "232748f3-d2a8-4f03-981d-ead0adf4967e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d234b207-7703-4460-8d01-8f6acc948373",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f85e9bb-4923-432d-aad3-ca1c51208e91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58e197d0-b8af-4dc7-9653-17c33ef4dc58",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be19fc86-c08c-42c7-b70e-c4b79e3a2fd9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4fc2e64d-9805-46a5-8afd-e91ac7e18475"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1efad565-1258-4e24-9161-ea6bd7f11e4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "420c4106-12df-480c-aeec-b4e7c0c5b42d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15c02689-53de-4fb9-b104-be066992fa61",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71e3accc-e89d-4f70-8122-58d2e7a9997f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "85a4c91c-d48e-4947-8a6a-8e48dfe33d84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36706ec4-0761-4f18-a88f-9abe6a16d8dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd9b6565-625f-47f1-b88f-eb7d21a1fb12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a98ffcd8-df64-4ac5-bc11-fef5d301743b",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5cd0bab-f523-4183-818b-5c87ac56a4b6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5af9a596-d4ed-4222-94ca-5bac1b1cdf03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e224a8c-85b0-45eb-957e-03a7a1166eb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4eeaa50d-57db-439b-a16c-0e30f65de025"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63ccbcfe-3586-4d21-8e50-5f2689ef383d",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2942abf-2355-4a18-bf06-582be72d0b2a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9ac9fba-89a5-4ae0-8c28-0d68a8f2fb9b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa4d1bf9-f6fe-4665-a0c0-0848b93c96f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90f53788-30f2-49d3-950b-76e743ce4b7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a315472-1265-440b-ab4d-6683806f04a3",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b53d5a2-8a4f-44d5-aa0d-11f3e838fe49",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7ad8d4fc-5f93-4933-8008-789a7f99d5c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb9044dc-ac74-4eab-ab66-9c7990dbab57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "407bfe5c-3049-481d-922a-08396fa973e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc983cbb-4e6b-4abd-9c40-69c8b968796e",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1017b349-4d0c-4e23-bf62-ee20635cce06",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ebed739f-869c-462c-95ba-817b4f15c7a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac530a89-9c04-43f2-94d2-10d9f12e7da2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33c88548-d9ad-49ac-8cce-bd41b1f2c25e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0283895-c716-48a2-84f5-d441c5586de8",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78d9aa37-3c8b-4efb-b6c1-363c0ef6274c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08edca02-841f-49c5-bff9-685e7c1e89c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3142ac80-5423-4206-8fc2-922ee3f6cfb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99ec8aa3-22e7-4acd-aa93-cbd1768611cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe6e722c-c3fc-48b4-b826-9c19f2f95053",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39a64e9e-fca1-4d15-90ff-caa47577ee03",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a9b8b04d-169c-4d11-9408-7d9f1f12a187"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bd94d44-ce00-4b59-b1c7-97e59fbb56c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f0bea8f-1a4d-4a98-bb1f-3af2a301a1cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "317ec28e-0726-4349-ab4d-a11be696bebb",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1768c2b9-5709-42de-9802-997fa5716bee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d71dd54c-7829-4b69-a58c-4e329218a5f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12b74fe4-113e-4d05-824d-23c48f7cee19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca469a36-73fa-4064-8fd7-7fa256c90bef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "432ca8bf-20d9-4dd2-9e13-29c0b9b102a7",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0b9335f-0b2b-4108-8503-6793a0a5291a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c1d10566-231e-4353-b76c-4daaa7087ad8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2b0ec87-2d0a-4383-b654-da577ff49c5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88856a86-ae2c-46e0-9230-bb21feeaf477"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2935bd3f-2604-427f-a581-fe8ed2f6d44f",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e67ebe0-d577-404a-955e-a75f36133b64",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "567531aa-0119-49ba-8ebc-d9e4be289a45"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c0d73a8-b00e-43e2-8cea-df5a4db15e5b",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a92d089b-5bbe-473b-99b3-7e17f64008f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ca275dd-4325-4e41-9c08-3087ac7638ca",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cc392ae-ed01-4324-b781-607e37df22e7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "90e9e230-9fc6-4f9a-8105-05db8cdcbb78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfb16d63-0f0e-46a3-93d5-21c285f196dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f45bc7f-9624-46ca-b6bb-00d4280fb17f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adac4d81-5bc1-4d69-910c-4364ee7314ab",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ad54364-8d19-42e8-a5e2-d1f4b4301808",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "de543996-17c4-469a-af2a-d0f1df527f73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b49c75b4-9a8f-4533-9780-c6dd585be721",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02dc3071-5ce3-494a-9a1f-156f43ed5cdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0710d2b8-3a48-4d07-9f60-db0d1f7833c5",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "590f5195-72f6-4c87-9049-1a0a8794e517",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "afe03377-aa15-41c8-b79c-0c3e40d08852"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81ad2af2-f897-4637-9d5f-1c92e1bdf936",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ead7cedb-8599-4f46-a2e7-d4ebe8eec517"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed4e25ac-d797-414c-addb-57ce7fa3a9ba",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d44c81fc-3e9d-418c-a465-f3ed4802e232",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "44e12a10-9d6c-4f68-b2a4-55d233bf287d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c4945c1-afcb-4ab0-b2f6-c13d323a4083",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5a83755-7928-48c6-8af1-e8b5368d6ca5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "223377af-adf9-4ffe-af86-856c3f0f667f",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d12e978e-29aa-40ca-adf3-d1ac7823533e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c2c65261-06dd-49f9-a86d-cd782dd54f05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cdcbf38-9d87-4e37-b0b0-953568223410",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b632430-d8ee-49ca-9390-072604645ef1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96ac25cf-33a1-4050-a970-79534fe3ce8d",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29ccebbc-771f-4d1e-b5f6-45b668bdaba8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d81fa571-81ef-4f79-869d-80cc3d48219e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1345d75b-63ba-4dd9-9298-8d54fe322f8a",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d8e05e7-e108-4bd6-811a-0374cd3d196a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66df19de-602e-4197-afba-4ce43918d7c5",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7752118-7835-4fc1-a83f-30ae4080932b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d3483af3-0ca4-41b6-8603-526349cd8423"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea02cc7e-a2a8-4dcb-97d1-09e9f0938d95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41446bb4-0672-4005-b1ec-5418b46c3aa5"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5ff08190-69ba-4344-9aa6-0976a722feb2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cc6c5535-6284-4c6f-8469-71c45206bf13"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "012a7bfb-4264-439a-8e9d-2c7866738d07",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "713dd7ba-32d2-4c02-8fd0-b4ba85383215"
                    }
                  }
                ]
              },
              {
                "id": "97b3ac5e-3069-4ac3-b681-8525eb821294",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "26fa563e-1130-4a6e-ae13-bc24f04afcb8",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9f22462-4072-4e8e-baa4-d436cfe0503c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "4f878a83-c094-4de2-8272-cdf44e5394ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c95036c-b76d-493a-bf47-479d32897e3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "34aea83f-82d0-4a47-9536-9ba2434b58d9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b9cdec94-74d5-4b66-ac13-bdc827bb1ce4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2554e6ab-a1fe-4f62-82ef-9de689331884"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "758dc36f-6944-4a18-b97c-b4865155a0b9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "41711193-f8ca-4459-83c6-6ac12f5c5c4f"
                    }
                  }
                ]
              },
              {
                "id": "fb7e3049-da02-45f5-b964-3907feacf964",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "f3976f3b-1c38-4bc0-839d-7ffd4f1df9e3",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe9a6823-5aa8-41de-8c3b-7078ac5065d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "74e37e2b-d4ec-4bd3-8776-371b3274aafc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5af4e935-a2ab-4a2d-bb2a-e4d8ad06eb78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fff47cb-b1cf-4c89-b9aa-0cdf12448e54"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "c173388d-d1e2-4205-8898-ddd0392ac2c9",
            "name": "Positive Testing",
            "item": [
              {
                "id": "8eecb850-5b10-4155-b634-ce52b1068c5c",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "38d4c95a-0be1-4202-89a5-35c047794631",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "8f02ba91-53a7-416d-9259-a9964d09c547"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c75fe5e3-24f5-4e97-bcb2-449c6f51a568",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "28c9b180-cc70-415d-ab39-a5ecc11838aa"
                    }
                  }
                ]
              },
              {
                "id": "2a34ac31-bf7f-4f3c-8c33-0c7b375b4d13",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ec05ff38-45cb-4204-9e54-aef4410971d8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "919cd605-aa75-437a-b79b-26f130aa0e3b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0a70105a-aacd-4bd9-8362-ddf4057fe55f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "760b1aee-dde8-41b2-907a-295c0a1ffa67"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "244f21bf-f8be-41bc-bde9-6fc85dd8fc13",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "9d1821a5-9084-4eae-8618-4eac05717d46"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "391ebb38-9bad-43bf-9736-566460b655af",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8fd4a879-e197-42f8-9fef-608be74cd001"
            }
          }
        ]
      },
      {
        "id": "6ca2591e-e330-4d19-be1a-436f53fda3ac",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "c0df8786-2c16-4d9b-8a60-efcfd7471060",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e35d27f0-2e2a-4b31-883b-ba836f728f4d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "907f9493-19e7-46f9-a094-22f208607793",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf8c39a3-cc3b-46bc-803a-8175ee0db6c8",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "80a1cd46-5e01-4b7f-80a6-6ae9bab5405b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bd19660-f7ed-4b17-8f30-ba06499765e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e9ea9b74-66dd-4914-adcc-5e6d862288dc"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a34c6f79-d098-4320-b527-c3eaca6c17f4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4e40ea51-c3e3-4c3e-8f3d-b18c8700470e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "697112ea-9d94-49c6-adea-8d9857144085",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "196810ed-bec8-403e-b985-1a3bb2f9426e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6facf9a7-60e4-40ff-b4fb-bd361b739f6c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "a4c06040-cfd4-445d-92f1-04653c106aff"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "06efc9e1-79a9-458a-8771-407a1abec010",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f104dcb0-2f0b-45f0-b525-03dfe173ea86"
            }
          }
        ]
      },
      {
        "id": "481af6e5-01a1-4768-b260-44c3d2e27f0f",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "63cdd63f-adb0-4e17-9dce-e9fe385817cb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5cf72863-73b5-4469-b500-767e926ccaf9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "cff470a8-8cd6-43ac-9d46-60bbcac14ca2",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94adf8c8-c6c1-46c9-99e6-34a13805060f",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8ac8cdb1-1d28-40eb-a62a-2b2be034869a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c628d5e-6ac5-4a07-b85b-714cf368ed30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "92176db9-0d55-46c7-b283-c0f5550b0b6e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f33982c9-214e-42ef-80f6-3e26517671be",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f1233ea2-41c1-4b2b-bb64-798f074163e2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1ef93982-f2ae-4ac0-b7cb-591d3ed8ff54",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f8f69182-909b-440b-b74e-6060c23ea732"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "34468d64-4c04-4b12-89f9-1df1c6e13dc0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "7e2adcc9-6c38-46e8-bd18-22cb06607ade"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c26c687e-04f8-48c2-b8c5-2bf29e42c0a5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c6f824c9-7091-4b6b-92c8-04426c957ec4"
            }
          }
        ]
      },
      {
        "id": "d78c4321-c5e3-4834-8810-281902a8c102",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "5873a7c2-414f-4644-b683-2c9b7f373287",
            "name": "Negative Testing",
            "item": [
              {
                "id": "349cdd13-d1a3-4f96-92f0-ffa38d9c8b37",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "903b869d-7c88-4bb4-b31c-3ddb8180ed4f",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a70f3f9e-de24-4f92-a01e-6cfd67a2dd72",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6d460595-5dfc-4241-98ba-d7a97f40ee5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38dd7f34-b240-459a-a166-78989e7e788c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5b7365b2-fad1-4189-9628-c68d636b45b0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "12a67a1e-b8e7-486f-8195-8b8afe182faf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f3e5d894-fc63-4d19-bbf5-82868e2c37a2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cb4e78ca-8893-438f-9853-a8514cebeeec",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b948b1ca-6a01-467b-a21c-c6d8799d3fe1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a3252d3c-f059-41af-8931-1110df50b683",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "6a2a3aa6-6f9c-45ba-891a-53e37958f169"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9cdaf808-d064-4582-891c-8a847a3a2461",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1ff3a37f-680a-449a-9706-65cf3178e111"
            }
          }
        ]
      },
      {
        "id": "e9c516b6-af72-44f7-be59-706fad9ebc3c",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "73f090cb-e62d-482d-9363-3cc1395cd574",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ceefa014-423a-457a-9469-79bfc19b8447",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "85b27acf-691f-4f07-826f-e61e832f3b8d",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "791cf904-225b-4d66-be0c-e22d3e260de5",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c5f7143f-0351-4a06-afe4-4403d57df4f3",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 264
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 75.90873015873022,
      "responseMin": 25,
      "responseMax": 734,
      "responseSd": 95.29355024048128,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1726533371706,
      "completed": 1726533399201
    },
    "executions": [
      {
        "id": "ca8e52a9-8b86-4595-ae79-980f4ceb3a56",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "85319b45-99d3-4135-a124-4cfd5850f13a",
          "httpRequestId": "2e5b9bad-2dac-47f7-beed-dc5fb01bb898"
        },
        "item": {
          "id": "ca8e52a9-8b86-4595-ae79-980f4ceb3a56",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "0444ebea-2f91-4be7-954e-aa53e3281df9",
          "status": "OK",
          "code": 200,
          "responseTime": 47,
          "responseSize": 0
        }
      },
      {
        "id": "d5703a0c-48cf-476c-9f80-3abf223686f7",
        "cursor": {
          "ref": "bbc884b8-7cac-40f1-a1ec-4539bbf35750",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "9c5b72d0-0baf-4207-b444-434b42716b08"
        },
        "item": {
          "id": "d5703a0c-48cf-476c-9f80-3abf223686f7",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "5017a6f3-42fa-43cd-bd87-340a6f8a367c",
          "status": "OK",
          "code": 200,
          "responseTime": 38,
          "responseSize": 0
        }
      },
      {
        "id": "d8782283-2aa7-46e0-9ad9-f3f22321bb83",
        "cursor": {
          "ref": "ed26a78f-b79d-40f2-8f2d-df3d7f1deb02",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "c1a60e9b-e491-4c32-9287-b3179a4b9641"
        },
        "item": {
          "id": "d8782283-2aa7-46e0-9ad9-f3f22321bb83",
          "name": "did_json"
        },
        "response": {
          "id": "cdd56efc-d083-44f4-9299-623eaf5fdf49",
          "status": "OK",
          "code": 200,
          "responseTime": 358,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12746307-5f43-42ca-af25-ebf66a95e0cc",
        "cursor": {
          "ref": "c3f6f385-150d-4d60-a8e0-d244e00c6ad9",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "ecfca3ad-0c36-4aa5-951f-f2ebc54b0468"
        },
        "item": {
          "id": "12746307-5f43-42ca-af25-ebf66a95e0cc",
          "name": "did:invalid"
        },
        "response": {
          "id": "b5439b5c-f6a5-409f-a612-39a1b8fefc95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 227,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12746307-5f43-42ca-af25-ebf66a95e0cc",
        "cursor": {
          "ref": "c3f6f385-150d-4d60-a8e0-d244e00c6ad9",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "ecfca3ad-0c36-4aa5-951f-f2ebc54b0468"
        },
        "item": {
          "id": "12746307-5f43-42ca-af25-ebf66a95e0cc",
          "name": "did:invalid"
        },
        "response": {
          "id": "b5439b5c-f6a5-409f-a612-39a1b8fefc95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 227,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b3d8f3c-fe96-46d4-90c1-a15a77c6e71a",
        "cursor": {
          "ref": "5518b6aa-c61f-433a-93e7-99dd75746ac2",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "eeb5c71a-0c02-4425-a440-29e3058ca836"
        },
        "item": {
          "id": "0b3d8f3c-fe96-46d4-90c1-a15a77c6e71a",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "7daac4e4-a541-441a-8195-a8e64bd4696f",
          "status": "Not Found",
          "code": 404,
          "responseTime": 108,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71a078b6-3e2d-45d4-9d0c-23f8058f4cb7",
        "cursor": {
          "ref": "fed6abce-ec2d-4557-b77c-7530ce2b6f9d",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "3092b39f-1494-4e3e-b988-132976313f09"
        },
        "item": {
          "id": "71a078b6-3e2d-45d4-9d0c-23f8058f4cb7",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "239e1260-4ae6-40eb-a902-299e3a756ddd",
          "status": "Not Found",
          "code": 404,
          "responseTime": 36,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a219fc5f-5755-4a2e-ad8a-0768d1f6c4b5",
        "cursor": {
          "ref": "0588c342-20cc-4445-ac98-2db3bb94fd17",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "b38ec55f-dcf0-4e37-94a9-08eb78a689bb"
        },
        "item": {
          "id": "a219fc5f-5755-4a2e-ad8a-0768d1f6c4b5",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "f82c0ebc-4790-4c33-91bd-e2e2126c1bed",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 27,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f75a55d6-35bd-4773-902c-8beb0dc2961d",
        "cursor": {
          "ref": "97de1cf2-04a7-45b7-9cf6-487bb887b3b3",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "691e898f-750c-48af-8694-930ff841ee5c"
        },
        "item": {
          "id": "f75a55d6-35bd-4773-902c-8beb0dc2961d",
          "name": "identifiers"
        },
        "response": {
          "id": "6027fb14-c343-49b9-b892-9518048d8b82",
          "status": "OK",
          "code": 200,
          "responseTime": 68,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0326c59a-f9b1-4b15-ab6c-0f4dcdd2c566",
        "cursor": {
          "ref": "62961a52-7314-448c-9eb4-6cfb81227bcd",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "3c083011-02ad-408c-b58a-dd23d75bf6b8"
        },
        "item": {
          "id": "0326c59a-f9b1-4b15-ab6c-0f4dcdd2c566",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "9e637501-f5dd-4b8f-a85e-917c7c68cc31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "22ba644a-a6b7-4401-bf56-df9edb0cf2b0",
        "cursor": {
          "ref": "765fe50a-be5b-46fa-ba1d-50b6fe930262",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "37630a77-2934-4694-9a85-c003383f9fb6"
        },
        "item": {
          "id": "22ba644a-a6b7-4401-bf56-df9edb0cf2b0",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "3a0d13c7-b431-43bd-84f7-09ea9fb89cea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 204
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "07b97127-0c07-4a22-a050-0d4fb28050b0",
        "cursor": {
          "ref": "ab27209a-6c9c-4a64-8778-dc60610680ff",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "5c2757cd-6789-4d80-a237-62c58564b751"
        },
        "item": {
          "id": "07b97127-0c07-4a22-a050-0d4fb28050b0",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "40967a76-81ae-4094-b92a-0336be5c7b2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 204
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "c83a24e1-681c-4b79-b3b1-9a0bb3d98ef1",
        "cursor": {
          "ref": "a93b5e35-814c-47c7-bf06-905db614c737",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "0219e3ce-e880-4fc6-ba0b-dc90643890f7"
        },
        "item": {
          "id": "c83a24e1-681c-4b79-b3b1-9a0bb3d98ef1",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "88bbce0f-705b-4e53-a91b-2212796ef854",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 204
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "07f2ad51-90bb-4dbc-8fa3-5c27efc86f47",
        "cursor": {
          "ref": "bdbf946f-275d-4993-aefe-5803dfae5283",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "f71f9e7a-ce27-424e-82a0-c7c23860927e"
        },
        "item": {
          "id": "07f2ad51-90bb-4dbc-8fa3-5c27efc86f47",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "58e0bc1d-9d35-48b2-b009-b5138ce8a309",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 204
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "12f9dd81-b5d4-4a2f-81e7-be3443e31135",
        "cursor": {
          "ref": "33e2cc17-de2f-41f3-8620-00fe0a18f059",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "d272224d-e1cb-4fc9-8723-edb74bedd155"
        },
        "item": {
          "id": "12f9dd81-b5d4-4a2f-81e7-be3443e31135",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "41b8ce25-89cb-49e5-a805-69ebaf555279",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 204
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "35072e52-0d31-4e13-af93-a446154f913d",
        "cursor": {
          "ref": "ed0b6b08-8fc7-4e9d-83d7-4f8a8b547895",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "94fe0cdc-933e-4436-8d0a-1f8562f159be"
        },
        "item": {
          "id": "35072e52-0d31-4e13-af93-a446154f913d",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "21184bd1-c387-407d-9af7-ff7b9a3ba3d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "916dd1e2-62e7-4c6d-bd7e-a8dd7dd7b54d",
        "cursor": {
          "ref": "e26fa6f6-6f63-4061-b9b7-4340d1979b81",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "1743dffd-7199-4442-a2f1-dcf4245a132a"
        },
        "item": {
          "id": "916dd1e2-62e7-4c6d-bd7e-a8dd7dd7b54d",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "75cd2fd4-727b-4f23-82fc-7a2a0a4cbe59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "a4a86c25-3e46-464e-a461-fa77ab92a77d",
        "cursor": {
          "ref": "3e0bed92-ab11-455c-9399-a2c380930154",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "0ceb66a3-86ec-4447-a60e-f956c8fa6542"
        },
        "item": {
          "id": "a4a86c25-3e46-464e-a461-fa77ab92a77d",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "df61691d-fd0a-4b8d-b9cc-1d479e030a89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "0cca6fcd-9b1c-45e0-aed3-8859cf2f8cc7",
        "cursor": {
          "ref": "1270f45b-8ad4-4acf-89b8-c359da381b5d",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "183a7b76-d6c4-4e82-9f8b-afa1911f532f"
        },
        "item": {
          "id": "0cca6fcd-9b1c-45e0-aed3-8859cf2f8cc7",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "23db8f9f-8f87-4bfc-9d4a-cbdba5f0d878",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "703330bf-49ce-445a-bac9-3d7902ba6805",
        "cursor": {
          "ref": "8b492149-12b5-4b15-bea7-23a63984b4b7",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "cd13eff7-b5ce-4b8b-ab51-9bdfc4f3ff20"
        },
        "item": {
          "id": "703330bf-49ce-445a-bac9-3d7902ba6805",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "b8fdf149-6a4f-44b3-84ea-dc0728d7c4e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "ee9920e5-94d3-4bff-b85d-c3087536b015",
        "cursor": {
          "ref": "55ba9668-d2d2-44e6-93cc-91701f125ece",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "1af0d717-e863-4aec-bb92-d9bb52389c9a"
        },
        "item": {
          "id": "ee9920e5-94d3-4bff-b85d-c3087536b015",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "6355d943-cd91-4de5-907c-1827b9ec2f78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "385fb906-3f50-4f34-9fb2-8eced797b471",
        "cursor": {
          "ref": "9f0a2c7c-d1bf-4586-af89-354e28c2bf67",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "2b0b7cc7-eae7-4221-9e80-38257e9cbbfc"
        },
        "item": {
          "id": "385fb906-3f50-4f34-9fb2-8eced797b471",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "3e548b0a-43c1-4a20-a650-8ecfe6fad7ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "f30b4be1-44c2-4f24-86a2-5e24962154c5",
        "cursor": {
          "ref": "b45b6ffd-e1f4-4cdc-8132-599d44f89a89",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "b4f4bb11-bd9f-4dba-8de1-59075aea226f"
        },
        "item": {
          "id": "f30b4be1-44c2-4f24-86a2-5e24962154c5",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "09fc63c7-aad2-411e-a688-cf8913540ce6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "17748e01-ec7b-486c-a14e-77f4dbd78a1a",
        "cursor": {
          "ref": "97c87fc5-c106-413e-89fe-1ef6b0fc3523",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "99d0ce3d-0b09-4ab1-9e3f-e0b76c1bb4c5"
        },
        "item": {
          "id": "17748e01-ec7b-486c-a14e-77f4dbd78a1a",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "1b77e573-5693-4fa6-8da9-14600dba61fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "5342c23a-a897-4a9b-b401-62996df0d924",
        "cursor": {
          "ref": "6cdfd1b5-41c2-4f21-96bb-71f426609942",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "aeffa3da-5445-4d39-9f67-0f58c3225b21"
        },
        "item": {
          "id": "5342c23a-a897-4a9b-b401-62996df0d924",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "dd211a84-1109-4e3b-9e6b-3bdd0eedf6fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "7f45beef-d665-48a7-a250-6b453f6f1d85",
        "cursor": {
          "ref": "a54d0f10-a885-4aae-b80e-a2f7e3d357c6",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "1b7de159-145d-45d7-9ac5-51fbd15cd339"
        },
        "item": {
          "id": "7f45beef-d665-48a7-a250-6b453f6f1d85",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "f209c3be-c4ef-4a4c-b247-6a2c327c05be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "7c2995c7-f228-4d0e-a0f2-d8329d2b60c6",
        "cursor": {
          "ref": "0f5675a3-d936-4d32-827b-27165bb340ef",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "e88ad9cc-ab9d-4c80-9ead-6ab74ce64e16"
        },
        "item": {
          "id": "7c2995c7-f228-4d0e-a0f2-d8329d2b60c6",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "29347f60-2338-4ac3-bf21-c4afbdced7ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "aa15fe3a-97a3-4bb4-b63f-2a1a2a15ba2e",
        "cursor": {
          "ref": "06941438-4907-4791-bd99-f28fa1804c58",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "186ab514-4823-4dac-bc1e-99716ee4373e"
        },
        "item": {
          "id": "aa15fe3a-97a3-4bb4-b63f-2a1a2a15ba2e",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "ad57c500-2fbc-4930-861b-8bf23ebbc08b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "4cfa073c-6ee1-4c1f-af09-f050f47e8c34",
        "cursor": {
          "ref": "bfc9b173-fea4-4166-9204-984f78bee307",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "8906bd1d-c532-4117-93bf-4f7f906adbf0"
        },
        "item": {
          "id": "4cfa073c-6ee1-4c1f-af09-f050f47e8c34",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "5e359fb3-3a29-470b-865d-5be287069ea1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "a33e3728-c79e-4b09-b4b9-4aa61fa4ff12",
        "cursor": {
          "ref": "9174cb25-641c-4e3a-ab07-bb87e6f9ff4a",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "436cb73a-414a-4c12-a0bc-eea5a1e95ce5"
        },
        "item": {
          "id": "a33e3728-c79e-4b09-b4b9-4aa61fa4ff12",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "3121a519-ee84-4774-83b4-0149d641dacf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "8d365944-e228-4c15-8b7f-1a5738d42d3a",
        "cursor": {
          "ref": "4320d9b2-f597-4796-bf77-8b1b6310ebf1",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "16227632-7ac1-42de-aa25-eec1bc8eb81e"
        },
        "item": {
          "id": "8d365944-e228-4c15-8b7f-1a5738d42d3a",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "59dffd71-6e6c-4ded-ba02-8ffac196bc9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "f3e82316-98b2-42f9-89e3-56f597900e6f",
        "cursor": {
          "ref": "4272b848-a0b4-43a5-bc87-07016858b403",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "c8d8e1cb-c2ac-480d-acf1-a5b3d37e9bf6"
        },
        "item": {
          "id": "f3e82316-98b2-42f9-89e3-56f597900e6f",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "f49336cb-d93b-4261-9167-f1acd4fed141",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "e85d3fb5-5679-41c4-8477-b14a32111c72",
        "cursor": {
          "ref": "d403c3f7-b5c5-4fb0-bdab-c6ed191a07cf",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "e49ccba3-784f-47a3-840e-fb1eeb644d5d"
        },
        "item": {
          "id": "e85d3fb5-5679-41c4-8477-b14a32111c72",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "0883a8d2-3284-4f2e-b759-34e8dfe72d59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "efcac426-3137-4ce2-8b74-d60f5952aea7",
        "cursor": {
          "ref": "9454e342-0f69-4fe0-82fc-cbb86bcdf773",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "7e01159a-08ed-4e13-85c0-c1643468346d"
        },
        "item": {
          "id": "efcac426-3137-4ce2-8b74-d60f5952aea7",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "91d3c2f2-8047-4537-bb6a-11e21d79eee1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "3bfa7209-5310-444f-af2f-05c641648d6c",
        "cursor": {
          "ref": "4b96787b-d9f8-4ef6-b0b2-b18582d87562",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "3cd583da-ec6f-4c83-a475-df68b5c8b90a"
        },
        "item": {
          "id": "3bfa7209-5310-444f-af2f-05c641648d6c",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "7a696c89-2015-46f8-9b0c-d59ce13639cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "2a76165f-bdb0-43a3-bd0b-fc51d2c72cca",
        "cursor": {
          "ref": "f7e4ac1e-3acb-4986-9c54-acadb3a053f9",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "099ca446-aa8f-402a-9d12-eb687d1dd006"
        },
        "item": {
          "id": "2a76165f-bdb0-43a3-bd0b-fc51d2c72cca",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "cf60b257-aa16-4c44-b09a-8d10933a3402",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "882d2b49-e4d3-4edc-bab4-3ea5b114b9e8",
        "cursor": {
          "ref": "f37cca60-fba1-4707-a640-3e8e935a380c",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "9553db4e-cc1a-4fbc-887a-0bc473f7497a"
        },
        "item": {
          "id": "882d2b49-e4d3-4edc-bab4-3ea5b114b9e8",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "e5394e3f-6aa7-4ad1-9c2b-8228989db32d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "987b7af0-d0e7-429f-a109-c297c9a5159a",
        "cursor": {
          "ref": "a00a0d53-8fd7-42e3-beef-1575f36f346f",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "a22cad23-824d-4006-b93a-09de21923724"
        },
        "item": {
          "id": "987b7af0-d0e7-429f-a109-c297c9a5159a",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "5acf4c2c-fdc6-4764-ab1a-e9e1f34b92b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "edeed38f-bfce-4d94-95e5-a53bddc8ca5e",
        "cursor": {
          "ref": "67bd91b0-f5e4-467e-8d10-96bf57b32206",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "2693326a-a036-43a8-a32b-4a82ec2f9499"
        },
        "item": {
          "id": "edeed38f-bfce-4d94-95e5-a53bddc8ca5e",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "b0d32336-ddc1-4911-b973-e9203dde0c46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 92
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "c85eb44a-3477-465d-bccf-89f651744150",
        "cursor": {
          "ref": "a9681c29-98f8-426b-ab72-c5314341ef5b",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "56ee47d9-ff66-4f3b-ad01-5caee2c0d977"
        },
        "item": {
          "id": "c85eb44a-3477-465d-bccf-89f651744150",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "8bf2750b-c71c-494b-b221-6b439c973fec",
          "status": "Created",
          "code": 201,
          "responseTime": 734,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "21ee8250-aca0-41c9-85a6-814d56eb3f37",
        "cursor": {
          "ref": "2d4ba017-396f-4a7e-ae5c-923a50f6e4d0",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "25f548e2-281e-4f91-aed8-7df1c43d3463"
        },
        "item": {
          "id": "21ee8250-aca0-41c9-85a6-814d56eb3f37",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "60be541e-7d7a-4b2a-a734-298f7f9d4b01",
          "status": "Created",
          "code": 201,
          "responseTime": 371,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "eceb5501-79a7-4722-a1f8-55eff5ebc073",
        "cursor": {
          "ref": "38f67142-5e98-4a05-aa07-feaf831e7c38",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "6996ee19-bbaf-44bf-8bae-f70d3e8b55d4"
        },
        "item": {
          "id": "eceb5501-79a7-4722-a1f8-55eff5ebc073",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "ba058d6e-4aa9-4548-8a5d-380209b5e721",
          "status": "Created",
          "code": 201,
          "responseTime": 302,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "1b755c5c-f821-45bc-99d6-29795e2e03fd",
        "cursor": {
          "ref": "6a6751bc-838b-4337-8bd7-7b51bebd5db8",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "9a2c22a3-6c97-4561-83fc-4993fd982c92"
        },
        "item": {
          "id": "1b755c5c-f821-45bc-99d6-29795e2e03fd",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "8dcd750e-dfaa-40ae-85aa-4345204c8367",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 92
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "7e25d745-1057-4932-9d71-c3f32af9f194",
        "cursor": {
          "ref": "88a50291-cd08-484f-983b-9b7e460def8c",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "a608a228-9fa1-476b-af9a-05c64f7dd627"
        },
        "item": {
          "id": "7e25d745-1057-4932-9d71-c3f32af9f194",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "33f6d510-ca6c-41f5-89ce-6cd2614e246e",
          "status": "Created",
          "code": 201,
          "responseTime": 290,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "42774583-cc31-4d56-86d2-c1d872b509b3",
        "cursor": {
          "ref": "43318870-e5cc-4d31-b091-9debdcd97e2a",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "74831c1a-6be5-49fd-acbd-930fa78171c3"
        },
        "item": {
          "id": "42774583-cc31-4d56-86d2-c1d872b509b3",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "6a0b7480-5430-442b-89d2-c5f7ae21fd54",
          "status": "Created",
          "code": 201,
          "responseTime": 311,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "d3cdf492-a300-4781-ab00-3d61ea7d0d95",
        "cursor": {
          "ref": "8301e9a8-c0b3-41a6-842d-762c722998f8",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "c56596e4-358c-4191-be1c-946c977294cc"
        },
        "item": {
          "id": "d3cdf492-a300-4781-ab00-3d61ea7d0d95",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "a0e01086-5f6b-4e53-87ca-e21f04f68b9d",
          "status": "Created",
          "code": 201,
          "responseTime": 354,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "52509dec-aeac-4e45-b33b-1be7ce94bc96",
        "cursor": {
          "ref": "a787b8a6-ee27-4899-9034-2c25a7a10963",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "31d1c87e-c87d-4756-8b2c-6fbcf1bc1696"
        },
        "item": {
          "id": "52509dec-aeac-4e45-b33b-1be7ce94bc96",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "b4e4b0d8-4969-4807-82ff-57a3868468ca",
          "status": "Created",
          "code": 201,
          "responseTime": 306,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "b127965f-1ae0-4973-b2e5-551fdb2e1e9f",
        "cursor": {
          "ref": "31dfbc66-68ca-46a5-98f0-58ca7d934948",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "996cb9d2-69af-44d1-807e-708f1a8ed923"
        },
        "item": {
          "id": "b127965f-1ae0-4973-b2e5-551fdb2e1e9f",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "df4b0f8e-a492-49c5-97c3-ef6c274ef552",
          "status": "Created",
          "code": 201,
          "responseTime": 345,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "1286b6dd-11e7-430c-9526-4c5830c636e2",
        "cursor": {
          "ref": "4da8b7ea-8150-4cb9-9629-e59bba467826",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "cb59360f-beb5-45a1-9362-5b238c5f0cb1"
        },
        "item": {
          "id": "1286b6dd-11e7-430c-9526-4c5830c636e2",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "9bbea993-5533-4c2c-bf18-2b08b9d73bb9",
          "status": "Created",
          "code": 201,
          "responseTime": 313,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "0bc66cae-0327-423e-a5b0-7bd86c996fa4",
        "cursor": {
          "ref": "cc6d1c73-b9c7-466d-a2a7-a1983ab8be65",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "220b8b61-2e74-4568-9da8-8c986659084c"
        },
        "item": {
          "id": "0bc66cae-0327-423e-a5b0-7bd86c996fa4",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "3390daba-d840-47a4-a323-24a78f183fef",
          "status": "Created",
          "code": 201,
          "responseTime": 300,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "9c0ca9c8-bf02-4bd3-94dc-9ccf237e5cc0",
        "cursor": {
          "ref": "74986f0e-29b2-41bc-a65e-24134c3fd027",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "6262fb9a-2dec-43ba-80f0-5f51e95aa4f1"
        },
        "item": {
          "id": "9c0ca9c8-bf02-4bd3-94dc-9ccf237e5cc0",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "2774fcb2-3840-47d7-9310-a5ef31557ab2",
          "status": "Created",
          "code": 201,
          "responseTime": 360,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "0091b0b9-bca0-449a-a447-726881adfcc6",
        "cursor": {
          "ref": "bb0a9141-e973-4a97-b6e5-a8b018b5b5e1",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "d1dc76c5-6c29-4ec2-9296-e573c0822769"
        },
        "item": {
          "id": "0091b0b9-bca0-449a-a447-726881adfcc6",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "8b01c7c6-75d5-4547-9372-9452c6aa8b66",
          "status": "Created",
          "code": 201,
          "responseTime": 331,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "3594adaf-c6a3-4c01-bfe3-857ac26ae47d",
        "cursor": {
          "ref": "c4a0ad96-4fa4-4860-a6a4-48e7476d5b42",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "274b67c2-1034-4d82-8fa0-79257defeeea"
        },
        "item": {
          "id": "3594adaf-c6a3-4c01-bfe3-857ac26ae47d",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "7be3e442-069b-483b-9129-2146eb799f9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "7b40afbe-1b96-4ed8-82d7-6d23fcb995d9",
        "cursor": {
          "ref": "5b609239-0f78-4710-9f06-3bf8a00037c9",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "76294ef7-5e56-483b-9531-f286cb6a9fdc"
        },
        "item": {
          "id": "7b40afbe-1b96-4ed8-82d7-6d23fcb995d9",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "1344cf30-b2a1-4857-9b23-c1c54b0be450",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "783f408a-4b62-4415-9fd8-05d10d18e286",
        "cursor": {
          "ref": "a7cecddd-129f-47c7-8e04-7cc2230c436d",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "b311682c-04a7-4cc3-a618-aefb60fb771d"
        },
        "item": {
          "id": "783f408a-4b62-4415-9fd8-05d10d18e286",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "fe3d9613-a764-4b35-9848-8843cc02b99c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "a08fba8b-d93e-4afc-b457-d0e7d4d4cb24",
        "cursor": {
          "ref": "396c2544-5f66-4306-a510-e28ac9956eea",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "47a47739-7506-4a98-9a94-6f52c7bef0a2"
        },
        "item": {
          "id": "a08fba8b-d93e-4afc-b457-d0e7d4d4cb24",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "2fc2c214-a9fc-495d-84ad-2e04a6d9b79e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "3445f532-5506-4421-82eb-9a89566b0e85",
        "cursor": {
          "ref": "36bd098e-1c63-4667-bec1-b183a75fe790",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "78c8b3fd-6d4d-4f60-9110-117fb188a1fd"
        },
        "item": {
          "id": "3445f532-5506-4421-82eb-9a89566b0e85",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "cb42a7a3-694c-42bd-8d26-d03f6ca6dc23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "38a98006-3197-47fa-8ace-fb9d55013c6a",
        "cursor": {
          "ref": "58ba3224-8330-4168-a08c-c29090d35973",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "1410943b-5395-4379-b623-8050d0842e34"
        },
        "item": {
          "id": "38a98006-3197-47fa-8ace-fb9d55013c6a",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "f8397617-3a0a-4584-8d0f-2a611aad1f31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "09d415da-4b69-47df-8bd7-bdb7921f15b6",
        "cursor": {
          "ref": "eebd62dc-e628-4010-948e-0d674050aa79",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "1764f7ff-f637-4632-a267-762e7069c869"
        },
        "item": {
          "id": "09d415da-4b69-47df-8bd7-bdb7921f15b6",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "c50bcb4c-f19e-49c4-8c7b-c0722939813e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "89c8e428-15ef-436d-a9ca-e94234fa6b22",
        "cursor": {
          "ref": "04cd3398-d9c9-403e-83ad-cc2ccbde8a82",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "8dbc2b33-3a91-464b-9d00-48848d9a8810"
        },
        "item": {
          "id": "89c8e428-15ef-436d-a9ca-e94234fa6b22",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "ba07ec61-dbde-4104-8b4b-352622f2ad41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:59)"
            }
          }
        ]
      },
      {
        "id": "3d841532-2405-43b0-8b10-7de444982caf",
        "cursor": {
          "ref": "1bcb686d-71d3-4eec-ad08-e6892655dd84",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "287e3eba-57b7-480c-943f-20234becc2ca"
        },
        "item": {
          "id": "3d841532-2405-43b0-8b10-7de444982caf",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "76513837-193b-4264-a31d-84aff13b554a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 197
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "4c050f5e-ac1c-4b42-9c0c-fd4147c56365",
        "cursor": {
          "ref": "63afb425-d222-4dfa-8bcc-52669488e49f",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "d51eb000-3ebf-45d9-a1ca-8cda0c8bebbd"
        },
        "item": {
          "id": "4c050f5e-ac1c-4b42-9c0c-fd4147c56365",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "7c4bbd83-23ef-47b0-8647-98770f104357",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "16bb07ea-a233-456a-a542-5ce2acd6fd1b",
        "cursor": {
          "ref": "487685cb-7e25-4eaa-b74b-0a5b77c86058",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "42cd263f-aa4b-46d0-b69b-40c07ac81533"
        },
        "item": {
          "id": "16bb07ea-a233-456a-a542-5ce2acd6fd1b",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "3d22c252-0d63-4eb8-bdfa-e994572eacaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:62)"
            }
          }
        ]
      },
      {
        "id": "17de4924-e197-4418-aa22-fc442d29075c",
        "cursor": {
          "ref": "f6c9eb07-e6a1-4db3-a03a-7a2851f1def3",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "671a139f-5a14-41eb-bb29-6f2f73ea5593"
        },
        "item": {
          "id": "17de4924-e197-4418-aa22-fc442d29075c",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "5f3e7660-f8c8-4379-ab3c-cf1473621f52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:63)"
            }
          }
        ]
      },
      {
        "id": "e88122f1-13fe-4e37-89e6-7cdd1c56e564",
        "cursor": {
          "ref": "5d7bd8b5-3bb3-40f1-9a62-d3a3975cc81d",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "6f0f290b-bfd4-453a-9049-4fbcd5f4fe29"
        },
        "item": {
          "id": "e88122f1-13fe-4e37-89e6-7cdd1c56e564",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "d137e9a8-7cb3-46d9-9208-cf9658f82c65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:64)"
            }
          }
        ]
      },
      {
        "id": "3b34fe7f-12ca-4fd9-8436-cadf58be878a",
        "cursor": {
          "ref": "7c948577-7bda-4154-87d4-5726a89cc146",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "0bec68c6-aa78-424e-bb0a-84ce364bc073"
        },
        "item": {
          "id": "3b34fe7f-12ca-4fd9-8436-cadf58be878a",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "b626708c-b02a-4a24-b01b-085542e7aac6",
          "status": "Created",
          "code": 201,
          "responseTime": 334,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "f18cc5b8-687c-43ec-99a7-3591ef91810c",
        "cursor": {
          "ref": "ae243839-c4a3-46a9-9104-d64d7fea977c",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "e65805b4-eb45-4d35-bbcd-4977af324985"
        },
        "item": {
          "id": "f18cc5b8-687c-43ec-99a7-3591ef91810c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "d5663dcb-4258-46b0-8b27-c5f93dde807b",
          "status": "Created",
          "code": 201,
          "responseTime": 315,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "47ea5dee-a28d-47cb-a9fd-b81322cf088c",
        "cursor": {
          "ref": "66ee9a0a-bbaa-4ec6-8f8d-4f6ebacd5d67",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "d3bbb9bd-5a76-4a8f-89f5-a8d9662f3938"
        },
        "item": {
          "id": "47ea5dee-a28d-47cb-a9fd-b81322cf088c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "57a7d190-252a-4262-9eeb-864a646c4bb9",
          "status": "Created",
          "code": 201,
          "responseTime": 318,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "c9bfd9e2-d2ad-4a19-aca7-3e52c14ef15b",
        "cursor": {
          "ref": "46e2d1ce-f1bf-477f-9b0f-a5d016deb420",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "01d11096-bba3-4489-b6f8-e199ed37cf6a"
        },
        "item": {
          "id": "c9bfd9e2-d2ad-4a19-aca7-3e52c14ef15b",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "5fc9936d-001f-4d8a-a809-462f9ec1329a",
          "status": "Created",
          "code": 201,
          "responseTime": 314,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "98cec064-49e9-4564-ac8d-a0b1d2f498b8",
        "cursor": {
          "ref": "07af8494-7e33-4582-9fab-8037fbf25be1",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "4b2038df-cb74-4fc8-8f80-d6a3b9ab42b3"
        },
        "item": {
          "id": "98cec064-49e9-4564-ac8d-a0b1d2f498b8",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "834bef94-c38d-492b-ba48-6beed4ddeeb3",
          "status": "Created",
          "code": 201,
          "responseTime": 315,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "c68630fe-d5e4-415d-8f89-ca3cd01cf6fd",
        "cursor": {
          "ref": "abe1f42b-5494-4495-a3f9-0d7adf55741f",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "89286d22-0184-4c7d-8228-89578c0612fb"
        },
        "item": {
          "id": "c68630fe-d5e4-415d-8f89-ca3cd01cf6fd",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "2da10322-a6ff-42a2-8f0e-9097bc8ef366",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "f757b36a-4266-4325-a945-f7410287f614",
        "cursor": {
          "ref": "c8391630-e9bb-4871-84b3-844343578c26",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "6d0b5eab-598e-4937-8c2b-51fe09fb63f5"
        },
        "item": {
          "id": "f757b36a-4266-4325-a945-f7410287f614",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "e9a0cb54-d69c-4c60-b5c3-3703053c0ecd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 80
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "4051395e-5b05-4d79-9893-313f8b8e4ef3",
        "cursor": {
          "ref": "7c067e72-2dfe-4cdf-b755-4b0ce150b550",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "2bad20ab-0aa5-42ce-9664-0dab03a28a91"
        },
        "item": {
          "id": "4051395e-5b05-4d79-9893-313f8b8e4ef3",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "642868e5-2e99-4371-8fca-4d4009000e2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:72)"
            }
          }
        ]
      },
      {
        "id": "fcbebcd4-2725-423b-9c2a-139933b53f2f",
        "cursor": {
          "ref": "6193a848-be02-4ee1-b985-5d2a9c9c403c",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "cc9fe30e-fd52-42df-83d8-c56dc032ee9a"
        },
        "item": {
          "id": "fcbebcd4-2725-423b-9c2a-139933b53f2f",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "112b3d5e-5e35-491b-99a3-7f3d99466f0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:73)"
            }
          }
        ]
      },
      {
        "id": "b56bcd24-ca67-44b7-8dd4-6bca80fd69c0",
        "cursor": {
          "ref": "2cd46b9c-13b9-4d7b-a423-c4ea0d4dcece",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "29524de2-3884-4d18-a632-f629fc753f65"
        },
        "item": {
          "id": "b56bcd24-ca67-44b7-8dd4-6bca80fd69c0",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "c935ca8d-e8f3-4a7f-8644-e182d9c148a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:74)"
            }
          }
        ]
      },
      {
        "id": "cd1bb196-73d5-4a1e-b299-e1ee536f93ac",
        "cursor": {
          "ref": "0fda8220-e1fa-40fb-84d5-79649707c949",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "b4d26cb9-5582-4138-ad2d-9b864f432a19"
        },
        "item": {
          "id": "cd1bb196-73d5-4a1e-b299-e1ee536f93ac",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "330fb311-bab8-43ab-8ffd-2dd881c603d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:75)"
            }
          }
        ]
      },
      {
        "id": "ec88d247-a5e8-40cf-bb81-5c3d1dc35648",
        "cursor": {
          "ref": "89413805-12b2-4898-99b9-2b71efee53d6",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "152f73fc-a68f-47ab-834f-c2a762b085cc"
        },
        "item": {
          "id": "ec88d247-a5e8-40cf-bb81-5c3d1dc35648",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "399bfdd1-92e2-414c-85c1-19c20f73da9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 270
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:76)"
            }
          }
        ]
      },
      {
        "id": "2659f297-2918-4b08-b832-76e4afb58180",
        "cursor": {
          "ref": "05d2ef5c-478f-42ac-b178-86ccb736ef65",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "03c7c1c2-e047-4e9f-aae1-f0ee13dc31e7"
        },
        "item": {
          "id": "2659f297-2918-4b08-b832-76e4afb58180",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "5fa71303-b59f-445b-9cc5-a392cb41f855",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 235
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:77)"
            }
          }
        ]
      },
      {
        "id": "3a49d93e-d581-45a8-8fa9-67a7c3e4b6bb",
        "cursor": {
          "ref": "c37abe4d-7adf-4e2f-9583-d1d2705763d6",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "a73a13ab-5a44-461a-bfa3-6cc44cd9e330"
        },
        "item": {
          "id": "3a49d93e-d581-45a8-8fa9-67a7c3e4b6bb",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "3454cc00-07f3-48e5-a53e-5e6fc8f38d97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 235
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:78)"
            }
          }
        ]
      },
      {
        "id": "0b6b7614-0002-470e-a280-4063d023c32f",
        "cursor": {
          "ref": "5d54f0cb-edd0-4756-b6f5-249e294b05d0",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "900e5d72-18aa-439d-b08e-84bfd3550b5f"
        },
        "item": {
          "id": "0b6b7614-0002-470e-a280-4063d023c32f",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "8a1a6e5b-c321-4127-9f73-2fec68cbd34e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 235
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:79)"
            }
          }
        ]
      },
      {
        "id": "5ea794ed-aa51-47a4-bcaf-fbbd1dec718b",
        "cursor": {
          "ref": "1a4cb2eb-e018-4db7-b815-e24ff53a11bb",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "a2093ec8-5f7c-479c-bbd0-0d80d467e43a"
        },
        "item": {
          "id": "5ea794ed-aa51-47a4-bcaf-fbbd1dec718b",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "e5dce4bd-a155-4b6f-ab3c-5d488186c2f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 270
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:80)"
            }
          }
        ]
      },
      {
        "id": "d6a787d2-2587-414f-9f52-f25999f05c20",
        "cursor": {
          "ref": "9314527d-2ff9-4f07-a4b6-9f992689d0d9",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "679876e8-8527-41eb-990f-76cce77317de"
        },
        "item": {
          "id": "d6a787d2-2587-414f-9f52-f25999f05c20",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "f6c828d4-c2fd-4422-ad76-481d0743045b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 235
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:81)"
            }
          }
        ]
      },
      {
        "id": "36e7fd5f-f2f6-4b52-8628-35743b603f6a",
        "cursor": {
          "ref": "875db179-41c6-40b6-b73b-22db0eb280eb",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "9e40e8c4-615c-468c-9497-4a5bd835884d"
        },
        "item": {
          "id": "36e7fd5f-f2f6-4b52-8628-35743b603f6a",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "ffd1a175-964a-466a-bfb7-8ab80d107c92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:82)"
            }
          }
        ]
      },
      {
        "id": "d8b9ad01-c484-459b-b84b-2f4acfb40594",
        "cursor": {
          "ref": "eefeac51-c661-4d84-b9e3-a1ab7c27548a",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "0fb53770-bc0d-48d5-9ba5-55125c73fa39"
        },
        "item": {
          "id": "d8b9ad01-c484-459b-b84b-2f4acfb40594",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "444bb11b-0343-4fa0-b1ef-b4c8f73a33ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:83)"
            }
          }
        ]
      },
      {
        "id": "cd8bb83c-700d-4405-80d2-3765358ea480",
        "cursor": {
          "ref": "3c187aa4-7e11-43ae-8bc0-de05eca33448",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "3280892a-13ff-44c5-abdc-cff0b5402bcf"
        },
        "item": {
          "id": "cd8bb83c-700d-4405-80d2-3765358ea480",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "9ec8996d-f606-48bc-b7ec-0aa7d4e1733c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:84)"
            }
          }
        ]
      },
      {
        "id": "b1c37f2e-4e94-4ce0-b55e-840a7d1f22ca",
        "cursor": {
          "ref": "082129f3-43bd-4cce-a059-4e07def713ae",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "f897f8bd-a05e-4da1-b120-23c09ca77418"
        },
        "item": {
          "id": "b1c37f2e-4e94-4ce0-b55e-840a7d1f22ca",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "5bb0dd92-f786-4e75-b513-55dd9033f4c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:85)"
            }
          }
        ]
      },
      {
        "id": "1284c3fc-2d7f-48cb-be63-c2445556dd9d",
        "cursor": {
          "ref": "65372848-530a-4466-bf80-3ff5e9e2e7fe",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "ef603efb-7d59-475d-a3b6-6356ee96f47d"
        },
        "item": {
          "id": "1284c3fc-2d7f-48cb-be63-c2445556dd9d",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "a24f0834-9359-4b04-ade3-c31182d24631",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:86)"
            }
          }
        ]
      },
      {
        "id": "460364d5-5e6e-4030-abba-4efd2fc34d05",
        "cursor": {
          "ref": "045e3803-4a60-44f8-b53d-eacf1fb17e1f",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "f5c68091-ee38-401d-9ac1-de878560f975"
        },
        "item": {
          "id": "460364d5-5e6e-4030-abba-4efd2fc34d05",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "d8ed4553-f77a-40c2-bb4f-27088755ddac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "99e44db4-7ac2-456b-b876-6805858a27cc",
        "cursor": {
          "ref": "8c486a00-ebdf-4ead-9a10-9555826ba10d",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "9a9c64cd-6798-40d8-a8a9-6ad15631e55c"
        },
        "item": {
          "id": "99e44db4-7ac2-456b-b876-6805858a27cc",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "259058c7-7b0b-41aa-9764-1019368d60c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:88)"
            }
          }
        ]
      },
      {
        "id": "55c1d158-1bfb-4cf2-96f1-5c833aae6036",
        "cursor": {
          "ref": "6f55261e-451e-419e-bc81-9084af1e2e79",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "8ecfbd91-1df0-4a6b-b9a7-11ab69102eec"
        },
        "item": {
          "id": "55c1d158-1bfb-4cf2-96f1-5c833aae6036",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "e4c39b91-0a71-4073-b551-4e9c02f916c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 143
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "a4f237bb-2275-4bff-9ffb-c966e7990e04",
        "cursor": {
          "ref": "9cdfbff2-539a-46d1-9871-33d67aa73675",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "7dc3739d-09fe-47f6-bcda-64162cb84f09"
        },
        "item": {
          "id": "a4f237bb-2275-4bff-9ffb-c966e7990e04",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "1cd19746-154f-40f0-8e99-52a6d18e1fae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:90)"
            }
          }
        ]
      },
      {
        "id": "f6cec407-e769-4ccf-ac3d-8893b1d741f9",
        "cursor": {
          "ref": "f4692fb6-b3a2-4a26-bfd3-3a7fa6b438fb",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "e7977b06-9b1d-43cf-a258-961674cb79bf"
        },
        "item": {
          "id": "f6cec407-e769-4ccf-ac3d-8893b1d741f9",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "f3c63fa3-d2b8-4965-8f61-79ad845a01c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:91)"
            }
          }
        ]
      },
      {
        "id": "19df04a6-d807-43c4-b73b-127ea96e8e2d",
        "cursor": {
          "ref": "1e50a88c-4b3c-4b65-876a-3a92d351959d",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "be084f5c-d4d6-4eeb-bbbf-11dea0711361"
        },
        "item": {
          "id": "19df04a6-d807-43c4-b73b-127ea96e8e2d",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "a66fa9d4-6a7e-4f8c-9a04-59a18b3d7da9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:92)"
            }
          }
        ]
      },
      {
        "id": "ad609fce-4b5d-436f-9ce9-2c3af508da12",
        "cursor": {
          "ref": "fadbacb8-bc9d-49ed-a9d5-94dab3ca24c7",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "0d8b1ce1-def8-475f-ba92-63b7a6d192c8"
        },
        "item": {
          "id": "ad609fce-4b5d-436f-9ce9-2c3af508da12",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "d50f1f73-4c06-451c-8bc1-c642e5298d88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "2b8509e1-83c3-4ed3-8cb2-528df991e3f9",
        "cursor": {
          "ref": "730a607e-9e49-4033-ad58-530b05b2d8d1",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "c480ebb8-bdc3-4312-bff4-7e5f2e197b4d"
        },
        "item": {
          "id": "2b8509e1-83c3-4ed3-8cb2-528df991e3f9",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "2aceebec-f703-4e8d-80cd-a04d943be5f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "d75adf15-f0a4-436b-aba0-f109bfa86a40",
        "cursor": {
          "ref": "9aa52090-6fef-4b10-aa60-127f7efdfba8",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "fd39b475-fe10-4c22-94a6-93811f44708b"
        },
        "item": {
          "id": "d75adf15-f0a4-436b-aba0-f109bfa86a40",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "9aa7b40d-4995-4e0b-b448-bfe25ca55e1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "ac60b9af-9b9a-4cbf-a651-fb4949482db7",
        "cursor": {
          "ref": "f6286d4c-aa51-40eb-bc0d-075b56ff7853",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "3b2e5225-7009-4c34-b286-f3337488eb43"
        },
        "item": {
          "id": "ac60b9af-9b9a-4cbf-a651-fb4949482db7",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "7ddf9bdc-0f6e-4ac7-aa46-2950a944854b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:96)"
            }
          }
        ]
      },
      {
        "id": "f1d4dd7a-0d76-4bcf-944e-d3483d121abf",
        "cursor": {
          "ref": "925eb396-2c96-47a3-8dcc-6e460916b80c",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "90baa30f-178f-4ad0-8f1f-d71c445862a6"
        },
        "item": {
          "id": "f1d4dd7a-0d76-4bcf-944e-d3483d121abf",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "9cfb1982-f3bf-422a-a8b0-d21c3482dc67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:97)"
            }
          }
        ]
      },
      {
        "id": "7967035c-8ed2-4121-af3e-18d0f2985774",
        "cursor": {
          "ref": "f7ac8cfd-281d-41e8-b79e-6b2545cec47f",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "3d5c3425-dee8-4fa9-99b8-818387152f31"
        },
        "item": {
          "id": "7967035c-8ed2-4121-af3e-18d0f2985774",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "0e01e01c-5c17-4ef5-99b7-29b40833c9bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:98)"
            }
          }
        ]
      },
      {
        "id": "b66646b6-27b9-4bbe-a24a-547622e1092d",
        "cursor": {
          "ref": "b1d59dde-9446-41e1-a119-37f6801e3a8a",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "d85e09ec-97b6-403b-8f2b-03c2fa57161c"
        },
        "item": {
          "id": "b66646b6-27b9-4bbe-a24a-547622e1092d",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "56b15393-3873-4565-ba41-6b49ea2fe15f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:99)"
            }
          }
        ]
      },
      {
        "id": "bfe99453-d8ee-44ef-8d86-4f5158aff1b0",
        "cursor": {
          "ref": "94992b0c-71ea-4fb3-93ac-b1a12c6e6716",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "9d020466-13dc-42aa-95cd-ec98b69e6aba"
        },
        "item": {
          "id": "bfe99453-d8ee-44ef-8d86-4f5158aff1b0",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "3aa0dcdd-e383-43a1-b1a7-0cffac7ac9f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:100)"
            }
          }
        ]
      },
      {
        "id": "7c3ddbd3-62fa-4206-b390-13e7fce5d93e",
        "cursor": {
          "ref": "db98b4f4-302b-4c2b-b6b9-e285e775f92d",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "77d95677-a95f-40aa-afe3-1271e0740d1f"
        },
        "item": {
          "id": "7c3ddbd3-62fa-4206-b390-13e7fce5d93e",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "f4ad2216-4fa7-43e8-8df6-400355e5cd34",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 29,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91c0866a-4203-47cb-bd7d-0a480e168b7d",
        "cursor": {
          "ref": "b6a38458-92f1-4735-8e26-d802fa5f2710",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "8deaaa8b-a388-4c83-a703-020bf47ece1d"
        },
        "item": {
          "id": "91c0866a-4203-47cb-bd7d-0a480e168b7d",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "b2e3ad85-f76c-44af-acfe-b2d824e2fd80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 143
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "4c2134b0-856c-4005-a67c-eb1cb0049da1",
        "cursor": {
          "ref": "07466905-413d-49f8-93a9-c23953bd4767",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "cdf76279-3ad7-47f9-b044-317781f90a2a"
        },
        "item": {
          "id": "4c2134b0-856c-4005-a67c-eb1cb0049da1",
          "name": "credentials_issue"
        },
        "response": {
          "id": "069a02fb-1d3b-4fc2-8e37-2ac54aec3329",
          "status": "Created",
          "code": 201,
          "responseTime": 399,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "0537e99e-cdcf-465b-bfc7-5d5a168c5084",
        "cursor": {
          "ref": "97c73aba-86c9-4497-b0c2-f27c8a8b292b",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "3b840232-a5d2-405d-9f0f-fec9ead2bd0d"
        },
        "item": {
          "id": "0537e99e-cdcf-465b-bfc7-5d5a168c5084",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "9ffce03a-3d8e-4c54-aba3-78146de571df",
          "status": "Created",
          "code": 201,
          "responseTime": 348,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb3debe5-a352-4950-a33d-e2acd02abcfe",
        "cursor": {
          "ref": "2d072ec0-e04c-4dcc-a268-e02e7801abf2",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "4fd2f1f2-0989-428a-a300-b6347a29f6a6"
        },
        "item": {
          "id": "bb3debe5-a352-4950-a33d-e2acd02abcfe",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "e1a63d67-6e6f-4d9a-919b-fb5dc880e407",
          "status": "Created",
          "code": 201,
          "responseTime": 305,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "165bd858-24e3-4602-872a-64c294116ed9",
        "cursor": {
          "ref": "c8a7fd83-8130-48b9-8872-b2bfd6e96b58",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "dddd9483-a433-42c5-bd93-9252b3ce3d5b"
        },
        "item": {
          "id": "165bd858-24e3-4602-872a-64c294116ed9",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "ccfeb99b-e34a-4952-bda5-f5b69a63a860",
          "status": "Created",
          "code": 201,
          "responseTime": 322,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "c34a3ab9-e959-4a17-9c2b-e6966696769e",
        "cursor": {
          "ref": "ff2f44d0-8efd-4eb3-bcfb-8281cbfff8d9",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "672e70de-ae5c-49f1-90dc-2b0cdcfba553"
        },
        "item": {
          "id": "c34a3ab9-e959-4a17-9c2b-e6966696769e",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "d872e2cc-240e-4af1-babb-ade802ea3ef5",
          "status": "Created",
          "code": 201,
          "responseTime": 315,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-09-17T00:36:27.218Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-09-17T00:36:27.218Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "d687bbb6-7116-451a-9b18-66e5d7029aae",
        "cursor": {
          "ref": "9bd3d06a-1b0a-4362-a105-e83437e54ea9",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "e18a1cf6-5979-4f4d-8dfd-39a965631c42"
        },
        "item": {
          "id": "d687bbb6-7116-451a-9b18-66e5d7029aae",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "b2e3e049-d239-4750-8e67-5333d85f4c13",
          "status": "Created",
          "code": 201,
          "responseTime": 332,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4647554c-e5a5-424b-a97f-ff62db9d35ed",
        "cursor": {
          "ref": "e9327fe9-1ae2-4065-8873-abc929fbf52f",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "92cd06d2-bd25-4375-88f8-724c807e08f2"
        },
        "item": {
          "id": "4647554c-e5a5-424b-a97f-ff62db9d35ed",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "ad41eb7e-261a-4639-a77e-3697f3072ea9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:109)"
            }
          }
        ]
      },
      {
        "id": "43c3fa6a-38ab-4425-9ad6-c51a38b7fc46",
        "cursor": {
          "ref": "73994d36-abdb-4868-94d1-dac443187646",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "24fe4c43-3dfa-4a68-8bee-3e2c4021ffbd"
        },
        "item": {
          "id": "43c3fa6a-38ab-4425-9ad6-c51a38b7fc46",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "93436f1c-771d-4773-9cd8-b04b7ea2626b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "89f1a180-a7cd-4ad2-aa7e-6356244087d8",
        "cursor": {
          "ref": "c3cea026-7aa3-4b59-8607-c5c7fde1f605",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "d646a95a-6d5c-4b99-b49b-1dc873d898fc"
        },
        "item": {
          "id": "89f1a180-a7cd-4ad2-aa7e-6356244087d8",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "590e05fd-d71d-487e-b05d-41f76f4724a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "49363792-83ce-47ef-8c55-82da45f40f19",
        "cursor": {
          "ref": "2ec2131c-d3cf-4420-a601-b15c27835ed9",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "544145c8-cad8-43a8-8d02-1f1e6412a79e"
        },
        "item": {
          "id": "49363792-83ce-47ef-8c55-82da45f40f19",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "ea53f9e9-a485-449b-9a8d-71658c9699e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "da3ae2b2-5b1b-4e85-9baa-49c3a39decd6",
        "cursor": {
          "ref": "3b62dc59-c846-4772-8124-fc5690d3d8ac",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "a044571c-f6f5-46a6-bb38-43c13386390b"
        },
        "item": {
          "id": "da3ae2b2-5b1b-4e85-9baa-49c3a39decd6",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "d1dbf070-d73e-4ece-997d-a345b77c31d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "560138a6-0ec1-4601-a6ce-c0cdec5a472e",
        "cursor": {
          "ref": "a2d032d0-8088-4cd5-8370-3fb96b9f5945",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "eba8f54a-bb38-44da-aa74-545290b892db"
        },
        "item": {
          "id": "560138a6-0ec1-4601-a6ce-c0cdec5a472e",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "35c39e7f-46a2-4aed-9b35-a11b0b2e4da0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "6aad3680-905a-4d5f-bc88-63bd6bdb7d4c",
        "cursor": {
          "ref": "897d6b8d-d932-48c1-8fbf-2627bce35118",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "844f4f8a-34e4-4194-adb2-97c85cb6e376"
        },
        "item": {
          "id": "6aad3680-905a-4d5f-bc88-63bd6bdb7d4c",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "cc4eb965-0551-4e4c-a8db-2ab433eb65cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 140
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "cb2832ef-254b-4b02-ba5c-0a525c5bcb6b",
        "cursor": {
          "ref": "8ce60a44-e097-4b9a-869e-5e53ca45410e",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "014d8749-ad4a-4979-b0f1-39fbd2b58cff"
        },
        "item": {
          "id": "cb2832ef-254b-4b02-ba5c-0a525c5bcb6b",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "b22daf5e-04df-4599-97db-b84be0bec48f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 220
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "0eb2b6ea-ad4c-4b8d-b7f9-cde76a6ecb40",
        "cursor": {
          "ref": "563276b6-67e6-4abb-b955-b8063c7c56a1",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "63a04773-b406-459b-a16d-7fb49fdc07db"
        },
        "item": {
          "id": "0eb2b6ea-ad4c-4b8d-b7f9-cde76a6ecb40",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "442c95af-2b52-4755-85b8-952fac045a66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 220
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "24e0cfa4-54c1-4a27-b113-be6167e67fb0",
        "cursor": {
          "ref": "6cd9ebea-fbc3-468c-b239-d88fd1f464ea",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "76f33f99-c831-4653-892a-983c70e1ad82"
        },
        "item": {
          "id": "24e0cfa4-54c1-4a27-b113-be6167e67fb0",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "83a03c7c-5bac-42ef-895a-92406c222875",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 220
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "56f8f084-51c3-462b-9cb9-87b33a9b904a",
        "cursor": {
          "ref": "ebea1129-2861-4401-84d8-f34b5110b1d2",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "d4b6c090-1d51-4d65-b88f-180812214d8e"
        },
        "item": {
          "id": "56f8f084-51c3-462b-9cb9-87b33a9b904a",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "b29019cb-a829-42e3-a398-79cced0077a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 118
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "af985a80-dbbc-4f7d-b68d-8b5fb848525a",
        "cursor": {
          "ref": "1bd38ef8-7787-4998-add3-cd73521245d2",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "6d018740-f7f8-4dec-b853-2bbb4c3f05a2"
        },
        "item": {
          "id": "af985a80-dbbc-4f7d-b68d-8b5fb848525a",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "a2566096-3027-4c6b-ba28-b994a449dd6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 220
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "2c8f8c5e-dd16-40bc-9cc7-737eee284244",
        "cursor": {
          "ref": "63f4c95f-ebf5-45bc-a6e4-0e33585792da",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "61af41b1-6747-4a6f-8153-29f7f2db5245"
        },
        "item": {
          "id": "2c8f8c5e-dd16-40bc-9cc7-737eee284244",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "83aae13a-dd5e-4a82-b1ba-98a6b38e26f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 188
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "214a360b-7dd1-4366-940a-31a1aebaf7c9",
        "cursor": {
          "ref": "72932653-4461-4b5f-9069-7a3032caf780",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "1444116b-36e3-4078-bca2-e0c7f29edda1"
        },
        "item": {
          "id": "214a360b-7dd1-4366-940a-31a1aebaf7c9",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "8d0d3393-cb08-4571-89c3-2c39abf21a71",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "f40ec3f0-d05c-472a-8b82-791d82ae38ec",
        "cursor": {
          "ref": "fbd7b589-08ef-4633-bfff-deebf8ae062c",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "05544b5b-e2d6-447b-95e5-859209c3de44"
        },
        "item": {
          "id": "f40ec3f0-d05c-472a-8b82-791d82ae38ec",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "27982c62-14f8-49eb-88ab-5c1b1765c93c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 149
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "3945ae55-991b-4bd6-8fbe-f59c26ca4487",
        "cursor": {
          "ref": "5cdbb320-fb58-4275-a900-f752cb99ed13",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "fb5dc7b8-cce6-44f8-b971-9c06c07d3e8a"
        },
        "item": {
          "id": "3945ae55-991b-4bd6-8fbe-f59c26ca4487",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "c6a38037-229c-4d12-b98d-532d766afa50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 149
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "daa81d3e-a33c-48aa-a2bc-93fe2aa8e4db",
        "cursor": {
          "ref": "10007dc1-839c-4aa8-8533-a8a918c901fd",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "e2d9d691-01f4-4368-b149-1cb8843c74b4"
        },
        "item": {
          "id": "daa81d3e-a33c-48aa-a2bc-93fe2aa8e4db",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "99b349c3-8704-4ecf-8648-51830c5690ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 149
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "8b56a855-ce01-4dcd-bd8f-86e84604e609",
        "cursor": {
          "ref": "4e212fbc-e95d-4c7f-a8d2-73d067dc7149",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "7d0b7afc-ed48-4b54-b860-7eb55ea1466b"
        },
        "item": {
          "id": "8b56a855-ce01-4dcd-bd8f-86e84604e609",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "63504193-5c37-4ea3-846d-944fe9f0dff1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 149
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "8e628e86-bbab-4ba7-a109-1e5cbc9d12ce",
        "cursor": {
          "ref": "56651918-c6ce-4528-a427-631323f9c388",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "067609c8-2e85-48a7-af94-9159d5b003a4"
        },
        "item": {
          "id": "8e628e86-bbab-4ba7-a109-1e5cbc9d12ce",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "304a142a-cd83-4c6d-b493-ea318bde10b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "1bb55bb7-4e2f-4154-a14f-7a421340d4f7",
        "cursor": {
          "ref": "92d27d0a-f920-4694-8cbc-a33c9a2f269b",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "d143769f-a2f6-4ffd-9eca-cc8d936be6dc"
        },
        "item": {
          "id": "1bb55bb7-4e2f-4154-a14f-7a421340d4f7",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "4787b1d7-719e-4b01-829a-a8968492c8f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 174,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "a355165c-94c6-4f49-9329-7226d9d87fb8",
        "cursor": {
          "ref": "60aaa198-a12a-4e52-949d-7e59ea75c41c",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "e68d1cb3-fc10-4915-958c-1b5dc1aa4034"
        },
        "item": {
          "id": "a355165c-94c6-4f49-9329-7226d9d87fb8",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "a93979cd-5341-4e59-8377-3cb1b4aa0353",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "6527ba3a-0753-412d-b322-7aea992036f7",
        "cursor": {
          "ref": "0b278d6e-708d-43e5-bd38-dcb9b9b1f017",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "9371463e-0cad-4cdd-8699-050bb5c815f3"
        },
        "item": {
          "id": "6527ba3a-0753-412d-b322-7aea992036f7",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "9c3337e1-f9d4-42d7-bd77-dd7d5c3fe855",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "eec0261b-82e3-45e3-ad59-bdc2e4660610",
        "cursor": {
          "ref": "9e0e8cf4-757e-4278-80e3-6462e0d5e83a",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "f807c580-1176-4128-a507-1a86467e1ea7"
        },
        "item": {
          "id": "eec0261b-82e3-45e3-ad59-bdc2e4660610",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "5cbaec0f-fd1e-428b-8bf9-d796129a9259",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "e5d92099-5892-4466-8ad4-4b83c448cd6e",
        "cursor": {
          "ref": "c1b3aa2b-30c5-4117-a42e-141fe785aced",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "a43368ea-df22-4a4b-a9ab-28638c6d75cb"
        },
        "item": {
          "id": "e5d92099-5892-4466-8ad4-4b83c448cd6e",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "d7bd7a2f-ffbc-4c2a-bae1-221904cab66b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "cc1fa870-9571-4e18-b36e-a4e50521cee5",
        "cursor": {
          "ref": "334dfef5-c9fe-437e-aa23-5e6090f5fc83",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "f889e364-a823-4501-81f7-dd1265aa4a1a"
        },
        "item": {
          "id": "cc1fa870-9571-4e18-b36e-a4e50521cee5",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "1f02f595-39b0-4426-a80d-302bc8e15725",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "5cc5386c-a350-4a2a-89bb-bb755f92f80c",
        "cursor": {
          "ref": "e3240faf-acdb-4adf-bbd3-7e25ac536e48",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "552eaf32-b122-455f-9d04-7d556b3dab6c"
        },
        "item": {
          "id": "5cc5386c-a350-4a2a-89bb-bb755f92f80c",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "f10219d0-a350-44b6-b496-b455b5639dfb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "3a36909e-e190-4a5e-9611-3ba742466008",
        "cursor": {
          "ref": "4c1dcf44-11a7-4f43-a204-746a2f9d1b6c",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "fd9c3e76-c48a-48ff-aa04-fe243a2fd01b"
        },
        "item": {
          "id": "3a36909e-e190-4a5e-9611-3ba742466008",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "7ca9d074-5caf-4ef6-a3be-446aa51c0838",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "e14ef342-a5ed-4e10-aedb-9f7a171ee67a",
        "cursor": {
          "ref": "affbe87b-8245-45e1-b850-2ce5279cb008",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "6318ff8e-ba18-4b41-9c7e-7956bd08fbfe"
        },
        "item": {
          "id": "e14ef342-a5ed-4e10-aedb-9f7a171ee67a",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "322e9294-5684-4974-bd4f-3710cf67fca4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "e47bdc52-e4dc-4126-81b5-698c13d6324a",
        "cursor": {
          "ref": "26281347-757e-499e-a7db-475365f0f4a0",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "b3b7b216-bcb5-4d79-8eae-fda834fd28c2"
        },
        "item": {
          "id": "e47bdc52-e4dc-4126-81b5-698c13d6324a",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "a7a9fd28-ae28-48ec-92b8-bdaf77cf1ce3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "93075194-8e6b-43c6-ae57-6ba25f5e0c5c",
        "cursor": {
          "ref": "c24d324f-8c83-4c2c-885e-220d075e9f5d",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "6a088b7d-10cb-4886-8b91-40762d9f33dc"
        },
        "item": {
          "id": "93075194-8e6b-43c6-ae57-6ba25f5e0c5c",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "d39cfee6-a53d-423b-8b8f-345039b8a38b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "0bbeb88a-e40e-43a7-9d38-4ba97ba9e254",
        "cursor": {
          "ref": "3346d240-db41-4934-a348-cbcebc63cbc8",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "f988506b-4d6e-4537-9349-1ab48349b4e6"
        },
        "item": {
          "id": "0bbeb88a-e40e-43a7-9d38-4ba97ba9e254",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "f6312b7c-b1bc-4833-a9ad-f1c3cb172416",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "e45c4e66-4390-458b-a8a1-6f098442572a",
        "cursor": {
          "ref": "cfa0ff74-2bbc-453f-9a46-7880a8033dc9",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "e43e1c86-1d8d-4392-910c-c619cbe373bc"
        },
        "item": {
          "id": "e45c4e66-4390-458b-a8a1-6f098442572a",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "e7297b10-8c62-475b-9ae3-110a9cf1dfc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "a6fb7510-df3f-44a0-b6f3-68d3be551544",
        "cursor": {
          "ref": "99420676-65f3-45f2-9d3b-2224ca3713c0",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "bd290ee0-5ec7-4bba-98ff-cbbe367da653"
        },
        "item": {
          "id": "a6fb7510-df3f-44a0-b6f3-68d3be551544",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "96cf9afb-ce65-43a0-8f72-53a2b20acd83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "ebe05dd7-5a1b-4445-81c5-f11956504aab",
        "cursor": {
          "ref": "8ff56565-f892-470a-8917-1735b5a27550",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "449383fb-8b58-43e8-ad7f-1c029aca7d90"
        },
        "item": {
          "id": "ebe05dd7-5a1b-4445-81c5-f11956504aab",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "0d7ae794-03f0-413e-a0b6-fc1e3257a7c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "404f3763-0e3c-4533-a3b4-34360d8b9446",
        "cursor": {
          "ref": "622e5d74-b4ed-4a6d-801d-eb783282c6d4",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "0f58f4a1-b780-484e-a35b-006001500a96"
        },
        "item": {
          "id": "404f3763-0e3c-4533-a3b4-34360d8b9446",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "a275e101-d481-4d5f-9c51-d46350bc487e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "e98b151f-84cc-4224-8416-e7cb20e39873",
        "cursor": {
          "ref": "985c578b-6672-4ef0-8e8e-2d130b85ffa1",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "af923a31-168d-4d96-9e10-f6e279f1f6bf"
        },
        "item": {
          "id": "e98b151f-84cc-4224-8416-e7cb20e39873",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "8fa2e72d-5ca7-4849-a370-bd343926fb19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "4fc223ff-9f17-4bad-9155-cd709db4551e",
        "cursor": {
          "ref": "0f8d7555-7b70-473d-b3b5-641fe1c7c004",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "9f742116-75e5-4c34-abf2-6c6108a63343"
        },
        "item": {
          "id": "4fc223ff-9f17-4bad-9155-cd709db4551e",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "893688f2-8c8c-4cbb-a924-c963ecb4c54b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "d30a18f2-d4f0-4ec2-ba9c-f152f3211fa4",
        "cursor": {
          "ref": "aab2a76f-0e46-4015-9145-81c0d9ab6bb2",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "b4024051-d3cf-456f-b998-c2c172f67f9c"
        },
        "item": {
          "id": "d30a18f2-d4f0-4ec2-ba9c-f152f3211fa4",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "e710ba57-de85-4bb1-ad98-cec16013ddc9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 39,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "019b3403-6c7f-4c7e-b7db-9497ebfe7da8",
        "cursor": {
          "ref": "43a9576c-a763-4495-accb-f46c441705fa",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "df6bd505-6eb1-4408-a615-d3d5491935f4"
        },
        "item": {
          "id": "019b3403-6c7f-4c7e-b7db-9497ebfe7da8",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "5adafdf8-259a-422c-b353-ada1535dbc3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "8cc53c76-10d5-4861-97b0-d910ee86d415",
        "cursor": {
          "ref": "7078a2fa-42ce-4380-befb-9dd2b9a564d3",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "797b42b8-bdd2-4073-898d-4f0460a5925b"
        },
        "item": {
          "id": "8cc53c76-10d5-4861-97b0-d910ee86d415",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "d8acfc75-a640-404b-9936-b82cfd510399",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "215a4453-2aa2-4457-96ee-96e2d7e48621",
        "cursor": {
          "ref": "8c83bda3-a298-4d15-9163-7abe024fb597",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "6951f30d-fea1-4263-9a95-557771dcce1b"
        },
        "item": {
          "id": "215a4453-2aa2-4457-96ee-96e2d7e48621",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "c552285d-a9b0-497c-b25b-2e824c1d8528",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "0b17df2e-1fe8-4d90-9a2b-719c8610e8de",
        "cursor": {
          "ref": "22d5aece-1258-4110-bbdf-cf1ba8146c4b",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "19e9e435-e815-42b8-85a5-7617f0a1831c"
        },
        "item": {
          "id": "0b17df2e-1fe8-4d90-9a2b-719c8610e8de",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "24cd7e16-8284-4272-b2b4-d4d7666b9415",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "dc4e8630-a3fe-4995-b774-24f3f05db810",
        "cursor": {
          "ref": "c666c99b-04cf-43b6-a73d-f644981edac5",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "2af3efc3-ff3b-4398-bc18-e1ff9c140d44"
        },
        "item": {
          "id": "dc4e8630-a3fe-4995-b774-24f3f05db810",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "8d75140a-a30a-4749-83f4-3838d45725d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "43cf2c80-4777-424b-86be-e554118ad73e",
        "cursor": {
          "ref": "d832cc54-6e34-4e00-86fa-451d15d0945e",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "9b101196-e38a-4e67-9b83-2c5d183e996c"
        },
        "item": {
          "id": "43cf2c80-4777-424b-86be-e554118ad73e",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "c060c07b-b2e6-44c8-9bb7-0a6221d31ecf",
          "status": "OK",
          "code": 200,
          "responseTime": 102,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "a33fd1ae-a761-4ebc-bce2-166c9629024a",
        "cursor": {
          "ref": "5226c883-17f6-46a8-8c63-ae2a4a46b3f3",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "4791754b-63b8-46eb-ad99-4bc9b10a6cb9"
        },
        "item": {
          "id": "a33fd1ae-a761-4ebc-bce2-166c9629024a",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "a7cbeee2-a3d0-4e11-a574-b202bb092d13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 234
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "52a23758-9c10-46a0-bcba-b0cf9a5a2272",
        "cursor": {
          "ref": "9ba73cc6-e14b-41ef-81d2-35d33d564c58",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "abdb51e2-7b83-447e-a358-f3209104dbd0"
        },
        "item": {
          "id": "52a23758-9c10-46a0-bcba-b0cf9a5a2272",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "d05efa66-c0b5-4454-aa0b-d07de5f4c099",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "9bff1ed0-8ceb-40df-a0dd-ccc517f03edb",
        "cursor": {
          "ref": "3ce227e6-cc19-4ddc-8bc1-20d8ead476e1",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "8d70ee1d-00f4-4545-96b0-1e201c790146"
        },
        "item": {
          "id": "9bff1ed0-8ceb-40df-a0dd-ccc517f03edb",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "b24c48e2-122e-4a94-9f7a-d39b1d8b9301",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "be0036b3-caf7-4c29-b9d8-991fe6f2fb8e",
        "cursor": {
          "ref": "1eded08a-e6e1-4454-8aab-67933c861d7a",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "042c4b86-671a-4223-9778-e66ca7467dac"
        },
        "item": {
          "id": "be0036b3-caf7-4c29-b9d8-991fe6f2fb8e",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "75b58a70-1c16-4714-a582-69b3786a7c1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "1cf71f35-8057-4bd9-8903-f80e83743ff7",
        "cursor": {
          "ref": "5587fbc3-d0c8-4d3d-8f1e-6184ccb636bc",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "ab153faf-a18c-4496-bb4c-0286c3b7d48d"
        },
        "item": {
          "id": "1cf71f35-8057-4bd9-8903-f80e83743ff7",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "a54787a1-4ca6-436c-9f7a-2cb231cf778b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 234
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "2021d7ed-bdbe-4209-883d-fa7760a4eba8",
        "cursor": {
          "ref": "51368939-6d0b-48e0-9038-28e3940e1032",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "b82095e1-d6af-4c76-a36c-9f9d6c997314"
        },
        "item": {
          "id": "2021d7ed-bdbe-4209-883d-fa7760a4eba8",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "aaf79697-ac58-4858-9807-8b5ced0f64c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "e8a055e1-acb1-40e7-89b2-d40b26b2e9db",
        "cursor": {
          "ref": "486de86f-9685-4b23-af3a-752b1f63d64b",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "61c07803-6a30-4775-a777-61ffbe5dc7dc"
        },
        "item": {
          "id": "e8a055e1-acb1-40e7-89b2-d40b26b2e9db",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "4d61f793-3384-416a-ba79-d4fdd5dee4cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "458e48cf-840f-4eaf-be8b-19ca3dc395f6",
        "cursor": {
          "ref": "92f1c6c1-ec4e-477d-ac03-1c2590ce471e",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "cfd5fb5f-8230-44bf-bfec-19dfb1ed3b2a"
        },
        "item": {
          "id": "458e48cf-840f-4eaf-be8b-19ca3dc395f6",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "689d5187-3140-48b7-a00c-7ae4ec071591",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "3b814b4d-831e-4221-a3a5-4ba7e9041957",
        "cursor": {
          "ref": "efe39750-70f6-47e7-85b5-8b9919936595",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "b0d72313-8319-400e-9c26-de1bdcb90505"
        },
        "item": {
          "id": "3b814b4d-831e-4221-a3a5-4ba7e9041957",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "d7d43a95-bc5b-4a40-aa22-4c6c3b17eec8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "2833a69b-5645-425d-9124-443dc0f8fe92",
        "cursor": {
          "ref": "6645bafc-d2df-492e-8a63-7796dbc7acbc",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "e30cba5c-90fb-4734-b649-ca612803be86"
        },
        "item": {
          "id": "2833a69b-5645-425d-9124-443dc0f8fe92",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "2c25f742-f5ee-46f5-8c57-408f3e4b66a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "bf6d4e1e-f1d8-4614-8c76-d946b219f7d4",
        "cursor": {
          "ref": "b2881ed0-b90b-4488-ae60-7c2a8f42c0b7",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "ba93af05-b2be-45c0-8e6e-73b1043b8f58"
        },
        "item": {
          "id": "bf6d4e1e-f1d8-4614-8c76-d946b219f7d4",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "a00090be-38d2-4217-8298-a4832aaf357a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "74f203a4-cd30-41d7-8680-2587c0a47d96",
        "cursor": {
          "ref": "df913e82-cfc9-4e4c-b23a-9304740378ee",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "be803a72-de91-480f-9a14-b583590b8d54"
        },
        "item": {
          "id": "74f203a4-cd30-41d7-8680-2587c0a47d96",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "e03fd8e0-c41b-4fe0-b876-954a34622a99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "b16d333c-a1ff-4730-b5d4-b9871c043139",
        "cursor": {
          "ref": "0f4aed7e-6590-4f06-a17f-3793ffa85acd",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "0c37a843-cc1d-4ac8-b5b3-11144c522549"
        },
        "item": {
          "id": "b16d333c-a1ff-4730-b5d4-b9871c043139",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "0fca2d39-2e4e-494e-a279-d6988c0603ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "d27c5fa7-9d11-4c89-87f7-5b1f220bf911",
        "cursor": {
          "ref": "b30267c3-13ca-45b2-899b-de743d2b6e10",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "c4259613-ff65-4311-8a9f-7318e5b03f8a"
        },
        "item": {
          "id": "d27c5fa7-9d11-4c89-87f7-5b1f220bf911",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "c0f632d7-244e-433f-9fe5-57d0c1fb4e82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "a39b0f56-1615-47cb-a54b-503add683a43",
        "cursor": {
          "ref": "1e47375d-15b0-40d6-bc20-b768df6997ee",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "8ca9ed08-0b3c-4d24-8010-9d0aba2ae6d1"
        },
        "item": {
          "id": "a39b0f56-1615-47cb-a54b-503add683a43",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "9e361b12-eba0-4d94-8f13-6fa11b7c26aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "66545d9e-1f00-4d94-98b5-a663593a6d62",
        "cursor": {
          "ref": "d854e347-c4ea-409c-a412-3fac88795376",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "192b8b9a-4255-4e4c-917d-5502edd779e7"
        },
        "item": {
          "id": "66545d9e-1f00-4d94-98b5-a663593a6d62",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "5abad06e-e544-47e9-a214-37132343ca44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "082e36cc-c29b-4c22-9cd7-3c5f0fd764f0",
        "cursor": {
          "ref": "ec0abb0a-4b52-44b3-bd7e-6bd1e02c63d9",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "4d889297-3d80-4299-ad9c-af793b1b1ed1"
        },
        "item": {
          "id": "082e36cc-c29b-4c22-9cd7-3c5f0fd764f0",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "3887e753-e07d-4904-ad96-860477548d02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "8caa25f0-f88b-4d3a-b843-e48099339cb0",
        "cursor": {
          "ref": "59123194-dee6-4515-9ba4-9ea76ff6f1e9",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "705a45dd-0bed-409c-a806-feb08f633884"
        },
        "item": {
          "id": "8caa25f0-f88b-4d3a-b843-e48099339cb0",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "78014065-2c7d-4e5f-a183-3ba8a2544f6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "02367c50-6b86-4218-8f7a-f4f020e74c92",
        "cursor": {
          "ref": "073e8333-9926-4b8a-a0bc-c4d6838fed04",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "7cd5955a-5197-45df-b41d-481c0b4bf81f"
        },
        "item": {
          "id": "02367c50-6b86-4218-8f7a-f4f020e74c92",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "bb817453-6bbe-47a4-b297-cbb4e5c1d9fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "37a99558-6e74-466f-8fb9-f7a9b90733b8",
        "cursor": {
          "ref": "1a18e42d-2628-49ac-9067-3919a0dd8bfa",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "798fa8aa-3802-40fc-a51d-961b6c19f63a"
        },
        "item": {
          "id": "37a99558-6e74-466f-8fb9-f7a9b90733b8",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "aa75c1e6-2591-4774-b2d9-d6a166e7bea4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "9a9ad1d0-3632-42fd-bd33-4cabdb7f0c12",
        "cursor": {
          "ref": "3af0ef84-cf98-4528-b123-c690855b1078",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "20e8c0f7-48b9-420b-a31a-2881dec98597"
        },
        "item": {
          "id": "9a9ad1d0-3632-42fd-bd33-4cabdb7f0c12",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "37f22486-dde0-4eda-924a-0bca11f13201",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "ceaca966-be19-48bc-97a4-28d92277e271",
        "cursor": {
          "ref": "c985856d-79e1-464c-bdcb-733c5a3d3e7a",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "ab664ba9-dd0f-4216-9bc4-8152288698d7"
        },
        "item": {
          "id": "ceaca966-be19-48bc-97a4-28d92277e271",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "90a2a3ca-5399-4dc3-97fb-572e41b4026f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "61641d71-5231-4f53-89b5-1fe02f59adf7",
        "cursor": {
          "ref": "55d858cc-0c59-4797-9c15-06824444a1c5",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "4cfe6289-d485-4873-9885-37cab61d54fd"
        },
        "item": {
          "id": "61641d71-5231-4f53-89b5-1fe02f59adf7",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "916b80db-f7de-4a10-8ebd-0c26ab26ce57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "d49c1cc4-32fc-4c7f-85f1-e0eb6534053f",
        "cursor": {
          "ref": "cd968ec2-98fd-4305-b45f-7dbd57f26930",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "e2c37694-6dc9-4133-86ff-eb27015622a7"
        },
        "item": {
          "id": "d49c1cc4-32fc-4c7f-85f1-e0eb6534053f",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "b7a09b5b-d4e5-4e0c-808b-aaeb82823111",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "f103c5ee-87d3-4857-a875-c4d89bf4bbe2",
        "cursor": {
          "ref": "9d743c97-9866-4a19-b75d-22f92d8f78c8",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "40820dc1-7709-4d83-92d6-b5ec2ef4a1f7"
        },
        "item": {
          "id": "f103c5ee-87d3-4857-a875-c4d89bf4bbe2",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "6531cc69-9dd9-4cd9-bf21-37d0137947c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "8fe2e9ea-9466-4761-8f11-0c72eea74848",
        "cursor": {
          "ref": "a475aadc-5c6e-4e79-9d7a-39d830121175",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "45675b7c-9596-4b60-ac8e-c68f2bb3f55c"
        },
        "item": {
          "id": "8fe2e9ea-9466-4761-8f11-0c72eea74848",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "a48f9847-2612-4938-8f74-a10b5c95e2c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "fa4bb78d-b8d3-4b39-86ea-21eb1f768ec8",
        "cursor": {
          "ref": "54eb2550-1cf2-4225-a8da-32f07c50fd8e",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "67731c85-10df-4ac6-a90d-f401823baf19"
        },
        "item": {
          "id": "fa4bb78d-b8d3-4b39-86ea-21eb1f768ec8",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "db6479ef-4073-480b-98ad-3a4b3bee05d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "e8325c71-d9ff-474c-82fb-7d23744d8ede",
        "cursor": {
          "ref": "897dbe8e-4884-4398-bd4e-d916babe784a",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "fe36667b-6d0b-4ba9-9a31-df5e9383dc78"
        },
        "item": {
          "id": "e8325c71-d9ff-474c-82fb-7d23744d8ede",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "fac41104-1ce3-453c-8975-ea2d1482eceb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "9688b923-cc4f-4d1b-b1c7-38843feba058",
        "cursor": {
          "ref": "905ab38e-86d8-405d-bf81-a4620f9ead4a",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "6bb3fc06-e178-4cac-88db-56829e74ca76"
        },
        "item": {
          "id": "9688b923-cc4f-4d1b-b1c7-38843feba058",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "385b5ba5-3dca-47ee-805d-7723a16a8203",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 102
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "a2c36479-9a78-421d-bb81-3873a7cf8229",
        "cursor": {
          "ref": "49a88eda-8b24-4e38-9dba-7676c0f1ee24",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "3019f80c-6da7-4c05-b130-66d7905da996"
        },
        "item": {
          "id": "a2c36479-9a78-421d-bb81-3873a7cf8229",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "59701b56-be8e-4367-837b-6c053e8376f4",
          "status": "OK",
          "code": 200,
          "responseTime": 113,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "f2dab2e2-5093-4e66-9afa-d5915d90e94b",
        "cursor": {
          "ref": "4fae53ef-efce-4924-88ef-237d2621464c",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "ae4081b0-dc77-4acd-94fb-352878441779"
        },
        "item": {
          "id": "f2dab2e2-5093-4e66-9afa-d5915d90e94b",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "6be0b032-8977-4e86-b1d2-b58236f33a24",
          "status": "OK",
          "code": 200,
          "responseTime": 113,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "be33caaa-a0b8-4bb9-9196-7ca50c547f65",
        "cursor": {
          "ref": "f8062675-8168-42e4-b20e-4aff4d5749a8",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "cb882cd9-1164-48c3-9b0c-6990cdc9a497"
        },
        "item": {
          "id": "be33caaa-a0b8-4bb9-9196-7ca50c547f65",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "927cc90a-2598-44c5-8ad3-6bc04eae2b7b",
          "status": "OK",
          "code": 200,
          "responseTime": 99,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "4b5fce96-f35d-4779-a388-81986a1d6a9a",
        "cursor": {
          "ref": "c51805da-7b44-464b-a48c-8620fbf8b1c0",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "2130c7ce-15a6-4649-9b4e-6288c53fcf1a"
        },
        "item": {
          "id": "4b5fce96-f35d-4779-a388-81986a1d6a9a",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "ee6f9be2-464f-4bb5-b2af-ef059dbdd0fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 102
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "697851fb-6d66-4a46-84da-2afa79d30bcd",
        "cursor": {
          "ref": "ba4f6978-fa99-4e5b-920e-17d4e54f2f67",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "1cc9d6c8-ff80-4082-b803-08c93ee35a8c"
        },
        "item": {
          "id": "697851fb-6d66-4a46-84da-2afa79d30bcd",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "a109923b-27f9-4e54-b777-68374b33bfb3",
          "status": "OK",
          "code": 200,
          "responseTime": 104,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "7a89c723-3c25-41d4-b40a-efa1848e0b67",
        "cursor": {
          "ref": "147d36c7-be96-416c-8112-1129115b055d",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "b30f00ef-1892-4539-b80e-e060f9ae74a4"
        },
        "item": {
          "id": "7a89c723-3c25-41d4-b40a-efa1848e0b67",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "1dd21e08-203e-44ea-9905-b0322d1b0fc4",
          "status": "OK",
          "code": 200,
          "responseTime": 114,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "178ea0ce-54e8-432c-8223-54627eca4a68",
        "cursor": {
          "ref": "f5e1efc4-79de-4b96-a4bc-0e1d39a9cc86",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "f53c84b3-5f2d-4bf2-9479-f2d3f3569d57"
        },
        "item": {
          "id": "178ea0ce-54e8-432c-8223-54627eca4a68",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "c7715b39-e5c0-4def-a872-5fcbfc280373",
          "status": "OK",
          "code": 200,
          "responseTime": 102,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "67848bf1-64fb-4240-b3f0-4dee5a1b1e33",
        "cursor": {
          "ref": "ff95139e-24aa-44b4-877f-2c149d96da95",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "f3781df2-53d5-4735-88a0-2c7ccbc1d080"
        },
        "item": {
          "id": "67848bf1-64fb-4240-b3f0-4dee5a1b1e33",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "5b32e5d4-39ef-4244-b1dd-ba7b6a993d7c",
          "status": "OK",
          "code": 200,
          "responseTime": 105,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "770a6407-bea9-4c29-83b4-b728e97d00b7",
        "cursor": {
          "ref": "c8be69ff-4b05-42e6-9215-d93a35cf9af7",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "dea347b2-3716-4f86-9556-f7820a15fa9f"
        },
        "item": {
          "id": "770a6407-bea9-4c29-83b4-b728e97d00b7",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "df678740-002a-481d-85cf-fe86e3fb6841",
          "status": "OK",
          "code": 200,
          "responseTime": 108,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "d645ba1c-b40f-4dcc-9cfa-e05fb1bde89e",
        "cursor": {
          "ref": "1bd08aab-6abe-4279-bc26-9384311fd271",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "885d12e4-1c21-4872-b9ad-b0f8f4308481"
        },
        "item": {
          "id": "d645ba1c-b40f-4dcc-9cfa-e05fb1bde89e",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "75564257-7152-4635-b7de-28d06f235779",
          "status": "OK",
          "code": 200,
          "responseTime": 107,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "44a7ca15-f734-4a5f-8c34-c4f9eaf46038",
        "cursor": {
          "ref": "a5d48d19-d71c-4088-aa5a-19a3b7d31472",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "2025056e-03f5-49bb-a4fa-fff8b1fbc57b"
        },
        "item": {
          "id": "44a7ca15-f734-4a5f-8c34-c4f9eaf46038",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "596863b9-0fd9-4d6e-8977-ea4c5f029a20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "f39ee730-152e-412f-8121-0f2986c7bfb9",
        "cursor": {
          "ref": "18d6f135-985a-4c01-b2a1-b6f0689d087c",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "898294ed-3b79-457c-9557-7fcefb095ab2"
        },
        "item": {
          "id": "f39ee730-152e-412f-8121-0f2986c7bfb9",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "405452e6-d52b-46c8-bfd2-9a697bc0eeb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "24259c3b-9a0d-4af1-9f41-c743df55c1dc",
        "cursor": {
          "ref": "5d604299-de97-47c3-a930-d6d615b6aeb6",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "f394d45a-b7b2-4905-a24c-5f2c964a0edd"
        },
        "item": {
          "id": "24259c3b-9a0d-4af1-9f41-c743df55c1dc",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "f2cfef60-e1b7-49d2-94f6-93046998b65f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "084a785b-9e1c-41a9-ad9a-b2e0945a8c36",
        "cursor": {
          "ref": "692d6630-b413-4512-914b-120eb9bbaa56",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "62bb4c49-412d-4c94-bde7-288c595febb5"
        },
        "item": {
          "id": "084a785b-9e1c-41a9-ad9a-b2e0945a8c36",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "d002b5ce-6c01-4ea2-8c4c-ef2a2b0ce0bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "d02839ef-1655-4deb-a17d-f09299773a5b",
        "cursor": {
          "ref": "cb04116b-e2b5-4bb8-868f-5a72942afecc",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "16f64d1d-91ea-491b-b313-6b9c5fc67d78"
        },
        "item": {
          "id": "d02839ef-1655-4deb-a17d-f09299773a5b",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "a3c7eb66-54e0-4676-bd39-540b08e3b6f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "1fd91aa0-c8de-4fef-9ff2-16b153ab4791",
        "cursor": {
          "ref": "8e5d28f7-fa32-4d9e-ab40-6df6a83517bf",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "78b93150-6375-4082-ab0c-0fc75608ba39"
        },
        "item": {
          "id": "1fd91aa0-c8de-4fef-9ff2-16b153ab4791",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "10128663-c031-4115-bb49-105d4246b2d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "b1d65b1f-787f-4d8e-8c42-52481fefcbc2",
        "cursor": {
          "ref": "95a83afb-4682-4659-9438-89b8af8b92de",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "b2aaecbb-ace7-4ac3-a866-cfca902a7f73"
        },
        "item": {
          "id": "b1d65b1f-787f-4d8e-8c42-52481fefcbc2",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "9b451599-6371-4ee7-882b-b415dd8c5669",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "54c412fb-451b-4aa1-bfe4-5dc642595204",
        "cursor": {
          "ref": "418f122f-cfe4-4bf1-bced-0c4f0ab96f2d",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "42874733-891d-4f6b-aca9-d8a3326c0a80"
        },
        "item": {
          "id": "54c412fb-451b-4aa1-bfe4-5dc642595204",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "8c2a9dd2-b89c-433b-86af-24bfc18871d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "a3760afb-1c93-4faf-93a4-ea9da09406cb",
        "cursor": {
          "ref": "835080f3-c00d-4782-916a-b7415a33ae6c",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "daef45f8-62b7-428f-9f32-55ec6f0fa914"
        },
        "item": {
          "id": "a3760afb-1c93-4faf-93a4-ea9da09406cb",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "f427edff-afdd-42d3-a16b-697666f60cc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "eab2d4bf-baa1-465b-bc8b-4b6049a087da",
        "cursor": {
          "ref": "89497dde-fbfb-4eca-a096-8646aff83e6d",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "5de9dc15-a1b9-4099-80b9-acc059098e5e"
        },
        "item": {
          "id": "eab2d4bf-baa1-465b-bc8b-4b6049a087da",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "e9576af7-9bcf-4a11-aecd-5ead798eb710",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 199
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "20603de4-5809-4fbc-ad22-e873966c92e2",
        "cursor": {
          "ref": "d0eda4f0-1427-4fd0-aae2-d18d751236ee",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "604b9f9e-8aad-4c6f-bf6d-c55a88276a65"
        },
        "item": {
          "id": "20603de4-5809-4fbc-ad22-e873966c92e2",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "bd680d67-cae1-429c-846a-682493d963a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 199
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "76d0ef36-455e-4165-aee7-09859e4c4fa7",
        "cursor": {
          "ref": "9c1966fc-8dce-4f9a-be97-9d5a924a684d",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "0e97fd45-2095-4132-9b6b-26818829b267"
        },
        "item": {
          "id": "76d0ef36-455e-4165-aee7-09859e4c4fa7",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "a54d3017-4b56-458d-a3b5-b27723af1137",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 260
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "a70f9607-beee-4ca6-bf08-ab2c5a92c3fb",
        "cursor": {
          "ref": "eeb7445b-efd9-46c6-b715-178b43b4300b",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "7b54377c-9219-44e8-a4bb-36d8255adbf3"
        },
        "item": {
          "id": "a70f9607-beee-4ca6-bf08-ab2c5a92c3fb",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "614d510e-27b5-431f-85aa-39dc165b3699",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 199
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "b0c625b0-69de-44b9-a6d1-54abbef8d58d",
        "cursor": {
          "ref": "d9f8fcb3-ed3e-4ea2-9886-6e0b3be8688f",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "daeac641-e739-4f28-85c9-0e9e32999f7c"
        },
        "item": {
          "id": "b0c625b0-69de-44b9-a6d1-54abbef8d58d",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "6f531b17-c423-46f6-a9e0-582fcde0a6b4",
          "status": "OK",
          "code": 200,
          "responseTime": 110,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "3f8b1490-f5df-4599-9cc0-dc730f0f3b74",
        "cursor": {
          "ref": "67a61778-e9a4-440b-a1ed-9978c684e770",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "9b97110b-bf45-4058-a233-be52128cc8b8"
        },
        "item": {
          "id": "3f8b1490-f5df-4599-9cc0-dc730f0f3b74",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "0c7fd8fa-27da-42ad-b08b-f062f25264e2",
          "status": "OK",
          "code": 200,
          "responseTime": 102,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "b5cb4202-468f-4655-984a-50ad6eb8304b",
        "cursor": {
          "ref": "b4a4929d-9d69-49cf-b79a-214ee2291a58",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "b1b08fc1-6b69-4a54-a3ea-b69a1ae368e3"
        },
        "item": {
          "id": "b5cb4202-468f-4655-984a-50ad6eb8304b",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "849c1603-3973-4942-a643-c9d30f844ecd",
          "status": "OK",
          "code": 200,
          "responseTime": 96,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "f565ab93-68a7-4b2d-ad65-a27e60fa9796",
        "cursor": {
          "ref": "823b2c73-d25d-4c59-8f7c-e2e40246f1f5",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "79132d69-2987-4c07-af56-6e89654ee550"
        },
        "item": {
          "id": "f565ab93-68a7-4b2d-ad65-a27e60fa9796",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "65a91fab-5941-4a36-b373-d0fbd44e6f8f",
          "status": "OK",
          "code": 200,
          "responseTime": 107,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "047606d5-a174-4937-a360-d4549cc7c64b",
        "cursor": {
          "ref": "017b925b-6243-47cb-874c-3be706b1dd8e",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "b7cfbc7a-ce04-4c21-a044-86dbea25ce82"
        },
        "item": {
          "id": "047606d5-a174-4937-a360-d4549cc7c64b",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "7e67dfbe-1379-4247-81bc-710d3809a963",
          "status": "OK",
          "code": 200,
          "responseTime": 105,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "32defed1-b573-4274-9cfb-27c8933c99f7",
        "cursor": {
          "ref": "86db4e37-d50a-492f-8122-209482b9aea6",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "ffb15389-73dc-4c58-b06b-a306ef92d856"
        },
        "item": {
          "id": "32defed1-b573-4274-9cfb-27c8933c99f7",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "d1e1e392-4ea9-4d8d-aec0-788ac437f0c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "05adf151-e69e-43ec-8128-68b5dbf745fc",
        "cursor": {
          "ref": "b55f3a94-22fe-43e6-8581-888afd261009",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "0b55d1e4-aaf1-4163-9890-ed4058034d65"
        },
        "item": {
          "id": "05adf151-e69e-43ec-8128-68b5dbf745fc",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "282ac7eb-87bd-4e4f-9327-c9a518ed758b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "4b397e4b-654f-44d2-a513-ed2ff82dd27b",
        "cursor": {
          "ref": "7b4d050e-f080-467f-886f-8a2993356ebf",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "3c1d463b-7ecc-4e60-be8a-54ee74f14014"
        },
        "item": {
          "id": "4b397e4b-654f-44d2-a513-ed2ff82dd27b",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "7ce34c9e-9333-4f28-9f7f-297a4dc7356e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 236
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "74f47260-9719-496c-88a5-ef101c937001",
        "cursor": {
          "ref": "c60a5a34-9383-41b8-bd89-370a94e92d83",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "1b2fb049-dd51-4071-9c1c-ea647b7b611c"
        },
        "item": {
          "id": "74f47260-9719-496c-88a5-ef101c937001",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "c087b8f2-ad0e-43ed-ac58-ece2c6ec5072",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 236
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "f6229786-e39a-4b37-9d0f-37f9ec798a7f",
        "cursor": {
          "ref": "82de0e70-c432-478b-9fb7-4ac552eb45b7",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "97369a0d-5e54-4240-9b72-be1e8c16328d"
        },
        "item": {
          "id": "f6229786-e39a-4b37-9d0f-37f9ec798a7f",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "bafd10bb-b160-4a08-9a54-3372a97e6741",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "9e384a47-232f-4463-b162-a818a8e0d81d",
        "cursor": {
          "ref": "1af02c00-797e-40aa-9153-1767daeec551",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "bcf1681f-e885-432b-b676-67866ce8d53c"
        },
        "item": {
          "id": "9e384a47-232f-4463-b162-a818a8e0d81d",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "6b55fdeb-4289-435f-86f4-91ea025fa1c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 236
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "4f854422-f81a-47b3-bc9b-41cccbedad83",
        "cursor": {
          "ref": "326dab9e-eb9a-48e2-a533-9d2071bb622e",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "d5efca36-77fc-4d42-8606-420d738d4759"
        },
        "item": {
          "id": "4f854422-f81a-47b3-bc9b-41cccbedad83",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "8d490b20-2bde-448b-92f8-623a348812ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 337
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "ed0d4706-3e68-4f23-acaa-ce542efdb4cd",
        "cursor": {
          "ref": "14ac7c23-7ae5-4125-a36c-194bcc83b5f8",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "f25e3bbb-8c6a-4b18-b295-3cef6d24215b"
        },
        "item": {
          "id": "ed0d4706-3e68-4f23-acaa-ce542efdb4cd",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "2f137daf-216b-4805-affa-19c210a48d28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "0c59c630-1426-4c7a-a9d3-b0a9f34176b4",
        "cursor": {
          "ref": "e9b218ed-d1da-4e9c-a993-77841f296ebd",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "9c937700-f81a-45e2-86cf-4254af27ccf3"
        },
        "item": {
          "id": "0c59c630-1426-4c7a-a9d3-b0a9f34176b4",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "6e09e2d2-416b-47a0-a5b7-caf5d11dce7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "30302926-1399-4722-8b36-a7cdf269dcc9",
        "cursor": {
          "ref": "2705bfdb-f7b4-48ef-a886-e7ddaef32ae8",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "a4645288-fb7b-4a5b-95b0-9dbd6e5d8874"
        },
        "item": {
          "id": "30302926-1399-4722-8b36-a7cdf269dcc9",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "188bd7ee-8a09-4696-93fa-9a4c0a562650",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "74efd0d3-3722-4680-8b03-0c9e7b05bebf",
        "cursor": {
          "ref": "d4e0197d-3d3a-49a2-8b17-1e84eaf251bc",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "e542cc8b-5066-4fb1-94e4-192adf55cd55"
        },
        "item": {
          "id": "74efd0d3-3722-4680-8b03-0c9e7b05bebf",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "8cab36c8-9101-4c3a-a219-1c75ae57e034",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 337
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "c4238366-a656-464b-905a-492e89aa9540",
        "cursor": {
          "ref": "fa369dc7-3edf-4729-880a-3dee9d221b9f",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "c0915fb1-1006-41e6-ae8d-0b4afbb2e308"
        },
        "item": {
          "id": "c4238366-a656-464b-905a-492e89aa9540",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "98ba92dd-ce3f-41dd-a1e5-6678637af5ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "829f1242-04fb-45e6-92f3-25b3f76b2bff",
        "cursor": {
          "ref": "d285a9af-debf-498e-b73f-952b90faba83",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "2a4ccd2c-9cfa-43df-bef6-60c8a4037563"
        },
        "item": {
          "id": "829f1242-04fb-45e6-92f3-25b3f76b2bff",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "b3d8989c-25d6-4988-a8b7-a747113d593f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "70c48fd7-8c28-42c2-b1b6-bf7cc8afc1f5",
        "cursor": {
          "ref": "2b5031cd-3e9d-4b29-a580-de97f51d7167",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "d2c74c62-4cc6-4936-b130-2710119b3f65"
        },
        "item": {
          "id": "70c48fd7-8c28-42c2-b1b6-bf7cc8afc1f5",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "f7c69a23-2426-48b4-9b10-fcd3dce59997",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "b1943c90-430b-4030-aa23-4cdf026135b3",
        "cursor": {
          "ref": "9855a079-dd25-4f0f-bc37-0c643a51b185",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "609a5c56-4295-4e5b-9f93-226e1690ef39"
        },
        "item": {
          "id": "b1943c90-430b-4030-aa23-4cdf026135b3",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "769c1ca1-b64a-44e8-aaa0-fec4f29456f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "d7d702fe-cfe9-4dd4-bfd7-7ecc4f8ce670",
        "cursor": {
          "ref": "d33c8208-209b-46d3-aa33-2f66dbf6472e",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "e63b9d51-82cb-429b-b337-8e4e5e0ae2a9"
        },
        "item": {
          "id": "d7d702fe-cfe9-4dd4-bfd7-7ecc4f8ce670",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "02a87a55-fee6-4ff1-b861-b5791378617f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "58e197d0-b8af-4dc7-9653-17c33ef4dc58",
        "cursor": {
          "ref": "3100ef32-da09-4bd0-ade1-61b8132d0697",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "2b63e3c0-cee5-4c0f-8831-e1851fa92566"
        },
        "item": {
          "id": "58e197d0-b8af-4dc7-9653-17c33ef4dc58",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "37251a68-e938-4743-bae8-0d3f72715bad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "15c02689-53de-4fb9-b104-be066992fa61",
        "cursor": {
          "ref": "6abc42b3-eb3c-4bbe-b052-9c8243dcaa7e",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "0724275f-c156-4cf1-8a24-6ff2e49b257f"
        },
        "item": {
          "id": "15c02689-53de-4fb9-b104-be066992fa61",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "615ee2cb-df1f-46a6-9879-0f8458817e8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "a98ffcd8-df64-4ac5-bc11-fef5d301743b",
        "cursor": {
          "ref": "3d775e67-b779-453e-ba7a-1cdb29184f56",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "96ac40af-ae57-433d-86f4-9768c54cf6de"
        },
        "item": {
          "id": "a98ffcd8-df64-4ac5-bc11-fef5d301743b",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "9cdf442c-cc1f-4ff2-ad2d-72dfac4dbf46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "63ccbcfe-3586-4d21-8e50-5f2689ef383d",
        "cursor": {
          "ref": "8b4fbc99-0beb-418e-8473-846ff20a5595",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "f5872008-5d41-4ccd-9917-7755fa614bff"
        },
        "item": {
          "id": "63ccbcfe-3586-4d21-8e50-5f2689ef383d",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "e387377f-862d-490d-9f92-737ed734003c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "5a315472-1265-440b-ab4d-6683806f04a3",
        "cursor": {
          "ref": "ddb9e9b4-3ff4-4943-ac4e-f75a7df48c97",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "6bfa8e4f-5f04-4a67-ae65-73d0256ebe69"
        },
        "item": {
          "id": "5a315472-1265-440b-ab4d-6683806f04a3",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "b68e40b4-d9d1-4c0a-8a39-305ae4017d0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "cc983cbb-4e6b-4abd-9c40-69c8b968796e",
        "cursor": {
          "ref": "30666925-fe9e-4549-a157-2d6560561d66",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "f211e9c5-6aee-498c-8107-c63c98f1d5dc"
        },
        "item": {
          "id": "cc983cbb-4e6b-4abd-9c40-69c8b968796e",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "91e420e3-e408-4229-a8e4-bbe36f9d27dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "d0283895-c716-48a2-84f5-d441c5586de8",
        "cursor": {
          "ref": "8bca4456-b86f-4f8f-9539-2c7aa1cacd11",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "1876cede-9679-4db6-b793-bc3abe352c9e"
        },
        "item": {
          "id": "d0283895-c716-48a2-84f5-d441c5586de8",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "da2af602-563c-42c9-aab4-91a67a15cce0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "fe6e722c-c3fc-48b4-b826-9c19f2f95053",
        "cursor": {
          "ref": "5b451781-6c96-429e-9441-4a65c73cd7ab",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "4d99994f-c242-47b0-a8db-67dce32de0a4"
        },
        "item": {
          "id": "fe6e722c-c3fc-48b4-b826-9c19f2f95053",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "bcee95e6-cc7b-4789-9474-3a7a2fbceef1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "317ec28e-0726-4349-ab4d-a11be696bebb",
        "cursor": {
          "ref": "f93d53ea-324e-44d0-b707-ffdfa5607779",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "d69bcb25-0fff-470d-9af6-2d1ff820b2fc"
        },
        "item": {
          "id": "317ec28e-0726-4349-ab4d-a11be696bebb",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "28843731-f390-4fc2-9740-c74e10a5c5f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "432ca8bf-20d9-4dd2-9e13-29c0b9b102a7",
        "cursor": {
          "ref": "088cff6f-2062-4778-be8e-b6531275c293",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "a37b047b-3537-4638-8f23-9f68f91c0495"
        },
        "item": {
          "id": "432ca8bf-20d9-4dd2-9e13-29c0b9b102a7",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "b865496a-fa05-406c-b37e-6fd9d4aede39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "2935bd3f-2604-427f-a581-fe8ed2f6d44f",
        "cursor": {
          "ref": "fa58ab04-171f-4725-a75d-38ad4a1179d5",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "ee3e6183-0533-4cc9-845d-d0c8698c6aff"
        },
        "item": {
          "id": "2935bd3f-2604-427f-a581-fe8ed2f6d44f",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "84ce064b-ad1d-4fd4-b50a-74c21e459938",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "0ca275dd-4325-4e41-9c08-3087ac7638ca",
        "cursor": {
          "ref": "306b2372-3fa9-4b56-bd26-fc69c943edb1",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "f1148b31-a52a-49f3-90e8-7def50101898"
        },
        "item": {
          "id": "0ca275dd-4325-4e41-9c08-3087ac7638ca",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "d98c1d7c-6c88-4022-97ef-446df4dec91a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "adac4d81-5bc1-4d69-910c-4364ee7314ab",
        "cursor": {
          "ref": "90221bc7-27a6-4172-a6fb-8a97926e44df",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "161e6466-233f-447f-8bf2-5129c3d4d2d3"
        },
        "item": {
          "id": "adac4d81-5bc1-4d69-910c-4364ee7314ab",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "dd54b7ce-e9d0-4d5f-8c2e-2f6dfd75f520",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "0710d2b8-3a48-4d07-9f60-db0d1f7833c5",
        "cursor": {
          "ref": "014ce403-0ad9-4f90-a083-b7fbddf6ec4b",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "60c1e50d-8c08-4cc0-aff1-a1700f7b05fc"
        },
        "item": {
          "id": "0710d2b8-3a48-4d07-9f60-db0d1f7833c5",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "d3816d18-44e0-4ea3-b51b-bea7b312e4c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "ed4e25ac-d797-414c-addb-57ce7fa3a9ba",
        "cursor": {
          "ref": "d3aca77a-371b-4ff6-951c-7a16408f7829",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "dd97e00b-e487-4511-9864-2b59d02c9df0"
        },
        "item": {
          "id": "ed4e25ac-d797-414c-addb-57ce7fa3a9ba",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "18387970-a3e6-4273-90ee-e7adb5510a47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "223377af-adf9-4ffe-af86-856c3f0f667f",
        "cursor": {
          "ref": "72b31332-2146-4530-b9ad-8a82c2a5086e",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "9c5388a5-5399-43dd-a300-cc35c8c41f98"
        },
        "item": {
          "id": "223377af-adf9-4ffe-af86-856c3f0f667f",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "7a8b249e-9981-4b04-acd0-95f1cf929d8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "96ac25cf-33a1-4050-a970-79534fe3ce8d",
        "cursor": {
          "ref": "012cca7d-6582-4f14-8732-5b771a81dd16",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "eb56775c-7964-45ed-860b-9859c7cfd287"
        },
        "item": {
          "id": "96ac25cf-33a1-4050-a970-79534fe3ce8d",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "2b71a399-5b22-4a38-b84d-1207fbd5716f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "66df19de-602e-4197-afba-4ce43918d7c5",
        "cursor": {
          "ref": "351ddd38-76c3-49c7-8bbe-1c9686fd9222",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "affcba69-92b5-4f9f-bcd5-be6a97386907"
        },
        "item": {
          "id": "66df19de-602e-4197-afba-4ce43918d7c5",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "6a1663c4-9039-4cc0-bba5-12c654d3bb95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "26fa563e-1130-4a6e-ae13-bc24f04afcb8",
        "cursor": {
          "ref": "c146fd1e-981c-4131-b5ae-17aa9fc36bc8",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "3b58372f-168c-45d9-a1cc-d2d90e50b89a"
        },
        "item": {
          "id": "26fa563e-1130-4a6e-ae13-bc24f04afcb8",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "d8599cc8-e9f3-493a-ba99-9c4b3e62dff0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 27,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3976f3b-1c38-4bc0-839d-7ffd4f1df9e3",
        "cursor": {
          "ref": "52ece04d-df94-403e-a405-0a44a0eea004",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "56b9f54d-71ba-424a-99c4-468b1991065c"
        },
        "item": {
          "id": "f3976f3b-1c38-4bc0-839d-7ffd4f1df9e3",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "babc457d-417a-4100-9213-67008adbfee0",
          "status": "OK",
          "code": 200,
          "responseTime": 106,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "8eecb850-5b10-4155-b634-ce52b1068c5c",
        "cursor": {
          "ref": "19b55b09-5029-40d5-acb2-bd3582941b0f",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "6b6fe3e6-67b3-454a-96f9-2166a28c997a"
        },
        "item": {
          "id": "8eecb850-5b10-4155-b634-ce52b1068c5c",
          "name": "credentials_verify"
        },
        "response": {
          "id": "8c1cbd7c-8f4c-4896-8154-a84618c8ffb6",
          "status": "OK",
          "code": 200,
          "responseTime": 136,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a34ac31-bf7f-4f3c-8c33-0c7b375b4d13",
        "cursor": {
          "ref": "b55b8f61-b1f1-4739-b02f-dccb2343d04b",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "490b45ae-e59e-4cdd-a8f8-5736cba526d6"
        },
        "item": {
          "id": "2a34ac31-bf7f-4f3c-8c33-0c7b375b4d13",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "528dc370-9992-4c59-811f-d98b36e0c59c",
          "status": "OK",
          "code": 200,
          "responseTime": 107,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "907f9493-19e7-46f9-a094-22f208607793",
        "cursor": {
          "ref": "52625188-f858-4ee9-be81-93a7e0916b95",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "206c91d6-4704-4eb3-b0a4-692d228d65c9"
        },
        "item": {
          "id": "907f9493-19e7-46f9-a094-22f208607793",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "497c776d-3ba4-4fab-bffa-1fefb2bd2c62",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "907f9493-19e7-46f9-a094-22f208607793",
        "cursor": {
          "ref": "52625188-f858-4ee9-be81-93a7e0916b95",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "206c91d6-4704-4eb3-b0a4-692d228d65c9"
        },
        "item": {
          "id": "907f9493-19e7-46f9-a094-22f208607793",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "497c776d-3ba4-4fab-bffa-1fefb2bd2c62",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cff470a8-8cd6-43ac-9d46-60bbcac14ca2",
        "cursor": {
          "ref": "a9bcb282-acf3-4586-9766-3649ca4d919e",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "5f4a479f-21a7-4cbb-9c42-d1919daaeeb2"
        },
        "item": {
          "id": "cff470a8-8cd6-43ac-9d46-60bbcac14ca2",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "f685fcd5-313d-429f-9efc-b105f1d1c999",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "903b869d-7c88-4bb4-b31c-3ddb8180ed4f",
        "cursor": {
          "ref": "9fd8db46-3623-4671-9b6c-46c6229e2838",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "75bc9651-b4a8-4783-b58c-f1f9cf519bf2"
        },
        "item": {
          "id": "903b869d-7c88-4bb4-b31c-3ddb8180ed4f",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "1785c130-6d26-46ed-a231-21247888c454",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}