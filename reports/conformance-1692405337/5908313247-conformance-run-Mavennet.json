{
  "collection": {
    "info": {
      "_postman_id": "faa02ea8-9433-45af-b9a7-893a98130da9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "922bb24c-3b9c-440f-abe2-296df20e3263",
        "name": "Clear Cache",
        "item": [
          {
            "id": "f7cb8786-5f3a-4bf1-a873-2a653d158a7c",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4422abbe-8a62-43f9-b68b-d54ebbe81312",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "07d520f2-457c-4b22-beec-c0506240cc29"
                }
              }
            ]
          },
          {
            "id": "34223b0a-e50e-46ff-bfd7-c5b23db7cd40",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d2c89b09-0e21-4563-8541-9a0a2d084622",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "6f58e65f-f972-4153-970d-5eb8d075927f"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "fc4dd656-1b58-4957-8e7e-9b8b8f79534e",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "6b02090c-480f-4153-a086-bfb275cdc03f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e4c1d17a-db20-4f49-b23c-59e91f26397e",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "da696dc7-b102-4f56-aa14-8ca5ced68e3b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "eab37fa5-b6b9-4cc9-86e5-b2f13742bf9c"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a4089146-260a-4407-9f20-f6eb39947745",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "15318d39-4ec7-405b-8b69-1600aca53efe"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f2e7b4e1-08e3-41d3-9440-bd61d208514d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e4f53392-0a33-433f-8c5c-ff9e7ff1e1d2"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f6c9f7d0-083e-4aa8-bc7f-5b914e0b20ab",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "e9b571ca-7c78-4100-b9ae-9672dc41bfe8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6f76823f-ccab-4e6d-9c45-30106744e6a4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3f1656f9-6ec8-4278-a387-583b353a308f"
            }
          }
        ]
      },
      {
        "id": "645a2e98-ba10-455d-afe5-067d47622dcd",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "9f396b12-e72c-4d46-aa87-ac6b78246cd7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "997bcc5f-dcc3-42e0-971d-a29a20d8ea35",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "b4ae2147-0afb-4218-baa1-0f75c7b2ddeb",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa99d3fa-de60-47c2-a1e8-2d5f229ef16c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "736c4b0d-a7d9-45e2-8355-22c892960f32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8885864d-5ef5-4bbe-9cf0-071eb8287c33",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f190ad5-72f5-4739-b05c-118d540958de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "516417f3-f297-496f-9787-a9f183089bbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83de9004-7b23-43fe-a0f7-82c9235489a3",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51d20f50-2135-46ef-8f72-ed029bead5a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "64d76b32-114e-4a66-bc8b-428a05bcf6ce"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "1dcc988a-4c2a-4c5d-a4bc-56cabbb50495",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "33aca57b-9dc6-4f90-954b-4e31b7041818",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac4f7213-5706-4877-ae26-de46caddfbb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "535cf778-e346-4da4-8702-de0e6139e0ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c4e7ea5-15ae-41aa-a201-ebb084a37271",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8baf62b6-f45f-4524-ae8f-0a071b6edf6b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "171dde2c-da70-4567-874a-445465e5835b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "abb53e31-18ab-4618-a01e-705f0e9063e3",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c06e2dbc-cf1e-4569-89bb-da3e3bc6bce9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "26d03c5f-f215-4a6c-bfd3-046fffd37cb0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "92598da6-138a-4c20-88e2-b5affd00a401",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "e53d6b66-f649-4428-9b6d-ca01c50c7e70"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "acbc5aea-89e1-476b-ae4a-aa958489359b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ab7d462b-1bc8-4dee-9f5f-2dbc08feb4e8"
            }
          }
        ]
      },
      {
        "id": "121b46d2-e8e8-49f8-a55c-61c43def6a68",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "4995136c-c6bb-4250-b434-dd265dc9015e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "30bfd7a6-774b-4dd1-8070-37365cacd220",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "bd3fee9b-a6ca-4723-9014-83394cc05b3e",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd2a3e6e-0111-4136-9456-fd77096319ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef403e85-80d5-43d5-97dc-9cf80446db1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f97c8712-86a5-4fb2-bab4-6eb2654aa546",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "25a3eedd-706d-407b-b7dd-9a97a864a659"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc5df888-a12d-4f1a-9b41-ecd7d8940a38",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c2b35f0-71d9-4fa4-ba06-2cdc61dee8c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "554410d2-b3b8-4c96-bf55-ecd850a3ac86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2f50c05-f016-4dc0-8bb6-06d4125b8c02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bcda3fba-a320-4f3e-b87b-1f673e56dc82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1728468-c454-4346-9830-5788453bb801",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5d31e73-69b3-479f-87eb-ff9d733171bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f547e985-9b36-4875-a207-fe64a4b013e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36f84c0c-01b3-4230-a254-f834a74c2ee6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "18d15735-c700-43d2-9918-21a7e9ea5c01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4333c64-df2b-4f86-96ea-0520ef28eef1",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aedd396e-a54e-48d1-9aa9-747696a3e875",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0693ecde-fde3-4bfb-897e-e6df7d056947"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "505dfc5f-5e2c-472b-97f8-83a62b359626",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "30507f6b-d79d-4fad-b0f1-a2e950d43eb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45d60e19-3d7d-4b19-9666-970e0b2f6680",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08dc6b82-0898-4ac2-927f-761d6b92fda5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf83dba0-3a2b-4041-821f-1109861b2784"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de5ec177-fad5-4e32-9f92-3a3920d63a79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "21283294-cca1-475b-9d54-bbaf0c49a44d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa831c1c-017d-4623-b77e-b62ecc6a14f7",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "738c7edd-82a6-4b8a-81bc-f1019d8b30e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1d5d131-b5c7-4053-a834-91a80f66eaf1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47350cbe-492c-4c63-9199-5d52e9099098",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4b1d6e71-d60b-476e-aaff-be6372198355"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43a11d76-d9b7-442e-a61b-5f276a74b593",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0efa7976-f088-4a21-97bd-f1c0aed42d1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95dc5a51-efcf-4ac8-b568-ca67784ae9c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "801e39da-4e61-4729-a974-dae6eb01f47d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "044e422f-18d5-4612-b4dc-0256c6596c01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7026030-a23c-448d-97ea-3bf230402f83",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc8efa2e-cb4f-4063-9c15-44a23bd2520a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8239650-cad3-490b-9564-94f5c26c312d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d62927a-35e9-4841-9173-86db91266dc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b257fb92-1d62-4b88-8459-7c0fbb43b662"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2563078e-e2c9-418c-9963-30327717b072",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e91f2048-4d01-4491-85d3-deec8f28d948",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df0be628-78f6-4d29-a501-77475f39c03b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4f09cc7-cdab-48e2-953d-1e85588bfca8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0f092a5a-5027-469a-b7f6-f6fb6ecc68fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db69faa4-438f-4a6d-9482-92219eb13ca4",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6824c27b-2b8a-418c-b25a-6378be48175e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5967609f-c036-4222-a2c1-4e588b920e57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "665c0bfc-102f-4cf1-a191-5189d81cebd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "65e81489-5238-4a19-b3c4-3aef52ddfedf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6731f092-5ec1-41a8-9c72-be8208a2d804",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1aaf8188-473c-4fd8-b56e-7cf4234e69fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b372304b-af0e-4e6f-af97-1936f925e88f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d661ce8f-a43d-48c2-8ad7-73875984408f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "07a0ba2a-5481-4273-8eee-6c5d7563412b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a3a06e2-09bc-4191-88e3-263a5bde4521",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0537ce46-d366-40b1-a86a-f981f44813a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "755b48ad-e032-4e33-a2f3-aad24f65d12e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbd60d17-fe6b-4451-b5cb-da1a5c8dec7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a96511ca-2189-4f0e-8334-0aedd3e4af47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44e536d3-28db-4b55-a24c-d320323cdd33",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71c438c8-22dc-4377-bad3-b2df785046b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60c74082-aaf2-4695-adc4-918b1e7002b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f3070f3-bf65-4f4b-bd4c-714b35aab468",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a2a19085-1f7a-4211-8265-14fc701b3b01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72b37195-9a74-470f-b1f2-ba353c4fb78f",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12e5e7eb-39c6-4e35-b8c5-497c8d840733",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73bedf31-bf2e-4d61-87e0-e29d6269ebe5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dfb6278-ddea-46ba-b660-7b8a34caf29e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "939879b3-74d5-450b-be1e-e1e8387e5c23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f5a5646-786a-4299-8b95-adae80569ff1",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24d071e8-a18d-4db2-ba8b-1a34040e5bfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e76a4904-cd9d-4b88-a3a2-5c19c5cc21d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2468afd4-17b5-409e-986b-29d252546b58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "57625358-5c63-44fc-a762-0aa2a70c70aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "baa6cf33-d6a7-4493-b548-bb0517db7b28",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "625af8a6-179c-40a1-9e45-47ec17df63d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b7f3020-da3e-4689-9cce-66f49f8f38c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e60905d-1844-46dd-a79e-f4aaef6d59cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7f6f2f6a-8905-424d-8668-bc251763f7df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "392080cb-aa91-4ffe-8b2f-a09e5dbf8220",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bc34d26-f2d3-44a4-8a43-48d902966d24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e66b3241-89f7-413f-9999-8fc04ac84150"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae460b58-abb5-4be5-a181-a5327437b2f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a4355046-f268-451e-bf7a-58bb38bbfe63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9db0e1b3-c062-45a1-a01b-c9bb309dc792",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0c48195-6b3c-4a1f-b789-6acdc0e7ffd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4c1ad2f-a58a-4d80-99fb-77cf60549f4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0184e058-bf5a-4e4f-8be8-48b27739df85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "ece3a176-03f2-448a-94d5-73843ccf7c88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d206dc40-ca63-4663-ac4b-beb577ed6291",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7983822b-0d16-4d7e-8c0e-d3900d5f0b99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a30a01e-e0ea-49e0-b94b-a19d88c524eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a0072fb-1288-4373-b3ff-70214e9d2914",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9d5344c5-bd36-4e17-b47c-06e50f8bd027"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd2a1f8a-4fcd-4473-9c4e-94a92004cb20",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "068ad651-3559-4854-8448-f88403935df4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99874ffd-6193-43e4-a69a-5b8438f9ee3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "179a4846-fce1-44a0-921c-202491f766b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b3fa8944-add0-4fcb-9012-a53e85104fae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ac7f8c3-d45f-4650-952d-c00ee11030b9",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c67e894e-4a05-47fd-9d2c-ffba64447042",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59ffef23-db15-44dc-8299-84005b6d590c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30a04d75-b627-42ed-aeb3-cd66ec66ab06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2d6b8287-c383-4ed0-aa34-a85aeb5ca102"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53529c34-4dd9-450e-a4c8-9e07795d1ae6",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80244c5b-2a60-4311-87d1-5c788a6fc3b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89f33acf-201c-4348-b2ff-62a7219986d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab323738-2f8b-44fd-b089-e833be7d813d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d0bd7e13-6299-4c9b-beb7-a5d1f4e75032"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98fe1030-168d-4c10-a505-7c8e5cc3247a",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae3bcefe-1252-4f90-9338-becb93ca1c9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "592963dd-9d0b-4be8-9f61-ce6f3ce0edff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd4008ce-abcc-49b4-9d72-26294131afbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3979c381-3167-4df2-aa7d-c2900c3a5f20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a82cbcd-0d03-42bc-a7e5-2307df713227",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4452b0e1-cd55-445a-9a2c-a745cb9ec245",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e55fe62-36b7-447e-a8d8-7985f46e42c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4e8973d-3a89-4af8-93dd-b7f917a8fbe4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "e47dbdee-8134-48b0-8f21-36f755126aa0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9acb49d3-1870-4175-8b56-fe6c65b523a4",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "385977a9-d652-473b-ba80-35c06e5d7e62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1e825ca-3f9a-45a4-8af2-ad956038541a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47402da9-a41a-4d4b-82fd-90bce0ea6e3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1a5f1439-8f58-4d41-b92c-50afc2ec5f0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84e0918b-4e05-45dd-a4f9-6ed92e7f9c07",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df243d1b-85cf-4da5-ad33-ef0882c53f6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31495cd7-384e-4a84-9668-128fca9f633a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0036742e-7b99-420e-a3ba-ddfc004e0144",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "74a454ab-e781-4734-a15c-95c4b0c5d6de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63336236-b58d-4732-9bd5-7ee508bf4d79",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6eab8d3-b167-4162-904c-b080c3f803bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6dbb099e-a9df-44bd-a20c-6fa63ff3981d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3530d423-c6b5-44e3-804a-a8779939c0bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "06c6ae97-dc15-49ed-96e3-63a1209a9569"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cd3fa0c-e6cb-400c-9e17-3cfcf34e5857",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdd0d909-7392-4691-b940-8b8e06f7f102",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cba6ff3a-b1d6-41bb-90a0-cd1b7449764a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c00e2495-649c-4b0b-b02b-581a41a00543",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "faea7347-f70b-404c-844f-b557f25228a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46cf37be-558d-464d-91e4-7a205b2be6b3",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba219363-7502-4fe8-b919-4ff4af0da321",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bda03b3-65a5-4df7-9f2e-633ad8eb3fd9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8127b7a-592d-4b66-b454-1da459b7688f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c81f6d8e-ca84-4673-bd31-f14bef7fd446"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58aeabc2-0e1f-42d4-a5ea-bbb6e8c9222e",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2d1a071-1c8a-496d-a870-766540d57cea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee215155-4432-495d-b3f5-53e93ff3255a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d95ff90d-6c23-4496-93e0-7530ca6d7517",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "a5526efc-7ab8-43ce-a71b-3e4ebe40bc3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d72676a-5481-4deb-afa3-d67052d9eba7",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3848bff7-00d2-498c-b6cf-0a5c747355d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e2c4a37-69e0-4fb6-83b0-8357b366f844"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ec4a582-8e44-45aa-a8dc-68abebce2b42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6a64f2c7-4a2c-4545-bff2-566bc4a58416"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13d73cd3-5398-44fb-9088-bb80f44d3a9f",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c394ce9-fc2d-4c3d-a503-20f597e2aa81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfa75c85-a8e9-4430-b14c-09baa2252316"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a2d9a3a-910c-4083-8fc3-0a04d52fd8d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "61439979-84ca-42f8-b2aa-d8e0892b0687"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2a3825d-22e7-4bc1-84b9-145e3b0c5de5",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d7e5857-ae1b-47b4-85ce-e447cb47428b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c08a2e2e-78f5-430d-a044-fa889ab95a6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b652fbf-33c5-4f89-b8c9-9f34fb0595df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "70991298-79f4-4030-8ab8-5a9c3a5500d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db89e6aa-847a-4ec0-a7b3-f957649e2037",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87560a3c-b3d3-4bc9-80b0-fd0c63ea854c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72c9ebfa-515e-47b8-a3bb-f31db0e8cbd6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f59a6ae-1de9-4fd5-82c0-a3d2afd94a49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ca48347a-c57e-4c0a-9f3c-73245bc8d772"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9efbfc8e-619c-40f3-8299-56bd4cdc6f1f",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad3c5ed2-98b8-48b3-825e-23c07834a1d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d814b54-0902-4328-9ad7-d023579167f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f42f1d7-c992-4fd5-b23b-6f45f0d22feb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "9f6a4ba0-822e-40a4-b823-610b94859410"
                        }
                      }
                    ]
                  },
                  {
                    "id": "581016de-eeef-4a2d-8f20-41d618ed8f1f",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f535ad9-5735-4fcf-88ce-e72bf9b1c341",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "02a3bc29-80a9-43b7-b27c-b134d5f00c9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "125c7914-254b-455b-a0ae-b3f2be70815c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "517feeec-41a6-4593-89b3-c925c29fa050"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dc018f2-d25b-482d-ad28-3a3a73051536",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca61abc6-2539-46d1-9e55-33cae996027a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f2b34bc-a814-42aa-b921-65b25eecc834"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d49bbe70-620c-488a-b8e2-05194887158e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "16eff450-eb82-4559-b3a0-28224cb510e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56e0a00c-160d-4849-a4c2-2fa7c3a04747",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8cb5d4a-184c-4a0c-9a12-cde14e29b5f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "066cb4de-f2a2-4a09-a21b-793db7539771"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9af81c1f-2f3d-4c7c-8dd4-8ad797262729",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "45bd00bc-8ffc-495b-a143-507e6621a53a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7883f22d-ecd8-477b-8849-dc7ee1e29eff",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c8a4d5c-4f64-40fb-87ae-fac6e819008e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8abca840-b261-4f15-9ab2-810c4211b4b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28b90c55-bc64-4138-bb34-aa9240037862",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "cffee335-48d1-4834-ac27-3da0e5913430"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9bfc2e0-7fe3-4c11-92e5-504d28b36918",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49bcec74-f91e-4ab9-8aba-829594874c43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c898a7b7-b270-4f9e-8036-f7f7796f283a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a4a8cef-f8a5-411d-8c84-83d01abf4707",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "3a09a965-7063-499e-b3d9-7209795217e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa73479e-bc5f-4eb7-9ca4-7b0278880855",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a34639eb-b4ff-41dc-8f71-f382e2603024",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f35250a0-6b3b-45c2-97b2-1d15509ee5e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0050559a-f3a1-4df5-b44d-738a1778863d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "0e4de9ed-a5cd-47e0-ac70-a1c03c7a285a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a93f14e-e248-41c2-a180-0b387b86eb98",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05170c52-0526-4383-b29e-ba56efb99d35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3cbfdab-d432-4977-a1fc-fbaaeeba4391"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ca98411-4571-4450-b549-100f47917302",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "f317d326-b460-48c8-bb71-b65fe66ef662"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a95dc103-d988-410b-a79a-501e326cd600",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbeb851f-8948-4599-9e66-4763df41cc5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "baea711d-5f46-4b6c-93fe-bea7d8b43abc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c121e4f-971e-4223-aa8d-9345613b3059",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "004407b0-f09e-4123-9f80-e8013fd4bc72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cebc1eb-c76e-4313-9fb4-9d4b0652a119",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0d3a4aa-03e2-48d8-aa2c-3f772a18d9d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfb236d8-7296-4310-aae9-56517dfcdb6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a96cd086-7bf6-450a-ae7d-2b58698cee05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "582f0d88-8ab2-48fd-98b8-469cc4af5ca7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eab620f7-05dd-422e-8190-52b0a9ec7c04",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae66be88-72a9-4ac6-8525-fd3c730b7d69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8dac584b-4eb2-4312-99e3-da7f44f0d58c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10d48804-146a-4a5a-acef-d146ba3397dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "52e2e2d3-33b8-4cc8-aa1c-075ce8ab84e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6668721-0be7-44b5-bd69-f846962f7832",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5828089-efda-4bc4-8d41-caaaa627ac1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc828267-dd2c-4d2f-bf7f-26ba4372bd05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dfffb11-6e09-4d09-ba34-f5df522ad2d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "61c38b8b-bd6a-489c-a50b-5eba2e9ea503"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a279b04-dc21-436a-9512-1d2468f222a7",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "971217a6-54b0-4121-99fc-996a272e5a41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c97193a2-5b92-46b8-9405-0d85f2aad8ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d5b51e6-cf8f-4e4b-aa73-ce4f7613011a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0f60173e-e871-4678-8c6e-1346102b9ced"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b92601c1-81ef-43d3-9e5a-bdcdab1a7618",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82245314-b26b-49f8-bcce-8f2f93baa0c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a161685-e1de-4b7e-85d3-0e47e94be233"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dede98f6-fd03-415e-a1fa-f9fe7ebc39c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "546e3a94-79d6-4924-b93f-ed954c3e2056"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7105a64-5288-4062-a44a-2878f84fc8c2",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56c6c63f-882b-4bcb-8342-0048ec48ea05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72c9977b-107d-4cab-a6d3-da1c7987f275"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d9a5e15-622a-4851-9443-5410d1c2d781",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5ffc18c7-a78c-4e71-b902-6c9d42689a88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "775a8823-a17f-4d1c-8746-ff13f71a9363",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fed6163-a829-4c3b-a697-e4c7f998e12d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83e70237-a889-44d7-ab90-7efbd9c5a8c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bba2066d-12b6-48e7-95fa-6e99af921ed5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "af14c150-2009-46ce-aeae-16485f7f5c29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65d75ad0-6452-4de3-b36e-ddaf76872493",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6d8b835-7ef2-4197-9893-af41e9e702e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42985672-fdbd-4d0a-9a8d-aa3408125c30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "beda2bf9-e8b3-4603-9ffa-b9006a015534",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "75812278-84e7-4432-9797-d0db22f53d39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bf550a1-9682-46f9-b4e4-672643c42dbd",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09f1b821-950b-444b-b515-eb3d394afa23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c71d396-9925-48f5-80c8-a603cb12b605"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a8a760e-5abb-40d1-b99e-25db92578b37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5ae9a15d-7202-48ad-a602-2179d03114f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "587ded1d-6ad4-4784-b9bf-6e1ee68298ed",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37f01a9a-d975-482b-aa1b-fc5ec5e92edb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28fd4d32-a79f-401b-bcc3-48e185b0281c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "123799ad-365e-461b-b2f3-4cf1cb91982a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e725c57d-f582-4ee6-baea-55138e51a497"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8f5843c-2702-4aae-94b6-06bd4b738e10",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "329d2f4e-0b73-4bbe-b643-354b44c4122a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2794a78c-f9ad-4d6e-bca7-cd935cb65952"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef1f2008-4204-4d5a-8f6f-ee56be2c3e95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2a2d9533-9984-4a1e-b6d8-c95babd4150b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45d72749-0069-4c83-9901-e09675287a24",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9de927f2-6480-4d15-a8c1-afef67cb4a8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e185bf8-5616-4c61-a5e9-65e092f0289c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0ffe8f9-5407-4922-a298-56c19d828cfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b18600a1-b36a-46e5-bf52-a061b489af7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "953749d1-bf4a-4a27-ae63-887be1f54264",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96e380c4-715f-4586-a753-747e1a2c28f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38f6a24a-cd76-4d75-8fba-e1400933b48a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "242a6d23-8222-4159-bc27-1afcff645b60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "871e4e10-c212-4d7f-bfae-688ac01f2008"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f024ab3-ac9d-4bfb-a251-cc2b52d76f45",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "470fab15-8d72-4f37-928c-2d0a66ca3f69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84e380a3-f81e-487d-ae34-65bb447981fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f3c9b6a-ab32-483f-98e6-771fc453fbf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "ac368757-68a7-478a-91d5-8ab5db03e47b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26872c26-50ce-4cbf-a1a8-8fb4da808ee1",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c85a8860-3b96-4edb-93ce-6a7370cbde90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abd4e4ba-d559-45e5-8fab-988a6fb80997"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c3951c6-92a6-4394-a525-a4ec2803a152",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "abab7656-7266-48e2-9610-e4ec27a225e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e5743e6-a26d-4acd-86ae-f5ce30898f3b",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25be1835-75f9-4cc2-97ba-ea9132ced029",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ee84dfa-6fad-45fe-9dc5-07231083a873"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a96746e-a554-42aa-a050-c6771254d733",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "4de8b614-2142-4aa4-873e-47028ddd9c76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d639301e-2987-4e47-8940-84e366e36a99",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cd8a52f-c052-4a5d-9988-fd6f7c649a86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c007960-7458-4cb6-a783-640276fe1bdc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a580f8a9-b275-4bdc-a5a5-3a51f7ae0874",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "9efbc111-881b-4ff3-87e6-e65817a840b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42bb3dc7-1d29-4ca3-b364-92051dca88a1",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1226dc9a-c909-4c07-bc5e-4277249dd7d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd4fa1e5-c0d4-446c-a5cc-f4bb1dfabb8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10f1bc04-074e-4bf3-be3d-092cf30dcdf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "93d779cd-9e7a-4106-9dfd-579e269dcf73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bd23715-94e2-469d-98c6-1d5861bd17b4",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfc4c24d-5d72-4fae-96d0-fdab9cf2b268",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44288673-f04b-4aa8-b6f8-41cd28211253"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2f0efdc-dc83-4284-a814-fe5cdbe7870d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "ad3a93cf-1d29-4453-a086-84b9a6e6f209"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4eb676f1-0259-4e38-b869-b701a05354a3",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92c9f4a7-c90a-4d99-884c-7e8fbd82e4fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d90b5d3-15df-4d54-ac7b-64989ff6df7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1566d017-cdc8-4bef-960a-9fc950f81404",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "9c1d1859-8d39-4040-b563-5cdf24560233"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7b07e0b-4185-41f4-a3c4-52e0a250119e",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a38a9701-2359-457b-8a9e-16639a7bc848",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9efc0401-647a-4cf7-8c44-9f6aaa5f14f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ca063bf-0cf5-4304-b025-c05d08876935",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a6c91aac-1b73-4139-950f-d7093c9f4928"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33dde7a5-9a50-441d-8c94-6baaba6bf0b9",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ddf7a81-d9c0-4194-85c4-4959c8f7f574",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac487ceb-f862-43eb-b445-b0a7e25f8df0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bb8d396-f8bf-48fe-83d5-d7b70e385da4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3ec4e33f-ddc4-48dc-828f-e770b21697b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1f59099-b3f1-4bd0-845c-90782de45f18",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fda19eca-5a96-4c1b-8d1e-7aecce20c7fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2034083-3399-4018-a140-11d4aa2e26d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6604926-b0a4-464d-ada1-050020947608",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "81c0cf18-5c0d-4ae7-8900-153215eda55c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2dbb78b0-13de-4b22-88e3-63000303bdf2",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "808f6390-d686-4230-8442-292a2f7c439c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e02d26fc-d5b7-4e31-9068-3f2d9e894ae2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76e53f6f-0e13-4276-8318-140cc9379dcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e15e8041-6bb7-4661-beb9-b97401b1ae33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7689a09d-edca-4023-99a6-4001c319ead0",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d352389-2515-401a-a4d1-5f675618bdc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6ebdb89-0468-42a5-8618-a413546ed2c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ef61338-3061-4eaa-bdfe-716a911e98f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "830a70f2-107e-4928-a8b8-9c35c79ed3fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78b89024-7d81-4101-8c14-a9090d470e2b",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e432abe-4c89-43fd-adc0-efd1dc25c7df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b9366cb-a93d-4dd7-a8ba-753df545195c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56c58df7-6f8c-4020-8be0-ff863fbb7d2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "6f655c43-db5d-4356-bd38-c5d9120b007e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee127320-a7e9-47a9-ba64-9a89348c4a2d",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cfa416b-023b-479e-becc-f835d1ef02ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c105dcd-a42a-48b7-801d-c3ac1850f876"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14f1502f-e1dd-42cb-8efe-56315556be45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d1f7069c-10c4-40a6-9a8a-da48eb7884b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2368abe9-fd11-4013-a139-710f2b0f5e9e",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "567ad92a-ac88-4d72-839e-4b88cf97dcc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f697f2f1-263a-424d-98e3-48e7076eca0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c75e822-ad19-4180-a518-2bbea1fd1f28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "73bc6c65-4fc5-4e87-91e2-c403993dabf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21375747-dc66-4df9-b5ca-6a28950698bb",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "442dc3d8-3a9f-4f20-8b1d-8b5b3744a131",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67162ef5-e90f-4050-a8e7-1802e322cda3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a05ac10-4d4b-4ac2-84cb-e663d51b8d53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2a02c667-9af6-44f2-996c-5f010de9aee7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe852c7f-c60c-4a15-a6ac-ddf4c90eead7",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef169431-fb23-4998-9a6a-31c204d42504",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "034dd1ea-761a-431b-b4c1-92a0be28189e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d99d93db-8a25-45b3-a58b-4923ff021841",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d99ab663-6a5b-4df9-b4a2-1f4d24858434"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0242907d-23a9-4023-9eb6-0ec7e964f7ed",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f434fe70-b5d4-4490-9609-c07514da545d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76b242ee-638b-4b73-8e7c-452b050b3b67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6ea86a7-856c-47ef-b743-0173d97f65a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "df2b2ac0-9125-4b4f-81cf-a6c09bb06f22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d40d7c6e-fe93-4fe2-8c2d-13e00b0cafb6",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98703386-aade-41bc-b966-43cabd83c59c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91d8b8c1-f6bc-4790-927c-eafa74235618"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37c5510c-6bf0-43a5-b2f7-8ef10b87937f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2265b376-ab4e-49b7-a8c2-18cfd7381c13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7d80274-c946-439f-9bfe-8233f952253d",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a149369-53e4-47c9-99c9-e91e6d902ae6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ae6ed8c-bcb9-4c22-b7ed-720c692b9554"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc8989a3-9bf6-48ea-a878-bfa60278de4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f4d65b75-ed74-4f61-995f-6fac23dfe627"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aad9b1da-8bd0-46e1-984a-509991544769",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9c6617d-7ed3-4a63-85e4-3851ebc10c0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c29ae8f0-878e-4238-94b3-97d307917f86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a832454-1bfc-4b9d-b536-fa1d2a81c880",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2e69c99d-b911-4e0b-9190-b6cf11d7120f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b719181-e6b6-457d-b71f-1a1edfe07ea3",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dbc09da-0540-4329-9539-9df8723482f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d706b7d-b646-432d-b68c-a8d72c37a1cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4641a4df-504e-4637-96d9-b7e8a559c01a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3a3f3c46-4d2a-4514-a65d-0cc811530cb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06572259-6af6-497b-8f4f-0c55e6a3068e",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db920b7e-d085-4e9b-ad6c-22078701c8d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c51d1f33-37e9-47f9-95de-67a84e48d530"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abbabcdc-35da-42ec-8bc8-cc91f38ea344",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4a313914-3101-48cb-b15f-4671ff2800ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "baa5d52b-d995-4cc5-a4fe-220fa650211b",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b43c3fda-e3b4-4981-bced-bc93f200f127",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a14215b-1e1d-4e94-967e-482e6a1520aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71372124-bd2b-465e-839c-de5b139d42d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ae24e500-9fae-4ad9-8185-38b843478434"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90d67d7a-e8bc-41cb-a291-fbcafc25b946",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fc886af-24b2-42a6-987a-68155f24e3d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca1de8b1-f52c-49d7-baa8-2d607d8041ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bec132e-cbf9-4bb0-ad42-da6de4325815",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "1e0a24c9-c199-4392-b6d7-39fc4af0a2ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f2bb23b-f8a3-4c64-9c50-cbc17cdc5069",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39503dc5-78f8-4f52-bd75-29d20dd861ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f489f7e-d000-4086-b572-c7e66f1daed0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f62250ef-bdb2-4d32-aa63-c562a3c941e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "27643456-2958-4196-b188-a7715c587562"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6242218c-3052-41d6-98a4-dbc0d3ebe568",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4db62b38-1969-4a4a-a2e1-c9f6c0c5e57a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d1870bb-60ce-438a-ab48-1ee9e7a71995"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "caab0269-94e7-4359-b433-00b67e9962df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "854d7424-f673-41ed-a602-2b6089040885"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3afc7aa3-8c18-4ec5-9fd3-9caefec1c5c3",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ceb1fa7-6b31-44ab-969c-fd211d462a34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7b1c339-3f51-4322-947e-5da3783894ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "393ccf03-111e-4644-bf9a-eea571b37d19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c697717c-db3a-4f02-a3b3-b2c84a9bee84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e433612-1f36-4498-bd53-a1544c200451",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae40c246-de95-4a34-bc73-fd667e3e8950",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da1f852b-f137-45eb-b98f-8e7a10a29dad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "214036de-6806-4c3a-a7bc-a44a8083a856",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4b37160d-8e7a-4110-8a11-1710c8749bd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e87ab03c-0e54-471c-ad38-be1ea03c6627",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bce8779c-471f-419c-946d-926377e2a8a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c006961-ad6b-45f1-bd42-af019ef4f319"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f823d074-d571-4a7e-833a-d71522b99ab1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b9eb7193-f3cc-4e60-9618-5ead6928487a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b97096b-e85a-4030-9751-cbe6ae3087ce",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cba2c8c-7f7c-41ff-a9ea-4991157a0d66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62e4e059-4d9d-4b83-ae50-3416d6587833"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df85f4fa-8989-420c-8a4a-d02492908b31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "60eb2714-ec2a-4b13-8893-65faee0192db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9f65335-b3d3-4e6b-85de-d794613fc4cf",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f94bd74-ed72-4f85-a25d-9638c3d5eefe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8082fdb4-ee22-42ac-9de1-0f395d8b2f9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83a1b117-fbd8-453c-98b0-6469d0de88cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "ef90a9c5-1aea-4064-9ca7-966b65c1af4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a425b5a-0f05-4b1f-a3d2-212cf2d08319",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c2e9574-78d5-42bd-942c-7a7f0394739a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "771568af-72e8-4d46-a343-fdf0c80aa391"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78d67ef5-646e-48aa-ba8f-61e8e354c5ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "8d46056e-0f4a-4eb5-a2e4-8c1f385af089"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6dd0911-b7c1-43f6-92de-cc2edf715138",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3af3981-807d-4bf7-8170-b131f3176b3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73940774-28ef-4afc-b1ef-a6c9fb11b745"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a1f1282-c65b-4f78-8fe9-8e465973055a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "da86480f-d130-4325-b34e-826150167b22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3cd5279-2947-42dd-b84e-363f75f75f23",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c809b50-67c6-46c9-8b06-d15de97d29d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7524b86c-2e2e-4760-916d-1ffb14525592"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50c43240-f35e-431e-a6a4-bf970dfabd7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "8d43d2ac-1531-467c-b182-ee9a64f175fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5d5e6da-4c20-4b5a-a2a5-2e8599bb2bd7",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aef1cd19-0944-41c2-a7f4-b3978b7474c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "185aecab-cb4b-48a7-a9d5-4b15444d99dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14af31eb-ae18-4340-bf8e-7c829e85749b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "f9bc7b0a-acf5-483c-8438-c0dff24277d1"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e86a7cec-519d-4e1a-90fa-b6b8383e288c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "de9290ef-1f59-43d5-96c8-a56a84290ecd",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7b430ae-0f77-4d40-8d83-0e4ca74cf0b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f8db7344-38cb-46ca-9a68-5afb98788197"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b52866b1-aa32-48b2-b8fd-6d4c838c35bc",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8532a0f1-b505-4cd5-b503-0e744247291d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c465a364-4193-48d4-b7ed-cb1dd6bc1c6f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "20930096-d7aa-4652-b186-fe39f09b6cd1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c2e5ecd1-b6ad-45db-87d2-197c047dd593",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8dd143f3-0aaa-4093-b76a-af07335e0f21"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4fc97709-5a89-4a48-9ec4-8ec4e64f4a60",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f5deb4d5-bb58-4fc7-b7ce-e1376cb41f0a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "8982e050-17da-41ae-8be0-490622a5ad3d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0a245f7a-8c09-45ca-849b-ddcaf926b6fc"
                }
              }
            ]
          },
          {
            "id": "cf755bfd-ab78-4051-b6db-ea3fd7330b39",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f9a7e219-7178-403f-a1bd-09cdc1708742",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "47f17109-ea41-4cd4-a015-f52a7f3ed047",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f065c530-9844-434a-a863-bbbf3eb3ba07"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "273c68b6-9f9f-42ab-9818-418ad93c6f57",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e112663c-c243-4a74-b5a7-4a06ceda9b5d"
                    }
                  }
                ]
              },
              {
                "id": "45ee70d4-4a90-41c3-8308-33da2047025e",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5e06c840-13ec-4a69-863d-944b60641895",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "87196445-07e1-49ef-852e-aa0c9bce99bd"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "29edaa3c-57be-4bcd-9159-da14defa832e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "18a437f5-21da-4825-94ff-00d0a02d23a6"
                    }
                  }
                ]
              },
              {
                "id": "d62286f2-d3bb-4939-843f-84ee65f3c9e4",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e2d7445a-e735-4f05-a66e-840488aa3d2f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "db36d2d5-7848-4b0d-b5ba-b30624e6f82f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f110ff80-71be-427d-b3e2-f396fe8a7665",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "0ad59530-6367-48d6-aedf-d13c7a4ea550"
                    }
                  }
                ]
              },
              {
                "id": "830ba038-7e30-43a3-890d-e1ecb7b7d625",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9547790d-b8cc-4944-87cd-3c351bbe4a4b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2237f6e3-1107-4c90-b510-50b227cc1670"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8becbce4-5a85-443a-a024-51b92a08fdfe",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "8863fb8f-e5ea-4dec-9e8d-2b6d15da7c71"
                    }
                  }
                ]
              },
              {
                "id": "e27a2a2f-4b71-4670-9222-e980c8452691",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "35498bc8-5a86-4a14-9efd-cc1d899d5773",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "397ed0e0-4787-4470-85fb-56fbb3ff0ed5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8b01acd8-74d9-4372-9717-ce4a21b09314",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "870db38f-0b31-4b22-b418-6de90d8b4073"
                    }
                  }
                ]
              },
              {
                "id": "89455ed4-1d93-4807-9113-89253a8d84ce",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7acde44e-f1de-44b6-b003-1c61ef09186c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "aa6f3f1c-b931-442e-88d2-fc91f3bdcd27"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0c1bba66-b56c-4df5-9ea0-69b96cb34c81",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "89a2d14e-1465-433f-814b-9f0f20ba6d35"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a4cbb795-45ff-4b75-ad85-186953cde82b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "dc203d79-6f9e-4267-bd37-8b2eb689d9ed"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "738c08d1-f3b9-4df1-be28-c06d1516ec2c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c4034a1a-f1ca-4d1f-913b-217fc7a7c24c"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7c0eb435-892e-4e1d-946a-55e12b9ce920",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "c02d21d3-ceae-405e-b220-d60ec5569178"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "03d16730-59af-4f2b-a6ed-72753a293d62",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "236399d5-eba2-4a9d-8aa3-d3bbc6276385"
            }
          }
        ]
      },
      {
        "id": "d6742a77-40f7-4ba6-91f5-cdb0e9b81da6",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "b1abfecc-4cda-4386-900b-73edaa4b8487",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ba4d06c0-52fa-4085-bff8-1ef62b18d729",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "47db8b0e-8452-4884-a7fe-fb60efc5d944",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f964056-821a-4265-8a9b-0c91b01d8947",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ae2b193-8274-4348-af09-f07ed3ac2806"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8abea29-2795-48dd-8a6a-d90f544f51de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "70b40bfd-14df-4ebd-8f51-f6eb9df8e908"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6ce9e52-5cfb-4501-b16c-df8c31bb1694",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58a6aee4-7e4d-4901-9574-fbbe9993e7ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c275773-c552-4d68-aeb1-1021406ac6bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f94d846-e7b3-495c-bd1a-05d8cdc0fe6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "297fb9cc-f522-4362-bd63-eb8bb4e1f961"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4990edb-8fb6-41ae-994a-387c2517c1cd",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2141e28c-c51a-4fcf-b1b4-8215ee40ce7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a82c082-aded-471f-88f3-6c43a38f10c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc8af1b3-d784-4663-b296-2c5fed113ea1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "676620e2-7066-474c-8be9-97c24e716ddb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9cdf37b-9407-4289-ae1c-371c6f9fb2bd",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7838605-5a34-40d0-8080-45e6966a9cf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab197943-0ac1-4956-88e2-df6195e66e0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c020e241-59d4-49f3-9ff3-259ae45ec9ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fbdadce0-06b1-4927-ad26-4755ecec4a68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d0c524d-98fc-435c-b071-8bb90af82527",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3b20d44-23aa-4d7b-8440-428d185715a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17863dce-3d78-4cec-b346-905ea0d2ceb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8345b48-4285-4baa-a73e-be2f571beed2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bc9f83d8-6a7e-48dd-92de-3055f947140b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14f08f0f-3108-4fb0-9a3b-0566698ba1b9",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b39bd2c-dd7e-408a-a0c6-ef8c6ce6054f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c82ddca7-0f8c-4cc6-8d4d-13123b2482cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07b5d9e2-7bfd-447f-91c2-d89a8ee5cdb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d9a1788a-b0a8-415f-bcab-600d50c18216"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11cb2d86-4b99-4728-953c-c52618a0e0d0",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afd66f8a-9ce6-4bc1-95e8-18f2ae8daeb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1e0c7ee-f803-4b43-8bef-ccaa24221b41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a826675c-1ebe-483c-8a9e-1babfbf30f64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "d082797d-5b12-497b-bad6-2cab886b2ff0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce241b77-736e-4c4b-b5c7-2ebdb4a0335a",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8836a8c0-c174-47f9-a3a0-d4f13474a962",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d387ca16-8fc8-4478-a466-75893736fdc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0380e2d4-f541-4693-9338-d82f0778ba92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b7b27b75-f004-40ba-9a4d-342369880082"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ed3dc61-5c58-4d30-8eb7-5d08404f25c9",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddae10ff-b3e9-46bf-9415-78e11e14779c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f767ff41-28c4-4fad-aca8-a093f21af23c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf5945bf-003d-4e52-b0dc-66d2c2f41015",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ec17c990-d6d8-449c-bc52-35cc68a4c800"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb80540c-5b1c-4b01-b69a-af3f74fa97d8",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52544d8d-7745-4a9e-99bb-dadad8b37fe9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6731803-bfe7-4f5b-bb47-897cefb17b2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95aa3b00-62fc-4cd7-95a0-313943be5ab4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2ea128f9-06ba-45b8-9197-dd51f7b9130e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64cf3317-dd27-4d68-a58b-032f92dd9d4a",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1111ee33-a0c4-42a0-8aab-82236e0c9b49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbad47a0-1bf8-485b-a6d5-89f3e19d814a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d83bbda8-7794-458a-ae28-fcd03585d31b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "c3a07c93-219d-4d5d-ab94-6c0b06ebccd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72e7799c-3d0e-47c5-9f2c-dc6d2581f71f",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a496b6a3-d190-4552-950d-e3efc3e87542",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3ea8884-d322-4606-bcee-0bab9cc8f633"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87dfe76f-5527-4ace-b32c-2d4dfc584cc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2923063a-bafd-42bc-ad67-7a8998290b96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50f0baaa-bcf4-4373-b900-3180e7a5ae1b",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb40c45f-b6c2-4dfc-8043-3fe68cffdddc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0638ad16-e1cb-4c8a-9108-707269ed378c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f70145ce-9604-466d-a959-9e2d1f80af1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9cc76f67-f0c8-4c70-87a1-516ebf853b8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df7d9a6b-ddeb-4d72-9d66-26a2ec50505b",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11c2715e-b001-419b-9b27-b3e0ac31e220",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1e4581a-b906-4e29-bf83-a024d7397c53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ac984b3-f2f4-4c77-8ca1-db7c62757a8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "76e30b96-ba48-4fe1-bcd5-de322aed3e74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab546456-1d55-4bf3-929d-c5fdd7d9985c",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66d5a953-1e10-412b-8490-763005216580",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f565241d-73f9-434c-a950-3a378cede8b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "074e077a-1ce5-4896-aa07-ef4ce7934bd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "0128ad6f-f579-4075-b72e-69ade00bed45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6886521-8776-428e-9b9a-f07c3c804dd4",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f43f8df7-fb00-4798-bcb4-d40ce53ad099",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d915ce21-b4ec-4f10-b46f-55529aeee782"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07a6b80f-6ee6-4a48-9841-c561519326f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "831337b1-d78b-47fb-a284-07120a1850a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc48fa7f-ae8d-4976-a1e1-207b40369f5f",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4aa20bf-e40f-4985-8646-178aef5f21e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8c98853-5bb3-4454-8489-3c03d6b6d1cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a16549f-19bb-4daa-98d5-1aebfef1b6f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "81b4c3f7-f6c2-4740-8f41-1b75025c2d2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85781ed6-1b03-4a79-9142-c66ad4f38067",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02ad78e7-5512-4e01-a87e-848d630b4e46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "055c063a-8632-4465-99cb-0b4fa79aee26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f34c65f-fbdd-4997-84fd-cb63b722896c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "4501e5e8-ab10-45ea-8b2b-30c3cf76ffd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9b641ee-7b89-4f44-9501-64a8671ff1a6",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdd70c4c-0945-40c6-b3f1-d08824fc5a82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f9e3c65-c83d-4aed-bde2-a06b420f9136"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22cf4261-4f0d-4d18-9ce6-cb02f5682aac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6d753f6c-fd24-43ea-aba6-80e41bcfa694"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bffb30b4-2098-4320-a457-858be1853b89",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f71118ef-cbff-4cfa-a765-c6277b5413ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b6543ee-8a4f-49e3-bf81-39bcb7ac8a34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4308ce4-56e4-4546-b9e7-90bb07b3deed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ceb6cbd9-fac0-4532-b0ea-34e932ba472c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1142d4ac-4fa7-4c4e-a20e-cd333b493108",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b448e675-d577-4bc4-a50a-19ca9c9f6d5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c96208db-8407-46f0-8b99-8b1a1da211aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99cba927-d401-47c2-a0b7-e2df3ad7e474",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7149cce1-9cd9-4936-96c8-49f42ee191a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b374df71-8ab1-47b7-883a-8a9230dd6749",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da343e2a-a1e5-49e0-b7e8-481caf8dcdc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "223e18c9-7044-4d68-b00c-250d34f788ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe774eb0-cfe1-49fe-adcd-b1e259d55b46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "df675a88-3970-4c22-a48d-dc414a42de75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70b304e9-1535-49ed-b11d-07d2f496d0f9",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "839d191e-20ed-45cf-b8eb-743eb587320c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7ce64ae-7423-4470-9a6d-3f990280eae7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a608ecb4-7f46-4c9b-94ce-de2e70943a39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ac121827-d998-4432-a2df-442685f11f9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cacbcff-20dc-4989-a25c-ca7da48472ae",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "411d141e-b348-4975-82bd-b27ff4cf0a06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b354e25b-00e1-4329-a812-8419ed748fbe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "739e4812-be57-4de6-8117-4f08d377a4d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6b8d1bf9-ef75-4489-955e-c1b9914fdcfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17ea7d63-2197-4a2a-9b1e-157651711588",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "925d3818-892f-42d3-a51f-076bc2058cab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b6dc1e0-5d25-4be9-a9ec-386df9176f36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc4089cc-6af7-49d6-8591-d5519175a3bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d3b7f131-cbdf-4dd7-84ed-1f4d1ef084ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "119e2996-745a-419f-8fb4-4fe33fac0869",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fcd3ca6-55ec-475c-8abc-c677aa7590a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd727c2f-f6dc-470b-ad9e-d6e504bebd6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8add6321-2cf5-4b32-89d3-e4b8970c230d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "934a7f36-6b69-4f5e-8b88-9c433a4076e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d844e3d7-91fd-41d6-a821-8173fe47a432",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9abdceb-0652-4335-a38f-ccecac97de79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01a0fe32-9930-4960-ad51-d2221c5f1d09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2717cd9-319e-440d-a0ee-6a2c3a41b5d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bee1a403-2f24-4f12-9221-feaa2fd6cd96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e780e770-ddaf-4307-877f-91520c382ac6",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "692a5854-fd2b-4a54-956f-918d66ed1112",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce923ca3-7582-488c-809c-b0ebe170e1ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ff4430b-e158-4fa6-baae-35dea1598da0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a94fb5f2-a818-4cc6-a765-a83948a4b123"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8056645d-d1b1-4021-93b7-b0010a982118",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5afb6b13-407c-418f-85bc-ac20151dc2be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46e86245-0464-4fa5-88d2-034405c832b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbf80c3b-4788-4f15-a126-902562f64999",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d1f0b015-6232-4275-a065-99fb1a0f5456"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28b2ec4f-c8c2-4067-8ac7-56eb326226e7",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e082915-08fb-4a8a-beba-6e691fb3cc5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df2c8a0b-13e5-401f-801b-a69cee5992f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2640018d-c22d-44f7-9002-e556218110a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "89e55c06-c07b-4503-bc94-27c1d7941e97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8ecbd01-ca1c-4f97-9a34-2d408aa168f7",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af09b009-0082-444c-a114-9255dbaff4e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "412c32db-f7a4-4f9a-9e97-87ca9bf8e9d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cd4b379-7c32-41e1-a970-d37b69412f33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "37fb436e-4fe0-46fb-ab9f-d307cb9acfef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61a4daf3-130b-4552-a622-12bfba044b82",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "156dc3bf-d018-4cd6-96d2-4932de5cf49d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd0dae14-a971-431d-8017-6be930ba3989"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a8aa846-6e43-4f02-9382-8a6d152f9bec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "293790f9-86d9-4ec3-aa1d-152d982a635c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "137c7f76-59ad-4ecf-b76b-00cc02841fa3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "21390f94-73a8-4de0-9f37-b41d2aabfb71",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "942ad744-806f-4d88-80ba-ad540351b943",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "7d2dddc3-9e9b-4331-ba0e-b6e1360c1f35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c1a1821-071d-49c6-b39e-3b472b606279",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1953d31f-b33b-4848-9408-672fafd9448b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5855a478-23c2-46e3-a042-ce12df47e72c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cd61f1bb-969c-4ec3-9bc9-80309d32d58a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "57fd5733-f6e0-4493-aa89-2c18e3eccefc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "52032eab-1b0b-4539-9916-c2805014947f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b8e3f056-27f7-46b0-9a63-3b3e7e907664",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "2ff0f9da-0f5f-467f-92cd-4a2bf2733eff"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "83548faf-4281-4793-bab6-1abf96f1a150",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "344c2ac6-3cc3-4350-9461-e408a69cd2fd"
            }
          }
        ]
      },
      {
        "id": "92fcd70a-a7b9-4002-95a3-3b2cdd09ec95",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "06f0a4a3-bba4-403f-aa0e-46423ccc794e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6d70e8e9-c860-4a90-aaa4-6f5022c20db5",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "067f3b48-4b4f-4e6b-bc8f-37aeca6aa7d3",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31b5918f-7c96-46ac-a14e-8456225e217e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "526a3984-aea5-4e5e-8ec3-1f7557a6c4d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fa6ee3f-7a9b-4734-9e2f-36bdd0fd40b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "17e500ae-fb42-4e72-8e79-9a3ecabaf732"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f32da04-a57e-474d-b79c-000fc63431d6",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3885bb0e-aa9b-4ae2-81ff-1ddbf2aebf31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fd34d4d-e806-41dd-a1cb-548aec442265"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65c7206f-cc6c-4b93-b0e7-5419ce8f2401",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3060f9d3-7ba2-4506-9494-02f379974a59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b58d08e-7f8f-4623-8db7-eeab05765686",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9073585d-36e1-402a-a327-1fb7608991cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8ae8e83-1ac1-49b2-b558-c1ecea7d1ad2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db0f51ed-c18f-4579-9bc1-8c3cb391f9a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "809b226e-cb43-413c-a531-6d8ae5350b0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4174f45a-e4ee-4869-a764-72e1e1849051",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e724443-85e6-403f-832f-32588cc6bac4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23fce8b2-99f9-4c84-9855-2d8db6e9f1cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9de7c9d2-0e25-4648-bfcd-2d5ca5b96f1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f1a182bd-1519-4128-8b87-bc81ce123ec8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc786036-1e63-4586-8a5b-4b75437bd1b4",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "267a4efc-1e34-4d6a-aefe-6f507fdd62dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd1b41b5-4e79-4e49-8ffc-944e7b6fbfe5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4308ff52-4d28-4001-ac1e-422ae8df4239",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1be8373c-b396-4f9b-b84e-4726ce4ad872"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebdd16e7-2acd-499d-9bed-e7f53d335c51",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7226b3bc-2c38-4068-a4e8-cd65c9566420",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7771b46a-88b9-4042-97f4-2400472e48a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45972b62-ef26-4b32-87f7-c53cb460b7b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f28d919e-451f-48da-9e83-685441903277"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eceaba47-ae49-459f-b7d8-0821f9181e0d",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d85f8fc6-dd18-4a94-8749-46753d31404d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea738a0f-ac89-4484-91b5-250119d58b84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "271d312b-fa06-45a0-9b8b-da668bfa2ad6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "8849f894-d353-4d71-8034-a5dd8f52f2a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb2ffed7-3eda-417d-8947-c683aa6f8f9d",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b2cbd4e-db03-458c-b08f-c5a0b2941e3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4a14c1e-0b13-4ea6-9ff0-f617f0bcdfd6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7da56258-d7f8-43ed-a109-07fccc026a24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "162c6b90-b084-476e-86c7-fdcbd924b1fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5e03885-0896-4379-9764-0c8840dff49d",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b603eb5f-52da-439e-a8e0-df445d17260a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "797e7b4f-6bf9-424d-b537-426996ac44c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b392f1d-b02d-47ec-aaf7-1897c27d9b7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a9f6fcf4-9b76-4629-b93c-a906cd54541a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ffd1e0e-cacc-483c-9da6-1753f69732d6",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6d44e52-ab38-451e-b10d-4b968643ee57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d01614a-89d0-42b7-9a55-434a809c1aed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bdc753f-1f69-4bb6-a637-643bc01498ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fa12b218-e226-418e-aefc-33c1ab039730"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0fe93b0-94ed-42d6-b8cd-70b597d4bfe7",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4145d986-9004-4e92-b56d-7affb26162ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86686c31-524e-4c38-915f-341ad4827c91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b576a18-1fd9-4207-a5fd-8839ffcdcd76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "cd4f15e3-34b5-4e04-afc0-eaecea151895"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f72aa35-0b8c-482e-8f82-fc7d1b982445",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7420bfc-7f3b-417b-9889-b2ace931f208",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5dbcb5e-c9ae-41ca-9aef-3152d194bd44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "227114a0-3960-4d9f-b4da-cdfe8f8078a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "80e5d07c-910a-4b3a-b14c-feedfa2c3f48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c6d094f-6303-4f6c-a76c-20bd049a6c0d",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91ff1aa1-f8fe-4f0e-bd25-07d367e000e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "374e5635-518e-43b3-a39e-d4ec5b1911f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "478e3e38-1257-4501-be4e-c381ebf587eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "831444d6-e569-42dd-8d55-54a8087d3e87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3046f3c1-98ec-4883-a695-661e5707a83a",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94556360-defc-4402-95f0-6a64a85a16c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "920195bd-becd-44ba-994b-f3c0df7d742d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27a75aac-bfb3-4bac-8865-cc4ff1392755",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "6b68422b-6e4c-420d-8983-e6ec679c00ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed3a419b-e5a6-4b54-b809-5f70c7d5d50b",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f822077-5e6d-427f-b16d-0684642c9636",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b72f028d-a42a-48a2-ace1-1d5e0d1f46c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8861cba-c891-4073-8e09-2c18dd000051",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "157bc264-98ad-4546-b7dd-784b2753698e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0503ada3-cf10-4ca8-b19b-410048302c0b",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e605965-0b68-4e0b-8ffb-ffa5256335ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02de09c1-8b7b-4c60-8d14-5907bb64e3ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7b919bb-a5bc-4174-99ec-dd9e4b489265",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "c281f964-acd9-4695-99d4-4b034a42f906"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7eb61a4e-ef52-47bb-b73d-3766ad6d59dc",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f728977a-bc38-48d3-b9ba-56f85e359682",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de2ef055-4a50-41ca-8688-d168cd25b288"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91012d4f-0822-4202-a541-e28e2a07b115",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "a91c0f7c-e145-48f0-8d73-1a41a516afed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e1ba924-ac6d-4ee0-bf5b-2a9c69ea8799",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "088cbfa4-c6f9-41dd-a996-958e91747d90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3dea21c9-9511-46a1-b0a0-6c3d49dc293f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f197756f-dee2-44cc-8889-28f8039b3f4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "a1e10797-04ed-4e44-a8cb-0a2af10cf668"
                        }
                      }
                    ]
                  },
                  {
                    "id": "641ea09a-9736-4815-96cf-a29457904549",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af1a4487-1af8-474a-bca8-558d1bd15042",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ae4663c-ef1e-46cd-bbaf-f73b5772f536"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61fa0ab1-35ce-4c38-ba5d-af5c4fe08676",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6a1be71b-304c-43e0-813a-862b7c8f814a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7140f853-253d-4457-9bc5-96b68e7a4b28",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d46c5201-652c-427e-8b39-9fc045c76923",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b951c5d9-fa1a-458f-93b9-e980145615a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "636761e8-324c-417c-aa0e-d0718ce198c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0c6a6060-1e1c-485c-9cfa-fda557f6d114"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cd6e1ac-9169-455a-96c5-8f4d3100c093",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcb88d6f-bab0-43f8-a28c-f3e68d8fc9a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82c3991d-cc33-49f4-955f-f44dcb40052d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39f085b2-a9c3-4c14-b8a1-d77c8364577c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9460af21-aa46-4cc8-a22c-3d082c997049"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d187ecf-38f6-4b20-beed-51df9f6ce0d4",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef083539-35fb-4a4a-8dd6-214f01d7a6e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "847ee387-09fe-499a-9cf2-d708a6553c98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8850e3ed-8d6c-4597-9c39-39d488071a8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "37b0ae4e-dc32-4234-94a3-1b95acf59e7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8322f152-26fa-4b45-89d9-5cb3db41deb2",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0005161e-bd79-40d6-a838-ee281007127b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cbd8ab2-6dcd-46c9-aa4f-bcf14fb88fc1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44fa07b7-344a-4b25-b290-031bd6a4c295",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6a919b2a-7729-4132-84be-e6287f3ff7aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf4e843e-35a2-4858-a8f5-84c30f6f79b1",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "339e12e5-b9df-493e-be24-1f924ed09345",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "701908f2-69e7-4526-a44c-2e8c6eeb4272"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1624e796-4cc2-40ed-b3b4-fcf73b663103",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "108f39ca-707c-49ca-8183-480faefd4775"
                        }
                      }
                    ]
                  },
                  {
                    "id": "671e9e68-8624-4972-8c82-61f2ee85e5d7",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a561ab3-193c-4443-ab12-54a0905371cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6e1d476-faa4-4845-9f96-3513ad577fe4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db1c7788-a8cf-43c6-8efa-8db233ec8228",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f2012112-a390-47a9-b3ce-e9c1fb05f719"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0cf1764-47db-4062-aeb0-e3d4fd2db54a",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "392dae6c-466a-4f76-a133-dc8e8b1b79a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51ff10cd-425e-4ec8-aa4a-e9ee94addd03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67e641b6-50c5-4277-ab54-c6bd2e3ff151",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "72ed8444-4635-4097-b5b4-647b6aa7ea2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb7c1df4-2c20-4aad-9614-74cbabe31a96",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e8f94e6-a710-475d-8432-363e5dc16e77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ebf622f-1267-48d9-9e6f-7c5690654368"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58ffb82a-a4f7-4952-9809-6c72e77dcaf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "921083bf-6591-4384-a869-81dff359e869"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86c1b6bf-928a-4974-a57e-63bbb8a0d341",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fffab1d0-eed8-48a6-8ee4-a897d4ff8964",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47be9f03-926d-4866-bf9c-dfef2a6f56da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eed81c69-374d-4be9-a348-e3419d62d97d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d4989b6f-0e88-4002-b1dd-8c7d8fbce622"
                        }
                      }
                    ]
                  },
                  {
                    "id": "120820df-72db-4f80-9cc2-1ded0b34c783",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e757ea8c-e572-47eb-ae85-7bdd6aaee54d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35ffc154-e692-4479-88bd-5d158bb65b1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28ba8852-257b-4e96-99f1-6199821f460d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a2b0b307-3ae0-4161-93e1-325124248958"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b83ddde3-f791-4ae7-af57-e8db489e949f",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17f88360-ebb2-4e3f-8a8d-4a71851042f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddd3e6fb-e98d-4e45-9dc0-8171ae2986d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f687788f-c996-488e-9bd9-3e3672916be2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cfe3f9b2-71bf-4c9b-93fc-7adc4c171722"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ff1345d-4d10-4697-b2a1-eb148e5442bb",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6119427-fe91-41ef-b156-fb1c0dcbe7c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3fad6d8-5b27-48b6-9008-a001560b6d85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "778be88e-6b5c-41de-9fdf-e111ce063f2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9a30bd81-d1b8-4af2-b7ab-68cd3f6420d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08bac3d3-d1b4-4591-a837-c7643d171154",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c26c999-9282-4929-95b9-921094194866",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7fd70b0-2845-4a0e-b535-ce98fb52f71e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "264a703d-8374-473f-8b88-57d408755634",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "233c3174-ae41-43fb-899a-fc05e723c3a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68b77776-4bbb-4777-bea3-88d59b93d355",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "333d58b4-a10d-46e6-9042-a9dc23b13699",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b3a9223-e7bc-4642-9d29-41b5273cdf36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae2941eb-1e52-4910-a493-a1c1fd5f70b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cca48300-2d65-4b35-9219-ce2897430cdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69ab6306-c319-499b-acbb-bd8f3dc79484",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58688b0d-74e2-4c2e-9702-09241c8af63e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b918e23-d0ef-44b3-937c-92220593a5c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d370bff1-5a1f-40b7-a56c-d8eab67dc788",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "41a67322-6f92-4932-8463-f8b69e70abeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "302c1df5-7b7d-4b3c-93c4-1285207c49d1",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39396c31-e6fc-4dd1-9220-af98a57db826",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4cdba54-40b8-40c3-9709-3b6d05db7b65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bec3c75e-b9ae-437e-94e3-67773f5cbf21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "09709afd-3ff3-477f-96c0-b9ff77a22906"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa8b33f4-c8cf-4e92-883e-3e4a9ec8e325",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4db1ab40-d096-41a7-955a-9c0a5df52ab5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95194f56-52e2-4f50-8e9b-b3d900df7db9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1990caa9-d37e-4c9a-a29d-f65c6f3577aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d902c4ec-9803-47c2-b585-def9f2df174b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b8c50c7-106a-4f51-aaac-8163e18f48ab",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "679e06dd-2441-4453-8de4-b6eb3723f417",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3936a9b-e3ca-4aa7-87ea-6ea20ada1a50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f106885-40fb-4487-902a-81b47d6ad44c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "02577e00-3a4c-41e1-abf0-615814aaadd7"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "9c7510e8-b989-4aa4-af42-d6e3437f8cc8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "55d80ecb-fcc9-4102-948b-532a334efc46",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac334104-d5fb-4710-9ef5-847713c09341",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "36e77976-b67f-46d9-95e3-0ffb7c35a2d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d874145-a2b2-4333-8af9-1feaf673e5e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e92b34c2-271e-47d2-b330-ea2137bab7bf"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "334a2064-467c-4b4b-9306-de2f5f7c7b7d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "338e9770-c925-42d5-bd13-41800da89463"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d9730220-5508-4e42-918a-0614d2f9c19c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8a3db669-37e9-4060-8122-8d3736005c09"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bb8a299b-a43c-4288-a025-5e4ad31b2a5d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "2409c175-e518-4344-89be-93987be9503d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5cb29417-9df1-4fe7-ad7a-a6df3edb34a5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3062daa8-1782-45f8-b913-4b1a13bebd5b"
            }
          }
        ]
      },
      {
        "id": "28b061c9-c22e-49f5-94b8-ec663c4e3092",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "1d43c593-8c22-43ef-b216-5e4256281742",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bd21f471-6386-4650-bf1c-39f337a0795a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "293aad2b-98cd-4f98-a315-083cf8e59089",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f18c9b56-ffed-45d9-a0c5-43bcca1854ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9c8efc0-905b-4112-b73f-21ed5cff48f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a364d10-7cf6-4254-9865-32ccd8a9dbf7",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fab85a8-efcc-424f-b1dc-629ef343fad9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "028d39ac-5763-47b2-94c7-6702e014ff3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea9e9009-db6e-4f0a-97a0-b5c356ddee6c",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "297799d7-e356-4707-bf8e-e0586ec4b9d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10d82d49-f33e-42dc-aa51-66faac4528bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8547f6b-f356-4b7a-83d2-f39fd07ec6e3",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0968be7-3195-4f72-8809-b93e43091c64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a753988b-9b6d-4a41-91a6-47eb30ea9d9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c375db25-624f-4909-868a-6f5c878aeec7",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb557623-e977-422a-80f3-d858c3e6bdc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a84bc6aa-1c79-4bb3-a84c-b5c09b41770b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5edd8cf0-26be-47f2-9dbb-f41b4fdbb5a7",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d6a1fb2-2513-4a80-a4cf-21cd5376a033",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c53ceed8-34c9-44a8-967f-eadef5f37558"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b121d76e-2268-412c-9ec2-4d4c8fe25fb1",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5fefc48-0d1d-4988-b39a-6d90a95cd962",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0aadf534-3a36-44af-ba76-6b251cc9e790"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad2ca8f7-f6a1-407c-abae-3f21e60ed091",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be1ce91d-72e3-4e87-ba7c-81d9757700b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efdb6299-85c3-4efe-b34a-20ab45239c1e",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f4009a1-ba8a-4545-849f-74ec016c7f6e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "31e5e813-d270-4b42-9b21-fb9fbca9af84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "348fd5eb-3c14-4b8e-9569-9bb2c59753ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13843f31-a46b-48ca-805e-5ed2152702f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e0eda1f-924d-427c-a235-8d579c99f4b1",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1558ef44-2097-4708-8195-b234fa7590b7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "84b92f5b-25d3-40f4-9dd5-abd4711ad4fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "863bf444-0b43-438a-8e48-3ac27e629676",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc900d24-9056-4a03-b2c4-aa3786af2681"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3aa88a4f-3a38-48d0-aafc-42544d5167db",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03b936f5-5178-4597-9c8f-f6a14817a88f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f6f45ec7-af86-42b6-8528-328b1aab104c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aef98a16-ba94-47c5-a31a-6b63656c0877",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4906af4f-37f2-4831-8bd4-3c62be33ea1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1cb897c-db0e-467e-a8bd-79a1ef67d098",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ae21ddd-79f8-42ce-a4c1-01cb71f803d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9f394ce-ad5b-4664-a83d-0c8e42d577e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5e6b1ac-2a6a-4326-8db7-e64d7b0b6fbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6f2aafb-c9b3-4c32-a103-93b5a5eefce6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b17ffd8c-4141-41d7-9607-ae5bc8f5d839",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74813126-edc0-4712-94a5-09d8eb5650fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bc3b887-cb6d-4362-a14a-77eadcd7731c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "548a3235-a78c-4984-8d0c-6d2dc75cf444",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37393e9a-a8d9-4e6f-8037-12f843ebe1a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0837c00-f76e-4908-8000-b5282f15d594",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f78a5b2f-cbcb-4717-9cc1-3b65a77f6fef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2df909d0-9d64-4214-94cd-85c3eb16bf2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5431462-8591-4c84-a825-c3d2ee5e612e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f1bdfc6-e67c-474f-8110-8a234e9653a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "035893e2-9bc4-4f3a-a25f-4388a71b9e8c",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95cce1f2-38b1-4cb8-9cc5-b4719fc33cc7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9ff39a22-017d-4d22-a0c4-dbaab8b6ebe7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17652eb5-d357-44c1-a5a5-62d601fbe8c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f11d381-a04b-480a-add3-ed263ffdb733"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcdbb455-72cc-4987-925c-788f29c61841",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bae2095-9c47-4792-a248-d29f11e02181",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f607be55-2333-4478-9885-86f7f89fc642"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80e0ae21-1807-434c-b0d5-4899a2313535",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88cef327-640e-4230-912f-04fffe6a20fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5575296-64a9-4e45-861c-b48f1b8c7ac9",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df8cce5e-3273-43a3-98fe-daaaeeaa89ac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d0c4b686-1871-40c4-a13f-46257a210c27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee7258ad-69ad-4505-ab7d-3a75ec8f9202",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a3547f0-c0f8-4791-bb08-b21e1368e1b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bbdbe41-cd83-4f11-958e-cc040deca8c9",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79cfb40e-4c79-414a-bf99-340427df1bce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "724fd4af-ed9b-4e88-b47d-b9d95bd8e3c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38bbbec5-9b7a-4e54-8691-fd5df9863c4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32badbfd-2e5d-43b0-a11d-473f7c9c6651"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43c1c560-d716-4579-8d7f-ed803f331479",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f6ac220-5c8e-4c0f-b63e-5a3b716c5ea0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4539a97b-8046-4fcf-b227-d134f61f1042"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94869f96-bdbe-461f-9ef3-26f2771cc0de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b80654b0-9ec6-4d5e-b3f7-a574faeb48d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6cc5735-5972-4128-aaff-f66f3656952f",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bad0871-560d-401d-aa64-f46bee2d791e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a318c0f-ea93-4383-9083-70107b414d66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad640300-15c8-400e-807c-fa8fa6591868",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2375add-d056-4fe9-9068-5c912183c7dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04d71e93-86b9-4881-8a16-21667fc40fe7",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70894076-ff64-45c8-a008-de6948d8d7cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1129b251-9c84-4a2f-8973-d266281360e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67ec1790-9b21-40d9-a186-7a435cd0dbc1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7155ea70-e2e2-4357-a444-94efeca5487e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4e93a78-2ab3-4408-8be8-a516fb8b5b27",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a3973ad-884e-4d79-885f-312ae0b23e96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8dbeec70-41aa-4b06-afd2-f43d69c8ad31"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3493e08b-4d24-4513-9790-b84641623bcc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5feaf207-248a-431d-90bc-e184782f960f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ee0140a-1b91-4fe8-9384-89fa1dcd0e86",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a43190a-c3f9-4644-8487-f8328d5506de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "521bddd7-5aae-4b76-bda5-c52cdc1aa470"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8ccd1c4-a534-44cd-8ef7-593038cfa830",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "222a4b65-3d29-47bb-b925-f27f396a8a6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f08e8f92-d676-4813-bdeb-a19fce804c9a",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b446c59c-596b-40f6-b794-e0c8ca9ebc21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56fbe63f-3bce-4fe1-9390-9c5db33be482"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae07466f-72b1-478c-b61d-16f13e83522d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80a48b13-0592-4453-a2ac-239ec902e0e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b48cb41-a28a-4e38-acca-8a7332399f71",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b025c155-3f99-468b-8d54-0aaef417e19e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "78a335ae-e3d2-45bb-829e-ddeaa44d43e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9aee554b-8868-4132-8688-8fe096e96f88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a61cd3cd-2089-4587-a891-68dca0948c13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b78fce8a-dbf3-4bcd-8f88-9d94f473eecf",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bc9ede9-67c6-4b3c-bd4d-6548e890e2a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f8c16a2d-8082-419f-abd2-0d21d4c74814"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d648a41e-f4c2-4bb6-bd94-797b4a6ff727",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "161d7f40-74f8-4970-b1c3-53ebd7303989"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db837ded-3d5b-4536-8202-ada59c5b2a6a",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cb74470-08ae-476f-a316-5c98a8aafee9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ddfd8e1d-ec22-4037-8314-76f22250eff7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a61d0c3c-c124-4d8d-ac85-f33efdb939fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea8538f7-1fc4-4fbb-a30f-2aa1ae814a7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c775509c-1b1e-4151-802d-24983f8be843",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0033d264-51e5-4d21-8689-703e3acfb9a5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "04a0a338-7184-4dff-84d8-768b2dd7ac56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cdd7e89-4900-48cd-9b41-b9850db2e50a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6f6a3d1-732c-4491-b154-254279a1903f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8833b9a-4e28-4c82-8329-531e6bf6d126",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbb0ced3-0c01-4bff-88c5-befe16c07950",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cc33920-d969-44d6-a000-ae71ba5253c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32aa6b08-e504-42e1-8557-e576a2d09da1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "831d4ad2-1e89-4d69-9263-59b846013fb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ca62e70-a459-482b-b09c-b61a96ab9c1e",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1ac597e-04e6-40ff-b211-231f7c176952",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "285549e4-a412-45ac-9a72-2384827dce2d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9ad80ad-f72b-419b-8e26-8dc9756b8e50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9dfcdbf1-0172-4bcc-b4d4-934e2b6aec77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee8188e3-ff85-405a-aaa1-f2bef895f5a5",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35a7968e-a39f-421e-8f0b-1c780fc3a00d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d2591833-cb11-4b5f-94b6-739a57630394"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "920af8f7-85ed-43ad-8bb7-7d1e6e497dcf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4d6edd4-4f71-4ff4-be0f-0e71de7ed365"
                        }
                      }
                    ]
                  },
                  {
                    "id": "907f789b-b11f-4400-8a3f-c56971efa7f1",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "994a698b-b97b-47ad-ad24-9396f510b147",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "182e15ad-3e83-4176-8600-05bbb568b862"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "142fd570-6c6f-4bf3-9a9b-f5b28b813771",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2503e054-aac2-49d4-b586-9154a5c6137c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc4a6980-487e-4d02-aa8a-a3fd1cbfecd7",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7136d39f-f383-45fd-9d9f-66a888b462d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "85d49d45-2e5f-4388-acd6-0de961465c23"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cb59d4e-9e39-41e9-86a4-bcbc0fd1fa8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f01e6026-8e36-4134-8c81-fcb8ba63d3c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3cd527b-97f1-4f1e-b4df-6fc3d74da209",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8d93562-7a46-45f3-9e55-8884365850aa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e32c29e8-3c52-436c-8dab-6ed732ee27ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69dd8667-3656-47fd-a420-b72c6194bb27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8d422f2-e43a-43e4-9edc-f4c9344846b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c36cb8cf-1728-426e-a729-04a3405a3609",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f6fbdff-52a8-4d27-90f4-d1b6c5faf84c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "14be347a-5ada-45d2-99d6-a700b35cffae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5067ba15-e7f0-458e-9ed8-5cb504dcd083",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "589f4ac5-6faa-4bf7-ab04-c61a24cdebff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3501fa5-c250-401e-8cfb-2dfca4ba7fa0",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4960775e-8106-481a-a9e3-ceeefa2d7c65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa3a47e6-09a3-4751-9312-1c5755eff8ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f16d978-6e51-49d7-8cd4-541ce7dd0f8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "341450fa-326f-4140-8b50-92316696a6c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79d46a9d-d99d-491b-87b9-961bd33142bc",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd9c1b90-23ba-4a72-95f8-05a7b9605d6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5882de84-bb3e-4684-9f17-b05be429240f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2d91e63-2b03-4a68-bd2c-e4dfd53381e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b40b83b4-a90a-4b52-bc00-40105fc1c7ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c156b000-4a5e-4021-8d0b-ba90de33a8c4",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "066e3848-7df5-4e31-8fae-c8880535d1b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf55a66b-e7a6-43d9-bbd9-e66442963f38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bccfd2b-79ee-4c84-bde1-c388f477fe02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b27257e0-9f66-48bc-8453-128fd6aba9ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2092d397-d676-48c0-ad8a-3efb7db71cae",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "922e8aa7-f365-4ff4-bbac-a207af16f6aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b87252b7-c651-4de4-a728-fd954165c1d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1eff6721-5eb4-4a44-bf43-1affd6dfbb13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de7b6707-37e2-4217-9f66-9234878d4db2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57bedd4c-d0e9-448a-8788-f36b6a910bb9",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a46d3e58-a118-4d0e-8760-ba8bdbd0e55a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8436caa-7ec4-428b-9201-4d9404a9077f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63b556e4-fbaf-4a20-8c05-9b90ef57d426",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "121af33f-9a85-413d-b6e3-6f5ed5e95ee4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d0de923-84aa-4ac8-924d-72226324c217",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ba77212-b3f8-4fbd-9d78-ab7315fc12ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9211342-c206-49f3-9b4a-1e31a0227f66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03558614-45ac-4d91-88dd-885f0aa9e53c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68564946-84c6-44da-9cad-57bd8652e3cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f281f7b5-00e9-4d9a-ac4b-5c5db903f23a",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fde81c4d-9151-4879-bf55-d21f14841ed3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3cc62fe-2b2c-4177-b7e0-e1ba76fd3b2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35c35ba5-03bd-41ef-982b-1e3b96bd5724",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d423a6ca-4421-42dc-b004-ef2b566c5d74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d926bb1d-f5fd-408c-bb2a-1da88713ab18",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d11f38c-36b9-422e-9f65-1770e0987f5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35350160-36fb-48dd-aeb3-8b9511319adc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e2b33db-dadf-4bfb-97b1-3bf8b417c3c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89b66887-563f-4d8f-a6d8-2d42717e7b54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04a55967-a722-446a-8f5d-796d8e687115",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18fc0957-4501-4ab4-bb4d-5188ee35e99f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "140eb851-7ccb-4a70-ba87-ced810e0f04e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa0cc0fb-7a01-4bb5-b246-ba37f7847265",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "535fe669-ab98-4ce8-ad8c-ab4576c58f9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bfa3020-edb9-41a1-a1f7-54f0887f9cac",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9fdaaf0-8d21-4832-9e97-cf26ecbbbecc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ddfb8e74-e7c6-45d9-bd12-2ebafa744496"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "554525f7-1862-4880-a8a5-df10c2e85b48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e81b1157-dc20-49e5-9ec4-4e53da472bed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3745a3c1-8ca9-443b-a38f-5fd6ac39c139",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38310e8b-f6b1-41c8-b20a-a7f776dee13c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7840368-dd32-4ca2-8835-cddf67216457"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bc50445-0f30-4e69-97a4-7b932430f0db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6f08415-b6e4-4abc-bb39-cfa2aeb4b902"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53cbb8e7-3411-4dd9-b039-e44d1529a04a",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee9e3553-42d1-4e37-939b-1311678ba768",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56f2c830-feaf-463f-b570-7ed422ace7e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "347026fc-3f37-4dcd-9967-82a4134fffec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f62f235-8fa1-4dbf-8870-c7fb2de42fc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7c1651f-58eb-4acf-8dfc-ff66db42ec71",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa15d69b-fab0-46c8-9df7-22f201f89515",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86a85e39-315b-4016-bde9-1ff9b4eaa0e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c091bc8d-3f90-40a3-9e41-4ea3a24df7ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecb632f6-b5cd-44a9-8171-7b7d6ea4d069"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f332be6a-3007-4ab9-9492-43150da0c68c",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7536b935-e072-45e1-849a-49fcf48168fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "780898f3-a08a-4dbb-868a-c251e5a80d56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "343605cd-e0cc-4cf0-a3da-9b8fcd5a0a82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bffa7ed1-8264-41c1-bb64-d8a9cb38c8a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa72be60-96ef-419a-b1cd-b916166bc41c",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44e56fb5-1441-4082-80a8-1991c68fb927",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebd908ad-6bbf-4518-882c-5e0f3eab144b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "650c0055-f9ef-44ec-9d57-6c75c858db34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6759411-3942-4894-ae35-a372ac1a592b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b2a6ce1-daf3-49a2-be71-26b1cb5d4cb1",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02e2dc9b-6cce-4d6f-8b00-5c441c39f62e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9dbb3e5f-9f5a-4a32-b277-3a8089220c4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75feb9c3-1fd7-4c3a-8b8d-6ba70d0199d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9aeb8e14-b25a-42a2-a463-64b5eb3abc20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9749a7f7-36f3-45e7-925c-8ec94ee898cd",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f3d2ec9-2bff-4dfe-8ab0-6f1f369aeff7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "050ea084-fcb0-4179-9c59-f9b6de23a7bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e8f6ff1-6b7d-48f0-ab41-eedea2ca9a5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e20a55c2-551e-4b2a-a1b1-9980558fd602"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f660dc8a-e7bf-4222-ba3a-e9cc958cb1fa",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79d50026-cf5c-4eb8-a8fb-972d1efb16a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "168136c6-0d58-4c5a-8111-a3328525705c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dabf07d6-0d69-4bb3-85a3-939bf79f9bee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29f2c0da-1a28-48b0-a639-2002a83dc288"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce341afd-c6bb-4bfc-9093-f7f740acbba2",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "643ed45b-9165-4ad2-bcbf-ae8e6b733880",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ddf156d9-b03c-4e00-a96d-0295de7e6470"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40d31c0d-da4f-4fc0-b84c-40b44640e005",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26185158-21cb-4530-a567-4ce6ef0aa8ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b38b3ac2-d94b-4942-ab5e-0eacf6fc7e29",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c83c0721-458e-4a8d-b97f-d7c18b99b5dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44becef5-ca0a-4160-a890-bc7735a53488"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb9bbd11-ee5a-42f8-9401-366f75bb7b26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b57f9f8-f342-4220-aac2-67220d68298c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcc36e1c-42d9-4eeb-ab85-81a2e9d47f04",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be4a04dd-824a-4b67-a7cb-52315092e327",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0c779b9-5fa4-46d2-b6e4-fd337255b9da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0280c708-317a-4a06-9a68-49a6f34a629a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73dd3424-5eb2-4f60-98ed-9e9a0c7823a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2cee37a-ceb9-449e-abb7-69645a782086",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2a2949e-7e95-4d23-a957-cdcaf81c0046",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0cf93433-f515-4109-a98b-8f51d768bc37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9876d695-a4e2-45fe-89cd-a09347db7150",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b3cf910-ec2a-4232-9dad-ac09e93d19ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b406a7f1-5c49-493a-8adc-aa01e2aad4d9",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da1b3689-8827-4f48-bbe3-9998049578ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc8c3f66-b797-4a68-8bcb-a0dc36813a25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e8b82f8-b22f-4865-8498-419b7cbb4c6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac5e5de7-120b-4027-b348-8ed094010540"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8de03304-12af-4f08-ae25-f7e014df121c",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef64d91c-d372-49df-9634-0c846ae2984e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21b5641d-75e3-473b-a11e-d01e731f8af5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "640b1d89-81bd-4bdd-b540-541620323ddb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59286c0e-360e-40fc-995d-b7fb6c3e27be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99decf94-b348-4dbd-a8c0-a6bcb4f25c59",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa90c958-9027-4d1c-91d9-c543b3b1c6aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fab00cf-a6bf-45ca-a054-05feac0aa0ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0a1df87-51df-41bf-bc7e-b25043c1d536",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb872479-1c36-4536-bc99-11c1d74c1801"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5011ee2-aead-4deb-82ea-fef2792deb66",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5101d65c-64ff-4a97-bd59-485d4b0a08e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b8573cd-f59f-47a2-977b-9ba04413c1e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1dbe7b6-3337-416e-94d8-22e7deba1e51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "285b3754-d7d6-4856-b46c-d1d1c170f0c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0607760-bc89-44a1-a404-c5163087cf4b",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73731141-8015-4f15-ad69-b148556c59e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04bd086e-d9f5-4010-b147-dd318583899f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfe6318f-3297-458c-bef7-0bc2021626ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed47e559-154d-421b-9e35-2196688ab5f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8bb36bc-89a6-463f-b859-5fc4babc6afd",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e584751-2090-4af1-8bcd-dd8eff0c67a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62c194a4-39d1-4afc-8986-121b025161f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10f6f147-1f47-465a-96d7-7b37b3bced04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a94e7af-a184-47a2-9f8b-a26855e9ead6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "054e1468-3f0b-4328-a719-2c1d7df93b78",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52ad865e-3164-477e-8b28-ac987a47e34b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e90e990b-5b97-4bef-aa0e-ff7b6d9a9975"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cee4e577-ce17-4613-aae1-dc675efb9842",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e12c998-6623-4607-b0d4-6711928830db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e5c1e0e-fefc-40e7-ab1c-18bd0b020564",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6794faea-348a-4141-a4e3-b993ccc17e5b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2271c432-1e0b-4aac-a615-ab46eeadbdc4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35f3cc9f-0540-4180-a77f-3f212f604289",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c19778ea-a566-4814-b8b1-670f1250919a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02002521-f8c2-4eab-870d-92c1e1d6926f",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75daf3a9-aa67-4104-b1f4-24ee636f223a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9dfc0648-5fed-4b26-bd32-30157afb4fb5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0c7032f-60eb-42fd-8b1b-45222461da64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fefdcdef-c6b9-4f22-81e0-acd9f9ddb680"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cc5f8c9-8daf-4092-99b0-3c6fab945bee",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c70e333-a78c-4025-a122-758fff18b4f4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a96ff1a8-dd3a-49d3-977f-3c04e26ac20c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b4cd43a-db03-45f7-bc56-b81a2b706645",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "280355e8-1d4b-42e1-b06a-2914f0651eb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d714d4e6-17ba-4bb2-b6b7-bc152376b483",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95747f7e-ba76-4202-83ee-e04bce84b99c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ecffe07c-8e04-4781-8646-caeb20d340d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6390cf13-0701-420c-92ec-ad3585e34c17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29e13533-d966-4947-bbb3-1f1bb9336f4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1186f6cd-3818-4e5e-bf4f-a794318d7727",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3471f2dd-1fb7-4df3-9612-809c85c49fc8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "122bdbd2-0b15-47d7-b6fe-6a9351d83fd4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d7e595c-a8c1-47c0-9d3b-1684b6d10774",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fac19cac-be96-40f9-b6ab-e1686b357aff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39d08d2a-5093-42a0-ae74-64547ddbe089",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3380538e-3026-4014-9140-76c1f54e83a8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c9b29b35-41eb-4a05-a539-4672b7eb1700"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a9cb4e0-75d2-4679-8508-0b5b1f8352e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29e92070-5164-483b-905b-007a3ff77998"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bc6dfb1-f5c4-4e09-a623-8e53cd63ee70",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db6ee5c9-6916-4582-8ff3-efa7ef14e583",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9733347f-72b3-4add-9744-5332a06531cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68a085ab-e69f-493d-8cd3-02f65c73716a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "382b7228-a32a-4c9e-8fab-334b43da1782"
                        }
                      }
                    ]
                  },
                  {
                    "id": "606d904e-63d9-461f-bdd3-557ee31986c2",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c49c008-f5e6-4f1c-84c3-48ef27b3ddb1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a96b4805-f9c7-430d-bf08-89b4dcac0a68"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e356444-04bd-43d5-afd4-ce92141cd21c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9cd46b3e-4405-4d61-89bd-2f816f6c38ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b010522-2d70-4fbe-8fa6-902d8c9a4aba",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f7828de-0bd8-41de-956d-153108829877",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "65e2d56f-d3e5-469b-ab34-8c72b7d535cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12bb2b93-12f9-402c-b833-c96d905baf0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ba149e7-284d-4404-bcab-d3b9eed66f8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04e01677-a564-4be3-abca-7ec8caa81c50",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8166f445-d4a6-49b0-b57c-3f827eb0a325",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c3362ed1-776e-4f66-b853-e7ac92d99ca6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "799712d8-f413-4a67-aae2-f8973c62e791",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c95ce9d-ee4a-407b-ada7-69fefbe490cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05912676-90bb-4eac-962d-525040cd6693",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d570f470-09f7-4cfc-84d5-be8049f59473",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8ad6175b-0570-4003-b951-8bcf4b34ea3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "362f2f1d-8307-4039-883f-b7ce5e52e14f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "743bfd3e-5510-4fa5-8ddd-d0e07c4b68f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2880375c-f0db-43eb-9dfa-687451fe44c4",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de6300fd-fcbf-4117-832e-30b1ab9bd922",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "838c37e0-7983-469d-820e-585b134de9b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b787009-78d6-4190-811d-fe7e06779b7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab9c7f49-eae5-4af2-837f-4ea62a71647b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "291bb772-4258-4d67-bf36-29b2bf59e0e8",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd2b07f2-ff1c-41bd-8c6a-4b392200d7f5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aa38f853-af9c-4127-8a04-c292f18b7663"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1a79dc5-1c5e-4901-b3e2-e9dd2935102a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "813f763a-69ee-45ea-8dbe-19922b664243"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f53fffe7-5c75-447f-978e-5b1e50e2913d",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8498d2a-3908-43aa-ac7c-54fd49bab0c6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6881d356-0372-40e8-891b-092084585792"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45e6702e-48d5-4526-b841-210fb5f988a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f7a134d-af12-4289-a0d2-aca061784f21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ff521e5-e9bd-42fd-87d1-5a894726dc43",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b63e377-fe5f-457f-a64c-feeb2c3ce055",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c82eb453-4416-4fcf-abd6-7e622f98db19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4f1a097-bb7d-4669-b7f3-4809a56ddf44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "425cb5ef-fa04-4e39-85a5-c2f38bf01570"
                        }
                      }
                    ]
                  },
                  {
                    "id": "306bde09-22e2-4e31-9cbe-fd3d634a0b93",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "744949ed-a63d-479f-836b-bbcf57ee43ae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9ac7d8f0-ca89-4ae4-bbe4-a9401e406ad9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76ca9db9-71b1-4897-8e2a-07538df2080b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75e872cd-abd4-4c24-a9be-672adb9733f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0da3ef1-aa9a-482d-86f1-7d2230ea9747",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "483fe46c-46ff-4bf2-8cdc-8df8cafc9928",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5513955d-517e-4261-983f-905d811fdb85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c4e35ad-0d04-4d89-8ad4-39c16a5ede7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0a8a10d-ba13-47fd-af5e-7a549df718ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71ca9563-2330-489b-9a4e-f775fb0c1e5d",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74913280-be22-4a59-86b8-e1c51adff1d8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a29c4729-b904-4b3a-8e05-f96435607c2d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb5347f0-ee54-4de0-ae81-b1701ae827ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6eda10c6-6cf0-438d-8e5e-368c3b46adbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a65bd03-d4b6-441d-8090-3d744c09be37",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b0c7ce5-d787-4b03-98a4-166b225a18ed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "830cb44b-f2d2-437f-90c6-2dc974e54ebe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb21acf9-a661-442e-bbc4-ee87d70b2800",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df0fc663-2bac-4966-b420-896669ab584b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "938730a3-c43e-43da-aa1c-200241fac77b",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fb7446a-88b4-4487-bf4d-44e9f09cccee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a348c611-16fb-4bfe-8019-c88042419a18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bc79c95-ecc6-4934-b799-e9e3cba76e4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b097217-5bad-4cd8-b985-71eafd3362fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69cf61a5-73d2-4c5e-8808-e07800f89d70",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd771484-eddc-44f3-a427-4f0217ecca9a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "30d6e2b3-b45a-4df9-983c-be6ff252f1b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "948d09ea-c6be-4a1b-b76f-4b0486a19a3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c753ca0-957a-495a-8f78-86ca9452320d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6275dcbf-a7a2-4152-bcd9-36dc6c259ea8",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48657e83-61c5-44ce-b22f-f2f669015089",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1df6f0fc-66e2-4ce6-b434-94f5f00e1f11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a015a76-d6d7-4ab2-acc3-89dcf575ca63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f39d25b8-5a7e-4b26-b77f-e6ca6a21c193"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab56f229-6ba9-44cb-873d-5d2a16899303",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a39f2ca-c351-4fab-a621-2f386d96cd9d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af08cf25-2370-4bb0-acd3-43ae93cb5099"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "516daf82-8d5c-4769-bf41-b396a24be8d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9361732-69f1-4429-9e83-a607960bf76b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55ce5859-8bee-44b5-b394-203290d9d10a",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d508aa3-42e0-4355-bbfe-2b5608751c26",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3a29c08d-0158-4672-b03a-72edfbf9a26c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca29a3f7-c9c1-43ee-b623-07afc6840d41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd3f3f55-5869-4bed-84a6-03f175e7f0f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bf324f0-3c93-4f5a-ad55-3205bcd374a7",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f994468-f486-4d90-90d3-28041bee43ce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e372a7eb-941b-44e4-9dae-9f08c30077cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd94f0a6-4cf1-4d22-8f82-82dc73689a57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f42bc74-a51b-4467-b323-773367c4be1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74818f75-1b74-4034-bca4-0cfcb0d82fde",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d09993bf-69d9-49eb-910c-2e660edbc7bb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "43036a96-b78e-46fa-8b4e-51b66f89dce3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33cccef7-3a5d-4fd3-b8dd-bccd7a809492",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "814b6978-8a2f-4e60-835c-0720956aeafe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b47190c5-75c3-45b6-9d25-2edddaac382c",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06853f66-362c-4ce9-9b97-50adad763640",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c0ed5199-ed22-4899-8f90-9f6f170e8627"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f999300-dca6-4cc7-8600-5a3dd54c0fab",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ab198a5-c47a-4fdb-9708-79c5f475dd38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c20e558-690e-4bec-b80d-04f440f6c78b",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76c23b5d-4ddc-4854-a6ed-358e16258d4d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b2eff103-5a6f-4c3d-b05e-d427b55ed86e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f273e4a2-2dcd-4995-9e25-d9165b64c152",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fdc96219-c68f-4545-bb61-363b77800197"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5eba01cb-ee0e-4b88-ab7c-27cd24fcfa9b",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "050de04b-c225-40cb-bbc2-d48f5d97d5d7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0b6f784e-ae1c-4100-8cf9-1124995bd301"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "438669c3-5c97-47bf-8001-98d65901861f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83994da2-2757-48b4-8692-dd5822ccfd2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19f03a99-74d1-4b23-9414-42d8c0bb4762",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd31ca60-f8ef-465b-a4df-50c9af64315a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "48b7979e-9ca1-4796-bd77-4b5a2f99f7a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d0865cf-2b44-4c21-8403-dc9a329e3f86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86de55fa-38b4-4c25-ae54-3712f3519504"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44e98891-39b7-4345-9f59-89aea573ea3c",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c69bee6-c124-4ff6-bc52-1d9d3f41ea7f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "53fc27bd-b429-4c69-8922-044cdc978c4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7eb2130b-49cc-48e9-ac48-6caece89e8af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ddd73eb6-67ed-4223-8620-c3087f94a2f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f77c8dc0-6449-4ecc-8228-29fb9e000fce",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75f7788b-0846-4699-8c52-10e2ffe3fcac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "649c9fa3-c8a6-4040-bc40-80fc48b06348"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67d9b5be-137c-4f44-b2a5-c1b698783da6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f430a4ac-58d8-4bdb-85c3-7ccd98806df9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "572f38b6-9a67-4fbf-9f50-8188c37dfde5",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7664854-8db8-4635-b440-f53076d99bf3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "942e2df8-3024-4257-a89e-9e39770f24a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "075ce6cb-ffe1-4087-a54b-cbc347bcec3f",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6cb38c2b-a1c9-4d60-9e4b-88bdc33efb20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88015066-6169-4fcc-9736-dafd81496cb8",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29056eb3-9fb9-41c2-b711-579c33292b98",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1de8f9c9-81a0-48db-b016-a2dd1a38f194"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31a8bb54-abe5-465e-b3f4-1ff4cecfa137",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5eeb5b9b-1359-4acd-a85a-fb5a241b297e"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c9cd66f6-81bd-40ee-9aa1-194c82b8e495",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0f8a2a17-7730-43ca-a0e5-6717ddd3c291"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b3debcdf-9e2f-42a7-874f-386f2dd72e14",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4fdcc413-6ce5-49bb-bf93-dee28c3205c9"
                    }
                  }
                ]
              },
              {
                "id": "2bcd3fa3-436a-40ff-aac5-9edffcfed118",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ab7d822e-872e-4798-b1f1-d234ed205a55",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fd0c31b-4925-44ac-a5f2-17bd858d675a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "e8cf5a64-ce8f-47f0-8c04-72f586c31dad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dff394d1-e6ba-4928-8103-ae87c8324e96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fe2d4fdf-1313-4652-becb-e008de98e1f9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d967343d-8fdf-443a-843e-c77f4dd3e89b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "469e96bb-0300-4e6e-972a-49795741b318"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "458cf6f7-5707-4e05-9f91-e8a4d64c27bd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4fb0b51f-ec75-4492-95d7-cd2bc3a93662"
                    }
                  }
                ]
              },
              {
                "id": "ee9342d5-1d83-4008-b390-980ea1e24ed7",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "4e185d3e-8f5b-4aca-b33c-6219553a1532",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02c44411-e082-48d7-85ca-2c2914a938a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "94ade16c-e7f5-4b23-a591-023a50ac2140"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c124e628-e0b8-46fd-aa65-39c32bd6c8fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c551e415-9750-402e-a91d-266f30075e55"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "99e8445e-2118-49cc-a6d7-fd4932619d6e",
            "name": "Positive Testing",
            "item": [
              {
                "id": "596b9857-d5a8-4817-af8c-0e01c8224007",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8f9fb2fa-6f75-452a-aa59-4051ee7b6902",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "f56dbdad-6819-43e0-872b-7300be6a6b7d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "710e5cbd-d2ae-4e14-9d06-f19656d03e28",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2e0c4ef6-d6df-458c-ac87-cda67effeab6"
                    }
                  }
                ]
              },
              {
                "id": "5563d153-eb68-4477-9c0c-1ee77902d626",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d1b91ce9-d00c-4a41-ba51-ef50a017da5a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "ac6b9183-b989-4690-ac6e-8b76d23582d5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "21d24125-c4cf-4b95-98b5-b54fce4ff75d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "16476abc-2b5a-41c6-bfc9-7a992600539c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "507df360-b4ca-427d-8e48-fca14165e062",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "b63be46d-dc1d-4692-947b-e415d370541c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f7fe63ce-4ff0-4b38-b0e9-2ca47b45d3bc",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c11105d5-3553-4493-930e-aa93d01ba525"
            }
          }
        ]
      },
      {
        "id": "ac1b002b-4488-4826-a239-8597eadf8acc",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "b9031ee4-5553-4b36-9203-ee983b8d5f85",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b054488d-ca64-4089-92c6-1f09ef400697",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "bdb2f7e8-9312-4ed8-ada0-db99a1e94464",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0db4d3d5-aaab-4bd5-abcb-d76283adf848",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "0b592de5-8c5c-48f5-ba0f-551f48a89373"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fafb695-9aa8-4ea4-a713-076e92ea1991",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "76479f13-4976-4c63-b820-b6f8341eaaa8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b6b7990e-ab4c-4f26-9ef4-3d82aab320b1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "03a0e4f5-7adc-4186-8198-57fbe8ed9c43"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "47ae15cb-1a6b-49eb-ac1c-e9b8455e952f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c1496b57-8e33-40f5-a6ba-54ac77bb9b36"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ab923ea0-52f4-4f81-9ef2-9209dd6cdbae",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "f9703141-2d28-4132-b86d-6f43aecffc25"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7fed080a-6c59-4e7c-9aff-ec34f7bef2df",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2807b0a0-aa6e-4df0-bbb8-5e1cdda0ccca"
            }
          }
        ]
      },
      {
        "id": "bea4278b-75dc-4867-b5de-0a513fe4bf9f",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "512652e6-b0f4-4190-8df4-29c6472aa27f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "429e0888-6697-497e-9eac-dc46d26ad602",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "96485efe-5aa7-4a6c-b422-6d4b00c17a40",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9e878a9-671a-4b41-a114-c33f777c2c66",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "010b10f7-6167-44fa-a8db-e8b8d85f7734"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06a2334a-ff8d-4531-9d4a-edfbe121b087",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e2a95f11-606f-43e2-a28c-e8c2da268ff6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "346ad2ce-5f43-430f-8b64-150e7ed08375",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "636c29fa-0302-4297-bbaf-e17cb64e3a23"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7c6d8deb-3809-4585-bbff-988faa807b0d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "81823901-73a2-4c54-8758-7f1461cfe3eb"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "162f9263-2bd8-463a-b39d-97f0d5ba18cb",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "9b71e458-d2a7-4b09-af57-28083dfaa4fb"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3f362622-4fcc-445f-b29a-7844836153da",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f67688e7-764d-4dce-8125-f5d1a651fbaf"
            }
          }
        ]
      },
      {
        "id": "a4705a95-ddb1-4bfa-a39f-b571fc6e3394",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "bda83cd2-09b4-4046-90aa-5d0acbd97acb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0211dcf9-aa4d-46b2-a6e8-c168daf9e5dd",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2a5267d2-afda-4a54-aea2-5066402fd6ef",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bacddd01-2c64-4a37-ad6f-e9a1a51dbf9b",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d3b39bbb-3143-4499-a68c-d39bd559ee51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8307db4-7736-4036-95cf-7d8c0dca84a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "20ec6fad-6b7f-468a-9679-8e402b94170d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4eeeb819-d1a7-4ef7-a3f8-e53f066712eb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b728fcb2-712e-46c7-a249-9448b22d470d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "245b474c-aa23-4d7a-8f89-c0391d89fb03",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0d460abc-08e3-4a61-9c6d-a774a4a93c8d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "eb07ba2a-bec7-4694-8b94-3cfa41f946cf",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "7e192434-ec2d-4450-8f7a-888a9c7dc966"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9ca88686-21b5-4afd-b63e-b22f4dc2fb66",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "13679c86-d80c-4a87-90ef-3c2f80e6fa4a"
            }
          }
        ]
      },
      {
        "id": "8b67a8d8-abc1-4e49-ba23-dd4e6a0cea5f",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8d92c758-42a1-4c3a-9ab8-3467b7ecf221",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b4d57e09-e88d-4697-a72a-447dbd5585b4",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "6617937a-0427-493d-a3c4-93aee7cde947",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a87ca8c3-89d6-4242-8a98-8a2bcd648424",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "90fe3cd8-6574-44c9-81f8-737ecbc2dae3",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2083,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 284,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 570,
        "pending": 0,
        "failed": 45
      },
      "testScripts": {
        "total": 1046,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1037,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 150.024647887324,
      "responseMin": 8,
      "responseMax": 2198,
      "responseSd": 230.13990560753473,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1692405018791,
      "completed": 1692405076699
    },
    "executions": [
      {
        "id": "f7cb8786-5f3a-4bf1-a873-2a653d158a7c",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 282,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "3679dfa6-980f-4067-8644-f3ed47fae5f2",
          "httpRequestId": "87c3e4d0-3859-4901-afa2-daf68ee1e25a"
        },
        "item": {
          "id": "f7cb8786-5f3a-4bf1-a873-2a653d158a7c",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "64c272af-384e-4b36-a42a-66cf468bff17",
          "status": "OK",
          "code": 200,
          "responseTime": 91,
          "responseSize": 0
        }
      },
      {
        "id": "34223b0a-e50e-46ff-bfd7-c5b23db7cd40",
        "cursor": {
          "ref": "94646f35-ec51-4abc-ba4e-3f1ad09d0eb1",
          "length": 282,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "67dd1883-7c45-410a-8885-d037d241fc93"
        },
        "item": {
          "id": "34223b0a-e50e-46ff-bfd7-c5b23db7cd40",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "e70cac37-a83f-4c83-8683-b60df54824a7",
          "status": "OK",
          "code": 200,
          "responseTime": 8,
          "responseSize": 0
        }
      },
      {
        "id": "e4c1d17a-db20-4f49-b23c-59e91f26397e",
        "cursor": {
          "ref": "27011125-e3f7-4e51-88c9-dc13441f55d4",
          "length": 282,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "4984b48b-8afa-4cbf-b001-aa05c4769e09"
        },
        "item": {
          "id": "e4c1d17a-db20-4f49-b23c-59e91f26397e",
          "name": "did_json"
        },
        "response": {
          "id": "6cddd2fe-95c5-4efd-96db-30196339b3a8",
          "status": "OK",
          "code": 200,
          "responseTime": 320,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4ae2147-0afb-4218-baa1-0f75c7b2ddeb",
        "cursor": {
          "ref": "a44cf237-f27b-4ced-bbfa-07ddd5023ecc",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "e4dbe7a1-aec7-45ac-956b-79b4161f75f6"
        },
        "item": {
          "id": "b4ae2147-0afb-4218-baa1-0f75c7b2ddeb",
          "name": "did:invalid"
        },
        "response": {
          "id": "c474b631-1f75-4a5e-8636-eec7989009b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 158,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4ae2147-0afb-4218-baa1-0f75c7b2ddeb",
        "cursor": {
          "ref": "a44cf237-f27b-4ced-bbfa-07ddd5023ecc",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "e4dbe7a1-aec7-45ac-956b-79b4161f75f6"
        },
        "item": {
          "id": "b4ae2147-0afb-4218-baa1-0f75c7b2ddeb",
          "name": "did:invalid"
        },
        "response": {
          "id": "c474b631-1f75-4a5e-8636-eec7989009b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 158,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8885864d-5ef5-4bbe-9cf0-071eb8287c33",
        "cursor": {
          "ref": "cfcaf4b4-3cd7-4e3d-9d82-70dd55e4b7a1",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "a04dae91-fee8-44b3-94ac-34f989a8d2b4"
        },
        "item": {
          "id": "8885864d-5ef5-4bbe-9cf0-071eb8287c33",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "4a78fad5-8e3c-49ce-b106-b8fc23ed4118",
          "status": "Not Found",
          "code": 404,
          "responseTime": 161,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83de9004-7b23-43fe-a0f7-82c9235489a3",
        "cursor": {
          "ref": "d86f7f70-5340-470a-b4a6-e60dbd3aaef9",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "9cac72ca-c156-4589-a831-d63dbb326c50"
        },
        "item": {
          "id": "83de9004-7b23-43fe-a0f7-82c9235489a3",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "383f80fd-b621-4603-b789-fb5260deeb60",
          "status": "Not Found",
          "code": 404,
          "responseTime": 114,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33aca57b-9dc6-4f90-954b-4e31b7041818",
        "cursor": {
          "ref": "6fe252a0-f2a5-42c3-ad37-382cc739470e",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "a83d02ec-dcd2-41fa-a0af-0a653afddbd7"
        },
        "item": {
          "id": "33aca57b-9dc6-4f90-954b-4e31b7041818",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "11e69c78-2849-44d9-8671-f81a42845201",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 90,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abb53e31-18ab-4618-a01e-705f0e9063e3",
        "cursor": {
          "ref": "70217fe0-8ae3-4d3f-81da-c548b6be9342",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "7e16d4cd-624b-4b90-b877-6f0294e62555"
        },
        "item": {
          "id": "abb53e31-18ab-4618-a01e-705f0e9063e3",
          "name": "identifiers"
        },
        "response": {
          "id": "e3cbfa65-d3f8-45a5-ba9b-55c9b548df2a",
          "status": "OK",
          "code": 200,
          "responseTime": 151,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd3fee9b-a6ca-4723-9014-83394cc05b3e",
        "cursor": {
          "ref": "a92d4762-cd8a-4900-b552-36e9455f4e7a",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "6604ff0d-b86d-4315-a7e9-fb53eafb2ab1"
        },
        "item": {
          "id": "bd3fee9b-a6ca-4723-9014-83394cc05b3e",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "f35a841a-170f-4dd9-b4e3-065bf6498bc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc5df888-a12d-4f1a-9b41-ecd7d8940a38",
        "cursor": {
          "ref": "86bc7261-7461-44dc-9d94-adff9811b24e",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "f7b33cd5-a6e8-49b1-8a9d-f029772d2f0b"
        },
        "item": {
          "id": "bc5df888-a12d-4f1a-9b41-ecd7d8940a38",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "7324da7c-ae91-46be-9b6d-dd7262eaaaf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1728468-c454-4346-9830-5788453bb801",
        "cursor": {
          "ref": "bb646545-cc02-4749-bc56-aa470bc32131",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "a0372daf-5e6b-4adc-bd8e-fc7e6a7ed1c7"
        },
        "item": {
          "id": "f1728468-c454-4346-9830-5788453bb801",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "7533db96-e7be-453c-b98e-f42655856f1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4333c64-df2b-4f86-96ea-0520ef28eef1",
        "cursor": {
          "ref": "1058f803-a361-4c5a-83cc-c1e888f076db",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "ad604445-2ed4-439a-8c18-c6e5c1ae8e39"
        },
        "item": {
          "id": "b4333c64-df2b-4f86-96ea-0520ef28eef1",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "c0f7255f-fd3c-4730-bebe-152b4ff4aa3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45d60e19-3d7d-4b19-9666-970e0b2f6680",
        "cursor": {
          "ref": "56bb4b82-9197-496f-b85c-055b0e85c56b",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "6c030cb5-41dd-4222-9d15-775fa39ad58b"
        },
        "item": {
          "id": "45d60e19-3d7d-4b19-9666-970e0b2f6680",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "17a3881a-255f-47af-be08-cf0ea9559813",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa831c1c-017d-4623-b77e-b62ecc6a14f7",
        "cursor": {
          "ref": "db4c9da0-7b29-4214-9e51-38cb88fc1067",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "9d74fd11-1711-4e2d-86c7-6405037fe9ba"
        },
        "item": {
          "id": "fa831c1c-017d-4623-b77e-b62ecc6a14f7",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "20193e50-f1ed-4450-8cab-dcc4891b17ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 118,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43a11d76-d9b7-442e-a61b-5f276a74b593",
        "cursor": {
          "ref": "be73d9f6-f318-44e7-bb03-e033365d463d",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "81ce437b-4d64-4a57-9ed2-105507486b5e"
        },
        "item": {
          "id": "43a11d76-d9b7-442e-a61b-5f276a74b593",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "121fd88f-a049-47df-a57d-b3931fcbb0d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7026030-a23c-448d-97ea-3bf230402f83",
        "cursor": {
          "ref": "9a70c478-a6df-4e8b-83d1-1d69256c3628",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "4fb17452-6959-477c-b35a-a7065783abf0"
        },
        "item": {
          "id": "e7026030-a23c-448d-97ea-3bf230402f83",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "53507a71-1c6e-42e0-b31c-84b9d8fc93b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2563078e-e2c9-418c-9963-30327717b072",
        "cursor": {
          "ref": "3cd85cf6-c752-49bd-b3bc-4fa74f4bce7e",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "5ecdfc59-feaa-4fae-a619-4268fe557e44"
        },
        "item": {
          "id": "2563078e-e2c9-418c-9963-30327717b072",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "462f7b98-0f80-492f-9d07-24291e22fff1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db69faa4-438f-4a6d-9482-92219eb13ca4",
        "cursor": {
          "ref": "4bbc995b-d149-4506-83f9-de6cd97b9937",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "ae472c4e-275a-49be-a2e5-b6eaeca9f290"
        },
        "item": {
          "id": "db69faa4-438f-4a6d-9482-92219eb13ca4",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "cfbfe854-f327-40b0-ae31-b771dd7ddf3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6731f092-5ec1-41a8-9c72-be8208a2d804",
        "cursor": {
          "ref": "c923efd6-e3ce-46b2-a67c-44e3f3e6b11b",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "1b22f8b2-9f3f-41cf-80d1-f87ad46dbba3"
        },
        "item": {
          "id": "6731f092-5ec1-41a8-9c72-be8208a2d804",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "2b6c6a1f-ecbb-41c1-b984-cf94d674ad5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a3a06e2-09bc-4191-88e3-263a5bde4521",
        "cursor": {
          "ref": "0a12bf23-5482-4124-9f73-f7380bffb87b",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "f826dba6-3712-42ea-9add-920dc1099758"
        },
        "item": {
          "id": "9a3a06e2-09bc-4191-88e3-263a5bde4521",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "04ec2b83-f54b-4b41-b187-32dcd5e688bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44e536d3-28db-4b55-a24c-d320323cdd33",
        "cursor": {
          "ref": "8db224b2-eede-451b-b005-8383472f0678",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "fa825c02-9010-41aa-bbe7-695664334273"
        },
        "item": {
          "id": "44e536d3-28db-4b55-a24c-d320323cdd33",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "56ea7382-2442-41d3-87eb-8b9a6f7be14a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72b37195-9a74-470f-b1f2-ba353c4fb78f",
        "cursor": {
          "ref": "3fdd8aa6-ddd1-4efd-879f-743a678acc60",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "6da5509d-434d-4e42-bf0b-d33b64f34638"
        },
        "item": {
          "id": "72b37195-9a74-470f-b1f2-ba353c4fb78f",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "204b6091-285f-484e-9307-fb5ff7acc629",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f5a5646-786a-4299-8b95-adae80569ff1",
        "cursor": {
          "ref": "696cba56-b2f8-4515-9288-ebe33e227c26",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "7b27a19b-314f-47aa-8722-d7ee56ca1d5b"
        },
        "item": {
          "id": "2f5a5646-786a-4299-8b95-adae80569ff1",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "b923db7c-afae-406b-bb58-81401ddbbff3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 151,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "baa6cf33-d6a7-4493-b548-bb0517db7b28",
        "cursor": {
          "ref": "c7ac7e6e-9ee7-4f98-a0f5-fa0b42622a4c",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "fe847198-a92d-4d70-9bb6-342ce6de0317"
        },
        "item": {
          "id": "baa6cf33-d6a7-4493-b548-bb0517db7b28",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "4db219d5-aab6-47e2-83b8-e93369874046",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "392080cb-aa91-4ffe-8b2f-a09e5dbf8220",
        "cursor": {
          "ref": "abc3810d-bfa3-4145-97f9-2d934e4ae861",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "13eff34b-2a31-4d13-ad0c-d8865039b8c6"
        },
        "item": {
          "id": "392080cb-aa91-4ffe-8b2f-a09e5dbf8220",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "5e55df90-7029-4ecb-b8c7-dd49f20ac6c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9db0e1b3-c062-45a1-a01b-c9bb309dc792",
        "cursor": {
          "ref": "271ad611-56b4-4d45-9a4d-00d4806973a0",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "7f1cbd10-482c-4835-a46e-162f56acde0d"
        },
        "item": {
          "id": "9db0e1b3-c062-45a1-a01b-c9bb309dc792",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "7a9e657e-427e-4155-9019-74c88e927210",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d206dc40-ca63-4663-ac4b-beb577ed6291",
        "cursor": {
          "ref": "006b40e2-52f0-4118-8509-f486202cc8fe",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "26e78658-7cae-4c91-b0c5-83789a8c5607"
        },
        "item": {
          "id": "d206dc40-ca63-4663-ac4b-beb577ed6291",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "3691feaa-8b43-434a-8758-16471336de08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd2a1f8a-4fcd-4473-9c4e-94a92004cb20",
        "cursor": {
          "ref": "526f6bee-9e36-435b-a480-6ddb293d974c",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "192ef1c8-ac09-4ab2-9991-7e4a0d8fc2ec"
        },
        "item": {
          "id": "dd2a1f8a-4fcd-4473-9c4e-94a92004cb20",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "1c0b1599-554a-4aa6-aa86-9c3231361d2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ac7f8c3-d45f-4650-952d-c00ee11030b9",
        "cursor": {
          "ref": "32bf4813-44ff-4044-9496-11f54dd111bc",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "7a588595-531c-49ad-9793-eef565b54315"
        },
        "item": {
          "id": "9ac7f8c3-d45f-4650-952d-c00ee11030b9",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "6cac461c-31d4-4545-b7a4-b7294ff64311",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53529c34-4dd9-450e-a4c8-9e07795d1ae6",
        "cursor": {
          "ref": "d8d7f54f-0622-4dbb-990b-e02693ade6b6",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "9faeb16e-8262-45b4-ae2e-964e8e2c4f0b"
        },
        "item": {
          "id": "53529c34-4dd9-450e-a4c8-9e07795d1ae6",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "0af113bb-eaa1-443f-95e5-2c483c87124c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98fe1030-168d-4c10-a505-7c8e5cc3247a",
        "cursor": {
          "ref": "48912b16-3817-432b-8fe3-72d50a5fa388",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "beb56529-9a9d-4b1b-9cc7-5a56d99c536e"
        },
        "item": {
          "id": "98fe1030-168d-4c10-a505-7c8e5cc3247a",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "2421ce6e-c173-4b05-8723-21bbfc3eb3d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a82cbcd-0d03-42bc-a7e5-2307df713227",
        "cursor": {
          "ref": "b9893bea-0055-497b-8fe3-5a35cc81717a",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "fe6fff86-e48c-47f9-b2a7-8f6d02c5bd3b"
        },
        "item": {
          "id": "8a82cbcd-0d03-42bc-a7e5-2307df713227",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "e92ac115-1b87-484b-b446-c881e82184ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9acb49d3-1870-4175-8b56-fe6c65b523a4",
        "cursor": {
          "ref": "505ceb00-ebd5-4124-a08f-07d2f143bda5",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "9fdbc5bc-ff1a-4fe6-a685-3bc75be1b9e5"
        },
        "item": {
          "id": "9acb49d3-1870-4175-8b56-fe6c65b523a4",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "d90421dd-1f14-428d-ac4e-7090a980257e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84e0918b-4e05-45dd-a4f9-6ed92e7f9c07",
        "cursor": {
          "ref": "ec367af2-a6e9-4505-b814-123dc499b105",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "cb1606b6-0861-4d1d-87ae-3eeff1a3446b"
        },
        "item": {
          "id": "84e0918b-4e05-45dd-a4f9-6ed92e7f9c07",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "9a51ab2d-1fc6-4879-9756-4e5025ad8f20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63336236-b58d-4732-9bd5-7ee508bf4d79",
        "cursor": {
          "ref": "24bb07d0-1f00-434f-b57f-df137483f346",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "5841bb67-3bc2-47d4-8cb9-b52d5c2e8e30"
        },
        "item": {
          "id": "63336236-b58d-4732-9bd5-7ee508bf4d79",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "4d17620e-a2c6-49fa-b92e-461e794b082f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cd3fa0c-e6cb-400c-9e17-3cfcf34e5857",
        "cursor": {
          "ref": "ebdafa2a-c490-44a8-b721-e133adde5bff",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "974bacd0-87f0-420e-834b-06ea8ed196a1"
        },
        "item": {
          "id": "7cd3fa0c-e6cb-400c-9e17-3cfcf34e5857",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "2f379433-20b5-4e7d-be40-4ad544bd2037",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46cf37be-558d-464d-91e4-7a205b2be6b3",
        "cursor": {
          "ref": "7769b84f-1294-499a-9c2d-4e285cc3fab3",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "3fb7b05a-aecb-45f0-9fcf-4ef8f90c57ef"
        },
        "item": {
          "id": "46cf37be-558d-464d-91e4-7a205b2be6b3",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "37fa85b5-c414-44b5-85e4-e9debc6b19c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58aeabc2-0e1f-42d4-a5ea-bbb6e8c9222e",
        "cursor": {
          "ref": "566c766e-65d6-4e3c-9641-274828b15235",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "eece24ff-f4f3-4d69-9422-73663778c8f3"
        },
        "item": {
          "id": "58aeabc2-0e1f-42d4-a5ea-bbb6e8c9222e",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "f0c5babc-3e90-4a23-824a-163fefcbd629",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d72676a-5481-4deb-afa3-d67052d9eba7",
        "cursor": {
          "ref": "1d29e4a2-47dd-4371-ba5f-5e148a18e373",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "d078a684-0ee8-42a7-adbd-3ba10d88d70d"
        },
        "item": {
          "id": "5d72676a-5481-4deb-afa3-d67052d9eba7",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "35c93700-6c4d-4497-9ad6-ad6f075598b1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 115,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "13d73cd3-5398-44fb-9088-bb80f44d3a9f",
        "cursor": {
          "ref": "45678a56-8852-4926-b260-6775cd14845c",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "9c17aab0-8722-464f-b24d-f4f8960530c3"
        },
        "item": {
          "id": "13d73cd3-5398-44fb-9088-bb80f44d3a9f",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "e48b1509-db71-4ff6-84a8-e56da52b661b",
          "status": "Created",
          "code": 201,
          "responseTime": 2198,
          "responseSize": 774
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "a2a3825d-22e7-4bc1-84b9-145e3b0c5de5",
        "cursor": {
          "ref": "7bbe507d-b5d5-47be-8804-b8bb73c30dec",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "e2b15729-d746-4ad5-8b0b-6254d81e2cf5"
        },
        "item": {
          "id": "a2a3825d-22e7-4bc1-84b9-145e3b0c5de5",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "c6337ac2-6416-4a95-a583-7322bf3bcb59",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 112,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "db89e6aa-847a-4ec0-a7b3-f957649e2037",
        "cursor": {
          "ref": "28414e01-15d1-4324-b032-96f476e83e0e",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "a6feee1b-ff17-4ddd-bad7-ab8ed981cee4"
        },
        "item": {
          "id": "db89e6aa-847a-4ec0-a7b3-f957649e2037",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "5a86c7cd-5d12-43f0-b218-acaf41ef6be0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 110,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9efbfc8e-619c-40f3-8299-56bd4cdc6f1f",
        "cursor": {
          "ref": "0e41952d-1629-4439-b2be-a49ca6d234f8",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "dd2c5c38-e518-43f9-9b02-00e33287bd94"
        },
        "item": {
          "id": "9efbfc8e-619c-40f3-8299-56bd4cdc6f1f",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "855ad29c-5b34-4de0-9d1e-52397bf9fb44",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 103,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "581016de-eeef-4a2d-8f20-41d618ed8f1f",
        "cursor": {
          "ref": "92e29c82-efca-4c76-994b-4eda9fec689d",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "3a14e4f1-da65-4767-925a-49445a9adedb"
        },
        "item": {
          "id": "581016de-eeef-4a2d-8f20-41d618ed8f1f",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "6f09d88b-9266-4768-b8ef-c26867f3d3be",
          "status": "Created",
          "code": 201,
          "responseTime": 1171,
          "responseSize": 763
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "6dc018f2-d25b-482d-ad28-3a3a73051536",
        "cursor": {
          "ref": "6af90961-b84d-42dd-9fde-94289cfee470",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "152b6da6-19cd-491e-b1e7-1384c6a7bba2"
        },
        "item": {
          "id": "6dc018f2-d25b-482d-ad28-3a3a73051536",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "3537e4fd-a7d1-4672-beac-8fa1631c1042",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 106,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "56e0a00c-160d-4849-a4c2-2fa7c3a04747",
        "cursor": {
          "ref": "bdaf2d61-bfa3-457e-9e9a-b97037602eff",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "0a0548dd-a08d-4724-b403-5f25ffce20f0"
        },
        "item": {
          "id": "56e0a00c-160d-4849-a4c2-2fa7c3a04747",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "90e3663b-5408-46ca-923d-37001196ca7e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 926,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "7883f22d-ecd8-477b-8849-dc7ee1e29eff",
        "cursor": {
          "ref": "3a10f1b3-ebc2-4ae1-b4ad-f2d66367102a",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "0c0df45b-f1a0-492d-8584-759ea11496a7"
        },
        "item": {
          "id": "7883f22d-ecd8-477b-8849-dc7ee1e29eff",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "4a0a1845-fd62-40b9-8489-d07e6a12648f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 104,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "f9bfc2e0-7fe3-4c11-92e5-504d28b36918",
        "cursor": {
          "ref": "6512ccf1-c709-4552-996f-90c3804d6cdd",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "8da20f35-f300-4d52-a181-56ba20e11b9c"
        },
        "item": {
          "id": "f9bfc2e0-7fe3-4c11-92e5-504d28b36918",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "8c02e0cc-7687-453e-b24d-b75e8727be59",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 120,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "fa73479e-bc5f-4eb7-9ca4-7b0278880855",
        "cursor": {
          "ref": "2d72d3b1-ab2c-44a7-950a-865d7ba243d5",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "d2d7c814-23c7-44c3-af73-5d57d4e3f2a0"
        },
        "item": {
          "id": "fa73479e-bc5f-4eb7-9ca4-7b0278880855",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "e7cd0ff3-bd1c-48b5-92ac-114683e7fb5a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 108,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "1a93f14e-e248-41c2-a180-0b387b86eb98",
        "cursor": {
          "ref": "bff57628-ffaa-4b81-9997-041ffefbfcb9",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "6f65ec56-b1f5-4d21-a018-f54aa80ec0a1"
        },
        "item": {
          "id": "1a93f14e-e248-41c2-a180-0b387b86eb98",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "b7bfcc21-dd30-4707-b95d-e7033d05d055",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 100,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "a95dc103-d988-410b-a79a-501e326cd600",
        "cursor": {
          "ref": "da3519ab-10ba-4525-990c-78dd153be828",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "643c9c3b-c499-46a6-851e-2f977af325e0"
        },
        "item": {
          "id": "a95dc103-d988-410b-a79a-501e326cd600",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "70a470ed-3cbf-4cb8-bb1f-c9127f988f91",
          "status": "Created",
          "code": 201,
          "responseTime": 1085,
          "responseSize": 770
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "0cebc1eb-c76e-4313-9fb4-9d4b0652a119",
        "cursor": {
          "ref": "f2e5988b-f0d8-4b48-931d-561fb05e2715",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "9ffb6ecc-7389-4d72-b2b5-84393d08b891"
        },
        "item": {
          "id": "0cebc1eb-c76e-4313-9fb4-9d4b0652a119",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "74f29913-82f7-4f5e-a464-58e1d2e2d87f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eab620f7-05dd-422e-8190-52b0a9ec7c04",
        "cursor": {
          "ref": "69ccb63c-c3cc-4c0e-bfd5-6945b0251ee6",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "6b89696d-5add-4e48-b174-eb64a055a540"
        },
        "item": {
          "id": "eab620f7-05dd-422e-8190-52b0a9ec7c04",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "fc617ed1-d8ac-4179-a6b0-ddeadc320b24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6668721-0be7-44b5-bd69-f846962f7832",
        "cursor": {
          "ref": "2e1a02b7-b1f8-456b-9140-1f6b185790c5",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "bf607042-94ea-4e6c-a6be-aa51a4b10cc6"
        },
        "item": {
          "id": "b6668721-0be7-44b5-bd69-f846962f7832",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "6e558c40-3c28-499e-8d43-e6964cf54ff4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a279b04-dc21-436a-9512-1d2468f222a7",
        "cursor": {
          "ref": "c76fd4e2-4ed3-4a54-a459-d564f8a2f499",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "8f7fafc3-f222-43e2-ba1d-d5aa77d8e4b5"
        },
        "item": {
          "id": "9a279b04-dc21-436a-9512-1d2468f222a7",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "2b6fd531-9c86-44b3-aabe-97c674dc6aa8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b92601c1-81ef-43d3-9e5a-bdcdab1a7618",
        "cursor": {
          "ref": "ea1b7243-f902-422f-9a31-0581e1b087a3",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "517fe871-f21d-451f-9542-58ab1ea96193"
        },
        "item": {
          "id": "b92601c1-81ef-43d3-9e5a-bdcdab1a7618",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "d4a5aa81-1c97-4c50-9ead-05bf55762cc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7105a64-5288-4062-a44a-2878f84fc8c2",
        "cursor": {
          "ref": "c1570b54-e699-4c5d-9af4-aa65b6589c96",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "f8ae4018-ea02-421a-bde2-e12b9ab44a58"
        },
        "item": {
          "id": "b7105a64-5288-4062-a44a-2878f84fc8c2",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "293ba1c9-3ed2-47dc-80e4-a5fe85848c8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "775a8823-a17f-4d1c-8746-ff13f71a9363",
        "cursor": {
          "ref": "a2486202-fc36-4ef2-aa08-33f2722879ec",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "d471e914-027b-4691-8221-1236a146e052"
        },
        "item": {
          "id": "775a8823-a17f-4d1c-8746-ff13f71a9363",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "bca20da2-6abf-4421-81cf-48cb20300ed0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65d75ad0-6452-4de3-b36e-ddaf76872493",
        "cursor": {
          "ref": "464ffee5-91cc-4a8d-9185-0f0e2b708a5c",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "d63f1f74-46f4-46fb-bda4-16d360ce7789"
        },
        "item": {
          "id": "65d75ad0-6452-4de3-b36e-ddaf76872493",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "ce28bb34-7ada-47ae-8c09-18538f22ed3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bf550a1-9682-46f9-b4e4-672643c42dbd",
        "cursor": {
          "ref": "f5ff528c-9ec0-484a-a352-13fd7bd8f395",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "db4336d3-7e29-4791-a741-2e3349f9fc88"
        },
        "item": {
          "id": "3bf550a1-9682-46f9-b4e4-672643c42dbd",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "dc7ee666-12c9-4751-b94e-3ad6f5b56b2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "587ded1d-6ad4-4784-b9bf-6e1ee68298ed",
        "cursor": {
          "ref": "0c08a0ba-ebc1-4706-b6d9-d1785bd5035e",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "f4483c4f-db81-4ad0-ae6b-328965e48d43"
        },
        "item": {
          "id": "587ded1d-6ad4-4784-b9bf-6e1ee68298ed",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "857aae81-13c3-4bb1-8194-a950d9a3113d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8f5843c-2702-4aae-94b6-06bd4b738e10",
        "cursor": {
          "ref": "c30c2a91-3baf-4c38-a7e1-c72e8f152cc7",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "ff16f57f-a402-41d1-814d-02ee05a99d2e"
        },
        "item": {
          "id": "a8f5843c-2702-4aae-94b6-06bd4b738e10",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "e9f98e0d-fc20-428e-bf59-4ebb46d0f251",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45d72749-0069-4c83-9901-e09675287a24",
        "cursor": {
          "ref": "e0fd947c-771a-4578-89ff-0b5e5195022e",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "b35e483f-8b14-438c-b771-8d9597ec4429"
        },
        "item": {
          "id": "45d72749-0069-4c83-9901-e09675287a24",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "595e45de-d258-41a4-9670-cf77f9b85c91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "953749d1-bf4a-4a27-ae63-887be1f54264",
        "cursor": {
          "ref": "2255b399-a6a8-4802-8c33-ee6d3ddd6431",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "4c1c127a-c2da-4965-a0f3-d75e2988a507"
        },
        "item": {
          "id": "953749d1-bf4a-4a27-ae63-887be1f54264",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "ae6b659f-5e89-4c7a-ad69-7fceb8714ec4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 110,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f024ab3-ac9d-4bfb-a251-cc2b52d76f45",
        "cursor": {
          "ref": "ae214950-21e0-46c1-8b15-796ef301d4b9",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "4e04dcbf-67e5-4ad6-a553-40595d507f40"
        },
        "item": {
          "id": "2f024ab3-ac9d-4bfb-a251-cc2b52d76f45",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "74f1b61b-d9ef-4314-b66b-41925a83e3a9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 706,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "26872c26-50ce-4cbf-a1a8-8fb4da808ee1",
        "cursor": {
          "ref": "210c8368-86e3-49ad-a4d5-cb2fd5c4fe97",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "fdf74e7c-4b4d-4836-bced-bb3eced2086c"
        },
        "item": {
          "id": "26872c26-50ce-4cbf-a1a8-8fb4da808ee1",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "b7ac5ed1-58ad-4652-9175-a28d965b26d9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 1110,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "9e5743e6-a26d-4acd-86ae-f5ce30898f3b",
        "cursor": {
          "ref": "b4820f76-f6f4-4bd4-b7e7-4178f1a7f18b",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "f005a2b2-ad2e-4b65-b3f2-8d9b98f3ad7d"
        },
        "item": {
          "id": "9e5743e6-a26d-4acd-86ae-f5ce30898f3b",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "35b69c7f-5460-4a18-823a-b5528a926a8a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 104,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "d639301e-2987-4e47-8940-84e366e36a99",
        "cursor": {
          "ref": "7fdccf85-1020-4f88-b963-aaad6fc1c4b7",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "2d6fb41e-e286-46c0-a1ca-6c734fa913d0"
        },
        "item": {
          "id": "d639301e-2987-4e47-8940-84e366e36a99",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "7540f3cf-13bb-4f8f-92d4-b9a3874fb5b4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 711,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "42bb3dc7-1d29-4ca3-b364-92051dca88a1",
        "cursor": {
          "ref": "f3f70c64-e47d-4ad6-b0f1-54ec28901e8e",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "33f0b9be-aa2c-45ea-957a-6add185ec073"
        },
        "item": {
          "id": "42bb3dc7-1d29-4ca3-b364-92051dca88a1",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "f4d83c83-4fa7-4e7f-93c5-871503c7a007",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 100,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "8bd23715-94e2-469d-98c6-1d5861bd17b4",
        "cursor": {
          "ref": "17e020ed-6583-44cc-b195-f5116df83bf7",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "d708e1dc-6484-4dd2-9a50-21ef0190cf2b"
        },
        "item": {
          "id": "8bd23715-94e2-469d-98c6-1d5861bd17b4",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "218c567f-2ed3-46bc-979f-07c4a6bee2ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 111,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4eb676f1-0259-4e38-b869-b701a05354a3",
        "cursor": {
          "ref": "e9b00cce-0077-4219-adc2-19e1e2f6ee67",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "f06b2d68-9622-43a0-a947-463dd0bae3ae"
        },
        "item": {
          "id": "4eb676f1-0259-4e38-b869-b701a05354a3",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "dd9f6d88-a0a1-48bc-8c13-7faf7636d21d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7b07e0b-4185-41f4-a3c4-52e0a250119e",
        "cursor": {
          "ref": "e32a7bc4-0012-409a-adad-84bfaf3ac5fe",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "fb7cceb3-6d29-4e71-b8f6-8a6112c53b10"
        },
        "item": {
          "id": "a7b07e0b-4185-41f4-a3c4-52e0a250119e",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "10cd752f-7a92-49ac-abd8-f5d19280fc60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33dde7a5-9a50-441d-8c94-6baaba6bf0b9",
        "cursor": {
          "ref": "58b036bf-0e35-4b3c-b5cd-0b6b541b2f3f",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "66feab22-75e4-4aef-a530-0a59f024f321"
        },
        "item": {
          "id": "33dde7a5-9a50-441d-8c94-6baaba6bf0b9",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "ec66c7e1-ca0c-48dd-90c4-47a296082db4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1f59099-b3f1-4bd0-845c-90782de45f18",
        "cursor": {
          "ref": "fd8d1112-ded9-42af-904c-7442000912ef",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "d75a49f6-5c7d-4b4f-88d9-c43b8a2ce8f3"
        },
        "item": {
          "id": "a1f59099-b3f1-4bd0-845c-90782de45f18",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "46430a91-f0ad-4dcb-b07e-d4c547092344",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 118,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2dbb78b0-13de-4b22-88e3-63000303bdf2",
        "cursor": {
          "ref": "bd7cfdfe-a7ec-4dbc-81f5-83250748bb32",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "8f03c118-6e49-4e62-a07b-b1f0fdb9c100"
        },
        "item": {
          "id": "2dbb78b0-13de-4b22-88e3-63000303bdf2",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "f5abf06a-4d4b-4af9-826a-69533d07de8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7689a09d-edca-4023-99a6-4001c319ead0",
        "cursor": {
          "ref": "8e060ab8-8938-4ab7-ba41-9a07710e9429",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "7c0bc66f-96ea-4732-ad34-291428bc0682"
        },
        "item": {
          "id": "7689a09d-edca-4023-99a6-4001c319ead0",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "851dca46-3838-44e4-8544-eb85ba3c219f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78b89024-7d81-4101-8c14-a9090d470e2b",
        "cursor": {
          "ref": "e9342c89-0194-484f-8e0e-4d4d44035bce",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "0e6e697d-c41f-4687-b061-79acb3845a7f"
        },
        "item": {
          "id": "78b89024-7d81-4101-8c14-a9090d470e2b",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "08b7a211-5a9c-4cce-b456-ccdcbb8c4b7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee127320-a7e9-47a9-ba64-9a89348c4a2d",
        "cursor": {
          "ref": "75f2491d-5513-4c08-bef4-ccd25344c8d3",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "8796e194-b0ef-4bf8-bbb6-37e793370c80"
        },
        "item": {
          "id": "ee127320-a7e9-47a9-ba64-9a89348c4a2d",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "c84c5cd4-2787-4b10-88ca-884938904d20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2368abe9-fd11-4013-a139-710f2b0f5e9e",
        "cursor": {
          "ref": "e92cc096-37d3-4949-b68e-a3fbdb36bf7b",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "65f5f45c-097a-4832-80bb-c8aaf4de3d60"
        },
        "item": {
          "id": "2368abe9-fd11-4013-a139-710f2b0f5e9e",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "2c52d9c4-28ee-4909-9007-6b068825b673",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21375747-dc66-4df9-b5ca-6a28950698bb",
        "cursor": {
          "ref": "bad0d10b-60a1-4876-8e36-2886178db9ef",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "3e5cd8ae-5b53-442a-8220-5a39933573ca"
        },
        "item": {
          "id": "21375747-dc66-4df9-b5ca-6a28950698bb",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "5cc45489-6de3-466f-a9a8-93fff6cba529",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe852c7f-c60c-4a15-a6ac-ddf4c90eead7",
        "cursor": {
          "ref": "ef86e288-e6c7-4d0e-87b1-c1a109220686",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "a5e64730-6de2-41f0-aaf7-c552eeea9634"
        },
        "item": {
          "id": "fe852c7f-c60c-4a15-a6ac-ddf4c90eead7",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "b8b40e19-da08-4fcf-bc47-dc2d211d102e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 116,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0242907d-23a9-4023-9eb6-0ec7e964f7ed",
        "cursor": {
          "ref": "bb3fc576-a2cf-4783-9401-c5f46360a642",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "d0a768b4-91e7-497e-b631-bae7a5864ff3"
        },
        "item": {
          "id": "0242907d-23a9-4023-9eb6-0ec7e964f7ed",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "945c569b-005c-4790-a0f7-4b7d2cdb7389",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d40d7c6e-fe93-4fe2-8c2d-13e00b0cafb6",
        "cursor": {
          "ref": "afb6f013-506c-4814-8f6b-9d57173bcca1",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "92cd6cb7-0466-453e-82af-1a5c6934a611"
        },
        "item": {
          "id": "d40d7c6e-fe93-4fe2-8c2d-13e00b0cafb6",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "91bc9910-83df-4076-ab0c-11ff762b595c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7d80274-c946-439f-9bfe-8233f952253d",
        "cursor": {
          "ref": "591a6ece-c1b8-4c44-aa6d-11149279af12",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "24708207-1cbc-4e56-8230-fc868e2b8559"
        },
        "item": {
          "id": "f7d80274-c946-439f-9bfe-8233f952253d",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "cc0c3285-cad5-4df2-877d-81fb800cb234",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aad9b1da-8bd0-46e1-984a-509991544769",
        "cursor": {
          "ref": "08c6bb97-81c9-4f46-8073-5c2a5b61b93f",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "a3c7804c-0ac2-4991-8067-b03711ef3725"
        },
        "item": {
          "id": "aad9b1da-8bd0-46e1-984a-509991544769",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "a58935de-ac51-4218-a239-dfb78a70566a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b719181-e6b6-457d-b71f-1a1edfe07ea3",
        "cursor": {
          "ref": "e189c905-e897-4733-bdf7-7d8f036fa83f",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "60fb53ac-189e-4a2b-a2f7-309b2dcfbf1a"
        },
        "item": {
          "id": "4b719181-e6b6-457d-b71f-1a1edfe07ea3",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "51f8e68d-a924-45ff-a9c8-880b8c760e74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06572259-6af6-497b-8f4f-0c55e6a3068e",
        "cursor": {
          "ref": "8846b621-b625-4d81-b2ca-e0989c44c5cb",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "8cb5ccdb-8ef8-4edf-a7c8-26c6d962b06f"
        },
        "item": {
          "id": "06572259-6af6-497b-8f4f-0c55e6a3068e",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "60be9fd9-e745-48ba-98e1-dfd16c1bdcbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "baa5d52b-d995-4cc5-a4fe-220fa650211b",
        "cursor": {
          "ref": "6ede6294-f2ed-4f4a-a627-f39b9177b8d9",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "2571933e-acff-48c2-b27a-18230c620072"
        },
        "item": {
          "id": "baa5d52b-d995-4cc5-a4fe-220fa650211b",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "ca815917-6b7b-4051-a302-e4532daaa8a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 110,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90d67d7a-e8bc-41cb-a291-fbcafc25b946",
        "cursor": {
          "ref": "6d97c547-ab04-4701-b3cd-fdd6f865bf72",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "60d581bb-e695-4cc5-a31e-4fe34efc2612"
        },
        "item": {
          "id": "90d67d7a-e8bc-41cb-a291-fbcafc25b946",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "d74ccf79-ed9c-448f-9293-526ddc10d814",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f2bb23b-f8a3-4c64-9c50-cbc17cdc5069",
        "cursor": {
          "ref": "6bd3700c-ae88-4016-8331-0554707b6489",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "f05c5574-573a-4e75-8a9f-da50131e5fe7"
        },
        "item": {
          "id": "5f2bb23b-f8a3-4c64-9c50-cbc17cdc5069",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "35e5f296-3a1b-4650-808e-1212349e69a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6242218c-3052-41d6-98a4-dbc0d3ebe568",
        "cursor": {
          "ref": "bcd3fab3-93f7-4c90-8aae-93504b5803b2",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "707dfd95-74eb-45aa-b48a-434cd86d44cc"
        },
        "item": {
          "id": "6242218c-3052-41d6-98a4-dbc0d3ebe568",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "669c9d24-0a78-4734-9a11-52b1bbbaccbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3afc7aa3-8c18-4ec5-9fd3-9caefec1c5c3",
        "cursor": {
          "ref": "6a27981e-29d3-452b-a7f6-ce458d930401",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "5459d3db-8781-4285-8cdc-2a3ba75b2a39"
        },
        "item": {
          "id": "3afc7aa3-8c18-4ec5-9fd3-9caefec1c5c3",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "8ab7f59f-7a87-4b21-9882-a87354257e9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 113,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e433612-1f36-4498-bd53-a1544c200451",
        "cursor": {
          "ref": "2cd7b09c-32c3-4fea-a602-994d2562b097",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "d9a444e8-a9e4-49fd-beba-846f9c0d0e20"
        },
        "item": {
          "id": "3e433612-1f36-4498-bd53-a1544c200451",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "e48d0f61-aeb8-4f79-b1e5-4a4f94a3b1ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e87ab03c-0e54-471c-ad38-be1ea03c6627",
        "cursor": {
          "ref": "67c92321-2fd4-4431-a91f-d945b4cc1199",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "0b3b2e25-497c-4a2f-bc81-854294372af8"
        },
        "item": {
          "id": "e87ab03c-0e54-471c-ad38-be1ea03c6627",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "96c9f84d-9a9d-4933-8b43-eac255b5d80f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b97096b-e85a-4030-9751-cbe6ae3087ce",
        "cursor": {
          "ref": "80523111-f169-424f-9fda-2cf31c59b7c7",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "aa8eff11-ae1e-4d3a-a44c-2be7e944c40f"
        },
        "item": {
          "id": "0b97096b-e85a-4030-9751-cbe6ae3087ce",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "e0c80248-a5fb-4225-92a8-b90a572d23a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9f65335-b3d3-4e6b-85de-d794613fc4cf",
        "cursor": {
          "ref": "012cff11-add6-4fad-be01-83a00d85b0db",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "24b61cd4-0ca0-488e-8199-77efb985dca8"
        },
        "item": {
          "id": "f9f65335-b3d3-4e6b-85de-d794613fc4cf",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "e6298c86-fdd6-4899-aaf7-c30076ced08b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a425b5a-0f05-4b1f-a3d2-212cf2d08319",
        "cursor": {
          "ref": "1fee6c5d-a02d-47a8-9364-eade53b5dbc5",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "a34c8676-85ed-46ff-9337-d29d3a2c1572"
        },
        "item": {
          "id": "9a425b5a-0f05-4b1f-a3d2-212cf2d08319",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "2bf057bc-27ea-445e-b066-bee79f9abd73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6dd0911-b7c1-43f6-92de-cc2edf715138",
        "cursor": {
          "ref": "397daf46-5acb-420d-bfb1-7bd163279c77",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "bbb2daff-509f-4db9-a646-fc0610879f05"
        },
        "item": {
          "id": "e6dd0911-b7c1-43f6-92de-cc2edf715138",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "5382d654-44a7-4e45-9d50-3e1714e5c3e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3cd5279-2947-42dd-b84e-363f75f75f23",
        "cursor": {
          "ref": "60d0bd26-e7f7-4911-8741-4915deb99cdc",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "6de9c9e0-1a40-48ba-97b1-86340e8f1957"
        },
        "item": {
          "id": "f3cd5279-2947-42dd-b84e-363f75f75f23",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "112ef260-bd5a-435b-8fb7-9e0d37c10170",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5d5e6da-4c20-4b5a-a2a5-2e8599bb2bd7",
        "cursor": {
          "ref": "e90a63bd-2eb1-4349-8912-1e799608cfeb",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "112b6e5d-71c3-431d-be18-d089e9f8c771"
        },
        "item": {
          "id": "a5d5e6da-4c20-4b5a-a2a5-2e8599bb2bd7",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "c39f48e0-35df-4c3f-945f-99ffafaa6dc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de9290ef-1f59-43d5-96c8-a56a84290ecd",
        "cursor": {
          "ref": "83c8cb6a-f954-463c-9cb2-0bc51c7d92c8",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "41c77c49-33f7-468d-941e-8c6b8cba7f2f"
        },
        "item": {
          "id": "de9290ef-1f59-43d5-96c8-a56a84290ecd",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "4c3eb154-ba4a-43f7-aba4-af88fe6ece58",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 85,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9a7e219-7178-403f-a1bd-09cdc1708742",
        "cursor": {
          "ref": "17d00cc9-4d48-4613-9eec-ceb3e86c3db9",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "4a830318-c694-4436-acac-94ce355792eb"
        },
        "item": {
          "id": "f9a7e219-7178-403f-a1bd-09cdc1708742",
          "name": "credentials_issue"
        },
        "response": {
          "id": "aae478b9-735a-4266-8f77-b468a5605181",
          "status": "Created",
          "code": 201,
          "responseTime": 1141,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "45ee70d4-4a90-41c3-8308-33da2047025e",
        "cursor": {
          "ref": "f0fc3008-7a6a-4817-868e-e4677c6df24f",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "3ec5e39d-e373-435f-9329-7e4b6dc0d418"
        },
        "item": {
          "id": "45ee70d4-4a90-41c3-8308-33da2047025e",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "4779de34-6ab2-4224-8c21-6ecdcfe381e5",
          "status": "Created",
          "code": 201,
          "responseTime": 1048,
          "responseSize": 714
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "d62286f2-d3bb-4939-843f-84ee65f3c9e4",
        "cursor": {
          "ref": "ed3c6ca2-9d25-4674-90ba-60e3051fc286",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "40bd9ea8-5b4d-45d0-8355-9c47c84c5243"
        },
        "item": {
          "id": "d62286f2-d3bb-4939-843f-84ee65f3c9e4",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "89a15693-c266-4429-8440-88df97f1999c",
          "status": "Created",
          "code": 201,
          "responseTime": 1031,
          "responseSize": 767
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "830ba038-7e30-43a3-890d-e1ecb7b7d625",
        "cursor": {
          "ref": "85c94ee1-39cd-4f9c-8e0d-ce4d7919d1ab",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "548a98d8-c2fb-45c7-8fb2-07573f1a1463"
        },
        "item": {
          "id": "830ba038-7e30-43a3-890d-e1ecb7b7d625",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "352b753e-f1bf-42d0-970f-e4d45d66b335",
          "status": "Created",
          "code": 201,
          "responseTime": 1077,
          "responseSize": 771
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "e27a2a2f-4b71-4670-9222-e980c8452691",
        "cursor": {
          "ref": "cb89f7c1-7318-4217-b073-1cdf28bbed46",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "84082ff0-827e-49d3-97dd-63af1380416c"
        },
        "item": {
          "id": "e27a2a2f-4b71-4670-9222-e980c8452691",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "af684c4e-bfe0-4076-a465-83fc161b1bf9",
          "status": "Created",
          "code": 201,
          "responseTime": 1497,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "89455ed4-1d93-4807-9113-89253a8d84ce",
        "cursor": {
          "ref": "58cdc29d-0a31-4f16-b19b-b2edf1dd77fd",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "ba88094b-b95c-4439-9ef4-b7f24883021c"
        },
        "item": {
          "id": "89455ed4-1d93-4807-9113-89253a8d84ce",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "961c0d1f-f0f0-415c-81e0-ec503dc1b03e",
          "status": "Created",
          "code": 201,
          "responseTime": 1068,
          "responseSize": 1093
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47db8b0e-8452-4884-a7fe-fb60efc5d944",
        "cursor": {
          "ref": "fc439f92-30a6-4860-8031-b2f932ade4a1",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "7fef2a0f-7190-447d-8185-17d14845ab1c"
        },
        "item": {
          "id": "47db8b0e-8452-4884-a7fe-fb60efc5d944",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "2eb6c929-d45a-4b97-9bcf-e22dcbf5c7f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6ce9e52-5cfb-4501-b16c-df8c31bb1694",
        "cursor": {
          "ref": "8843c35f-06d5-4dca-a957-94cce8020d9d",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "0135b6e9-c3b7-4a76-b1ad-572ebe3d2473"
        },
        "item": {
          "id": "a6ce9e52-5cfb-4501-b16c-df8c31bb1694",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "e7cdd174-2d7a-4ad2-9fea-17d03fae4abc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 112,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4990edb-8fb6-41ae-994a-387c2517c1cd",
        "cursor": {
          "ref": "dfa5fb67-2a6e-4c49-99fb-06360a1b8c99",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "9af6be1d-fc76-4fed-9ec3-697c0f2bf18f"
        },
        "item": {
          "id": "f4990edb-8fb6-41ae-994a-387c2517c1cd",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "ad72ce4b-a04f-4e7c-8760-e8e145918de8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9cdf37b-9407-4289-ae1c-371c6f9fb2bd",
        "cursor": {
          "ref": "3248c54a-e41a-40d3-8d50-dece58b7ce14",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "12ec8c1a-9879-4b59-aabd-76c6c24aec8c"
        },
        "item": {
          "id": "d9cdf37b-9407-4289-ae1c-371c6f9fb2bd",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "6c4d1fba-add2-4396-b376-69ab91569bcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d0c524d-98fc-435c-b071-8bb90af82527",
        "cursor": {
          "ref": "c395d16b-3a00-4acc-9b2f-e0b924aa76b7",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "bc8463cf-ce40-4859-b9e0-1eeac0a07539"
        },
        "item": {
          "id": "9d0c524d-98fc-435c-b071-8bb90af82527",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "bfa4fb97-7ad2-40c3-8361-765103f8b497",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14f08f0f-3108-4fb0-9a3b-0566698ba1b9",
        "cursor": {
          "ref": "9aeda574-4560-414f-b3ef-7af62804e073",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "6dd2d142-3777-4001-8111-2e99bc47c440"
        },
        "item": {
          "id": "14f08f0f-3108-4fb0-9a3b-0566698ba1b9",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "8fad5194-a78f-4d54-8989-24fe3159c1b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11cb2d86-4b99-4728-953c-c52618a0e0d0",
        "cursor": {
          "ref": "66619428-f841-478e-b834-c8d280966096",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "d490be20-e981-48ae-bb41-8e672f48ae52"
        },
        "item": {
          "id": "11cb2d86-4b99-4728-953c-c52618a0e0d0",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "79da3f4e-96d2-4362-bbd9-301f6d5f0560",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce241b77-736e-4c4b-b5c7-2ebdb4a0335a",
        "cursor": {
          "ref": "7bbfec65-f861-4073-b859-127cb938fb63",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "0d2066b8-35b0-40d6-a1d4-595e273b8969"
        },
        "item": {
          "id": "ce241b77-736e-4c4b-b5c7-2ebdb4a0335a",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "b1f75206-498f-4494-9e91-709825664ff3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ed3dc61-5c58-4d30-8eb7-5d08404f25c9",
        "cursor": {
          "ref": "8c22c225-cd46-4d79-8787-7ef24913a2c3",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "c36d805b-1b6b-438a-8886-1f8eb3e0de9e"
        },
        "item": {
          "id": "0ed3dc61-5c58-4d30-8eb7-5d08404f25c9",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "79ffd86c-e1d3-41ce-8ef6-c5d6a4708610",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb80540c-5b1c-4b01-b69a-af3f74fa97d8",
        "cursor": {
          "ref": "ec2f4a3c-6a4e-436a-a437-89e2c31455d4",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "cc395dd4-8c60-4fef-8615-2f26adf3774b"
        },
        "item": {
          "id": "eb80540c-5b1c-4b01-b69a-af3f74fa97d8",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "abd664a7-9e56-4d6e-ad3e-f020e58df557",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64cf3317-dd27-4d68-a58b-032f92dd9d4a",
        "cursor": {
          "ref": "eb3045f6-7b50-4672-911d-930439a1c16e",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "ab1a4ad4-6ad2-4a3e-aba0-71cc5ccee20f"
        },
        "item": {
          "id": "64cf3317-dd27-4d68-a58b-032f92dd9d4a",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "17e49805-7e92-410c-a8d0-c729b78df806",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72e7799c-3d0e-47c5-9f2c-dc6d2581f71f",
        "cursor": {
          "ref": "1893333f-be8d-4e51-ae01-91a3802c0cf5",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "3a94c486-cf26-4404-aa91-74adbbb39e0e"
        },
        "item": {
          "id": "72e7799c-3d0e-47c5-9f2c-dc6d2581f71f",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "b1de8a91-6a32-4fd0-b4b7-1eeafaaa11d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50f0baaa-bcf4-4373-b900-3180e7a5ae1b",
        "cursor": {
          "ref": "ed7cc514-c81c-4c94-8e68-167918808ed1",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "4d08dc18-fb7e-4ae7-819b-8a0fb922a84a"
        },
        "item": {
          "id": "50f0baaa-bcf4-4373-b900-3180e7a5ae1b",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "c3205720-b049-4781-8286-64db1a464338",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df7d9a6b-ddeb-4d72-9d66-26a2ec50505b",
        "cursor": {
          "ref": "f0bab283-4a6c-4e3b-bc07-72f1d64d196c",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "615cc054-ce19-41f4-99e4-dd6e1891024a"
        },
        "item": {
          "id": "df7d9a6b-ddeb-4d72-9d66-26a2ec50505b",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "195e1031-f68f-4403-b606-603aa4af0565",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab546456-1d55-4bf3-929d-c5fdd7d9985c",
        "cursor": {
          "ref": "36917e5c-74ab-4125-9870-d15990d7d89a",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "62f45120-5271-4342-be81-cda937a9041f"
        },
        "item": {
          "id": "ab546456-1d55-4bf3-929d-c5fdd7d9985c",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "ad175de2-3fe3-4fd2-9c87-d518ad306762",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6886521-8776-428e-9b9a-f07c3c804dd4",
        "cursor": {
          "ref": "578b0828-4a3c-4efd-8b46-96202ca4b1a5",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "f3d9cd85-2e81-4271-9518-ca28746a1bfb"
        },
        "item": {
          "id": "a6886521-8776-428e-9b9a-f07c3c804dd4",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "20c0c5d1-d0bf-4885-9ab1-97b73c30cdca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc48fa7f-ae8d-4976-a1e1-207b40369f5f",
        "cursor": {
          "ref": "012dfdeb-a850-45d1-a1a5-25f0670c997d",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "7cdda76a-5edf-480d-9fd4-e66e8a0902ad"
        },
        "item": {
          "id": "dc48fa7f-ae8d-4976-a1e1-207b40369f5f",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "db276e45-6bf0-4262-839c-c0fc349efc68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85781ed6-1b03-4a79-9142-c66ad4f38067",
        "cursor": {
          "ref": "96e0b0cb-6e5f-4276-8f2e-4addfd4573a1",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "bb64a203-62ac-46cc-84ab-59625d7035e3"
        },
        "item": {
          "id": "85781ed6-1b03-4a79-9142-c66ad4f38067",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "583aa7a5-6fca-4274-97fd-9625e6ee332c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9b641ee-7b89-4f44-9501-64a8671ff1a6",
        "cursor": {
          "ref": "187162d0-ab0c-4789-ac17-6ff8759c2ee5",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "60be4ade-f504-4cab-b674-c55a08eb8a1d"
        },
        "item": {
          "id": "d9b641ee-7b89-4f44-9501-64a8671ff1a6",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "6c300919-6943-4cc7-b6da-dbd56650cebb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bffb30b4-2098-4320-a457-858be1853b89",
        "cursor": {
          "ref": "05b8138e-eaf6-4cdb-98e6-6e08a58274e1",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "4375be41-293a-4362-9487-7daac721216b"
        },
        "item": {
          "id": "bffb30b4-2098-4320-a457-858be1853b89",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "2033a722-dec8-4b13-8adb-a7ef3bfac0eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1142d4ac-4fa7-4c4e-a20e-cd333b493108",
        "cursor": {
          "ref": "aa503208-ad98-40c0-aa8b-3022d8caea1d",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "0e661577-57f1-4a64-b3e0-ce4ea3fa832b"
        },
        "item": {
          "id": "1142d4ac-4fa7-4c4e-a20e-cd333b493108",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "ffb0d192-35d3-4c72-8e94-2f42d65998b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b374df71-8ab1-47b7-883a-8a9230dd6749",
        "cursor": {
          "ref": "acd88b17-8b0d-4738-9f42-cdaaae6fd95b",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "fa2ff8be-2399-4a4f-82d2-01461567474c"
        },
        "item": {
          "id": "b374df71-8ab1-47b7-883a-8a9230dd6749",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "473a61a7-ea03-4bdd-b949-713eaad98b60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70b304e9-1535-49ed-b11d-07d2f496d0f9",
        "cursor": {
          "ref": "149fe4f4-e81d-4914-aaec-a1a26b0637a0",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "23234b0e-0ff9-4a03-8ce1-dfa31b32a782"
        },
        "item": {
          "id": "70b304e9-1535-49ed-b11d-07d2f496d0f9",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "075b1f64-8ff6-4a38-8b03-1f87896839d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cacbcff-20dc-4989-a25c-ca7da48472ae",
        "cursor": {
          "ref": "e6e6fb9e-fc86-4b48-9211-d027edbb12fc",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "2b06e86d-3d6b-4eb2-904c-99ac3160431f"
        },
        "item": {
          "id": "9cacbcff-20dc-4989-a25c-ca7da48472ae",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "d6d56c6d-353e-4038-a8ca-1dece2c1c120",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17ea7d63-2197-4a2a-9b1e-157651711588",
        "cursor": {
          "ref": "52a103ed-c11b-4678-a17d-15a3eb5544c7",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "0303546e-df8b-43d3-b72c-006781e0c0ff"
        },
        "item": {
          "id": "17ea7d63-2197-4a2a-9b1e-157651711588",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "57d299cd-4512-4b37-bf4e-97de20205142",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "119e2996-745a-419f-8fb4-4fe33fac0869",
        "cursor": {
          "ref": "746130d4-350f-4bd2-bd1c-e704c5034f73",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "4b29170c-3202-4645-83dc-4683af4cc097"
        },
        "item": {
          "id": "119e2996-745a-419f-8fb4-4fe33fac0869",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "a9ade93e-cb29-4fbf-ad28-be243009304b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d844e3d7-91fd-41d6-a821-8173fe47a432",
        "cursor": {
          "ref": "9097b207-7d7d-43a8-951b-0a557c89f207",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "bd95a186-58c3-47ed-a5e5-52e137f1f5d4"
        },
        "item": {
          "id": "d844e3d7-91fd-41d6-a821-8173fe47a432",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "b03eeed3-b026-45ff-b38f-a7c55d481e74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e780e770-ddaf-4307-877f-91520c382ac6",
        "cursor": {
          "ref": "e1814392-9d6f-4d3b-b8e0-cc672870b51f",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "76ab179c-bb8e-4858-bfd9-deed50a652af"
        },
        "item": {
          "id": "e780e770-ddaf-4307-877f-91520c382ac6",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "af5c1c37-23af-4481-8fcb-8c425d95ff8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8056645d-d1b1-4021-93b7-b0010a982118",
        "cursor": {
          "ref": "dbcebdb8-f2e2-4e15-8257-206f06d392cf",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "fc6a1064-5814-4c60-8971-84b2a849cfc8"
        },
        "item": {
          "id": "8056645d-d1b1-4021-93b7-b0010a982118",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "19d2f7c6-08d3-4ad3-85e2-aa07019ef214",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 112,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28b2ec4f-c8c2-4067-8ac7-56eb326226e7",
        "cursor": {
          "ref": "3b5df56c-bc2d-4a19-9689-86e64194d27d",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "c7a4b7d1-4e4e-40ad-82ee-643b6ddde8ed"
        },
        "item": {
          "id": "28b2ec4f-c8c2-4067-8ac7-56eb326226e7",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "8c8ba7f0-adec-4911-9d84-41923bfd7173",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8ecbd01-ca1c-4f97-9a34-2d408aa168f7",
        "cursor": {
          "ref": "42ddd682-ead1-42e5-9bef-d184e1d4831e",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "87370571-02dd-420e-9ed5-9fc75a6bc857"
        },
        "item": {
          "id": "e8ecbd01-ca1c-4f97-9a34-2d408aa168f7",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "e0c04823-eb60-4233-ae8d-b2ad748ca853",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61a4daf3-130b-4552-a622-12bfba044b82",
        "cursor": {
          "ref": "d5d3a1ee-5563-4922-957d-b6e31300e5ce",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "631913c4-c98b-45b8-b5c8-ac7f775bb142"
        },
        "item": {
          "id": "61a4daf3-130b-4552-a622-12bfba044b82",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "75981e1d-2102-4800-9296-a3495b9f7b6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21390f94-73a8-4de0-9f37-b41d2aabfb71",
        "cursor": {
          "ref": "31853701-13e3-4f4b-8fc7-4c1447e28d77",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "efd341bf-bac2-495c-9a50-41e950b95dd0"
        },
        "item": {
          "id": "21390f94-73a8-4de0-9f37-b41d2aabfb71",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "d5172ddb-051a-4caf-adc5-2d884a421dd4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "067f3b48-4b4f-4e6b-bc8f-37aeca6aa7d3",
        "cursor": {
          "ref": "ab57a22b-2be9-48d6-90dc-e855004bc8ff",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "2e720ca9-0cba-4245-b788-4cd5f713f45e"
        },
        "item": {
          "id": "067f3b48-4b4f-4e6b-bc8f-37aeca6aa7d3",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "752e5451-57ed-4376-8b1d-2470eebcc949",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f32da04-a57e-474d-b79c-000fc63431d6",
        "cursor": {
          "ref": "de88dbf7-bc06-4aa2-aeb2-22c30941963d",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "fa9dc576-4506-44ad-b5b0-74f82a514cce"
        },
        "item": {
          "id": "1f32da04-a57e-474d-b79c-000fc63431d6",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "d5891b98-4806-42cd-bacd-680e1bba7864",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b58d08e-7f8f-4623-8db7-eeab05765686",
        "cursor": {
          "ref": "3b3ae852-164e-46b4-987a-ca7fec88f18b",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "f1025e7f-b835-4b5a-8a29-4c0c78c88500"
        },
        "item": {
          "id": "4b58d08e-7f8f-4623-8db7-eeab05765686",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "5cf9fd47-dd90-46c5-87c9-487e77543639",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4174f45a-e4ee-4869-a764-72e1e1849051",
        "cursor": {
          "ref": "04569dd6-45e9-4c16-8f88-0a6a3bc11825",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "fbd20929-fb48-4b53-8131-7c970e13f19f"
        },
        "item": {
          "id": "4174f45a-e4ee-4869-a764-72e1e1849051",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "8793e588-622c-4c14-b647-bb72e15e1631",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc786036-1e63-4586-8a5b-4b75437bd1b4",
        "cursor": {
          "ref": "1b636749-8c53-42a0-8213-ae00a8c74a85",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "e8d69223-fe37-47ff-a42c-c8e1bd36af62"
        },
        "item": {
          "id": "dc786036-1e63-4586-8a5b-4b75437bd1b4",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "3d564ec4-e4fe-4dbf-8290-10db0da0a537",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebdd16e7-2acd-499d-9bed-e7f53d335c51",
        "cursor": {
          "ref": "21be0674-8755-4c76-aed4-95502182fa51",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "f960c6c9-2a56-4c68-8eab-f18c783e4c3d"
        },
        "item": {
          "id": "ebdd16e7-2acd-499d-9bed-e7f53d335c51",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "f673cf57-93a1-42ca-923d-103d98777795",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eceaba47-ae49-459f-b7d8-0821f9181e0d",
        "cursor": {
          "ref": "c01f9f4b-a2bf-49b5-b435-5a42936a1c01",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "5e973aff-07d8-4533-860c-eaa7f1259faa"
        },
        "item": {
          "id": "eceaba47-ae49-459f-b7d8-0821f9181e0d",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "c3096a03-ccc2-4793-929d-f91d45a3b1c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb2ffed7-3eda-417d-8947-c683aa6f8f9d",
        "cursor": {
          "ref": "69bd6ec0-f1d0-474a-961a-6a83682dd30d",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "d9e82ab9-9825-4b88-999a-d9f018250a37"
        },
        "item": {
          "id": "fb2ffed7-3eda-417d-8947-c683aa6f8f9d",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "5a92029b-c693-4c84-8e1e-dcad978ee0b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5e03885-0896-4379-9764-0c8840dff49d",
        "cursor": {
          "ref": "41ad18a7-a664-448e-a928-df5a0597a3d3",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "40a462ad-a493-4da4-b6a3-941a736fbf31"
        },
        "item": {
          "id": "d5e03885-0896-4379-9764-0c8840dff49d",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "ccefdfee-d5f8-43e3-81aa-6f76e81e8f2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ffd1e0e-cacc-483c-9da6-1753f69732d6",
        "cursor": {
          "ref": "30137235-ced8-4620-8e21-91c402a02c3f",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "7ffed7ce-1a3c-41ef-a2ea-6af585af7cba"
        },
        "item": {
          "id": "4ffd1e0e-cacc-483c-9da6-1753f69732d6",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "46bff023-aefe-4fc5-90ec-f9f86256515d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0fe93b0-94ed-42d6-b8cd-70b597d4bfe7",
        "cursor": {
          "ref": "a227f63a-3217-4224-8095-285cf380fd74",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "ee9a6896-d98d-49b3-9b36-8ecacd456992"
        },
        "item": {
          "id": "c0fe93b0-94ed-42d6-b8cd-70b597d4bfe7",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "3a07789f-2851-4d01-baeb-ad4484491f71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f72aa35-0b8c-482e-8f82-fc7d1b982445",
        "cursor": {
          "ref": "f577c0e8-0165-4eb4-b947-15d26455db8c",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "a0aaa31e-3f8b-4011-b68a-3194b5f6d60d"
        },
        "item": {
          "id": "2f72aa35-0b8c-482e-8f82-fc7d1b982445",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "a2d41767-0fc5-4b45-bfe4-7f895f8a7e02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c6d094f-6303-4f6c-a76c-20bd049a6c0d",
        "cursor": {
          "ref": "fe729342-564c-47f2-ba8c-6e759b517835",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "fd6f1e78-be34-4d52-ac2c-9d0d98628a27"
        },
        "item": {
          "id": "8c6d094f-6303-4f6c-a76c-20bd049a6c0d",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "c921742c-7086-4f39-a257-3f9d935489de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3046f3c1-98ec-4883-a695-661e5707a83a",
        "cursor": {
          "ref": "5ee555d5-d2ba-429b-ae43-305b0cec35e7",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "a7a59b8f-4125-4da6-a22c-f6b034dee1a8"
        },
        "item": {
          "id": "3046f3c1-98ec-4883-a695-661e5707a83a",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "4ed48540-4175-4a3f-9f32-6c66948353c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 111,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed3a419b-e5a6-4b54-b809-5f70c7d5d50b",
        "cursor": {
          "ref": "e28dfd35-09db-4e86-9003-647ffb0c3cf5",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "0fb4d14e-6f19-439b-97b1-2bff0797dc3a"
        },
        "item": {
          "id": "ed3a419b-e5a6-4b54-b809-5f70c7d5d50b",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "753e00cd-71b2-46de-b87e-76610536def4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0503ada3-cf10-4ca8-b19b-410048302c0b",
        "cursor": {
          "ref": "48a21bfe-3fb7-41dc-95a0-750c463ccef7",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "4a0658c4-3987-4522-a2f1-265437cc0955"
        },
        "item": {
          "id": "0503ada3-cf10-4ca8-b19b-410048302c0b",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "a157e8ce-c4c9-4952-bce2-3fbd075258bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7eb61a4e-ef52-47bb-b73d-3766ad6d59dc",
        "cursor": {
          "ref": "86605f38-2e6f-4d25-8ebf-f0a9bd6be549",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "9c3bdf89-af3f-40ad-829c-a5db41fc0571"
        },
        "item": {
          "id": "7eb61a4e-ef52-47bb-b73d-3766ad6d59dc",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "4db181bd-fae8-4aae-a49d-88f23517a706",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e1ba924-ac6d-4ee0-bf5b-2a9c69ea8799",
        "cursor": {
          "ref": "63883701-eb79-4ad0-8ad6-7e1ed6c528c8",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "56ce66ce-4d9b-4775-b2fa-b32431a721b5"
        },
        "item": {
          "id": "2e1ba924-ac6d-4ee0-bf5b-2a9c69ea8799",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "11ca474c-c221-47cf-ba2f-ee70468578fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "641ea09a-9736-4815-96cf-a29457904549",
        "cursor": {
          "ref": "2c1e0b5f-e079-4ad0-9f5f-2d43bc1d1569",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "500c8d00-5bc3-48ff-a721-16f5c2ad3f5f"
        },
        "item": {
          "id": "641ea09a-9736-4815-96cf-a29457904549",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "796bec45-1735-431e-a878-1000c2442e4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7140f853-253d-4457-9bc5-96b68e7a4b28",
        "cursor": {
          "ref": "cbf48a7f-82fd-4cc1-b993-6516a398d9a3",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "e03084c1-f3a8-4106-8aa7-75d1d5d420bd"
        },
        "item": {
          "id": "7140f853-253d-4457-9bc5-96b68e7a4b28",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "d8fba896-ae22-4e5f-803f-56ea2dbe89de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cd6e1ac-9169-455a-96c5-8f4d3100c093",
        "cursor": {
          "ref": "dce3f0e7-ff93-47b4-9be4-e1ec6f07401f",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "c49d87ab-d9f6-4b6c-abb1-796558d21bdf"
        },
        "item": {
          "id": "2cd6e1ac-9169-455a-96c5-8f4d3100c093",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "e9de4c0d-2d30-4bee-b10a-bc4ae0c5fd12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d187ecf-38f6-4b20-beed-51df9f6ce0d4",
        "cursor": {
          "ref": "6f728060-e80f-4020-8f3e-cf4d0b820309",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "a8babf77-a9de-47dc-aafd-e107a04f07ef"
        },
        "item": {
          "id": "0d187ecf-38f6-4b20-beed-51df9f6ce0d4",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "c951c3e2-0041-4e82-ba36-74b00b1888ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8322f152-26fa-4b45-89d9-5cb3db41deb2",
        "cursor": {
          "ref": "ecdb17c4-baa2-40c1-a4da-0bcbdc0877d3",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "ec5c299a-2f5f-4eba-8e57-f7a4620c58b6"
        },
        "item": {
          "id": "8322f152-26fa-4b45-89d9-5cb3db41deb2",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "3491f235-ceea-460e-9bad-e66c32e9dd37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf4e843e-35a2-4858-a8f5-84c30f6f79b1",
        "cursor": {
          "ref": "11497924-4a95-4247-8f10-8bdbd028e107",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "d531c506-6215-45a7-a1aa-90d206beeeea"
        },
        "item": {
          "id": "cf4e843e-35a2-4858-a8f5-84c30f6f79b1",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "55a33d58-f1b0-454f-b1f6-6ded2f2f7265",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "671e9e68-8624-4972-8c82-61f2ee85e5d7",
        "cursor": {
          "ref": "be2cace1-20d8-4a03-8ad6-74029847dc52",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "e0d88ae2-688c-4a2a-ba7e-fb25cb3d6628"
        },
        "item": {
          "id": "671e9e68-8624-4972-8c82-61f2ee85e5d7",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "cf62f4ee-913c-4346-989d-b43d5197bf5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0cf1764-47db-4062-aeb0-e3d4fd2db54a",
        "cursor": {
          "ref": "a0aa432b-1743-4e26-a631-f214af213604",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "d3523154-9e9d-4cfb-aeb1-59ba783c0f87"
        },
        "item": {
          "id": "f0cf1764-47db-4062-aeb0-e3d4fd2db54a",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "082998fb-7283-46d4-8399-805f1c4e7cb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb7c1df4-2c20-4aad-9614-74cbabe31a96",
        "cursor": {
          "ref": "9774d4b1-7f9c-4343-8686-97e298771932",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "417aa1e3-5d09-4150-bde5-a90368ecdec8"
        },
        "item": {
          "id": "fb7c1df4-2c20-4aad-9614-74cbabe31a96",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "df1c9abb-4c7b-4243-9647-96090a48d273",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86c1b6bf-928a-4974-a57e-63bbb8a0d341",
        "cursor": {
          "ref": "1334e289-7771-4386-ab2d-e765fc55569c",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "88d7edcc-b059-4bb8-92c2-b92edc639c55"
        },
        "item": {
          "id": "86c1b6bf-928a-4974-a57e-63bbb8a0d341",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "6da43e25-ff3a-4fcd-81c3-4f5ea4989cc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "120820df-72db-4f80-9cc2-1ded0b34c783",
        "cursor": {
          "ref": "72648551-1043-468a-8f43-591b07645f57",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "f14ce0e8-25e9-414d-95b0-3ada5511f7f5"
        },
        "item": {
          "id": "120820df-72db-4f80-9cc2-1ded0b34c783",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "26af7894-1f22-4d48-ae08-7b0ab2da000d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b83ddde3-f791-4ae7-af57-e8db489e949f",
        "cursor": {
          "ref": "a4834c9e-c557-4f84-bdc5-0b3d74db4772",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "8d26dcdb-daff-4805-a5eb-3dd82b9de92f"
        },
        "item": {
          "id": "b83ddde3-f791-4ae7-af57-e8db489e949f",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "2822d1fe-fcb4-4f3c-978b-ef9314b38f19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ff1345d-4d10-4697-b2a1-eb148e5442bb",
        "cursor": {
          "ref": "e6b4e752-adcc-4741-aa4a-f7db5229369c",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "b858334e-e512-484b-b565-794eb73ec1c3"
        },
        "item": {
          "id": "9ff1345d-4d10-4697-b2a1-eb148e5442bb",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "89e36900-444d-4040-9dea-53baba9aa594",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08bac3d3-d1b4-4591-a837-c7643d171154",
        "cursor": {
          "ref": "1374e116-7ef4-4b4e-a07d-b70396997f4b",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "69e7322e-21a7-41ba-81ae-4dba687c4a18"
        },
        "item": {
          "id": "08bac3d3-d1b4-4591-a837-c7643d171154",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "d06bce9a-b910-48fa-98e8-10312536a405",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68b77776-4bbb-4777-bea3-88d59b93d355",
        "cursor": {
          "ref": "862c203e-e4cf-4d75-ac71-7acefee95c17",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "f1a6a6da-4793-4bf1-add6-fa30107eac34"
        },
        "item": {
          "id": "68b77776-4bbb-4777-bea3-88d59b93d355",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "8030e2cf-4787-4f1a-a562-5cbf6ebe1c01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69ab6306-c319-499b-acbb-bd8f3dc79484",
        "cursor": {
          "ref": "4c84db2b-b092-41b6-8fd9-3d48ae380c02",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "4a016bbe-50a6-4931-8682-73044974dc73"
        },
        "item": {
          "id": "69ab6306-c319-499b-acbb-bd8f3dc79484",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "75a5cbeb-bec0-4d3c-a1d0-42a0e80b8871",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "302c1df5-7b7d-4b3c-93c4-1285207c49d1",
        "cursor": {
          "ref": "fa316998-0dce-4e43-814e-c41a3cb1f960",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "ea14933c-1aaf-483d-a9ff-9cc5c3502287"
        },
        "item": {
          "id": "302c1df5-7b7d-4b3c-93c4-1285207c49d1",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "8cb14d44-10c9-4524-9ba5-99f0e63c8222",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa8b33f4-c8cf-4e92-883e-3e4a9ec8e325",
        "cursor": {
          "ref": "f9f92f52-771c-4455-89ce-e21d7e5aadf4",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "2e30d566-c06d-4656-8f16-a356395c8963"
        },
        "item": {
          "id": "fa8b33f4-c8cf-4e92-883e-3e4a9ec8e325",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "40c1f1ba-28d5-4a73-9d98-5e37826e9504",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b8c50c7-106a-4f51-aaac-8163e18f48ab",
        "cursor": {
          "ref": "727d529b-45df-40c5-85e4-e3cb89be64c6",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "87187857-c49f-412e-934b-5aaa114837cc"
        },
        "item": {
          "id": "4b8c50c7-106a-4f51-aaac-8163e18f48ab",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "a2aa63ec-d420-4630-bfd5-7a876a5ea114",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55d80ecb-fcc9-4102-948b-532a334efc46",
        "cursor": {
          "ref": "2558de6c-d4ab-4364-8a41-ae4421497279",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "8beaea36-54f4-453c-b110-1d92fcfcc320"
        },
        "item": {
          "id": "55d80ecb-fcc9-4102-948b-532a334efc46",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "bc8494f3-1c02-4602-9741-231de65d72df",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "293aad2b-98cd-4f98-a315-083cf8e59089",
        "cursor": {
          "ref": "3b280de4-7605-4a3a-b6bd-2ead0cb0a35c",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "4da3be30-eec1-4d7b-a2ed-e9e82172999c"
        },
        "item": {
          "id": "293aad2b-98cd-4f98-a315-083cf8e59089",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "4beed0fc-cead-4e68-899c-b3e5285e8501",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a364d10-7cf6-4254-9865-32ccd8a9dbf7",
        "cursor": {
          "ref": "679b21be-8216-4ce4-9cb0-081733fade54",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "a90513fa-a1d5-4da4-8114-9a3aa4e1f7f2"
        },
        "item": {
          "id": "3a364d10-7cf6-4254-9865-32ccd8a9dbf7",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "0c0e2fe9-7999-4cb7-b04b-ad610ce270ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea9e9009-db6e-4f0a-97a0-b5c356ddee6c",
        "cursor": {
          "ref": "2e0763af-425b-4979-9fab-82567521c173",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "1c9b27c0-96fc-49c7-a1bd-7e6e676a3734"
        },
        "item": {
          "id": "ea9e9009-db6e-4f0a-97a0-b5c356ddee6c",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "c84067af-cf59-409f-be63-4bf686dee6f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8547f6b-f356-4b7a-83d2-f39fd07ec6e3",
        "cursor": {
          "ref": "12b56be9-c025-4c39-a257-f31d8af86b56",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "bd7f41cb-83b7-4294-b210-cea697b6739c"
        },
        "item": {
          "id": "c8547f6b-f356-4b7a-83d2-f39fd07ec6e3",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "232d087b-7017-467d-bc06-b7a414c101a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c375db25-624f-4909-868a-6f5c878aeec7",
        "cursor": {
          "ref": "b55b64ea-bccc-45ca-8b43-d12b70a9432a",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "517a9d6a-e1e4-49b8-9638-a71b78d99d2e"
        },
        "item": {
          "id": "c375db25-624f-4909-868a-6f5c878aeec7",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "fa9ce7cd-8e51-4c3b-a0d8-f4c91ab8078a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5edd8cf0-26be-47f2-9dbb-f41b4fdbb5a7",
        "cursor": {
          "ref": "f9f33373-9e5a-46f2-a1f1-e6b498703e62",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "ec3e9c89-be23-493d-a335-b61e970e1c44"
        },
        "item": {
          "id": "5edd8cf0-26be-47f2-9dbb-f41b4fdbb5a7",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "79d67415-6377-4cdc-808e-6b85a374376d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 101,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "b121d76e-2268-412c-9ec2-4d4c8fe25fb1",
        "cursor": {
          "ref": "4ac0f3d3-51a8-4694-9240-0d55ad4ea74f",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "d8b9c842-3024-49bf-9ede-9afc3d9038a9"
        },
        "item": {
          "id": "b121d76e-2268-412c-9ec2-4d4c8fe25fb1",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "5fa113ef-5f6a-4d10-9817-0d8a011314eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 304
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efdb6299-85c3-4efe-b34a-20ab45239c1e",
        "cursor": {
          "ref": "265be69d-5e0f-471a-9303-554e99453ecf",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "395a6f1b-8f36-4841-93a9-b4243019b4e3"
        },
        "item": {
          "id": "efdb6299-85c3-4efe-b34a-20ab45239c1e",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "a63cb20b-16da-4952-82a9-e6b3fc4915f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 367
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e0eda1f-924d-427c-a235-8d579c99f4b1",
        "cursor": {
          "ref": "6a03b082-db5a-43e3-94a0-0b8c491b7ef9",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "d6b3ce51-8668-49e0-adab-283385e6d604"
        },
        "item": {
          "id": "6e0eda1f-924d-427c-a235-8d579c99f4b1",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "ca1e5a5f-41e8-40fa-8dd5-cc0d7e6b7e87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 367
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3aa88a4f-3a38-48d0-aafc-42544d5167db",
        "cursor": {
          "ref": "910834c4-4be0-4a6f-a0b0-c6fdaca2ed14",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "10aac800-931f-40f1-a3c4-9aca7e0269bc"
        },
        "item": {
          "id": "3aa88a4f-3a38-48d0-aafc-42544d5167db",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "07da1feb-d086-4b2e-8446-184608e7c200",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 367
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1cb897c-db0e-467e-a8bd-79a1ef67d098",
        "cursor": {
          "ref": "9a8cfc9c-ae65-417c-96ff-2013484f2553",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "0a22be10-56aa-4231-929b-5d773c89c8f4"
        },
        "item": {
          "id": "e1cb897c-db0e-467e-a8bd-79a1ef67d098",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "28c8b490-9320-4191-bf1b-b7bf6608ac09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 304
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b17ffd8c-4141-41d7-9607-ae5bc8f5d839",
        "cursor": {
          "ref": "7bfeae3e-f537-46d1-86af-3eff4f1b1bc2",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "b3c27b2c-192a-4b8c-8369-a0b4b2b6a1ab"
        },
        "item": {
          "id": "b17ffd8c-4141-41d7-9607-ae5bc8f5d839",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "ea959dcb-39d5-4d87-9966-80df38edfaec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 234
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0837c00-f76e-4908-8000-b5282f15d594",
        "cursor": {
          "ref": "f3beffb2-1384-473e-bd87-670e612ccaf5",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "6e7bb922-8c5d-48ca-9984-d9d9651089e7"
        },
        "item": {
          "id": "d0837c00-f76e-4908-8000-b5282f15d594",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "48ae29ea-32e9-4a45-bcd6-22f686185476",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 249
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "035893e2-9bc4-4f3a-a25f-4388a71b9e8c",
        "cursor": {
          "ref": "12937480-4b12-4798-8faf-f93fae4da029",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "de64a5b8-6021-43e1-9cbc-15ec3a7e64ea"
        },
        "item": {
          "id": "035893e2-9bc4-4f3a-a25f-4388a71b9e8c",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "2954c1d1-2a64-4a1b-95d3-f71c50dacd21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 249
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcdbb455-72cc-4987-925c-788f29c61841",
        "cursor": {
          "ref": "5e044128-c4b0-441a-8d86-a1c96f1181bb",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "4b42f33c-e8f0-4667-a5c2-b730f17a70a4"
        },
        "item": {
          "id": "dcdbb455-72cc-4987-925c-788f29c61841",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "9446a45a-8e49-486a-862b-b910d121f134",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 249
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5575296-64a9-4e45-861c-b48f1b8c7ac9",
        "cursor": {
          "ref": "aef1b572-08a1-4e14-ac93-053d447ce4d8",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "392a0f9f-85b0-49fd-a882-8603184d51f4"
        },
        "item": {
          "id": "f5575296-64a9-4e45-861c-b48f1b8c7ac9",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "6e5a15ed-eb1f-4672-b599-f1afd56946fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 249
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bbdbe41-cd83-4f11-958e-cc040deca8c9",
        "cursor": {
          "ref": "ef988d2a-7abd-4e5b-80be-7b4333a3146b",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "03285b25-7c75-4e7d-b3e8-dc0809701f84"
        },
        "item": {
          "id": "5bbdbe41-cd83-4f11-958e-cc040deca8c9",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "583a23ed-f1cc-4400-8f3d-d9a97f5e846d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 186
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43c1c560-d716-4579-8d7f-ed803f331479",
        "cursor": {
          "ref": "96da2c16-c00d-491c-9690-88e711fc8cfc",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "89783f6a-923e-4285-960b-a4062fdea5ed"
        },
        "item": {
          "id": "43c1c560-d716-4579-8d7f-ed803f331479",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "e88d4878-2a57-47ce-8d5b-6fb8942cfc99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6cc5735-5972-4128-aaff-f66f3656952f",
        "cursor": {
          "ref": "930c3620-7d23-429a-a317-3d7c5ffeb4da",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "f65a98e7-a5ba-4c8a-b369-f5b99b1004a2"
        },
        "item": {
          "id": "b6cc5735-5972-4128-aaff-f66f3656952f",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "9826666f-d035-43ab-ac71-87cc67a581a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04d71e93-86b9-4881-8a16-21667fc40fe7",
        "cursor": {
          "ref": "939dd316-417c-44d3-b671-81b3cd6ca9f7",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "5e3a3d56-606c-4044-ad60-bbd4ec899bbb"
        },
        "item": {
          "id": "04d71e93-86b9-4881-8a16-21667fc40fe7",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "ddf4ae79-557f-4f39-b954-92ea6fff6eb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4e93a78-2ab3-4408-8be8-a516fb8b5b27",
        "cursor": {
          "ref": "67342ce7-0353-421c-9696-6e530b0fde89",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "596d3ed1-3771-46c7-8c6a-138d68b1e074"
        },
        "item": {
          "id": "c4e93a78-2ab3-4408-8be8-a516fb8b5b27",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "27d41eb7-0a1f-4705-8723-9ded0e634750",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ee0140a-1b91-4fe8-9384-89fa1dcd0e86",
        "cursor": {
          "ref": "694d4dd1-1b29-4e3f-bf69-1cd1a34c5e96",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "9efbdf1e-1494-4a8d-b9ff-1022f2d1f671"
        },
        "item": {
          "id": "0ee0140a-1b91-4fe8-9384-89fa1dcd0e86",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "1e5b2f73-4f02-4d75-b168-d4c94c05e8c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f08e8f92-d676-4813-bdeb-a19fce804c9a",
        "cursor": {
          "ref": "169f2e5b-0637-41b0-b743-45b59a20319e",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "80c9c873-2cf5-4575-947e-b2407fb3deb1"
        },
        "item": {
          "id": "f08e8f92-d676-4813-bdeb-a19fce804c9a",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "3eea0996-3971-4f04-8607-218b7a0edcb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 240
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b48cb41-a28a-4e38-acca-8a7332399f71",
        "cursor": {
          "ref": "6935b92b-0fce-4a7f-a999-b709cdfcd0c9",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "d39ac95f-1ada-4b8a-851c-69cd29ee20f5"
        },
        "item": {
          "id": "1b48cb41-a28a-4e38-acca-8a7332399f71",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "4f0c5376-43fe-4451-84fd-4b102a85fd0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 240
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b78fce8a-dbf3-4bcd-8f88-9d94f473eecf",
        "cursor": {
          "ref": "3136f0f1-c01c-42cd-9475-91ad88eb4267",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "a4abbb66-ff22-4d7b-98ca-05481529ef47"
        },
        "item": {
          "id": "b78fce8a-dbf3-4bcd-8f88-9d94f473eecf",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "49461d8f-5867-4520-bc09-6cd63a4dc1f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 240
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db837ded-3d5b-4536-8202-ada59c5b2a6a",
        "cursor": {
          "ref": "c9a7296b-5486-4912-9c74-049fe38bc8be",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "be3fa3d6-2ab9-4609-8aa1-45b4d6de9ec8"
        },
        "item": {
          "id": "db837ded-3d5b-4536-8202-ada59c5b2a6a",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "1a2f3cf3-ffa5-4d76-8a91-87eb31c11c01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 240
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c775509c-1b1e-4151-802d-24983f8be843",
        "cursor": {
          "ref": "5e2c681a-9f45-4186-9d9f-298c71d5ec71",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "60d7fc37-9aef-4a4d-a515-d14fa3ef7740"
        },
        "item": {
          "id": "c775509c-1b1e-4151-802d-24983f8be843",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "20ddc35c-311e-4b3a-b2b5-12f8c8c4e836",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 240
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8833b9a-4e28-4c82-8329-531e6bf6d126",
        "cursor": {
          "ref": "9f5245a2-4267-4e2b-8a4e-14869408b3af",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "edd8cdbf-8da6-4101-b81e-606c579f6e3c"
        },
        "item": {
          "id": "a8833b9a-4e28-4c82-8329-531e6bf6d126",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "5d5f4ff6-9665-425e-a102-d756ff4e7383",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ca62e70-a459-482b-b09c-b61a96ab9c1e",
        "cursor": {
          "ref": "dbfa02ca-6c7e-498b-8a4b-6e7c666b3534",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "7147b8ea-5992-4462-aa6d-7388fcc51bfe"
        },
        "item": {
          "id": "8ca62e70-a459-482b-b09c-b61a96ab9c1e",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "ca5937c1-45c2-4cef-a699-a89fb4cebaf6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee8188e3-ff85-405a-aaa1-f2bef895f5a5",
        "cursor": {
          "ref": "f6dd5fab-997d-4bfc-aed5-2596d689efd1",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "40ed04fc-2fd9-4e8d-9056-56e4c43bf73a"
        },
        "item": {
          "id": "ee8188e3-ff85-405a-aaa1-f2bef895f5a5",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "223a4ffc-0543-453e-993f-fa3b8f53b434",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "907f789b-b11f-4400-8a3f-c56971efa7f1",
        "cursor": {
          "ref": "c2f5903d-a373-451a-86cd-69c3a4cf0a3d",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "f266b3bd-f863-404e-94c6-f2794a6ad665"
        },
        "item": {
          "id": "907f789b-b11f-4400-8a3f-c56971efa7f1",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "245af867-00cf-4722-b533-23cdb9a27275",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc4a6980-487e-4d02-aa8a-a3fd1cbfecd7",
        "cursor": {
          "ref": "54a3c728-8828-4ed3-8d5b-ea5b316d251c",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "6dfebd90-bf44-4139-b4fb-75be967a1be3"
        },
        "item": {
          "id": "bc4a6980-487e-4d02-aa8a-a3fd1cbfecd7",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "f1942d41-c284-4f31-99ae-fdc5ea409748",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3cd527b-97f1-4f1e-b4df-6fc3d74da209",
        "cursor": {
          "ref": "b8c86214-893e-41e7-8838-f4c6a1c08d4f",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "c5acddce-5999-499b-99da-6813e82f209d"
        },
        "item": {
          "id": "c3cd527b-97f1-4f1e-b4df-6fc3d74da209",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "926cdac4-6430-4e89-bbdd-fb2a565cd442",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c36cb8cf-1728-426e-a729-04a3405a3609",
        "cursor": {
          "ref": "2f844789-a9fe-4cf7-9511-6dfb671f67fd",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "75a396a0-6815-4723-b006-c7279105ec72"
        },
        "item": {
          "id": "c36cb8cf-1728-426e-a729-04a3405a3609",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "b9d5bab0-afd8-433d-b8e7-43439048ee3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3501fa5-c250-401e-8cfb-2dfca4ba7fa0",
        "cursor": {
          "ref": "2338365a-bdfb-42b9-b84d-4f13318c818c",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "8c76762e-8431-4eb8-a0a0-7999c8f7b8e4"
        },
        "item": {
          "id": "a3501fa5-c250-401e-8cfb-2dfca4ba7fa0",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "4091c5cc-0800-430a-86dc-da443ae0ba1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 168
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79d46a9d-d99d-491b-87b9-961bd33142bc",
        "cursor": {
          "ref": "38f8f0e6-a3d7-460d-ae5f-846039d2b7fa",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "271c2257-04d3-445a-8e6f-40a423657019"
        },
        "item": {
          "id": "79d46a9d-d99d-491b-87b9-961bd33142bc",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "c70ed068-8e36-45fe-8d60-f1f6ba6c8b21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c156b000-4a5e-4021-8d0b-ba90de33a8c4",
        "cursor": {
          "ref": "ce80c5ff-2e59-47ee-85e6-4589c02817a6",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "b176cc26-70ad-4e27-ab64-d2a2918c4657"
        },
        "item": {
          "id": "c156b000-4a5e-4021-8d0b-ba90de33a8c4",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "29942a85-6bb5-4e7f-8ebe-7a39965d9c90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2092d397-d676-48c0-ad8a-3efb7db71cae",
        "cursor": {
          "ref": "8de58807-ed11-459e-aa11-c034fee08d19",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "f57ea40b-be68-434c-b7b4-fb119ab638c5"
        },
        "item": {
          "id": "2092d397-d676-48c0-ad8a-3efb7db71cae",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "3c58c7e4-feaf-4877-b7ba-5063dbb3859c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57bedd4c-d0e9-448a-8788-f36b6a910bb9",
        "cursor": {
          "ref": "93f3f881-39d9-4b20-a01f-f20132af8378",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "621d4f37-07c1-4e9b-ba2e-d1497d8ec564"
        },
        "item": {
          "id": "57bedd4c-d0e9-448a-8788-f36b6a910bb9",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "08d2834b-8b51-4e79-9b46-648b3b5fb277",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 168
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d0de923-84aa-4ac8-924d-72226324c217",
        "cursor": {
          "ref": "88cf84c1-1075-42ad-becf-ec6167e3ee9d",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "a05442f9-8dd7-4f47-81e6-5e9d34023c0e"
        },
        "item": {
          "id": "1d0de923-84aa-4ac8-924d-72226324c217",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "c232d254-f1a6-4096-b20e-ee971c4a3f20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f281f7b5-00e9-4d9a-ac4b-5c5db903f23a",
        "cursor": {
          "ref": "8548d4ee-3b20-4c9e-837e-30d03f21f85f",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "7893a6c8-33e3-4d63-9132-1b71d8a93432"
        },
        "item": {
          "id": "f281f7b5-00e9-4d9a-ac4b-5c5db903f23a",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "3bf7900c-4704-4241-a865-97a5f30c3f27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d926bb1d-f5fd-408c-bb2a-1da88713ab18",
        "cursor": {
          "ref": "faa59223-5f82-4dd9-b328-daf8a6b57dda",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "8a2106f6-d061-4bb6-99e1-a317ea66854b"
        },
        "item": {
          "id": "d926bb1d-f5fd-408c-bb2a-1da88713ab18",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "e3acafcc-f01b-4844-b06f-d36dc6659030",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04a55967-a722-446a-8f5d-796d8e687115",
        "cursor": {
          "ref": "0849d7c0-23b4-4a18-9d54-fcba532c3060",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "29853938-1852-4439-a219-29db7aed5ae0"
        },
        "item": {
          "id": "04a55967-a722-446a-8f5d-796d8e687115",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "8cf4b9a5-1648-4476-89a0-bc883e4f6976",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bfa3020-edb9-41a1-a1f7-54f0887f9cac",
        "cursor": {
          "ref": "72b60e2c-71b1-410a-a510-c8b75a34e95b",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "ec580bf0-5a4d-4a56-a926-1591652934b9"
        },
        "item": {
          "id": "8bfa3020-edb9-41a1-a1f7-54f0887f9cac",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "76219e00-235d-494a-981d-e5659587b756",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3745a3c1-8ca9-443b-a38f-5fd6ac39c139",
        "cursor": {
          "ref": "ad48973a-cdb1-4fa6-a384-b70fd5b6b2f9",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "5b2de37b-0d07-478a-8a1c-2b55c24433f6"
        },
        "item": {
          "id": "3745a3c1-8ca9-443b-a38f-5fd6ac39c139",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "1353212f-9d1c-427c-832a-f221acb69db1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53cbb8e7-3411-4dd9-b039-e44d1529a04a",
        "cursor": {
          "ref": "9158d6f5-d077-4939-bf63-6accca4f89d3",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "d33d3917-4e46-4831-8117-6e1d8b934be1"
        },
        "item": {
          "id": "53cbb8e7-3411-4dd9-b039-e44d1529a04a",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "7501138f-d6f7-4331-b200-792aa7d22fa5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 249
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7c1651f-58eb-4acf-8dfc-ff66db42ec71",
        "cursor": {
          "ref": "4ef141dc-a61d-484f-8f03-c410d185c643",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "42e94367-16f2-4d20-a88f-a538f3c43cd1"
        },
        "item": {
          "id": "d7c1651f-58eb-4acf-8dfc-ff66db42ec71",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "ff63b262-b3e0-409c-a512-1df1a668e10a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 191
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f332be6a-3007-4ab9-9492-43150da0c68c",
        "cursor": {
          "ref": "08d4e1dc-7925-4378-853f-6fadfdb69986",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "15c6b679-42a6-4199-83fa-99ea1be67da4"
        },
        "item": {
          "id": "f332be6a-3007-4ab9-9492-43150da0c68c",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "67fb1000-f51e-4a58-93ab-8e7a10604e05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 191
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa72be60-96ef-419a-b1cd-b916166bc41c",
        "cursor": {
          "ref": "88195f6e-5bc9-4111-9c21-15827c47c0c6",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "09a28c87-8e9a-4829-8638-d075bedaeab4"
        },
        "item": {
          "id": "aa72be60-96ef-419a-b1cd-b916166bc41c",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "dc0d5c62-2772-478d-b7ec-51375e84e0fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 191
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b2a6ce1-daf3-49a2-be71-26b1cb5d4cb1",
        "cursor": {
          "ref": "0ac73209-37ff-42eb-992e-48e994abe07e",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "c3e3635e-0a0e-4fa2-8c45-a92869d6f2ba"
        },
        "item": {
          "id": "3b2a6ce1-daf3-49a2-be71-26b1cb5d4cb1",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "273e9914-3e53-4eeb-896c-31157bfbace7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 249
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9749a7f7-36f3-45e7-925c-8ec94ee898cd",
        "cursor": {
          "ref": "a252a015-0764-457e-8ab8-2f11b17ee79d",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "ae2074ee-0ebc-451f-8846-50658af679e2"
        },
        "item": {
          "id": "9749a7f7-36f3-45e7-925c-8ec94ee898cd",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "e15798a1-0be4-46dc-b0a2-660a7c775ab3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 191
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f660dc8a-e7bf-4222-ba3a-e9cc958cb1fa",
        "cursor": {
          "ref": "f2e26ed1-a188-46ee-bbb4-9526672a8c56",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "81e082d8-cbf0-47f1-a7f3-de3991f892d4"
        },
        "item": {
          "id": "f660dc8a-e7bf-4222-ba3a-e9cc958cb1fa",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "0930d9c0-2fbe-4138-a745-13cf16c2da0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 191
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce341afd-c6bb-4bfc-9093-f7f740acbba2",
        "cursor": {
          "ref": "c8696569-3e93-4352-a71a-88c534c7bd95",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "51a1cbba-1e04-485b-b303-6e4dbd5a39e8"
        },
        "item": {
          "id": "ce341afd-c6bb-4bfc-9093-f7f740acbba2",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "0b7ffd88-c444-4be8-afc3-239e50bddb93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 240
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b38b3ac2-d94b-4942-ab5e-0eacf6fc7e29",
        "cursor": {
          "ref": "c3ff8ea2-d879-4417-b2db-0cabb485a1a3",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "adac476e-5a99-4754-96d3-36d724693c3d"
        },
        "item": {
          "id": "b38b3ac2-d94b-4942-ab5e-0eacf6fc7e29",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "255cfed9-4be2-48bc-b230-8d5d60c0fde9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcc36e1c-42d9-4eeb-ab85-81a2e9d47f04",
        "cursor": {
          "ref": "b1d546de-c535-4518-a021-7c3604fcccca",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "83f88c4c-b6d4-4833-8329-049eb1cea447"
        },
        "item": {
          "id": "bcc36e1c-42d9-4eeb-ab85-81a2e9d47f04",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "8a19b177-50e6-446f-a86b-e0a530962b27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 267
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2cee37a-ceb9-449e-abb7-69645a782086",
        "cursor": {
          "ref": "a291661a-4937-49cf-9840-887fd6bede98",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "95523bbb-60f0-4452-a668-cc1652b613aa"
        },
        "item": {
          "id": "c2cee37a-ceb9-449e-abb7-69645a782086",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "b674747a-685f-4f9a-b0c7-7a879b261b68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 114,
          "responseSize": 267
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b406a7f1-5c49-493a-8adc-aa01e2aad4d9",
        "cursor": {
          "ref": "9b34b26c-e406-4a64-8c76-051417268fe5",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "4cb5fe78-9867-4a8d-bd50-8de5e3333992"
        },
        "item": {
          "id": "b406a7f1-5c49-493a-8adc-aa01e2aad4d9",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "869805f8-9c68-4af9-a9cb-70353ef477f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 330
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8de03304-12af-4f08-ae25-f7e014df121c",
        "cursor": {
          "ref": "7e46658b-1f14-435b-b737-0a48427d4a0e",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "c77eb0cc-5a3c-4207-b780-0de89f903933"
        },
        "item": {
          "id": "8de03304-12af-4f08-ae25-f7e014df121c",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "9295080c-4b28-4262-b4cf-5c73eabbd360",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 267
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99decf94-b348-4dbd-a8c0-a6bcb4f25c59",
        "cursor": {
          "ref": "f529e8e7-f51f-453a-887e-aec16a97bbc5",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "c8cb786d-39ac-49be-a847-88f9dc6edb74"
        },
        "item": {
          "id": "99decf94-b348-4dbd-a8c0-a6bcb4f25c59",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "b7fd24da-2ac2-47ba-97ef-f2a403ae4142",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5011ee2-aead-4deb-82ea-fef2792deb66",
        "cursor": {
          "ref": "fd118519-7d66-4794-b4be-ad04f41504c8",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "7fdbf126-1c2c-4cd9-8b9e-0b23d94e998e"
        },
        "item": {
          "id": "f5011ee2-aead-4deb-82ea-fef2792deb66",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "fb62a5c3-e8fa-439f-ab26-0e79c6c8c72b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0607760-bc89-44a1-a404-c5163087cf4b",
        "cursor": {
          "ref": "a54652f1-64e3-409b-9e3c-c30910bc1417",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "f161a507-6266-46f3-b263-29c6143a214a"
        },
        "item": {
          "id": "b0607760-bc89-44a1-a404-c5163087cf4b",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "43a224d0-05fd-45f3-8733-d042139efab1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8bb36bc-89a6-463f-b859-5fc4babc6afd",
        "cursor": {
          "ref": "7d93dc1f-382d-40c0-8ac3-3cadaa668b9e",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "68d43da8-6fee-4adb-89b7-5be4608c6fe8"
        },
        "item": {
          "id": "e8bb36bc-89a6-463f-b859-5fc4babc6afd",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "fffded0b-0874-44f4-a12f-a11cf26ae457",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "054e1468-3f0b-4328-a719-2c1d7df93b78",
        "cursor": {
          "ref": "efe684d4-f72a-4d70-a38a-cb67247d9fde",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "1e22a57c-d871-415e-b272-a44d21b81241"
        },
        "item": {
          "id": "054e1468-3f0b-4328-a719-2c1d7df93b78",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "d8f69d2d-3849-4e8f-a398-f57c19220ab3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e5c1e0e-fefc-40e7-ab1c-18bd0b020564",
        "cursor": {
          "ref": "d02280e3-007e-4028-9cec-a3174a7eb875",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "743ef0f5-f562-486c-8204-a5667a1dc81a"
        },
        "item": {
          "id": "3e5c1e0e-fefc-40e7-ab1c-18bd0b020564",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "3c851239-6552-4fcb-bee1-1e6185af78ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02002521-f8c2-4eab-870d-92c1e1d6926f",
        "cursor": {
          "ref": "dfcc0f56-0df4-447b-93aa-7bcea350aa84",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "4278353a-3964-49dd-920c-aa60df28b1a8"
        },
        "item": {
          "id": "02002521-f8c2-4eab-870d-92c1e1d6926f",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "8a3c678b-b7e8-4ab9-8977-da44df55b7ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cc5f8c9-8daf-4092-99b0-3c6fab945bee",
        "cursor": {
          "ref": "95170a0b-71ba-43dd-a986-6a82830da703",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "e997ecfa-ab0d-4360-a719-cf3d9c30e2ad"
        },
        "item": {
          "id": "9cc5f8c9-8daf-4092-99b0-3c6fab945bee",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "ff2dcd66-ffdc-4f17-b98b-da98d3c27d06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d714d4e6-17ba-4bb2-b6b7-bc152376b483",
        "cursor": {
          "ref": "e0f57c36-d1a3-48b6-89bd-e0803471dbee",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "2e114e9c-c73c-41a8-a97b-885263a89c14"
        },
        "item": {
          "id": "d714d4e6-17ba-4bb2-b6b7-bc152376b483",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "a82cca82-e089-4b87-bce7-c33db7df1b3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1186f6cd-3818-4e5e-bf4f-a794318d7727",
        "cursor": {
          "ref": "0a790356-29e4-4418-ab15-80ce4f3cc426",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "0dc047a2-e154-4fb9-84fb-09406676821e"
        },
        "item": {
          "id": "1186f6cd-3818-4e5e-bf4f-a794318d7727",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "6f1931b3-33c9-43df-b2be-77e2b6d0d78c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39d08d2a-5093-42a0-ae74-64547ddbe089",
        "cursor": {
          "ref": "46183108-4f3a-412d-97ea-41ad3aaec290",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "dac01a27-0046-402e-a50a-3f93e240f49a"
        },
        "item": {
          "id": "39d08d2a-5093-42a0-ae74-64547ddbe089",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "456e426b-0ced-4560-b53d-3054b9ed69b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bc6dfb1-f5c4-4e09-a623-8e53cd63ee70",
        "cursor": {
          "ref": "9ff59e4b-1f5c-464f-a642-e1ef1250fa2c",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "c06ae366-cbd7-4a2b-a3d3-dd230c977fd7"
        },
        "item": {
          "id": "5bc6dfb1-f5c4-4e09-a623-8e53cd63ee70",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "45c9c366-1a88-419a-9d48-e09bee8ac9cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 717
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "606d904e-63d9-461f-bdd3-557ee31986c2",
        "cursor": {
          "ref": "2224427a-cc55-4f72-9349-e2e9d5d49c71",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "e86c929f-2d1e-4e72-96b1-dd53db1a628a"
        },
        "item": {
          "id": "606d904e-63d9-461f-bdd3-557ee31986c2",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "3ec324f3-fb7a-4006-b8e3-0b4cd06a0606",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 661
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b010522-2d70-4fbe-8fa6-902d8c9a4aba",
        "cursor": {
          "ref": "9e3b273a-f455-4155-8f89-7f1814dcdc7e",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "367188eb-c076-406f-9d83-1efba4017cc5"
        },
        "item": {
          "id": "2b010522-2d70-4fbe-8fa6-902d8c9a4aba",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "4a2f3b7f-e04e-4b4a-b616-75a16cd32fd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 661
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04e01677-a564-4be3-abca-7ec8caa81c50",
        "cursor": {
          "ref": "982bafdd-dbf0-4db2-b34b-dc958c1bf302",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "cfa69ab9-5ee3-4b6b-941f-4b7b7ffd4aa8"
        },
        "item": {
          "id": "04e01677-a564-4be3-abca-7ec8caa81c50",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "b8f47943-b5ab-4949-82bb-6d91f5059a2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 661
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05912676-90bb-4eac-962d-525040cd6693",
        "cursor": {
          "ref": "21d007b1-9321-42ac-854e-0789363b9a36",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "43c4c319-c96e-434f-a637-9ba22f82a942"
        },
        "item": {
          "id": "05912676-90bb-4eac-962d-525040cd6693",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "90362779-4b6d-4052-ac69-0bc74276cfec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 111,
          "responseSize": 717
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2880375c-f0db-43eb-9dfa-687451fe44c4",
        "cursor": {
          "ref": "86d44f8a-b2bf-4284-948e-4b870bfedb13",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "f8a67039-a566-47bd-a115-906a3a012933"
        },
        "item": {
          "id": "2880375c-f0db-43eb-9dfa-687451fe44c4",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "6cb83344-2737-4281-affa-2a40969c01c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 661
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "291bb772-4258-4d67-bf36-29b2bf59e0e8",
        "cursor": {
          "ref": "f840ca3c-a4b0-4ac4-8fc3-941eff0981cd",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "45ac1f69-aeed-44c7-b71f-47abb280b660"
        },
        "item": {
          "id": "291bb772-4258-4d67-bf36-29b2bf59e0e8",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "9e4df959-45da-4149-b9ff-c16933967845",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 661
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f53fffe7-5c75-447f-978e-5b1e50e2913d",
        "cursor": {
          "ref": "e4214717-a7df-4937-9b95-f0b29a69d183",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "6ef0daf4-56bb-4dd7-a4df-d48ab611ba4f"
        },
        "item": {
          "id": "f53fffe7-5c75-447f-978e-5b1e50e2913d",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "25670bb3-0c10-4e22-a8d2-21efbb627edb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 255
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ff521e5-e9bd-42fd-87d1-5a894726dc43",
        "cursor": {
          "ref": "50f0b3d3-2866-4c5e-afe6-87e7ce2f2ddc",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "5008e1c7-86bf-46d4-bf37-6225a4475071"
        },
        "item": {
          "id": "4ff521e5-e9bd-42fd-87d1-5a894726dc43",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "37054a5f-0235-4cbd-aa2c-e7775122007f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 255
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "306bde09-22e2-4e31-9cbe-fd3d634a0b93",
        "cursor": {
          "ref": "dde0de1d-edf3-4966-bc35-dd764b9bd25e",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "0028498c-89de-4748-a50a-634354f46647"
        },
        "item": {
          "id": "306bde09-22e2-4e31-9cbe-fd3d634a0b93",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "7fb08384-41b8-4adf-b1f0-f1249b7b3622",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 255
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0da3ef1-aa9a-482d-86f1-7d2230ea9747",
        "cursor": {
          "ref": "b7f1fa26-3f1b-4c14-a97b-06bfa579041e",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "14b21988-93c1-4ae0-8ef6-5233a31c2079"
        },
        "item": {
          "id": "e0da3ef1-aa9a-482d-86f1-7d2230ea9747",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "d4343448-6e13-445c-8add-5ae56255f08b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 314
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71ca9563-2330-489b-9a4e-f775fb0c1e5d",
        "cursor": {
          "ref": "de65fb96-10cd-4560-9abe-dc61ef6ec843",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "2726f8e5-849d-4157-bb16-8b347138e3a3"
        },
        "item": {
          "id": "71ca9563-2330-489b-9a4e-f775fb0c1e5d",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "eb87b134-eb5e-438e-b322-fef39f8e0d07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 255
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a65bd03-d4b6-441d-8090-3d744c09be37",
        "cursor": {
          "ref": "1844ae8b-a9cf-4b5e-9d93-5763d0b3237a",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "63ecc6c0-a11c-4f10-a038-240db756a7f0"
        },
        "item": {
          "id": "3a65bd03-d4b6-441d-8090-3d744c09be37",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "bdf47a3b-f799-45b6-99c8-83c4d3e6faae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 246
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "938730a3-c43e-43da-aa1c-200241fac77b",
        "cursor": {
          "ref": "1c701b2f-0aab-444a-b0c7-55886ed51dd4",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "931d247e-1cf1-4072-92b0-3f65d4588504"
        },
        "item": {
          "id": "938730a3-c43e-43da-aa1c-200241fac77b",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "fdd842de-ad39-47b1-83b4-21aa28ec5d0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 246
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69cf61a5-73d2-4c5e-8808-e07800f89d70",
        "cursor": {
          "ref": "10b93a9c-dc1e-405b-814b-6b568c6113d8",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "d421b4be-8dbf-4f67-848f-080058780dad"
        },
        "item": {
          "id": "69cf61a5-73d2-4c5e-8808-e07800f89d70",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "bccaed5b-7b8d-466f-8d40-0411ee0cf6cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 246
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6275dcbf-a7a2-4152-bcd9-36dc6c259ea8",
        "cursor": {
          "ref": "e2e2a8c1-a0eb-4c02-9fc5-507676f72f07",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "44677b8b-52d6-45c6-88c8-a5c8f4f8b290"
        },
        "item": {
          "id": "6275dcbf-a7a2-4152-bcd9-36dc6c259ea8",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "95145360-7605-4044-8803-dfd615454328",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab56f229-6ba9-44cb-873d-5d2a16899303",
        "cursor": {
          "ref": "18172f9d-c31d-4b8f-b599-917a41dc6192",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "e8a72be8-e086-4627-a528-0f8bb23a27ad"
        },
        "item": {
          "id": "ab56f229-6ba9-44cb-873d-5d2a16899303",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "6068141b-f2d1-4447-ae5a-46d879138a0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 246
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55ce5859-8bee-44b5-b394-203290d9d10a",
        "cursor": {
          "ref": "85567a43-8807-423c-b661-b8672e2671d3",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "b17dc86c-4e29-42ca-a568-bbcedab5ed96"
        },
        "item": {
          "id": "55ce5859-8bee-44b5-b394-203290d9d10a",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "a37698dd-10d9-4725-91d5-24482951489c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bf324f0-3c93-4f5a-ad55-3205bcd374a7",
        "cursor": {
          "ref": "13137ae0-1d5a-4538-8595-e7e88f2b715a",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "0e6ab043-9e08-40f6-b9c6-9d1972b68399"
        },
        "item": {
          "id": "2bf324f0-3c93-4f5a-ad55-3205bcd374a7",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "ca66ce4f-f755-448e-b35c-a4f7c7e0740b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74818f75-1b74-4034-bca4-0cfcb0d82fde",
        "cursor": {
          "ref": "b7a7f93e-8fa5-4147-81c7-d936fc65d625",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "5f16e742-5de3-4394-bd41-4ae4b345b885"
        },
        "item": {
          "id": "74818f75-1b74-4034-bca4-0cfcb0d82fde",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "e6574457-6f9a-4d38-b19d-3ea5dfc8b829",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b47190c5-75c3-45b6-9d25-2edddaac382c",
        "cursor": {
          "ref": "d5133117-5439-4df3-941c-91443e52a9a9",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "5b96bee1-aee9-48e4-a49f-4102a81160a9"
        },
        "item": {
          "id": "b47190c5-75c3-45b6-9d25-2edddaac382c",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "0f197886-d7fc-433b-b6e2-4b5e5d7b351c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c20e558-690e-4bec-b80d-04f440f6c78b",
        "cursor": {
          "ref": "b292c342-81ec-4605-ba6d-41cf2e634571",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "d068e387-674f-4aa3-a0c6-887410abd496"
        },
        "item": {
          "id": "1c20e558-690e-4bec-b80d-04f440f6c78b",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "a8f403dc-a2ad-45e1-b7a4-7e6045b13b70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5eba01cb-ee0e-4b88-ab7c-27cd24fcfa9b",
        "cursor": {
          "ref": "931ebfa8-f1e5-4ae3-b726-37b78ba81bdd",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "c03940b5-9311-44a8-9e0c-c6aa79db6d5b"
        },
        "item": {
          "id": "5eba01cb-ee0e-4b88-ab7c-27cd24fcfa9b",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "66d3315e-4d75-44e9-adda-096a9a740a79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 292
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19f03a99-74d1-4b23-9414-42d8c0bb4762",
        "cursor": {
          "ref": "b029a523-4311-43c3-8a60-4da5b67a0678",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "f7e39f79-7b8f-48b2-bb06-41e368c4d482"
        },
        "item": {
          "id": "19f03a99-74d1-4b23-9414-42d8c0bb4762",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "8dec6a02-ec94-458c-bc1c-1bf7da0307eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 292
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44e98891-39b7-4345-9f59-89aea573ea3c",
        "cursor": {
          "ref": "13dbc88c-8cb3-4ef8-94e3-3fb14d53d815",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "a6b62b89-d981-4e56-9d62-e63dbd8fd478"
        },
        "item": {
          "id": "44e98891-39b7-4345-9f59-89aea573ea3c",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "384b4e78-6270-416f-9bb7-2e6c6e38297b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 292
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f77c8dc0-6449-4ecc-8228-29fb9e000fce",
        "cursor": {
          "ref": "a02f55cd-c425-40e4-acba-155d1e223e8e",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "ce1ae747-bad0-41d8-94b9-285c74f8b430"
        },
        "item": {
          "id": "f77c8dc0-6449-4ecc-8228-29fb9e000fce",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "85036391-a039-4706-9777-6abefde52541",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 292
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "572f38b6-9a67-4fbf-9f50-8188c37dfde5",
        "cursor": {
          "ref": "f04b81f6-cd07-4e6f-b83f-9c8a0da8f15f",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "e8d420ca-d810-4321-841b-ddd7f3bcb74e"
        },
        "item": {
          "id": "572f38b6-9a67-4fbf-9f50-8188c37dfde5",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "b9051fb7-fba6-4e4d-8f18-646170085119",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 292
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88015066-6169-4fcc-9736-dafd81496cb8",
        "cursor": {
          "ref": "42237242-bb56-49b1-b8bb-a568a643e773",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "f1ab796d-a9bb-4b67-a732-3b59b34177cb"
        },
        "item": {
          "id": "88015066-6169-4fcc-9736-dafd81496cb8",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "a01cc853-44ed-4170-b013-cbc8446fca82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 292
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab7d822e-872e-4798-b1f1-d234ed205a55",
        "cursor": {
          "ref": "53b4c659-72b2-457c-bb67-24ecc7eb5c00",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "80d9ef61-cd7f-437a-b731-8a3b0fee5c39"
        },
        "item": {
          "id": "ab7d822e-872e-4798-b1f1-d234ed205a55",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "c1b35359-0dfc-42ca-9822-ba7cd60bc865",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e185d3e-8f5b-4aca-b33c-6219553a1532",
        "cursor": {
          "ref": "43e70789-b5b2-45aa-9bf2-5e41d7e6c6fc",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "b38ad7dc-94cc-42b5-9974-34f138a6c3e7"
        },
        "item": {
          "id": "4e185d3e-8f5b-4aca-b33c-6219553a1532",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "530c424c-eaa3-4e51-ad50-fae26b9efba9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:277)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:277)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:277)"
            }
          }
        ]
      },
      {
        "id": "596b9857-d5a8-4817-af8c-0e01c8224007",
        "cursor": {
          "ref": "246568e1-14eb-49d2-ab92-edb448431b43",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "369add26-7621-4374-8fa2-075c7a01eefa"
        },
        "item": {
          "id": "596b9857-d5a8-4817-af8c-0e01c8224007",
          "name": "credentials_verify"
        },
        "response": {
          "id": "bb5f259b-5fc7-40c0-8ee4-47762a0ca592",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:278)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:278)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "5563d153-eb68-4477-9c0c-1ee77902d626",
        "cursor": {
          "ref": "d561009e-32a5-47aa-b5a4-1a158a3aac48",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "94f5b589-130a-4761-9ae1-d938958983bf"
        },
        "item": {
          "id": "5563d153-eb68-4477-9c0c-1ee77902d626",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "5afb5f98-58b7-4ceb-92dc-c72a13281b28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:279)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:279)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:279)"
            }
          }
        ]
      },
      {
        "id": "bdb2f7e8-9312-4ed8-ada0-db99a1e94464",
        "cursor": {
          "ref": "02bb1751-62f3-411b-a0c0-f11fd5818c32",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "82b06ba6-298c-426f-97d0-38fdc9ccc4da"
        },
        "item": {
          "id": "bdb2f7e8-9312-4ed8-ada0-db99a1e94464",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "a98107dd-611f-419d-9b29-9d372b9b7813",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdb2f7e8-9312-4ed8-ada0-db99a1e94464",
        "cursor": {
          "ref": "02bb1751-62f3-411b-a0c0-f11fd5818c32",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "82b06ba6-298c-426f-97d0-38fdc9ccc4da"
        },
        "item": {
          "id": "bdb2f7e8-9312-4ed8-ada0-db99a1e94464",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "a98107dd-611f-419d-9b29-9d372b9b7813",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96485efe-5aa7-4a6c-b422-6d4b00c17a40",
        "cursor": {
          "ref": "17e2cce7-bf5a-4867-9537-6e36150a5fb4",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "7b50bce0-9580-429d-957b-42eb7464ab64"
        },
        "item": {
          "id": "96485efe-5aa7-4a6c-b422-6d4b00c17a40",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "55bf3fb4-a6c7-41be-ae61-40cafa5972ae",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a5267d2-afda-4a54-aea2-5066402fd6ef",
        "cursor": {
          "ref": "2362670b-b14a-4d8c-b30d-733b35a2ba28",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "63a3744f-6094-4568-ac1d-f8bdb0f1dd8b"
        },
        "item": {
          "id": "2a5267d2-afda-4a54-aea2-5066402fd6ef",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "122294f2-f69e-4aab-80e2-82fe9c32b0a7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}