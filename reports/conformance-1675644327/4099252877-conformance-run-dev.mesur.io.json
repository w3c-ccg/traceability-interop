{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "45bcec8a-b57e-43a7-8798-504aeb664bee",
        "name": "Clear Cache",
        "item": [
          {
            "id": "9e17a383-5b09-4514-a8d4-403f14af22d9",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8b3e704b-e9f6-460c-aa27-a3e45ba359ff",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "816745e2-0e2e-465d-b2eb-15c36ded824e"
                }
              }
            ]
          },
          {
            "id": "6f400dba-8420-453a-8dde-8b71039a713b",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "21c9bb03-6b7f-4592-9c9b-48a3de5b1c17",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "01bc481d-76f7-4b98-96e3-5efc9a11cc05"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "7a3829b6-1941-4c04-8fcb-484319ecb4a7",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "4f722212-1d8f-419d-ab2a-85b2c3feaa59",
            "name": "Positive Testing",
            "item": [
              {
                "id": "14887b86-0987-4176-9821-86ef792ad8fd",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a3c850e8-e6ce-4cde-80eb-0d44fffb7fa3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8e971a1d-72d2-41f5-9107-416b54c7e7b7"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c9d65ced-0085-4aaa-af68-a039f648b5e1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1009a53d-5967-46bc-929a-e22b1a71b694"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "7e66d48e-3c7e-4cfe-a84e-eecba3a8e440",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "16c7a813-b0e0-442e-861a-4754fa759f71"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fe1675bc-4568-4241-aaa7-1cf17aeecd73",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "a56db01a-3409-4ff3-87b9-308e80499977"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9bf09b5c-1667-4d10-885f-ef5cef20ad47",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e2fc3d8b-c597-47eb-bcf7-0a820d9d947b"
            }
          }
        ]
      },
      {
        "id": "02f77f2c-f4f5-49e2-9461-ca5eddd03320",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "47fa74ff-ef48-48c4-956e-3b96e78b6cd9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "195b5dd7-bedf-4c63-a57a-06e9f6839ff1",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "3971fd1a-2477-4657-a8bb-c0c667b49335",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0da23d1-9a74-4a96-a0f3-0407432b755c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "16713f07-a4ba-4d29-9e36-a54d0ab544ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16747d32-6b17-4f46-ac06-222a434c1d9a",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4beea078-e080-44cb-93eb-879d06cb9e2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "880250e4-edb1-4ee6-b626-5a0bde4404f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a554614-bd85-4b80-b739-2cd900a851af",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41ae4005-5034-4164-90a4-446e014b04c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fa8a130f-ef29-44aa-aab1-dd072a4c0add"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "1fc35872-6146-4e7d-8f1c-411f910d73ba",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6f554dad-6db8-4880-ac52-74c2ad81e6c0",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f65c9fbd-c56e-4e8e-8352-ad2e3f2c8ce1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0c875b14-cb6c-4003-a801-58e94e99e1d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df8831b4-b964-4fa1-af3d-d7f3d374da52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a610dca-1bda-404e-a228-59bf5e40d7de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9659681c-9b3b-4f64-b502-3f5fa7b52775",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c784599-5de1-4857-8379-06bd1bdeeb94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2a497a0c-a143-4f10-be8e-155535b81909"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d8e59b8-776b-4d0f-9807-431416e3890b",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "0be37b99-8acd-4f77-ac7b-83d78aeeb86e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "514c3817-99ad-4c37-9d34-82cf139ad48a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "57d69537-5a9f-4b4e-abb1-3ddad922166e",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "39c6e2bb-3a35-45a8-a8f0-cb2d9e91866b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "b9194843-b227-4b27-a009-838bd9cd65b5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bae357c8-9d2c-4536-82e2-3fc2abab0f50",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "ec143894-063d-4dd3-86cc-007997a41e92"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3e9ee091-7ab4-4756-8de8-995cf8b8785f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1a057350-5f6e-4c5f-9b02-ca882427a142"
            }
          }
        ]
      },
      {
        "id": "107b82b2-d0a1-4a21-811a-e3a5aa116c31",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "833d6aed-4c6c-4896-8601-217c7725912d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9193699e-8bbf-44ac-a73e-864bef46bd56",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "a0b09da4-53ed-4d2b-9d4e-25e97030882d",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b6ac83a-bd7d-4c08-b4e4-d9cd693e51d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f07e39a-9af4-4625-8027-d58371e6940d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ec72664-86e9-4edb-9629-b19e7aebd6c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4675eab0-1c1d-4e5f-9ef4-1c57aaea38e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e68933d4-0295-4f20-b8e7-6986b90007fc",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f33a8459-e210-4c79-94de-c430dd36f4b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61bd8561-25c2-4ee9-b204-5b771741c5af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aec2d312-51bc-4807-8579-995ca6864b57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "16a36c4f-ebb0-47e2-bfa3-5bb163028c30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6afdf45f-59a1-407e-a723-6beda4daf03e",
                    "name": "credentials_issue:credential.@context:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4a88f86-0493-45c1-ac9a-5078880a9f10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddf9048e-a348-401b-b544-452e286b136b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6332bde3-24ed-4667-bca9-2cebeaf7ba58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must contain \"https://w3id.org/traceability/v1\"",
                            "    req.credential[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d9691bf6-6a87-46b7-b7b5-7293ec8ad4cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afb40b49-3d6e-4eff-a271-46872fbf3413",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9bd08ab-c999-4285-8bff-aedf6eb6d43f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3a0731a-2911-40b8-8a94-41d219cf8bc5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03d78056-2212-4854-816f-765115a4a53c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c0aae756-8701-42fc-9d0e-0795eb489c67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a041503e-3e18-4e00-a282-d14a15db236c",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ac0bc2d-6f05-4128-80ca-72e31b866bc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99d27fd4-b9fd-47a5-9f96-5b55e19ec984"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a6ef159-1137-4e63-a05e-2840d894fb9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e91f558c-17ab-446a-82e5-fee95f095e3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7d48557-e1be-439b-adc3-08b97889ab77",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f37666e-4721-46f6-8ac7-da93c89c4d9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f5890dd-a2e0-440b-b7a6-0b41f0441d86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7bac492-a46e-4be3-b94f-80a560618cf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e54d0b5b-16b5-4817-aec2-0dbae6979a0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26c4a627-ba97-4b5c-a097-54bffce3a8a0",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73f0a780-ccb8-4fdd-b405-ed09e2576e44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85e527d1-4c40-4f88-965a-e0e92f57bc9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a44b6c29-51f9-4637-a7bf-39ade0ebce0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d00df629-5bb9-4b86-ac14-42686c5072af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95c8db27-6531-46f1-9804-4a540e010541",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dae0fb9-9adb-4aa5-92ee-0fd0400ac20a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd2634db-d5d3-4846-bc5b-680062641198"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4928903b-d5c1-480b-b78f-6d239e07d276",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "75d464cd-585d-4d5b-bd6d-53b0d37e9c25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a10c8a2-a886-4a8b-96f6-016d1df8eb60",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c75a9fd1-b536-494f-a6e2-b3f23404c66f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "363e42b3-04f4-4118-a198-bbb44c3999cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1233dfe-9add-49a9-9ec1-b3547114d023",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2bfd5129-a45d-4536-be3c-bcd229e01484"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0687e2ef-bd18-4929-9660-47988c0d4bbc",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "844e1338-8b71-4532-82d1-3fd9cc1435d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "181032f9-d310-43c9-9457-afd0fc3d3a8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cbaf6d3-2009-4e35-9865-d3f1e5c5f9d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fa1e0515-86a9-4d5d-a541-9939b9828b6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef3c82c3-5135-463a-9364-b89720e9ff95",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0ef663e-7aef-44fa-b778-ad2408402f8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63a07fb8-6994-4ee4-a3dd-9d5110ffc2f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7c2de4f-4028-4ec1-ac73-264e01bd62b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "87348ec9-7b19-4bd1-b367-44ffed952851"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4066ab6-fdbe-4bea-8612-3ccd2c0cc189",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bcdcf2e-ed47-406a-979c-33d3e484cde4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fe0030a-cf4c-44a4-8893-af106561c151"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "224aaac9-91fd-453d-b310-3b1a194817d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "952a878b-e464-4a81-a562-e38106b7a263"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78de8a80-ad4a-4a75-8475-8266f306db74",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bb5b7a7-781d-4ffb-98f5-65db2bf4db5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f209afc-a17d-4dba-997a-61699d0c5b8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "800e2621-1b2b-4c55-a3b1-5df8dee8ee3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ff16d2e6-1441-4efa-9262-1b48bd62ffbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c74acfa-8a1e-45ed-9bc5-7cc921a73634",
                    "name": "credentials_issue:credential.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7b8ea35-c3cd-43e1-b7ca-309f889f04f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c06708a6-c71a-4b4c-8ea4-7de308a57834"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "734f142a-8ede-43c5-8761-9614715e9533",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.id is a required property",
                            "    delete req.credential.id;",
                            "}));"
                          ],
                          "_lastExecutionId": "1d8db069-ca7c-44ae-a3a0-aef18530669f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5620f419-a800-4d07-a3d2-6dce8ae5ca16",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f00725b-e5c5-4b64-a89d-282650f9938c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6674f100-a4a1-4081-b3b8-0106c90266b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "867565fd-25e7-4e6a-ba2f-6f7f2714242d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dc14544e-af34-4ded-9f28-b3aadc48a952"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29bd060a-258c-41ca-ba49-63e45d632e93",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "493962ed-9017-4922-947f-d8ecb2bb8af9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bfb8a89-e694-4065-8a8d-361e1e32a38a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f770bc1b-a5f2-4386-b2a7-fa61d96fe666",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "61cce6bd-0eee-4197-9db7-1275331b5475"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0170e03-8b6d-475e-926b-ece990877095",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c521b40-b346-47ed-a07b-6d20df0591cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b8974fc-08b0-4eaa-aec2-2746a62e3c00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bfa1b99-3935-4b6b-9970-e6d150e96f7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "01d72e41-b968-46f5-98c5-bc087edf709e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17e7089e-f207-46cc-a26c-baf3137e6d36",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "701d4fd6-ac1d-4498-80b2-786a0490cb34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "919acd92-3406-4941-ae1e-918b7ddb2036"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "836120bb-451c-48ae-b19a-88d839490d5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8b4696d4-60d9-404f-b39d-24a8255228e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d3fc6b8-9247-40c6-abeb-7cf5a3c04714",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcd00d12-038c-42bd-8c39-80f44d5c2ebb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef8293ef-d7bb-4083-9e84-57ad0ec2def9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0415c812-ee27-43ad-8885-107cf30786a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c21ed02d-bc72-4bd4-8e98-16055d0363e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1f1f631-6f82-4910-ab28-deae7d444bb3",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aabd77c5-7120-44f7-8344-e8f7784e0325",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0759c9fc-53fe-4d69-8c37-4e4536d346e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac895f24-21d1-429d-b59c-f27feab44a43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "8024d9e8-7b25-4655-897d-ecf630a8056a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e971aa64-fb50-46d3-8d61-457d04dd06c2",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "821d7d3c-a797-47be-8875-261e1bf63bf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89bc851e-2467-44b1-a497-06e4a963b7f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "939469cc-fd9b-4db7-ba2e-54f1be40eee5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f80d0e05-0ad1-45f1-886b-63325fa4fc2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78511340-40d9-4252-9970-2dcd29b38883",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c68934e-5679-4938-818c-7fe5defcacd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e01ada4a-6b90-4a86-8f3e-ebe05761a7e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07a549ba-5134-47c8-bbb9-59a9af7d1d4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e4947018-732d-4149-8357-ac0c2da75a4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ef06089-4274-4ef1-84d3-eb815ab7857c",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc66c30a-60ec-4bce-928d-e2e6474bb88a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8de541a8-ebd8-4740-9d90-c6732a591998"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "365e79d3-8672-4f74-99c4-5eab851403b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b3d68a94-1c1d-4f71-8054-47e85fb59452"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1619b223-1404-4b99-9e46-ec251791594e",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ea0ce84-9bdc-4579-a85a-b631ce94ec24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddc15246-8464-450e-9dc6-978d1191dfc5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "662500ef-c115-44af-ac39-240678e133ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a47067d0-bc2d-4744-9d1b-17affa6ca678"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73fa08c7-d7be-4df8-a00e-9ec5d99932b5",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e07c75c-5e22-4f70-86c7-07beb2b70b42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0eff76d0-0fc0-421b-b12e-0e387c6dd7de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6757a91e-a5c0-414f-8108-a45d1df559fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "17eaff52-1e64-4744-9591-d77a4edbfb4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f0ed193-c378-498e-ad50-cb98c18d789a",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59ba9a1c-e337-45cc-84d7-891a86f52199",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a422c53-ce8c-4461-8a85-12adbc33e712"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16db8731-abb7-45c6-abf2-bc8db6259681",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "197e3df4-4e68-455c-9dbb-9f243735be1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac03cb1d-7818-43e4-9c8e-83af5a8a5245",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67677f56-5ba9-4b0c-8835-1a6f33d676b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28ee12e5-bbed-4959-99b5-e354674755bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0b24a6f-ecb9-4487-8ca6-e42c7538bb10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "bdd9a33d-d44f-4a13-9a4b-d2997b62bf11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2de6905-5bd1-46ca-9812-8b72cf53d1fe",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8211c39e-d668-49a8-8c44-efaf6db51ca9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7727272a-34bb-4ad5-a4ce-c10b481f2c15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8df69ae8-a56a-4c15-b282-48134bb02235",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "468b3adf-8b78-4b5c-979b-fca3b13819aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02ce490e-ac7e-4203-af60-21476a7948bc",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e51ebf3-22a3-4f17-a5da-a1dd03b7a7ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53fbbaa0-dbcc-4224-87ca-d9bc68a43f2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d33ab80-5f2a-47b5-aae6-61b5bee0154c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a0a0c7b8-02e5-489f-bbd0-3093753dac9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf1055a6-ba1d-4393-b875-6fe534fd23a6",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a431f49-f306-42d7-8b81-7beaa382311b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3aa56409-ba8a-4270-a477-a171d0e46869"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0d5d70e-9f63-40e3-aadd-152c601662d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "99e6cac1-f206-4b82-9bd6-d0c82d03b8a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68d050cf-b6e4-4181-999a-1cea8658f9eb",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bc053e0-de8e-4535-8801-35b7225f9e45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2eaf531e-2a8b-440f-8c59-8db11c092405"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b1a2a06-e5a7-4166-8316-9b74b522870d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "85333fae-06ba-4684-ab10-578104e37684"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b952646e-52d3-4cec-98d2-e786f0c7d21c",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b7ae68f-ba90-4e0e-8be2-daadf3c33c9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d67ef5e-bfbf-49df-bda4-9244eb79c800"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bf5c3f4-aa7c-4e1b-859c-13e82aa0ef1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "795861eb-746b-4e11-aa93-b3f54310d131"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72cfd92a-fec4-4e92-8d91-295b0d17cb91",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "696d0f26-f7a9-4130-bd96-fdf1464626a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2c882ee-68cf-4420-94c2-50fb8dca545b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e2e8091-f351-4dcb-8bad-4379ba34e1d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "cdcf31fc-e1ae-4c8d-9c03-f0fa2075fe40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9341ab4c-f3b1-4be5-83b8-7bb966aefa8b",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3b09a22-1385-4e15-9211-5a79a4c8476a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e57bbd25-15ca-4987-b6e7-7ae5b75f3c9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "691f94bf-65e1-4bbe-bf18-b5a09450a8a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "338c17bd-7269-47b8-9815-f23521156b75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc658b91-caf6-4bfb-938e-f667cc69a929",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1b8397c-9bab-4c2b-bdc1-fdb5f162abec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4524250d-b859-45dd-b7d4-970c64dd593e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "425cea22-2ff2-4f25-840d-4fa9dd9c9405",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "40d061c4-7d08-4fe1-964c-f919b696f8d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f080e08-da31-40d7-a586-1d872dc9f5ac",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfaf841c-cb61-44da-8beb-a4bd77be1835",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ea237f4-48a4-49e9-bb86-2f8ce6f83b80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e3249d2-ac07-4d71-b123-3348b33dba8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ef7f7911-a020-4722-8b74-18aa269564da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c04b4fd-2078-46a0-b467-aa78a2faf0e7",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03199c7f-13e5-4479-8f15-09a3b0f8a948",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4169724-8104-4c28-9481-f9cb6de67ba9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f165b57-9a57-4781-b815-bc763840914d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "2b506c3e-5cba-4e3d-bca6-066b7609383d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48b44ba4-7133-4b5d-9cf1-4299ffd50a28",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12cff0c0-46de-4604-91c4-adfd3f16ba55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1f7c83d2-8dcc-4975-a45f-05e895501ad5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a69011b4-7b83-4dbc-8019-ae357732b435",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d9788586-1c57-43fe-8bbf-963bdea207fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3154b657-c4bd-44b4-8a20-3c1bed32bf64",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ceed7097-22e5-4efb-b37a-4aedbadbdd86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e69d3e06-2dd7-4728-8955-17fbc6be277c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da48327c-84ab-40d8-af69-ea2c89217dd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "cb6cfefd-4282-4e68-9aca-5f0f8e563cf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e2594f2-c1d1-44fc-8729-ff330efcb909",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "970da540-e6f5-47cf-9060-ca6852eb0003",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27a9bbeb-b582-42d0-8704-1f956a01c53a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b71552f1-a0cf-459b-b2a0-5c62de87db72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "9fe8acbb-fc00-4d45-8151-940b55853b7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33e95a41-fbbe-4c15-b47f-e4318896f3eb",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73a68676-fa53-4fda-80b8-1d5e3e3301d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76714158-cc18-4b9f-8fdf-f6c802af648c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3c2ab7b-b82b-4e0d-8b85-d08c386b75bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "fbd53410-e098-45c6-80ee-fc7734a78688"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab8fd121-d29d-4712-b826-c7d690ce9a9a",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0763c37-f5c1-4aac-836f-0d8b17c8ac1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7dcc3686-60f1-438c-ae7f-bd16068a58dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75f01e5b-2940-44dc-87fb-f6c045b33129",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "d928d786-d265-442a-82b2-4def658eb565"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4590b72d-c5d5-4d17-8d78-dfc7dd5b1f08",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaeb7df0-71b5-4899-b210-b76ea055c178",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aafc1eca-0b65-4b61-9d48-2ce6bf62c63f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6927e232-cf0f-41de-b30c-72af77c1ca76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "d6373f09-5b64-44b2-9d6f-43206ef71357"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07071275-01da-4bbd-96f8-32de695ea852",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07864ddc-166c-4cfa-ad77-0c0dcae73696",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e477376-be01-4672-a0d4-768dadf3e1ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a35f5b3-04ee-4af1-8650-48af04ff7c67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "58fa35a9-7a1e-41a8-af94-171e0d0f914e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28a46f79-0ad2-422f-bdc4-b39f0dca99c3",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "460f51d5-fae1-4d06-827d-c4d29ba91023",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b95d093e-d1cf-4de6-bc79-aa6da184c17d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d650e34-289c-44f5-b4db-4ca844ed9412",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "fb632fc6-cbd0-4f79-a481-2d6c6ea8a741"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8b4929f-4ea4-4a25-9c0a-0a9461f8646b",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "751f0351-3ab6-45fc-83fe-a6a5528b3db1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35da04bc-2bd3-459d-9544-d1fa9d66eb13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0be64f7-7d1a-4f1c-8597-8ea3a377ddc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "35116d82-58b1-4fcd-b117-3d0946602d6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d34c2b1b-9d11-4bae-9048-3ae8b9509c69",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c3b3bd6-8f91-4838-8c1a-38adab98e9cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00fca756-e5fa-4b93-993e-6e479bf69fb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "088cd96f-d721-4a4e-95e0-264ec2a0038b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6f39a964-3967-47be-91cf-005de34623bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b365efbe-c162-4b4e-b362-e79ae1855e1c",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d999dd5-63d9-415c-91c3-2200e102da63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c04d8e9-82c0-4d18-8d7f-ccded7b7f24f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9be7a08-6276-462c-9c8c-fa033a700e7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3b3fec71-333f-49d1-a2a4-06fb170af855"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63304980-999e-498a-876d-c55491c4cc5f",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddc08487-c1ea-4240-964e-b0a4802a860b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef66c93a-e9cd-4e4b-9acc-f0681546e041"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a089afd7-cb7d-44d8-bda1-9a47b59e4c6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cb8583da-569b-40cc-9583-48a105ac6eb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd7d9ad7-5738-4b2a-969e-7ecba2cbcfac",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2577559c-b8da-4785-83f3-9198bdac7f8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45d06173-18dd-4599-a133-040e22b2bf5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56ed364a-27da-420d-83df-bfd3ef4be2f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a307decd-ee71-406f-8251-42f463813ea6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "035c53ca-4f2d-413f-a0dd-f3ce98877d0c",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23c84192-04bc-401f-93c7-b59986f012cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbd7217a-5339-47f9-a103-ace2a7773f66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66a48682-2fe9-46d9-a127-dbddf9c69489",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "58751261-cdb9-4fed-8834-5f3c6543f9f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "021b6861-9b62-411d-8fbc-a88226591aff",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "275b7f45-4d8c-4f82-bb68-8980ad7a1aee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbccc31b-0d4f-4e36-b3eb-a80540aaa532"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddb54e1a-782c-4d51-a535-646c55a5b84c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "27676b53-9fa1-4323-83c4-a3b2733e6765"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa74c06c-49b2-40b7-b92c-ef6610dffe79",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef382f6a-eae1-4ec3-9f75-e025e401e6f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2af9e58-f361-43e6-8b09-0efe02d1d7e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d84287d-46c9-4c15-9a0b-9ed14569894e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "2d924d37-6959-4d4a-864e-3fad2e458dec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b20b50c-4e12-4c90-9cf0-2fd9c80fc490",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb0496b8-6109-4f57-8fa7-51d9431ca87f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca23ff88-1848-4661-95e3-decc453a1291"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be31e69e-6c43-499b-b92b-85955781145e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "402547c5-bcca-4d8c-8622-a64707c11fe3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "549f0612-4cc0-45c5-b24d-d802c9a7d701",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69b2715f-d918-4175-8911-17152f5c8045",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f6222ba-d088-47a2-9b98-b5db3647e13b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fd74e06-966c-456c-b121-5d327a09b021",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "53330816-6f13-4125-b85c-6a94f8041352"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8a38e6c-3e4d-4cf8-879f-f66138030472",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79389b00-9800-493d-a037-cbb0d038eac6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfc3ae8f-4df7-4845-ace8-50a675466bfa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f482000-8ab6-422a-b25e-b9e59821af82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "752859e0-0d73-4097-b478-fcbd324dba3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "326aba86-dd79-4d6e-a712-ee7558286200",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b7fbcc5-4bc7-419a-9e4e-82dadcd035a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd38adc0-469b-4503-b7bd-1d1545263db1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b28b9196-96b1-4f8a-b105-422ac63c4cde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fe31f823-fa0d-401a-ab1a-03f359443a3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99cd2412-6820-447d-92df-371f14325c44",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab978432-f6d4-46f2-b948-5fc236a5189b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "886d65c8-33cd-464c-a86a-63d117e21a8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0548cb3-8816-4fe4-a1a8-007028793b83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "ad82132b-b924-42cd-870a-c82c6181f5dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04ab82e2-457d-44c0-b137-c3a4883b20c2",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bcef513-b103-4610-abdc-0f35fea87e4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f03e315-d768-407b-a7f5-177793261367"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff119440-69f9-4c47-9e98-0b1d93792d3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "9990e552-f293-4853-9753-9c2a0257ca11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6546a6c-ab12-473e-85a7-1b48c21284d7",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74c1ac8c-1b69-4ffe-84c9-fdf78c72fa7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ec3cefb-4616-46c0-9a1a-6c07cc5d84db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15355f49-e19f-4521-ab0c-7d68916a80cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "c2e369f5-2ae1-41a3-9562-a2eb299c33bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f37c1af4-49cb-42c7-b9e5-1e4966624e3e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ced926fe-a57f-4a3a-8052-709a815957e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba1ab53c-840e-4faf-815a-0177c64f0504"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "000a0ae1-2f53-490b-a7bf-117064877cea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "de14b412-7e50-4e4c-b762-72e221354010"
                        }
                      }
                    ]
                  },
                  {
                    "id": "866732bc-e6ed-46b6-aab8-bb238f0f4b36",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e152eda3-9609-40c9-b523-646f792dfe35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "680f25ec-d1ec-44bf-a2cc-08beb08a3405"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef52603d-97ba-49ee-b2f7-cdcef6cae02c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "b2932378-3d11-4dbc-9943-c6143560fd86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e293e84c-68a7-4a27-b501-d7fec18c5221",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48fda97f-9048-4503-8e9b-8164dc1d73ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d093148d-18d4-4b50-b49b-398101249824"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59005d89-bec8-44e7-9c42-8bf5e3c33ddd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "496ac7a9-48ef-4c03-969d-dcd4aefa42d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4bb98b1-50b9-4204-85ab-f5d4ec4751f2",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43bd2501-d28a-4a8a-bb27-d95556f0a539",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98beb069-eb1f-4c12-9803-8c17741495e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ab8e1b6-3572-4c97-ab68-034463a81278",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "b19fac43-bdc2-4ad1-b7c0-3868c2dc50af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47d92499-6776-4cd4-a93d-45e56c9ee992",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89211d4c-8a4b-4215-b4a0-98ad7d50c632",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67a790c9-e2e5-46a4-9735-118f0fdaef10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2584f6b9-0e47-477f-863f-667f3166a1e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "d324ee48-a47b-40dd-b5b0-93d249a68812"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e699319-7f51-4704-a51e-abeb590588ef",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87bebdd2-ace3-4328-8ace-ff9af26e6e4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4357ea95-e757-4e2d-9cad-d352d7ca4940"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c4edb6f-7587-498f-8304-e6e3d66bd7a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9b394d2c-5772-4439-8125-3d9254ab9c7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea70403e-b94e-4cf9-8a93-08114421ac2e",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5f16e8f-eb99-4ebf-a3a3-966d20e02e7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1821c06-bb68-45ca-a18e-8f97576de080"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6c2a803-8ca4-474b-809e-c80e53cea040",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "758bf539-7727-4afe-b579-fab6bdf9eafc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89c99d4f-c200-4238-8dcd-5fc334e15408",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21cf4c89-4ceb-4817-8b44-4821797b137b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed3545f7-6169-4493-9819-995edf1b037b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0c27c35-f2ef-4c3a-8dfe-fb79f70600a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d625d4fd-bcd2-42a7-8b44-dbf0a300381e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7cb9cdc-5b95-405e-8245-a39b9fd57679",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d646a029-eb40-40ec-b7ef-0fb354dde100",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c8c7b3c-de81-42de-b5cd-af49cd24f2fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7c26e22-3cc5-46de-af65-947873385673",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4bf990e9-0354-4bd0-b13f-806d553e247b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a1dbdbf-55a1-42c1-8bb0-95dfecd01458",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2b301e1-70c7-4c29-8b90-2a2774837bf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ae209c3-a918-44f2-bf62-c5766e89908d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ba3f16a-37ee-4f3e-971d-5453e9152351",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "2b6a264c-b850-4ab1-b947-8e08ce8cbcbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf34523b-5a4c-4664-b106-a4cd6f0718d5",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7522e640-50fe-468c-a779-4d1d089b2b1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d20cd22-d617-4410-a796-5527b6d1d5d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdd1c988-e3b6-4247-8b13-064943d6743a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "642bf52d-dd37-4019-8470-2c28b00653eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02eb323b-f7e7-4544-bafe-fae6ddb5db14",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dc7dcea-5e69-4ef6-a688-a479f3ad75c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0680b580-d636-4ab1-a8bb-997f33661e7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "957275db-2e80-4f7f-b6fc-f08804e61b47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "75f5ef19-7af9-4b44-81f3-b901443ca8fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15552630-7730-4def-b3b0-363ea46f9dc2",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "996e4a6c-88ca-431f-a461-8693073c1537",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0dc88a0e-b7dc-4446-b6e3-ef004e3b354a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6448e528-62e3-4cb2-950e-dad1d42146cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6482246d-f580-47a1-9b6e-b9432cf8f5eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d14dde8-029b-4960-8874-10660682175f",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb3e26b4-b98b-4aa1-a216-5b5c3c009e48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0bb4233-fd88-44ce-a83d-31f76556345f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77171168-3cd7-4ce0-b224-dabfd44c3be5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9cb588fa-5e72-4f90-bd77-82c902f2e6d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16ad4ec0-2492-4268-9822-fee40f494509",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7a69114-45d9-43fc-ba05-36bd4beffcf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23b599a4-4114-4654-99fd-7149d3e74c45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a11d164-c105-46c5-b13f-2dd351c11448",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0417d21d-b6d3-443a-a7fa-3539c364a3b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a188075-f539-4940-83d7-0600f23c63be",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e94ee88b-291c-4d47-a958-a2ab68428a2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0aa89d26-1631-4330-bc5f-f23a57097c79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd0ef578-511b-4fbc-ab02-9fa81be50a21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c65f8f6a-dcbf-4842-9fec-81f3a8878393"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d53d65a-8797-4a69-966a-805ca6e19c04",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b4e6627-61f9-4e3c-be8a-302add4cccdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36401120-c01a-4c22-9505-0a1ebcfe74b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64618854-37f3-42e7-87e3-9cb1e43ee854",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2cddbf62-84e2-469c-9718-632428e7e8ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2cc3119-a611-456a-b3da-086ac1f50987",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed9a5482-a101-43c5-b280-35e59f0e0015",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85cf08e6-22e0-46e3-b2ba-e08c3bc6d781"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcb2fd7c-7fa6-406b-9dbf-204cb1e6daec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f7f104b6-0f6b-4452-8b38-a7f375ca6029"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92ef0164-9a7e-494f-b631-72afee8f8a5f",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61fef5a9-af34-4c71-a685-52cfb5e12d18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85993f95-88d7-40a0-83ee-5c6560d37432"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4851c4c7-3237-4cd6-aeba-fbe901ff7327",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8fb35326-35e8-467b-8da5-ba1f662aa508"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4138556-f2d6-4c3e-89d8-fbfa145c9d98",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd99d8c6-04e0-4b33-9324-50a4349fad6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "281b0dfb-dc43-4f34-8a68-ab2c12db9b3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04235239-7cad-4d43-bec1-a62f96893e04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2aa32706-24d7-449f-91eb-cc70ec83fcfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8052078-5844-46c7-b3d8-0d16be9cb592",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cd4618e-fbf4-46cf-af74-ecc24ce77dbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fcec01c-c9b9-4ca4-84dc-c7137d1f1ee1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a32d7c2-d32d-4743-be69-d6bf9f884d03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "202eb7b4-dce3-4ce8-8bdb-11fff93f2eb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35366af2-a7ca-4763-9e35-5835a7b7c1d9",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25f7f758-c39c-40ed-8d84-6cde043e8e6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0131400c-38d7-4852-aba0-517e18779f32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bf7823e-bd37-4c7f-8584-c79305b5f90d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ceae57d6-6d83-4000-9fe9-8db90e19ba77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a5a72d7-31d9-4e05-9a88-d39ebd03a6de",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "609c155a-48e1-44aa-9745-a8ed33f8a567",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b001b868-042b-460e-84b9-4c0ea7f25ebc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a65d330e-7dd1-4296-b939-cec625643cf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "09e071e3-bb66-4ca3-aa42-456cc85ed4b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79348d40-562a-4012-b279-673a252964de",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "775b0dcb-5858-4182-ba81-ec112eae86c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd14569c-1e2e-4dfc-91ce-5ad86164c082"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f5014ff-b235-4cae-896c-7c1b5748c963",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1115904d-1dc8-4b36-902f-723df8a505db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aad90c50-eb3a-4c64-955c-eb9c7dc62da6",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17c3fa7a-4e94-4938-8cee-19308cda4ab8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64bae3eb-8fcc-446f-ae19-88d512e9746b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "063ffc20-7da8-4740-9169-cbffd3e61fc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "65ae8b7f-fbc2-432a-ba1f-aa956cf1978a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b23920be-954c-45c6-9ea4-173be04f3f6c",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8c44c72-480e-44e7-80ff-1f7c75432669",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6c31095-ba6c-4ec7-af5c-fd06825cbbd6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57e1fdcd-30b1-41ad-b37b-d6d3edd08ea5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "718c1f69-d734-4ac8-96d6-9e7dc2150ad7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a8b0008-2b28-4f1d-b638-694cb4463b78",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "447f6494-7537-4bdb-92ae-26f2143e7391",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77568f46-eab7-4336-ba35-115d37c10fb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b2f6232-1681-438a-88ba-9c6216e7a20a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "45c7eb51-845a-40a9-8d8c-180b35dcf763"
                        }
                      }
                    ]
                  },
                  {
                    "id": "940279c5-d4a1-4023-bf48-e86ddad164a0",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d437f22c-d26f-4556-ad12-e31315bb74a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd4ad10a-2bd3-47b3-8de2-7d0b323d7f64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c091abc1-90b8-404d-b2b9-455d99308ae6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "68123389-208a-4a99-9886-01f6c07d1603"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8181d92-8d89-42f0-92bd-5fa29d35a00b",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43ec0a2b-bdd7-4d45-a071-76eb9acaebd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fd46b48-cac0-469c-84af-914b2a02872c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "345cfd69-b988-445d-9115-f7db2fa33af5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "de0cd4c2-a528-48af-a1be-bffed14d5622"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78636826-2d6d-4054-85e4-c8a32b008248",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f06d6313-98e7-45d4-b3c1-59a8919e6949",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7038347-35f6-4c00-8b8b-3a441f59d727"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0eb7ee7-ad12-49da-bbe0-2aed7881ceca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "1e96f8f5-49a8-4ea4-8e0a-924af913f8e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3de7e1f4-e958-495e-af71-729567fabf9a",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bb86c30-7e69-469b-8140-5579d7ea0f60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a257d47-d9c2-46ba-9ba4-351adc80277f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2998c2a7-dc6f-465c-8cf8-e3efdfe304a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "39d5f8e0-ff14-41d2-8a91-6750f7961827"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2da0ee24-bff0-4748-8aff-dc681e83c9f5",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c67c2307-52a5-49bb-a86e-2032fca7c441",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee7b65ac-ab6c-487d-b623-5323aec375f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a841f16f-c339-4954-adc2-5826e79d2862",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "0632be04-4ad4-4595-bcda-292889125b89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efffa0a3-0672-4f03-a1ee-19051b881ccb",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a775a25c-f3a5-41d0-8fb7-a70a998fb4ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b9b9d8c-dc59-4f98-98ca-d5f7fece8fff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0ffcb3b-b3f3-48d4-8694-eb7ecd463d4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "13cf4903-cd0f-48ef-a7f3-19a60734ac5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8dee207-a09c-413c-83ce-6daebb6cad7c",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dafa3f04-de92-4a3b-b262-1b87993771ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "5522ab44-a854-49e9-9235-4d4a3b323768"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b0a91a2-2915-4a30-8ce8-7142366e0ea3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "3d355c3e-807f-42c8-8cc3-20026d1fdb78"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "995a22d6-bf57-4766-a8ea-14679136aa06",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "65050f40-314f-41e1-a3f8-5837c9aac7f2",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "668006de-7ef2-462d-83db-ac3fbcd76eaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f0fab09d-e9da-4bbb-9e0c-695780d94d0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b25bf99-fd99-4a98-b9ef-8eccaf037b73",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "c8ee57ed-78a3-4eca-ba65-30031482815c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "600047c7-b12c-4a04-b021-1839ca22d756",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8769db9e-2457-4e4a-ba54-0e70ccdd1dc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fafab14a-5c31-455e-bde6-ead6384630d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2513e64-f3a2-43e0-9cf6-a9f2e12d2138",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "56f08255-3848-4060-b870-48f4feb28e31"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "03f3cb74-cd54-4f2a-8a44-3042ddf09713",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2cb101c3-e8fc-48f6-a748-2b289a25c52a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "80f2a2ee-c439-4b51-b163-61bbaeff824d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f9bcf0bb-6ac9-4a81-b77a-a522f0850123"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "fd9b9099-d23f-4e69-8f35-9f6393ddfb36",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0f062db6-2aab-47f8-a6dd-0fd9cb92472c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "2a42c6b5-38f7-4813-8e6d-65d146ce3934",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c50e67d0-900b-46ee-ac6d-db20a30cd4c0"
                }
              }
            ]
          },
          {
            "id": "7ea82bf3-0586-4275-a5ab-b7f3472e012a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "28660cd9-cced-4042-b5db-31c03099d389",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0f3fa801-d544-4fa0-9bf3-6eb9ac50bfab",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e56afa07-5933-4157-a2a8-4c5646c64c62"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b24143eb-e9f6-475c-a7a2-fb1f17f98432",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "58f1a6ca-6ff4-45ca-b2c8-9f8fdd36dea0"
                    }
                  }
                ]
              },
              {
                "id": "2d71f135-60d3-4e2a-9f19-418ea958140b",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ec03fdf3-aa7c-4aad-ae65-42f0a7cf0ae7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1d2a1c45-e341-4e16-8ee9-397c0dba5d21"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6f01db7c-6574-48ad-b011-e628424ce185",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "c3c9d420-7ab2-4e6a-b151-82c8685d1a0f"
                    }
                  }
                ]
              },
              {
                "id": "c8f99b50-9e65-447c-b242-a8d48903e0ef",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7741263f-6f76-4942-9e79-589ce28ac64d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7201e0a3-36ed-4e20-ab35-c14960440284"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "562fc255-425e-4e66-a444-f376aad77a23",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "3af2637e-600d-45da-b6f3-8a5e8630ef24"
                    }
                  }
                ]
              },
              {
                "id": "8b5f13ee-ebbe-41cb-ae28-ec9d35f1d2fa",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "474ffc27-8f9c-41cb-8501-715f33ba8e28",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "96a6c508-2d2a-46c9-b261-59964f07a0e6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4f9a231d-f4f1-46af-b479-fa205ffeafcf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "03ef17c8-1fc9-459e-9edb-154c66eead53"
                    }
                  }
                ]
              },
              {
                "id": "b6358e11-5215-46ae-ba37-9050af016203",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cacec2cb-8bd6-4a19-b841-86e71a2656d0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "74fba041-ea42-4ca3-9c77-4d4e427798a3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e3e9a379-a867-4734-92d3-ad1763df23c1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "65771a47-39f1-4d53-aac2-e305892a1b21"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a0c38cb4-b771-4926-8c84-ae59fe1528af",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ce970aab-3d21-443a-a617-75a18f26841e"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "202b888b-dcd5-40b3-aef9-f1881050b297",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1ebf01bb-98c9-4362-9b65-37e90046b77e"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2075840c-13c8-4714-b67a-337017100831",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "72e7f740-ac28-4f3a-a9da-b50e31cf0287"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4deb2665-26d7-43ee-a223-1f9a13a4ccc2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "54c4529b-9ae2-4a00-86aa-beb134213b20"
            }
          }
        ]
      },
      {
        "id": "6842ffa1-3667-47a5-840e-3a70e3b39286",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "a62d90b3-8b4d-41b8-899f-29358efabf99",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5f914e55-dc92-4fb8-b439-0d4db0584a07",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "2b985979-a4f3-4034-a232-b1e37083958c",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b54cf05-850f-4e41-a79d-70239f315425",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64745129-d340-4302-9333-26eeecb6953e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67ba1bb8-6c23-4cdd-9e4e-9d66e144e77e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "05330b91-c29d-480b-a9a8-fd3084797a09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c043d645-7828-422e-95ea-951f8044358a",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eea8df56-fa33-4d46-956e-a38d1f05d70b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7a60690-2621-4e32-ab19-bb08eea6e5c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b989e4bb-3012-474a-826e-03e85d8e82ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0cca5c3e-079c-4e80-99c1-82788b75dbec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14b7f569-3418-48bd-862a-ef9ac4a42836",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4307270-2b6b-4bc4-b474-a6b155d80252",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "781da61d-4d47-4b34-ad2a-7d6967ce8d61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fd1baa3-db68-4924-991c-890d0f06ae92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "aeb6cf75-b330-409a-a0c4-849eb02cdbef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2da5534b-f443-4ced-b9ec-ef701062e2fe",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "295d6830-9a8b-4e1c-9fae-f2c38d7a770c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6349d3ac-beb7-42c1-81e7-af24e0581a2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "718ce326-0f73-4be7-ad4a-9495f5bf2c61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "34e28f3f-65af-4355-ad84-1b7b14135820"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75120a53-9cea-4c31-a893-806d3f37bc60",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c02e06ca-ddfb-4a45-b858-0dfa917f4df5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5548b2d-ccfc-4ef1-b1bc-9445f1fcfca9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c152195-4188-499e-83c3-11da4bcb5f84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "21840fe7-0432-4c99-9e0f-69e81dcacb44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c141b63-c8c3-4829-8a26-c0b73188453b",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08f4b178-d7b2-4155-ae5e-b95f1fa31a3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c171f52-3bf3-4237-9c98-03fd4d219f9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79865951-3dee-4365-be32-516518cfd26c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "212b0791-98dd-4c0f-85d7-190773bb26f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d101e67-89b0-4467-b796-a8e21c88889a",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b672c41a-d3a2-4e17-b15c-c3ac573c7f15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "868e1f35-ad6e-4a42-bb94-161b21999770"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76801e83-1719-4446-b76c-112ea08522fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "9c2c9fa1-9c87-413d-a766-d7698d3fe5dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab421a3c-494d-47b6-b140-7e24f429da68",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e29bc7ae-cbf7-43fd-b708-3932c9e9b86d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a3b1892-37c4-4c5e-a358-7787e5f59f28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e36e7d6-f90a-4719-a8d4-1a83b01da987",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e491f724-0589-47de-9d2c-0ba8a4285f78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f885b8e-b2f4-4ca0-98dc-3033cfb2e463",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c18141e-aa03-4efb-96ff-829a1659c7c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "190a1225-9bb5-44db-b811-92c10adf91d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "752a56fc-22bf-4e3b-b269-09e71d1749b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5de17483-795f-4bda-a7b8-52999ebc356a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77da94eb-47f0-4385-9607-ddf876926d28",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67072be0-2fa7-41db-ac2b-42f8a83302e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a80bf7ce-4342-4475-bbc0-df6201bea1fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5a952c5-b844-402e-82c2-a547b4139e48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f94c0a57-ff90-46c3-8135-20e1a6f05e63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b137213a-7fa2-47c1-8c09-5d58b932d061",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "699a7ae3-b8dd-411b-9e75-b59cc092cb56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99b77755-b0c6-4642-8147-17f0fcc2bced"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2030f00-b103-41e4-9dbb-3648e147fce2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "da146562-17fc-47bb-9488-af20d1b293b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c39371b5-9a2f-40ec-a736-9865058ac4b6",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec76dfc9-19b7-49a7-a1e2-bd8ea1da60e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca1c8458-6c09-4331-81b0-3d643e521d83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ea77816-3683-4a45-a59c-268ec1eb889d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7746718c-f169-4de6-9602-d63dc5ddd4c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdad903e-bb8f-4c91-90cf-6db23cfd0f3a",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de9019b2-7d24-41f0-90ab-14c7abac4bac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe8a053b-06b2-434f-984e-b16f843af2b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f0e5b87-1190-41c2-bdc4-c791593c1699",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0c170689-9959-4d54-8e5c-4d0ce9277be1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d81ecbeb-23e7-4501-a053-478682937d7a",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bad648ab-092d-4ae2-85a0-48435c1797b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "961903bd-d91b-45c6-aed8-e5b41d7bf7f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4d6a94c-f502-458a-8d32-c929d4fccf58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "4105f519-5362-4b07-a9b0-a1d497a01bb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f39436b-de46-4a1a-ac99-885eb57b6a46",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54883840-14e0-4e04-b3ba-5f6f68184d1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e42e7693-8416-4969-b54c-38ee4d3b0408"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98dd3e3d-59fd-4be2-ac41-0b4b937f5c5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "12a1a063-65d0-48cf-b708-a28a627a7df1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62178ef5-b5bb-428d-b034-f3274f27ee83",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7570d9d3-a142-4cf4-9b14-eb0c7cbc46c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a67d45e1-6005-436d-b7b2-a73761f68e1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df93804f-167e-4e65-8952-66115f024f15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "104209ea-2558-4d8e-a7b2-2305ab979766"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc043ef6-f6c1-4ccd-9f44-bbe12e5e6e99",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25930ac5-7a1b-48b6-8362-10add622313f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb5798a5-aa1e-46fa-9422-a14134aef9aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a287fb4a-ef60-4b4b-b8a0-1b32545fc118",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "8115a868-f1d0-40c3-9c15-7c033be4e44d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bc45f0f-a92a-4f2c-904a-b5fcbc49448d",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96c9e71c-c8bd-4a29-ba10-f9de4668b2b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81106886-9df3-4874-9a93-1f5586952ef9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "210967cd-dd76-4ceb-8cc4-892f3236b0e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "719502a2-8b78-43b8-b250-c5208d08baec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ada1d47e-91fd-4b25-996c-1d72ce1934f4",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "612a93be-b74e-4c97-a12b-f6b5cf56c929",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77fdbe77-71f8-478f-bb63-407a9f5f9267"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04ccc7b9-cea3-44b0-96b9-d422a2aaab57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2b772516-871e-44d0-b624-8153a60011fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9fa5c6c-5421-4315-aa51-6114fb8f1e80",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a6abef2-49e1-4424-b810-b5783c7e7197",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d51fffd-1522-4281-af7b-8b581b991030"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93ea9621-33e1-4a5c-8bef-5ab5b933e75f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d8500c4f-6294-4245-97c4-4445067bf3ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e9c1b47-5ecd-4925-b459-c0df83798178",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25dfd264-ccce-44c9-93ec-96ea300f5a23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2130ec6-4e4e-49e5-9a2c-7732b0517cbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6ffa67e-ef32-4624-ba57-22b135eb3216",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "78eb9643-de38-4ecf-9170-f93a4efa50ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e0e7066-019d-419d-957d-b7f32f207d2d",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87c616ce-6273-45c3-b95c-796716a96cad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef47be25-6945-4f7b-9828-c87a79a71b7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "063e1397-f272-493f-92ea-39bb01ec4153",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0fba38fc-7c46-406e-83f5-466b47eef536"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c18ecb89-7a16-40be-ae74-47fc41a259f5",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "716bd264-5fbe-4366-ac58-c4a8201dcee8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f289aa5e-b2ab-4ed6-9ee4-c6771ea1f941"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "470ec527-e2a0-49c1-9b40-78dbeb80903e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1beca606-029c-4954-8652-a39fe423ebb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d39bce2-2cb5-42b4-a898-704e58531aa9",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79701ef5-3eb5-41f3-b4ea-ef56142881b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e66a789-6c7f-4019-8c3f-fe09bc615260"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59e1e1d3-8540-45ad-8863-1e09d983c070",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ec8340dc-e5d7-42d0-84d4-356a23b60d0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86b0e0ed-496c-4719-a3ce-c46a8c136ea5",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "191dd39d-97f4-4ae8-82ad-3678d4216b32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95406c9f-5c69-4555-aad6-ec3ee73407a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18db50f2-89e9-4bc6-9054-18a68b3071dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9c28d3a2-c107-48d0-af29-84ff90f41348"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c68d840-6a56-4159-9883-2350836d477e",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58ad5bcc-2288-46a3-a2aa-57c361a74764",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4bb2e5d-9542-439c-b863-e2c474549cc1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bc0b8d9-2ae7-4785-8ab2-e7ed2969074d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "38336147-a037-46f2-8863-af5024603efd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b67a7159-739f-4716-afd6-de3fe57582f6",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d3bb1b4-571c-49d3-bea0-b9a98969b7da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97248fe2-4f55-42dd-9993-1c58bc68580e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45f8167f-281b-42eb-b0b8-e2d545ce6ae1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "09dbbf18-06b4-43a6-9f45-c254e46bf92b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac3d6a96-d113-4b34-99b3-e34f67098755",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b0a48ca-3404-48bd-9741-bbbee0fb0aab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfad1c41-1658-4970-b144-5c12f1a9f322"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c276a4f-0b0e-4231-8b46-f19629033df0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3808c429-da7e-4c70-b004-a284fa6f63d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc05f7d9-98ce-48eb-a160-c90ad4205745",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e140038b-1fa2-470b-ae4a-3ff21806e4de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "519d838c-11b0-4538-907a-1eb90d943d06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a8ef016-7bf0-432b-9797-5b20d0b8832c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "34b7b080-66bc-444d-882f-53fb2436baf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "527b755c-8dd4-430a-9c5a-01780be9275b",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "860b19e6-6185-4480-bb94-a45a4bc684dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c77e2f8-247e-45e7-a84f-286077fd355d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "433a472d-ab35-4b47-9f16-76dee9ae2c43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ab9aaa4a-c7bb-464e-828b-b8a43facedb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9997148-bdea-424f-a7bd-5d8358f78363",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5354c6d-c07a-4e45-af45-362fc3c10089",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0b024f2-a397-4a1e-a79d-ca7a2db42d57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b7fe99e-4ae6-40af-b928-21a9dea0596c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "023804c7-0901-4548-91f4-b6822cdc2bd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25732fc8-8913-425b-951c-792f3e505265",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69bf1550-47f0-4321-9fc6-5ec79cff094d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "805460d2-9751-4793-bfc4-a021fb31ddd8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a5f8bb1-250f-4b37-8bf3-5eca315d5c8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4a353627-f7a4-4075-8f98-573d21996869"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e4d7788a-731a-4355-922e-a15f2d1cf594",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e416e524-6d85-4e16-ae4e-9c482cb2ffb2",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a02d3ad-581b-4495-87e9-d03852495abf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14b7932a-0d04-4da3-bc70-a650179dffb4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e2614c9-cc9f-41df-be96-648fd32ccf7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a96942af-f6d4-4b8f-990b-335cf84bb23e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ad66acc-ae14-41a0-945a-68f9147b5f5a",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e4204c7-68c8-414c-b2ca-66b89600d90a",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "4230033d-7840-4311-82b1-4a35ff8aa5f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfa01ffc-437a-4393-88be-17aefa20f6de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "916b1bf7-9519-4d00-a852-8bbc50d2726f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "693a2138-af3d-4e87-93f9-54d973b60e72",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "42551a81-1da5-4a34-906a-e8ae8c39bba9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "944e73ec-d1c8-42b9-ac9f-68a72f778285",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "56282584-63ed-44d5-8161-8ad53f96d5f4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e0108d09-2019-44f5-928b-0e4c6257e81e",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "c7434a4e-3f8e-471d-bb24-2fd01c23e1a4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ad494f5d-b3cb-4768-9e7f-8101f87432b3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8acb41dc-b2f5-41a5-91ad-f75ffb9ba7ca"
            }
          }
        ]
      },
      {
        "id": "221ac5d6-8311-4e8a-bda1-21403d964b49",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "f89e51fd-e878-42c3-838b-a0ed07b721dd",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f81a59b5-244f-4c08-add1-b787b221b491",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "1763e76a-493d-4268-ae10-d30e4bc62179",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc76f3e5-a922-469d-90d3-fd2acd28938a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab874ef4-541b-40f4-993f-94e648c7dce0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09f35b88-23f8-46f7-a3fd-116ce4b83111",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c29d9dd3-f386-42c4-b526-363bd02b3679",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0cbffc59-4646-4196-bf96-1c38ccd7d5b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05ae1c07-829d-434e-9aab-6c6a883f6f5a",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "789d41f8-fe9d-40f1-ac74-8d7410f8937d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afb5fbb1-619b-489b-8e77-90ce0b0182d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7b2b520-32d0-460d-9ff4-9c42a624c989",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0281540-e6b5-4109-9ab8-2ffe2fab34bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9503bb67-3685-4e4c-b615-5441e31bdff8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08fecf53-5140-4cac-9af0-cf6a340bb259",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f368e708-aefd-4cb7-ac6c-1a4225343e03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6c5a9d8-6d55-473a-a368-1179138502d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "044ff729-a401-44a3-a5d7-9d9fcff8a89c",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80ad70cf-a0c7-44bd-857a-8ba9d8835c79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90ef275a-6aff-4421-b11a-42a2998b104e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "334ad9d8-3541-4802-8ec8-ae0a3d9039bd",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de1b9f23-921a-4857-a626-7a0b312ff9f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0971a25b-3e1a-407f-be16-f13af4c66fa6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7668aa9-25b7-47fd-885f-a35eb31f0da1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d057198-5647-4402-9633-17b443be6e59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c2788a1-cc4f-42c6-af22-5234bc21a045",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f008d53-6c03-44ec-8f84-645c2f0548b6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "501b137f-c02e-4f39-85b5-4ebd2080ec15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bc40f54-2411-4646-a3d2-b50e92693f77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d797a7cb-616b-4584-ad73-bd9057cca516"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29a18488-c80f-47ab-93e0-168146a02419",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ecba624-898f-4d17-a218-069bf3b605e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0a22e0eb-0fe9-4006-a807-f63ffbc91c66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "506fa14d-f1b1-462a-b5c8-10c960bcf7a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a740224-9850-4e49-8181-d54d8929690a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59810c6b-f7c9-4364-a8b9-0783f62f6f78",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d61afd8-0337-46f4-8f12-6b4970696763",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "85d23ac1-6c98-411d-8ae9-d4a09297b9b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a86ac480-b450-4d3e-b35a-1e94e7808cc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ee65b51-e6f4-4fc5-8f19-facb1abf315c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51ac66de-e5f8-47f8-ba8f-2aca75131db4",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9836506f-52e3-49e0-b59b-5e7963160169",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7901257-d02f-4f35-9f94-4dc62d099824"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65ebdf21-eed0-4b4b-8707-24f07a857de7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cebba64a-99d4-44b3-8843-7139c00c7cbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8e00ba0-7330-41ec-98a1-e92ab21e7ad1",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ebada0b-1d79-45d7-b255-c5b618318786",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6efcf676-1eb4-4e91-ad19-fecd6b4fef27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc46cff5-82de-4556-ac93-196285b13609",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd427ed1-c01c-4123-bcd8-749c314a4237"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2826137f-5d97-47a6-a4d5-edd8f438f56c",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fa3dd45-6be5-4523-8491-8d80cfe492c1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "03571809-5250-4f14-b9b9-0bfa860041af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d960b5f-c4a5-4d66-b992-2b9faa71c1f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "484ae783-7323-46bc-a4ad-753f64a5b169"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d41e593a-a1cd-4cd9-ae22-7451130bd363",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc4e761c-1f9a-44c1-9d09-c1bdd73f3fdd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8bb64beb-988f-4223-8ed1-54f5fd22be5e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3205895-20bc-4df3-86bb-83ea65927dc5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3534fd4a-0f73-47b4-851b-6bdf793d574f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84a65d1c-ceb2-498b-b5bd-51ece3582df5",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97563c9c-b44a-4348-8e45-c6c5e6456cd5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "51e4cdd1-48aa-436c-9070-b57af64f99d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ded55652-37ef-44f8-aade-a9aaa4668d94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "070e16e6-f196-4a7d-9b18-230e934c5838"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0e80236-bb66-4ec6-920e-1c28f4825da5",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac9f16b5-4ebe-4f55-b18d-8ee6f7103107",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f458c4dd-9159-4e2c-843d-f67750b7fbe2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cf1437f-acf9-455e-a573-eadaafea6da0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6441d738-356c-4082-9aba-130383d5fec5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d4936b7-3e40-44ab-8a2d-ac8fb9537b96",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3d14859-0df2-4d8c-a76b-bb680a7ac0bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15086b0a-6365-463e-b7cb-74799aec90c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a8cf611-fbf8-4466-9e73-3fe6d789d7a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f3c6f91-37c9-4978-9bfe-97bfb6e93a58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f8705ea-d345-433b-8234-5802822e9cc9",
                    "name": "credentials_verify:vc:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dda9e684-a17c-46c5-96ec-ac61ab54d262",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "897bb4d3-0ec5-48ec-b960-e5b8d4cf129f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c76e83d1-dd7d-44df-9786-3f94a8e376db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf58dced-6367-4c9f-b26b-ee300dc14590"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9a76363-0d62-46d0-a092-1d5deccaed5e",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20107775-a046-490c-9911-0e789ec19dc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d0d0e46-8774-442a-b41c-5c4712f3d9d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c26e241d-1eb7-487f-bb74-23ce676543ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43bd338a-ba43-4a7c-b874-db0bc87f4db2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "512e5644-ae90-40d6-822f-1060aae20834",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51f19d10-3078-4fab-ab27-247fce19f7dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb54de42-37e6-46d0-850c-3d451b7f8b58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4eae820-8ae1-4a25-817b-5207d1c69c2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd86ac4e-e7fa-4fad-80c5-9f8e1a1a0b9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f85d084e-377f-4206-b253-c76f331fd20e",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b390c8d7-a4e5-4d76-9fa7-4a861fc2cdd0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5de0ba7-7c2c-48e0-a89f-229a84436fd9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f798e645-c0fb-4016-9e44-032ca5d894ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7764fe8-6462-4f0b-8b2c-1a7e8b56135c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cf34688-29db-4498-9e05-96e198ea4923",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d07dd3e-a341-44d9-9fb9-8dd5afe7af92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "893d0bee-cf56-4a28-bc4e-e94b1082cfe6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33a9cea1-c338-4250-baa0-0014e6dbc01d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "666efc8f-af39-4187-9f30-737713609a0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2ba479e-ece3-4464-877e-10802ba6af9d",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c655baa-ccba-43f4-9c71-8f443fcbab65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d70302cf-d8f1-4089-8200-85852935deab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "223ca1d5-6e05-4c0c-ad65-5c2399a5a277",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2707ccb8-4ca5-44d2-b0df-a6d6329b3b74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7c8b5c6-8609-47d0-8946-a78838c99b38",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc669ea1-1653-40dc-9750-6e90efc40b35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "922de4e6-3fe9-4897-a328-8282c4cd7eed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14f58b15-0df5-4540-a7dd-8415e705d63a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09655c8a-57de-4dff-ab23-223c9f31dbf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4432208d-fde3-41e0-9487-688988ad99f6",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45e46704-d338-4bf8-a928-3e9814c87ee2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "be92f360-b0ee-4dc2-a254-f147a252dc3c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "165cd201-47ae-429e-b46d-086fb2490215",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f06a36b1-73d1-4f66-9560-ff43f6e01cdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff5f18a2-7783-44b6-9d52-11686b9fdd66",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf65e739-0ce3-459d-ae19-1ea6971b9064",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "05774113-1dcc-4789-b012-8a9019811f94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93b43df7-8a67-4b90-be4b-02f76dd88076",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51743a84-be2e-4af9-89f7-46c3c6dddc40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfd90f58-236e-45ce-bec9-0581aab32e17",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67346185-35e0-4437-b9ec-8bf511e18257",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ebe72536-0eb5-45a6-b30f-b8f8f940c474"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12047041-2532-4f08-93c9-0b840472697d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff2053fb-7382-4bc2-97cd-a58914ba4f4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a59e53f7-c4ad-4f5d-9170-bdadfb9c8e3c",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "699bcbd2-a6d3-4c88-8d52-452ee6ea1601",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f1efb2e-0665-4b24-8000-0933f6881c66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7e44f77-a436-414c-a11c-8a039f6e4ee8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b43c4fa4-b22b-4575-af01-1a6e47cba22e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "deda6415-5318-42e8-bb5a-b70cf28dc85d",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "116efde5-ec6d-4afc-9586-bc1557ba8a23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17fcbb92-bdc2-4e59-a13c-f61d8256ae0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92b5b516-c543-45ab-8dd4-c3ecfa62f1f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9a0dbf1-1842-4f7b-b4a8-7b5b78e5876a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6cf0791-9789-4dbb-b6bc-92fb7df3b6cc",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18645cc1-5150-465f-ad31-1b52eda0ce83",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "731b2733-138e-4ea9-93bb-9cfdfe06f856"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1e5ed18-e331-40f6-ae1e-6de80d73a774",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "041a2138-e633-4eb1-8944-e568e09e8056"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a10c7518-ac95-4b23-a433-8670735b9765",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97a36592-cd27-44ea-bb7f-d85d2024c665",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3459e7e7-91d2-43fc-9e23-c3c15d61cdbf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8926c1b4-0037-4a34-8a1d-2109a592edb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8601a09f-a01d-451f-aaef-c0a639605c77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "966f3f1c-f718-430a-b39f-edf32384f335",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b8cfc97-2aff-4c2f-a872-c963b9250711",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "42953f7b-9701-4385-b3cc-f7636fb7798d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc33e863-cd56-4dcc-9848-782f3ae2b97d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "685eac4a-bb0a-4f51-bd5f-f9ab72130b2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f793a607-3fc6-413e-b493-eb3d95d63068",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e58e41f0-4bb4-4908-9e15-6c3d422943de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c14966d5-3617-4a9a-bc72-e00a7a8a8157"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f001caea-af9c-47a0-83cd-8d334cc78fcb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "080fdd2c-6181-4cb2-8997-b39a3ec4cbef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "380920b6-88ea-4afa-9cdd-500ed0e63c89",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6b08df9-1581-4d9d-a72a-7d7ef1b3c3ad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cb43cec2-4d26-4eaa-9231-4f8bc9afff94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ad8b522-e31a-42ea-8921-ee2d71b514d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c5977e1-e9ca-4929-a437-f3aa98316757"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd1a3992-8c0f-4d5b-9dca-9081927afb2e",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87279096-0fb7-40d5-a89b-dd196abcafe9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a03305c-2f20-4391-bbb2-95635ebda58c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bab66a76-6607-477b-bc82-013bb8780606",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27039de0-2ed2-4190-8060-b87b85b3192e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e921789-abe5-48fd-80c9-be175a513b0b",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6812108-a63f-42d6-9144-df3bfeae12a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de91e8d2-d413-4e98-b393-06a9db7f4508"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aea50171-9e04-4bb9-8967-2d4983041c39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99e4b95f-1b8a-4455-ab2d-6adacfc2c0d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb5eecd3-e641-48d5-8b29-6390f321d85d",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00a870d5-baf0-4a0b-9eab-ad9dbbc55e8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43718c6b-9f73-4c25-abda-f8a401d336b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bd6ddbb-a1f4-4c91-9260-2684f55bb2f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b13987b-eb5d-4ad8-8057-8ebb14877de4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8d8538a-045f-4476-bd03-6dd8c5202175",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d2b49ee-e50d-42c8-bebe-497457b3f22b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24a7f369-d4fd-4b14-b5c0-f4c34cf5f4f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e3f3e98-738f-4dc5-8639-2b16095577f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4478a848-8cd2-48d7-bb36-547b4180bbfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93f9061a-50c7-4b37-a86a-f495badc4398",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf377b65-f1e1-420e-b60e-ec61f14090a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bc1ffd6-4612-464d-9a0d-3ff7b0cdc959"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1723d1c5-4461-45f3-8fb3-73fb9c621267",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4728ea6-ec61-436d-9d10-41d37d417f11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9aa45063-c65b-4767-9cc2-3fe040d7ebd7",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8aa7a80-75aa-40b1-a150-f60a141e687d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9f7c41a-d6dd-4dab-8a17-c0374b120b22"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60b45b32-ac5e-452b-9a2a-2109f94d6f23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0eba158-22e1-4126-a9e4-06675f4d5ec6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc34673a-7442-44c2-aced-0c5027f1de61",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce94b25d-a498-4c1e-a32c-01fb81e668e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36cdcd2b-d0f0-40d6-873c-969c90767cd7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5ff3523-6a2d-4b8a-8558-00e2ca7b2846",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cff55e56-2a05-4ecf-8ebb-bec7d0694e36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a409310-7419-46cf-b1f6-94d5aff2ac3c",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a6bf9d3-5a7a-400f-891a-8be1accaef0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46a6bf66-ac85-49e1-a838-ca5c3174375f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfb3e9c3-b146-49c7-8167-722bd402ac98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f51051f4-d600-42d5-b70c-e6982f20fe5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8657df25-0a94-4e6b-a711-754b0e0ce897",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2dfb5c8-387d-40fe-b012-4d666deb7c10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eab55fc2-d399-437a-9eef-331d5a36439e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c15d8140-c70a-4765-917a-190f0be203fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a74fd7fc-fc6d-4a4a-a58d-79d3969ba798"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71972a16-ddce-45e4-baa5-f173f63055b8",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27f27350-9532-433e-bfe5-d6478ca30983",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20a02900-169a-49bb-9b36-ad26c5f323d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d56ff54f-3281-419d-9bdf-ae40707e64d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db90d0fd-9360-4303-8664-68f8dc591fde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8e5e4ee-1442-4017-b16f-3dc4218f96f7",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4337473-5024-47a1-bb89-470cc7251b7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0cca9040-1f0e-4dc1-999d-cfba1a9787f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78597907-d171-4ed8-a8b1-df03c6b63911",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c34bd54-3667-4e9b-8e77-fba5170f2395"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f09dbcf8-78d6-4e30-9c03-f7a24c8d74ef",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "268cb3ca-b3c5-429f-867c-9d3383261d58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd6b1d43-e1a3-45fa-80d3-b27882f7620f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16fa0794-9bc6-4e84-855b-a0e6835af227",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63d85fe3-d1e5-4cc7-b896-a21e0dc00114"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ea2fc65-12b4-4433-b254-1dcabaecc576",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be185602-c6c7-4c4d-a78e-3e410a5293ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de9125bb-ce46-4f7e-aba0-524e4f61efcd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c656da8-31da-4de2-91ca-69dd4aedb4bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe1621d1-657d-4739-a8d5-e35f7c2713eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db93a9f6-9b66-4a33-88c8-ad44f00cca76",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fd43289-fe76-4e2d-83b5-6beddc1685fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d02ccfc-cbda-4469-863d-f1e4fed2fab3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "796288ca-d1f8-4e5b-9e1f-f7ade0553c1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fe5cce9-7389-41ee-b28b-83f43895d452"
                        }
                      }
                    ]
                  },
                  {
                    "id": "551c7172-ad39-4432-b457-07b22c57ec6b",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9bb6b19-36a9-4bc3-a74b-568dad82605d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2c11899-cb57-407d-a5f5-e6ae4a7c50a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93586759-6e89-46ec-bf5c-e770e7d52a74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df50c70e-0f3b-4a90-8748-a5e566cae9ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aee52b4e-a396-4b7b-bd5b-b989dc0552cc",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1404a2f-8104-4bb5-90f0-20a9bc589bdb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c09c9b90-2e5c-4683-be54-b10747421643"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2c96702-a0ad-4d18-9c67-2a3eacbe6d0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d129b685-2b29-4ca7-8758-444e41dc564b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebe28ac0-3abd-4c89-a8cb-ef5f1a080a3c",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aef53401-e9f3-4716-8bca-be7132d6f88e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2d5c574-4161-4632-9110-19d2f0aceba6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e451a3fc-ee6c-4d40-a78e-824f4b9c2730",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d1159ae-e77c-4648-9ae1-e3e29477a57d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f3213f5-d3c8-4017-b0cc-4f86a43cde04",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2eee00d-300a-4f69-a411-8205d5444c55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89b7b30e-bb69-4748-8a75-da662198ef0b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db9deded-7668-43c8-af5e-73dbc618b140",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1aeed34-9966-4e28-85d6-227346946a72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e14f0ee-322f-457b-b461-6a9eb14687c1",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb8c4038-0165-4b9c-951c-17eefc738163",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98ba4434-f11c-410b-9988-c45815f84544"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75e10c57-797d-4ad5-8bc1-ec98b8f783d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2b6b652-2a7c-4840-a133-d44f766b2829"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9921f8c8-dcac-4731-b8d0-44db54e9812d",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2cadcef-2bf4-4475-95c6-909cb72094dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fda2e9a9-fe8d-4a04-b321-12e01fc5251e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3328db07-cd8b-4381-a2ff-4e2b7e5e8951",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "667ccf58-606f-40cd-8ed3-9cb43436fb4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee85bca3-ba20-4315-b3bd-a7cc8aefb2f2",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "caee816c-9b36-47c0-93ef-0a2dd7504f88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d5b3630-bff6-4df9-81b0-e50fb930512c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02b11fce-c71c-4f61-b614-e7aa53d22693",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb2f839a-990d-47ad-a970-01e64f7cc0c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3292e5d5-fe5d-4252-8604-a130a03342bb",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfb796cc-de3f-4804-8c4c-1da1d4bad180",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "586d143d-539c-453c-a5e6-0abd7325a7f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cca43be5-5a63-48bc-bfd5-21848a3d4400",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f8a1bd8-6350-4a8a-82b9-3953f37d2bd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "576037ba-6547-4035-8539-0e958f710bfc",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b020792-4261-4691-b73f-d4adca4b92e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f6fa6d9-1f72-4ff3-85b1-194d56b02d75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d5253fd-84f4-473b-9edd-b0be4e4ba675",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfe4cb35-3eba-4c29-a29c-7b53d91179da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d08c30e-a997-4b83-a1bb-d05eba180a0d",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4495d25f-6d43-47d3-88a6-a25cf7b378e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21dcf559-4917-49ae-a4f1-135f5716ffb4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee2bb582-c894-4dec-8739-319c5275e8df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f528329-8289-4b97-b822-260819f7288c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34350e5f-bbb7-4b00-864b-cf4a82ae846a",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dd74301-9711-4d24-a16e-69da57a720f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0b53c23-7332-4027-9bb5-a32839b07595"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d623690e-a5f7-48d4-98fa-79475c78743e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b25fa4b4-c30c-4bec-9d09-cadb94e444f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c9f49dc-4ab8-4aca-a81d-556dc8c9f020",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f0a02be-67e8-4716-a262-6b00a08d5bdd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0beacfbd-9573-4900-aa26-c5118102b7da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a04a6c44-52ba-43a0-af2c-f3ecee9748e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08f0f9d5-f293-402d-ba8f-85e9e98dcf7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1687e87-e9b0-4415-9647-5c4b9d12b379",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb6c1392-599b-41af-9ab8-09f71e7f776f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "528dde47-5a74-45fd-a876-f2a75b2edec6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bff01119-37c8-41f4-916e-2eb39150ca1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "956e0ce0-a1a0-47c7-bf93-b98cdaacb7a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d503e82-4afc-46f9-93de-35a7a8cf971b",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b7b62a8-d3ed-4fe6-9531-61743ec80cb5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7caa7f18-e655-40cc-9512-a692b17f38e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54b4e044-2cdc-425d-9611-817c8dca6b9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2e7b2fe-a45d-45fc-b48e-d066905e1aa6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fbc3aeb-4cdd-4e01-b614-753f47d65b0f",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc2f0b4e-6e82-45db-8be8-d576874fade4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c53fad11-3f3e-4be0-8789-1ec566d346d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0722acc7-2c00-4753-8b6d-50e12f5fb6bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7de0a656-591d-4013-8107-dbc9fdf56f93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aaa71396-e52d-4319-be52-6359a5a733cc",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a5dde25-2274-40de-81a9-7c81f4d5f3f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cac535ab-1fe3-4e98-91b1-1242d6a51a6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56fb5b1e-d99b-420e-ba53-5377684bafb5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39142a13-5277-4fc2-9815-cbb0d072c2f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "763b34d6-bb39-4ca1-b541-2c0bb8936c3a",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2fc7469-9f0a-479e-a3c8-21ad399aec4f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c5c90309-fba9-40df-9986-335bc806a845"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf68fd2f-b5e4-4554-886c-b8fe45f18e7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "181373d2-d965-43fd-9ede-74fe9eda65dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e04a480-f1b2-406f-a23e-4e9d54ac0b50",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc39baec-063d-4150-bf66-3a521fc4b68d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "964b7064-a159-48dc-830e-1c1326f035c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82e96eb0-db3c-4cdb-b28a-8c3f6b162c91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eef6cd9c-facf-4661-96c0-2c14ecb52f44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0667b04a-ddf6-48fe-a242-1ed66d6ada90",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c049c73-189a-4569-9bf7-7813f9d4a2dc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c2e3bb5e-ba39-4693-b323-f1ede8d29981"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e0d3abe-1748-45e5-a208-054dbb979ecc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f7f21de-371e-4a36-91e3-2d04b3ca92e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99a5e867-b2a7-41e2-884a-3d2d9454849e",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8defab7c-e028-4f99-8866-fcf43d2e1680",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "28e100f4-4b0d-4508-9551-d442b4b3618c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "216d950f-9ea4-47cd-a91b-0e70ae080585",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9de519da-ebf7-4fbd-87e5-3bfb0618b5ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80f847fd-49f0-480a-9c90-2e5321b2b4c1",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7eacabe2-d0fc-4308-9f0d-060d8cc4711c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "836050b3-089a-4bb5-98b4-3c6e0499509d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b34d2146-d214-46e0-b416-e10626bb829e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60181e7c-a963-4c90-865f-3b896f2deefc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1ab76e0-381c-4c35-9861-251e34f72019",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5029771d-cf00-409b-a08e-17764469a890",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6a197329-bfd1-4125-adf1-7056137c6635"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e5c59f6-a1da-46e9-a4f1-91506ff49fd5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3e3a5dd-139b-4fc9-9d15-916d25c6991c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2de46401-c306-44d8-993f-d9cadeebf53b",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7594b1b3-193f-43f0-98bf-39e5103f7877",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "23964b1b-ea07-41a6-bbe9-b85d4504b1ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "432ae0d6-9238-474b-bf10-8288000512bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4ce5da5-af08-431f-8190-18199d4d1366"
                        }
                      }
                    ]
                  },
                  {
                    "id": "634f8839-ce68-44be-a178-ff5a0089d0d5",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "600d7df3-1d36-43f3-aaef-7aa28ba249b8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aa7c58fa-be7a-4fb9-9409-633a758d90f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbed8e48-17d2-424d-9d3f-5d78746acc0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "040eaba0-aa7b-483b-85be-5f9db40bfc19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "982dcbc6-071a-4b79-bccc-9cb39cf15623",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c333373-6dba-4962-bc57-e7cec2b5fc42",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "45f68445-c8ee-4068-853f-ed1408ad1b49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6dcadeb-aa58-489d-a753-c95ae3bac11c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a6ba77d-b019-4a30-99ba-00f4df7b4978"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33c0e368-bb4b-4bc4-af81-7b7a589842c6",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1aa7e074-f5d1-4eea-af2f-414ad14ef0e1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "43d00634-feac-4754-a031-78cb4b1b500d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90cfc015-3d4e-466d-a3ce-235d80ca4cb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e17a553f-45ff-4b00-86b2-0d5026a916b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7405f87-8194-4d3f-ae0c-0608b8bd2d52",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "549344d3-cdc5-4281-8590-efa53a06a77c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "11ca901c-8eec-4ff2-85de-3ec67d4ad610"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6688534-7934-4654-92ac-ee0517504cd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80ab5824-3ec9-4385-8341-b779a84a3f64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1751bd26-2144-418b-9dde-4e4f89f6d146",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "811b87a4-aa08-431f-981a-05584e097f1d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d7328a2-61ef-4880-918a-0253fd8c431c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3af8ef2-5861-4f00-adc1-0575897391af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22c57395-7a1d-421a-a7fa-c88829348e11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8431981a-efdb-4048-a404-3384c4ce4c0e",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68fb2279-c9c1-4ff7-a75a-b02e3d0fe56c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e1bbd167-93b9-4fec-9d85-d17063f4831f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8163cc6-1442-4d59-a1ea-8e096f668040",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3c8de1b-ab24-4cdc-9ae1-a2ca257f2ef6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53357920-923e-4333-9241-5de69c3b0f90",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a204606-625e-4e45-89aa-7314ba600b05",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d6e1f7db-2449-4c41-a45e-b21b8c16499a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f012ed95-ee38-45bc-8e6d-649ae6868248",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ee281ec-2d56-4e5b-85d3-c186fa2fc823"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93578b15-c4d0-4c43-92c2-4d4f54ac8969",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fc4671f-8f9b-4aaa-909e-9b7aca863cc7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fab4f960-c0f4-470b-ace5-ba733144ab82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e4702cd-01f0-4dcc-ac7a-4444fa2ebc06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f499722f-aab0-4d8a-a988-a415661c8d7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d427f8b5-e0a2-4142-9655-971247822169",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "666866f1-5ca3-45cd-85c1-6e4a0d592fc7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b4c164a5-6603-46fa-819f-e0f122a1aeb9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6771946-a7ec-4016-bb3d-8c556b5f36bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f12e2749-8966-4139-888c-f55bd12d0f10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "774e6eed-d7e6-4151-bfd9-3086acb4491b",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01424d23-201f-414f-bf42-c0e00422a67f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "38e88941-7483-4df9-a818-2a9ba5b77204"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7c1cd3f-b0ab-4814-a421-2ce3ff66c86f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16884793-1388-43b5-8fef-2d38837f2129"
                        }
                      }
                    ]
                  },
                  {
                    "id": "831fdfd4-6f6b-42f6-9d37-b76e3460eacf",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ec971a8-d6a9-47cb-af06-1f761555743f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "63248f7d-4e93-4a95-931b-e277e34f960d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "abdc521a-84aa-498b-b8d9-9fd48b61d6e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69e9bc27-0efb-495a-aa82-06f0319d63eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e9bec6c-1389-411e-8cc5-72c5db633b4d",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "690f7541-80b2-4a58-85d1-d7289ecf6c29",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7e477a9b-47bc-4410-94ec-63e556bfa1e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbf86a3e-dc3a-4dfc-99d6-6c0441d48ecb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11db10ee-f5bd-42e1-be2c-3a15cc602f2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d44222c-0d1b-4e46-a089-3edac3a14d33",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd8648f0-d98d-41d0-bfbb-e04e2f483644",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6348a58a-e098-4f90-af28-4e071701de54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c531b50-b9f8-4845-a150-9d5eff87e01f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4de8c77e-92fb-498a-8ffb-c54ad9f59b45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f8e1749-a28a-44a3-9eda-bca4dd6c6f20",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c5747f4-b0a4-4407-9398-f0bcc22ea945",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "936b8874-a9e4-4982-9932-2469dcef4e8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49c05aa4-57d9-456c-a3db-58bb23cfa49e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be1a9973-f9a2-47ec-89e5-fe19897acaa1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfac9a5e-a951-4205-b26b-6b70fef5a2eb",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0810f91-ae67-4455-8451-8921f097bf6e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "db8787c5-4fa4-407a-8ab8-819c26df1b60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31135897-3530-4b8b-8758-f3bed2983533",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a4361d7-17cb-4f4a-8c8c-998f49fc7c53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f85f035a-62bb-47f8-8912-579976f86244",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43899687-de07-4a00-a1b7-d5afd5b5ac1a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6efa8ad1-e1a5-445b-bae8-2afdc162c426"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e06174a9-c7b4-4eab-9568-ed23ffe7b4b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc58c977-6e95-40c2-9d3b-0e7b43fb5853"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66f24daa-c4f7-4990-89bd-be7a54dd14ec",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f3578f1-4693-44b7-a735-20edc188f640",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "78b70b41-b542-456e-9136-50dc18750ecf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9993b887-d0c7-453f-b357-491c9a93b473",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d5bc8fc-291e-4a2b-a87f-9ca36d02c7fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8687c211-72c1-4c6b-bff5-7803f8c1459f",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e63873c-f40a-4aef-a901-71c7a5b2b977",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aa43ff29-4de6-4b64-8ef4-4c8d32fa7245"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "676297a2-ed65-409b-899e-3b785a5bb6d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e42e6e6-c385-43ed-9b0f-7a5871d13136"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04a2fe41-3399-464d-87bc-a56a03b97e8f",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62aa3f6a-b01f-47ce-a71c-b0d2afca3164",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "71c91f0d-ff0c-4674-b2dc-b843c69cee57"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9035d02c-0fd0-4cf4-bb92-3579278601ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "961b829f-e811-4c74-9ee3-da31d220a5c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6d0d5e4-aba8-43b6-96e4-127cb667e21e",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5054a52-6f08-4493-a396-225c56675c3d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "774353f8-a24a-4da0-ad91-d2ae3a0a0a37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6014432f-a6ec-4870-9f98-0d2bb2764adf",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8382487-a9ed-425a-a7ee-5b488774acc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1599cc92-7ebe-48a1-975e-d0c31cbcc717",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b203b7c0-2154-401c-a6c6-2df23aab05a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1df8473d-11f9-46fa-9843-0b52568c25c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fba4cb0c-3cde-4a19-96ff-44c093b0c895",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd992e28-6691-4ba6-a795-467b8b7262a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67f7eb10-c1bf-4f20-85fa-d572d01ba3ba",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1a5ce32-8520-415f-b2a3-7436d99c1b38",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6a512056-f6cd-48e3-a65e-ca2f7901687b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3498d49-0b57-415b-8b83-c888ed33bdd9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25ed256c-69e4-4956-9dbc-775b13929c13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67a5b469-e7b9-41ee-8fb3-5774f4458218",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c83104ec-8c91-4abd-bf11-ba1fef82ebd8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cd66f4c4-9652-48b4-a9ac-7307f5473b89"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c7dcef6-4b25-4a8f-a16c-228df514d9d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d9cbe09-1496-4462-83e8-4099284645ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5628d678-a3fa-4900-9d91-844821efc3fa",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2761f233-dd74-49b5-b47d-a3ca40fc9937",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a6376f46-bd2d-4235-8cb2-f0c8836747e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69701e2f-66b3-4eeb-acf4-23a2f2aad41f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72e6a5b7-8b16-44f8-81f8-8ded58a81c8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be0d4b4d-59f5-41a0-ad14-77b02ff1b366",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5350e0d4-69e0-49eb-b838-84814a082354",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "14876462-5875-4d82-9c06-142743fdec9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4afd4da-8425-44c9-bf5a-17ec5483c415",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b91d9d90-f1b4-41f6-93ab-eb3c1a55e794"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dcc0eca-51f9-4142-b788-63d8c5ab6b28",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78818b15-cf4a-49ad-9c4d-010afee8bcb6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3f54f497-bf54-4614-9806-e887c7ac916d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2c1a25b-2258-4257-a7fd-a765b15fbbec",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03db0470-6e76-4fd4-90a0-9b72be0a3143"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9b2ed90-60d7-40b3-9b08-c3475e629585",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8687a3c-2fd5-43ab-8b1b-2c933e75419b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "50119958-98a9-41b2-a909-d8d9eeaf040f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8111809-c2da-4d59-aec0-4dddcf47dd1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bad9a60-da5c-4fa2-94a4-eacac2f19c7c"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f8dc66f7-806d-4871-abf7-2c1a2f459033",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7fc497ab-a08f-433e-86aa-b53cb0ceffaf"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c17b732f-efa9-4318-a8d6-77791cab2a82",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "eeb68ca0-df2a-4fc2-98f2-f06783687420"
                    }
                  }
                ]
              },
              {
                "id": "f19b4397-a4e2-4fce-bf3e-a282d31cc028",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "53a4246c-4aaa-4b6b-9eb2-4bfd3dc5f067",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2259e231-0efe-4154-8227-900baa3bb57c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "9adad98e-9603-4043-b6ad-26efb9ae1232"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "913eb832-aff5-4c8d-abba-0de626817562",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f48d6847-6d83-4a53-83d6-f7b4f316c9b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b31cffbb-caab-43ee-ae78-6ae744cd64e6",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a89a638-97cb-481d-bb6d-a7d00444a03d",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "eb745a43-dc3f-443e-801f-a4f52fcf4d52"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef9ca013-401a-426c-b0ac-dbdd3f3a5fd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b1c189b6-3f4e-4da5-8c32-be38c70096f3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8cdb9e12-9bef-4ac5-9941-c5735cbbbaf0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0c201d9b-b370-4f55-8ca7-3deef2548508"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5718df93-b554-4e09-8e12-e6d9217b2650",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c171e933-a86f-4633-bc8f-f84eafa243f9"
                    }
                  }
                ]
              },
              {
                "id": "35cf384e-11ac-4283-9aa6-ea7151324dfd",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "85779723-6964-43c6-b388-4b4f2e0dfa6a",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12166eed-860d-4334-9000-1f397b9316be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "5c90272b-cc23-4f2d-926e-b89ddc76373e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed1755ab-9d31-4290-b1dc-c591c06f2808",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf35559b-d78f-4002-9f8e-730b4af7c463"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "6b7bd8cc-5c66-44fa-88f5-58ed2c831ca2",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ff333850-9972-49e8-a916-f7c5fe7da4f2",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "67ce0022-cdfd-48db-9c6d-0393ce4a2a7b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "7ff9aca3-9fad-4380-b4a2-e681762b4064"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "85fcc8f0-4e47-4770-a0c8-f00a6d0d31f1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d2b917eb-4721-45f0-a47c-5c26c8fbd4cd"
                    }
                  }
                ]
              },
              {
                "id": "9ead13c4-2bda-4d78-b0e0-a1ea2a0e9b60",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c9a36b98-870e-4ba2-86b3-d5f3f0116b66",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "f5c15d0b-9616-4cf7-8cd4-0495fdcec9d4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "abe6acc2-846b-49e4-9d77-a278fa05cacc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "76851a78-421c-459b-a693-d65ce97ddc5a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6aa59c00-6220-40b0-a998-92fd168f61a3",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "020a3935-2744-49c1-bd69-0af89f5567da"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "74245d84-e3c7-4b49-9041-df8d1f3e781d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1f99318d-a64e-4af4-9fbe-882732bdcd04"
            }
          }
        ]
      },
      {
        "id": "4a3f7515-78e3-4136-ae31-4ca54dd5d472",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "b3d649a5-7706-4ce6-bf39-89c4dcbb102e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c946ba35-fc07-4e37-a168-9d065f5fd043",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "af8f4235-fb69-4084-9b0c-fe628eeeb3b6",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0329dd5-5f1f-40fd-a723-e1ac13a127a8",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "dcd1bc54-c5d3-46aa-9665-f665630cd43d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52df31d0-02e0-48d0-af59-e3a35048af4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e138c3c6-1d72-47aa-824d-a9b3af9e11ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e31e436f-a3cb-46db-b5e4-e26284dd7cb4",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d74ebd3-8b98-4c0c-94a1-3287e622dc02",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "920e8a44-f188-4de2-b1cf-cb8442e80aae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3291157-42c3-4f46-bb10-929dab46683a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "231840e5-fc50-4940-bb41-5d20a90dec4e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ba2a2c93-358e-4c83-a5a9-ffb25041530b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "865f5833-ec84-42c0-893c-b26fcc9bda80"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "dbe1a55e-7578-4fbe-b7fc-ded175654fe0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "af598d6f-aaa2-4a93-aa71-187a392e0797"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ac5b9469-7447-4873-baf0-fc2155fded68",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "6aa35643-f895-458b-8103-31d693f0e544"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "55a22f3f-ba6d-43a2-82bb-f10ff661ef5d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "04b0a128-ee85-4020-bfc2-c7140a9483f2"
            }
          }
        ]
      },
      {
        "id": "e0132c94-6dec-4bf6-ba29-5a28d96d4126",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "454a4b7f-92a8-47a0-bbb4-393fa3151b86",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9dcaaed5-0c23-4ad5-a661-a08a42fcafe4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "47b622ca-cad3-4d00-9213-b1e73bc28b2c",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "931b0a6b-3159-404d-9c56-0dcb6c686c20",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "8446324e-7a6f-4d52-87dd-d3ac7d6805ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "996e9a30-9b31-447a-ae2b-dc2292ee2cb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5baedcf0-b624-464b-ae2a-32c23150a44c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14f0706e-0869-4666-ab32-facb6e23d919",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de3e097c-6f82-47ef-9141-980fde0e3e6f",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "b5a83dfa-a3c6-4e97-a665-80656683a32d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0559436-210e-47e7-bed4-b6eed52a6991",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "514a4033-5833-4ed3-ae7e-3f9524651c5f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "efa9c3a2-c7ec-4eff-8f4d-075d3894eaab",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7f41b165-8022-4310-bcc9-479c01e8f56f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5837f9fc-6050-46b6-b7a2-3eba558dee06",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8ca0cdc5-b421-4280-92a5-0f145b3c9ca4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8b5d6c3c-addd-42da-a4c2-13069d279f94",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "0ee49917-59cd-49a3-ad6e-160e29582688"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "27e3cd90-34ea-4644-8702-b1830516681b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f4f12ca3-3594-4d65-bc37-60d4924d6a38"
            }
          }
        ]
      },
      {
        "id": "2694957e-cda5-4238-83aa-4cc0aa5d8210",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "3029db08-d84e-46ff-88ee-c0b6db388278",
            "name": "Negative Testing",
            "item": [
              {
                "id": "017aac05-1edb-4b85-b70e-d928367833b7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "691554cd-db26-4d31-978d-376acbc4905f",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1db3f17a-0270-4bdb-a964-a4ef36ddf8c1",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "db3f8669-d77a-4a24-b84b-1bfcdcaa5e8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fbe096f-d7d5-4dd7-b347-aed88c7365a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e23d38c8-a22b-4888-a8a5-d34dc2df9d80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a14637d3-7532-43c5-857a-9100baa23f42",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69a1e4d2-3bf4-44d1-aead-93922283a4b2",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "401d481c-8abc-40ea-acb1-2d33c6f1a8b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23d37ef8-0985-4104-8349-460210664661",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4e1a9ac0-0944-4f66-a2fb-1dc31098f36d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c7ab98e0-9a44-4c67-9504-da078df12e7c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9cceef6f-cd47-4cd8-ab31-ac9cc501bb7e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "32e5cb53-cfba-4e33-82e0-978c259e804b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "de0d5d39-1612-4338-a7c9-58a4f2e4c903"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2fc25b7a-acce-4aaf-b255-85c40d0239af",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "3af2c27d-205f-4576-b047-c2c875e5da13"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f721d510-923e-42a0-9a47-e0774a6fa427",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b7da6153-15db-42b2-82d6-346d4d586766"
            }
          }
        ]
      },
      {
        "id": "cd3617d2-f6de-4f0e-9ea1-c05ee8fc817a",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e943dc01-5b1b-430d-a7b6-0ef7155e5225",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "561ee184-4fc6-43f2-9030-8333f989bfe6",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "176e2df4-40e1-42a6-be28-bc7ab612dc2a",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "31e52066-1432-4bf5-99aa-ff32b99d308b",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8fb083a9-a5a8-4e20-8fe5-e474a63ce163",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1925,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 262,
        "pending": 0,
        "failed": 6
      },
      "tests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 517,
        "pending": 0,
        "failed": 60
      },
      "testScripts": {
        "total": 967,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 958,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 59.39863294737065,
      "responseMin": 21,
      "responseMax": 534,
      "responseSd": 53.94125075083959,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1675643878206,
      "completed": 1675643903938
    },
    "executions": [
      {
        "id": "9e17a383-5b09-4514-a8d4-403f14af22d9",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 253,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "89625839-726b-4ee3-afd9-b9630dcf06b7",
          "httpRequestId": "c6976859-ba55-439a-8c0b-4ff4458917bd"
        },
        "item": {
          "id": "9e17a383-5b09-4514-a8d4-403f14af22d9",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "9fcec2de-e144-41a5-824e-9d7ca5d3fd62",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 0
        }
      },
      {
        "id": "6f400dba-8420-453a-8dde-8b71039a713b",
        "cursor": {
          "ref": "64d8ba7b-018b-40a6-9a87-9d06eb048d7c",
          "length": 253,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "f914f1ed-67bf-43d3-88e8-88cc4f019f2b"
        },
        "item": {
          "id": "6f400dba-8420-453a-8dde-8b71039a713b",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "ae97624a-1732-4aad-854d-967798986303",
          "status": "OK",
          "code": 200,
          "responseTime": 21,
          "responseSize": 0
        }
      },
      {
        "id": "14887b86-0987-4176-9821-86ef792ad8fd",
        "cursor": {
          "ref": "7a2e8f8c-3fe4-4e24-aff9-aa0b93d8c595",
          "length": 253,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "09327547-f333-4e50-ac2d-eb556bb8c834"
        },
        "item": {
          "id": "14887b86-0987-4176-9821-86ef792ad8fd",
          "name": "did_json"
        },
        "response": {
          "id": "2f3cf1e3-ae25-46c3-bc31-0a839363f330",
          "status": "OK",
          "code": 200,
          "responseTime": 282,
          "responseSize": 1211
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3971fd1a-2477-4657-a8bb-c0c667b49335",
        "cursor": {
          "ref": "cacf2d45-f936-4929-88f5-1ec675ba09a7",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "06381aca-8106-4994-820b-dbb7db4697c1"
        },
        "item": {
          "id": "3971fd1a-2477-4657-a8bb-c0c667b49335",
          "name": "did:invalid"
        },
        "response": {
          "id": "5dd6aa75-0754-48e6-9c3f-056ee015d32e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "3971fd1a-2477-4657-a8bb-c0c667b49335",
        "cursor": {
          "ref": "cacf2d45-f936-4929-88f5-1ec675ba09a7",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "06381aca-8106-4994-820b-dbb7db4697c1"
        },
        "item": {
          "id": "3971fd1a-2477-4657-a8bb-c0c667b49335",
          "name": "did:invalid"
        },
        "response": {
          "id": "5dd6aa75-0754-48e6-9c3f-056ee015d32e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "16747d32-6b17-4f46-ac06-222a434c1d9a",
        "cursor": {
          "ref": "e2996d8c-bbe1-473d-b7d3-e075e601fedc",
          "length": 253,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "6720900d-7bfa-4869-8cf9-96d89c1a54f7"
        },
        "item": {
          "id": "16747d32-6b17-4f46-ac06-222a434c1d9a",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "81b34357-5baf-4d01-a10e-55e19cad55e2",
          "status": "Not Found",
          "code": 404,
          "responseTime": 88,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a554614-bd85-4b80-b739-2cd900a851af",
        "cursor": {
          "ref": "71a98719-92cf-473b-89fd-5c0690061003",
          "length": 253,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "e33c6c67-2c8e-40ef-a9af-a6e9638e2d86"
        },
        "item": {
          "id": "3a554614-bd85-4b80-b739-2cd900a851af",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "6c76bf57-e477-495f-bd60-3b3dee6ac1d1",
          "status": "Not Found",
          "code": 404,
          "responseTime": 48,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f554dad-6db8-4880-ac52-74c2ad81e6c0",
        "cursor": {
          "ref": "5b0f0670-cab1-4821-b6ea-96e48294707a",
          "length": 253,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "b6702964-293f-4c0a-9c1e-f13ae19c41ba"
        },
        "item": {
          "id": "6f554dad-6db8-4880-ac52-74c2ad81e6c0",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "8de6e534-adcc-440b-88f8-1395b87b83f9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9659681c-9b3b-4f64-b502-3f5fa7b52775",
        "cursor": {
          "ref": "f7abec7f-2d63-47a7-b0eb-97905f1f5b6e",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "bdb9231e-9776-4378-9301-f031740a294d"
        },
        "item": {
          "id": "9659681c-9b3b-4f64-b502-3f5fa7b52775",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "8c8f2ac4-5c3d-4616-94ed-41110fa92702",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 49,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9659681c-9b3b-4f64-b502-3f5fa7b52775",
        "cursor": {
          "ref": "f7abec7f-2d63-47a7-b0eb-97905f1f5b6e",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "bdb9231e-9776-4378-9301-f031740a294d"
        },
        "item": {
          "id": "9659681c-9b3b-4f64-b502-3f5fa7b52775",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "8c8f2ac4-5c3d-4616-94ed-41110fa92702",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 49,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57d69537-5a9f-4b4e-abb1-3ddad922166e",
        "cursor": {
          "ref": "4b26f31d-9a76-4ec1-a380-625b356f3390",
          "length": 253,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "21b56c2f-1f3c-450e-a901-f27716a01def"
        },
        "item": {
          "id": "57d69537-5a9f-4b4e-abb1-3ddad922166e",
          "name": "identifiers"
        },
        "response": {
          "id": "e1667b67-c384-44d8-a49a-2a8c3b0e6086",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 211,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "a0b09da4-53ed-4d2b-9d4e-25e97030882d",
        "cursor": {
          "ref": "93e596be-72e9-4ba6-8e1d-cd81b54f91be",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "5aa9143b-fc4d-46fa-a960-704f214a207d"
        },
        "item": {
          "id": "a0b09da4-53ed-4d2b-9d4e-25e97030882d",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "d144fb9e-841c-428e-b607-892ff6b757c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0b09da4-53ed-4d2b-9d4e-25e97030882d",
        "cursor": {
          "ref": "93e596be-72e9-4ba6-8e1d-cd81b54f91be",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "5aa9143b-fc4d-46fa-a960-704f214a207d"
        },
        "item": {
          "id": "a0b09da4-53ed-4d2b-9d4e-25e97030882d",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "d144fb9e-841c-428e-b607-892ff6b757c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e68933d4-0295-4f20-b8e7-6986b90007fc",
        "cursor": {
          "ref": "a523675d-a835-474a-a6bf-ec21a9dccd51",
          "length": 253,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "c69ecfd6-e752-4e6a-a986-2c26aa795004"
        },
        "item": {
          "id": "e68933d4-0295-4f20-b8e7-6986b90007fc",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "13ce2277-2b97-4136-bb07-d252ffe67be7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6afdf45f-59a1-407e-a723-6beda4daf03e",
        "cursor": {
          "ref": "4809e51b-c4d8-4dd3-b5e6-140dafd8991b",
          "length": 253,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "a33af319-0ddb-47d9-9aa8-9a494e66dd07"
        },
        "item": {
          "id": "6afdf45f-59a1-407e-a723-6beda4daf03e",
          "name": "credentials_issue:credential.@context:invalid"
        },
        "response": {
          "id": "faa9a0e1-199f-44d9-a1b1-4bd659108fd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 176
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afb40b49-3d6e-4eff-a271-46872fbf3413",
        "cursor": {
          "ref": "80437694-7b2d-4fbf-b71b-bfcb5dc35715",
          "length": 253,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "f9d2f98b-b7ce-4f23-8728-7e437e4cff2c"
        },
        "item": {
          "id": "afb40b49-3d6e-4eff-a271-46872fbf3413",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "940a05ee-e56f-4868-bb12-84abe8acdaa8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a041503e-3e18-4e00-a282-d14a15db236c",
        "cursor": {
          "ref": "0c48b56e-c7bb-4ec0-b897-e72e56f3dc5e",
          "length": 253,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "c4331c0f-5141-4d1d-a6d8-cd1465c0caf0"
        },
        "item": {
          "id": "a041503e-3e18-4e00-a282-d14a15db236c",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "7e10e9f8-f92a-4f0d-9575-cd9cce3ea383",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7d48557-e1be-439b-adc3-08b97889ab77",
        "cursor": {
          "ref": "c3ad6258-8a13-4996-b3b1-d7728f04e18d",
          "length": 253,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "f2e0f1b9-8ede-4ee0-8ee7-b12617616a04"
        },
        "item": {
          "id": "e7d48557-e1be-439b-adc3-08b97889ab77",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "f2cd1761-2ba6-4b9d-9849-c85f0a1713b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26c4a627-ba97-4b5c-a097-54bffce3a8a0",
        "cursor": {
          "ref": "728848fe-84ae-4ded-9421-f8978777dd0b",
          "length": 253,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "f835c3b1-72f4-4c9f-a7b1-95e85a3ad5fd"
        },
        "item": {
          "id": "26c4a627-ba97-4b5c-a097-54bffce3a8a0",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "6ce37c1f-b4d8-48ff-bbc7-344038149e29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95c8db27-6531-46f1-9804-4a540e010541",
        "cursor": {
          "ref": "fae54356-8c9e-443b-97de-bd227aaaec12",
          "length": 253,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "eb37e586-ade6-4497-8d10-0bae9e7aa7d6"
        },
        "item": {
          "id": "95c8db27-6531-46f1-9804-4a540e010541",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "29d87fb2-45c3-4d34-8514-e778a9143cd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a10c8a2-a886-4a8b-96f6-016d1df8eb60",
        "cursor": {
          "ref": "8d489004-7c17-4ae2-adf4-2e5952dca6c8",
          "length": 253,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "d2b18402-dd3a-4d2a-a46f-40e3da7b4df4"
        },
        "item": {
          "id": "6a10c8a2-a886-4a8b-96f6-016d1df8eb60",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "a0b5be80-20de-4a80-9c7f-d1fc3259a6c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0687e2ef-bd18-4929-9660-47988c0d4bbc",
        "cursor": {
          "ref": "fd1e0a95-2296-4ee2-a7a1-918c89893cdd",
          "length": 253,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "45ad2886-915d-4eda-a920-fd159c2fce9f"
        },
        "item": {
          "id": "0687e2ef-bd18-4929-9660-47988c0d4bbc",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "cdc5f85e-7ea4-4c85-bd20-bbc2d15298a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef3c82c3-5135-463a-9364-b89720e9ff95",
        "cursor": {
          "ref": "09470b9e-4de1-440c-affc-b7495ba4351c",
          "length": 253,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "466dfc42-ecca-49b3-a2eb-2304a0baf7b7"
        },
        "item": {
          "id": "ef3c82c3-5135-463a-9364-b89720e9ff95",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "974b7fe7-e98a-436d-b5f8-f453be530a74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4066ab6-fdbe-4bea-8612-3ccd2c0cc189",
        "cursor": {
          "ref": "cefff6fe-6e01-47e9-84fa-f948bf649f73",
          "length": 253,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "381b852e-b36c-4603-9173-52256a65ffce"
        },
        "item": {
          "id": "d4066ab6-fdbe-4bea-8612-3ccd2c0cc189",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "2b0c5b10-fe7b-44e0-b34a-f2c3c420ab28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78de8a80-ad4a-4a75-8475-8266f306db74",
        "cursor": {
          "ref": "9bdccc55-62ef-44a3-9866-644b2d61d16f",
          "length": 253,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "9c2d85e8-c159-4122-91d7-1cb2347fa374"
        },
        "item": {
          "id": "78de8a80-ad4a-4a75-8475-8266f306db74",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "33e81ecf-734a-4fec-b56a-7b7e9a0bd73f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c74acfa-8a1e-45ed-9bc5-7cc921a73634",
        "cursor": {
          "ref": "b240b65b-2716-4ea1-894c-280bb25f3baf",
          "length": 253,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "7292b876-b6d8-4d6c-945e-2bde0d12e390"
        },
        "item": {
          "id": "6c74acfa-8a1e-45ed-9bc5-7cc921a73634",
          "name": "credentials_issue:credential.id:missing"
        },
        "response": {
          "id": "d4efacea-c4f2-47e7-89df-9f1060449256",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5620f419-a800-4d07-a3d2-6dce8ae5ca16",
        "cursor": {
          "ref": "4c374fbf-10bb-4d68-a785-ef5dfb5ef051",
          "length": 253,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "f99af1b2-13c9-4956-80d8-9da84c8cfb89"
        },
        "item": {
          "id": "5620f419-a800-4d07-a3d2-6dce8ae5ca16",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "7695f059-9349-49d2-9e09-50f5ef28ad98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29bd060a-258c-41ca-ba49-63e45d632e93",
        "cursor": {
          "ref": "bdff1653-8bb8-4f25-a07a-4c6ec21a8444",
          "length": 253,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "68f10d46-402e-454d-9348-833bf786bad9"
        },
        "item": {
          "id": "29bd060a-258c-41ca-ba49-63e45d632e93",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "5d10aadc-785f-40ee-8247-22d784cf02d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0170e03-8b6d-475e-926b-ece990877095",
        "cursor": {
          "ref": "3ef406db-c268-4c8d-9758-1c9e1fc70cbb",
          "length": 253,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "0a6cd5cf-eeb8-4e6a-8bad-bf8f570b4740"
        },
        "item": {
          "id": "e0170e03-8b6d-475e-926b-ece990877095",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "a2a50d57-509c-40ea-b7c6-99f428f10faa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17e7089e-f207-46cc-a26c-baf3137e6d36",
        "cursor": {
          "ref": "cd747d6d-dfdb-43c3-babf-703ed8b32774",
          "length": 253,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "604e8f31-3daf-4679-97f2-64ce9975d44a"
        },
        "item": {
          "id": "17e7089e-f207-46cc-a26c-baf3137e6d36",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "950a7378-8390-4f17-8276-21c22fc01124",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d3fc6b8-9247-40c6-abeb-7cf5a3c04714",
        "cursor": {
          "ref": "2211ab4c-d482-4337-81b2-9337f8e9eee5",
          "length": 253,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "50770d03-a267-4f94-8b98-f35cc3484dc2"
        },
        "item": {
          "id": "9d3fc6b8-9247-40c6-abeb-7cf5a3c04714",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "bf64edb2-4831-4397-a4d4-7cecf58cf2aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1f1f631-6f82-4910-ab28-deae7d444bb3",
        "cursor": {
          "ref": "98684955-9d59-4fab-8253-0abbdb9b33d5",
          "length": 253,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "fa4b98f6-a7d5-43db-9fbe-2f325557c471"
        },
        "item": {
          "id": "f1f1f631-6f82-4910-ab28-deae7d444bb3",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "5060f6a2-a88d-4c50-8cc1-0ce9ed615815",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e971aa64-fb50-46d3-8d61-457d04dd06c2",
        "cursor": {
          "ref": "8ec10ef4-023d-4b66-832b-2d7b725dc2c0",
          "length": 253,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "2ad4f00f-022c-4106-96bd-11700a9746f0"
        },
        "item": {
          "id": "e971aa64-fb50-46d3-8d61-457d04dd06c2",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "4fcaf382-fd95-417a-b777-443e030c8f84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78511340-40d9-4252-9970-2dcd29b38883",
        "cursor": {
          "ref": "5c99178c-4ceb-4685-ab81-9c14d28f24ad",
          "length": 253,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "21ed649b-5b35-433f-8772-7df5043999ba"
        },
        "item": {
          "id": "78511340-40d9-4252-9970-2dcd29b38883",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "8d4a4f7f-f5c5-4a48-aa6c-7558ea25181d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ef06089-4274-4ef1-84d3-eb815ab7857c",
        "cursor": {
          "ref": "2c7d3e09-11e0-417f-8ade-fa382e5cc8b2",
          "length": 253,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "ce3eefe8-f02c-454e-923d-aa702b9f04f2"
        },
        "item": {
          "id": "4ef06089-4274-4ef1-84d3-eb815ab7857c",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "8f1b8f20-c52f-4f48-851d-357e26af7f80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1619b223-1404-4b99-9e46-ec251791594e",
        "cursor": {
          "ref": "46843ab2-ae07-4554-9fb8-8fd3b1785050",
          "length": 253,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "054ea390-7f3a-4bf2-b873-1675e28f49d7"
        },
        "item": {
          "id": "1619b223-1404-4b99-9e46-ec251791594e",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "8b87b5a1-c8f6-496b-b5e3-dbe4de8e3b46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73fa08c7-d7be-4df8-a00e-9ec5d99932b5",
        "cursor": {
          "ref": "3f3ddb99-37c3-4a9e-a41f-59508caa6adf",
          "length": 253,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "2e9b8b3a-1165-4191-bf35-0bc82fc88a1e"
        },
        "item": {
          "id": "73fa08c7-d7be-4df8-a00e-9ec5d99932b5",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "85ea6225-ef90-4cd3-b1e8-69189075e746",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f0ed193-c378-498e-ad50-cb98c18d789a",
        "cursor": {
          "ref": "8bb9635e-8bbe-4a1e-b095-041bd0c9c30a",
          "length": 253,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "1a0b9463-0730-4837-8bdb-ddc60a1e1064"
        },
        "item": {
          "id": "5f0ed193-c378-498e-ad50-cb98c18d789a",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "ceef1136-fbff-4b8f-949d-ec0f624db5bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac03cb1d-7818-43e4-9c8e-83af5a8a5245",
        "cursor": {
          "ref": "9cfd954e-5df4-4271-a732-15236fdd51f5",
          "length": 253,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "56822ec2-14a0-49ad-ba16-d7e39f44c710"
        },
        "item": {
          "id": "ac03cb1d-7818-43e4-9c8e-83af5a8a5245",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "50d0abd6-e8d0-4aa7-941f-4ba5baf047e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2de6905-5bd1-46ca-9812-8b72cf53d1fe",
        "cursor": {
          "ref": "fcc133c3-0460-4b94-b69d-46d980c4d708",
          "length": 253,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "98d01a67-cb1c-4985-bf87-ee9e3ab0da51"
        },
        "item": {
          "id": "f2de6905-5bd1-46ca-9812-8b72cf53d1fe",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "6e4f6672-c946-4aa9-b5bb-3cac8a8fdde4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02ce490e-ac7e-4203-af60-21476a7948bc",
        "cursor": {
          "ref": "d6de75c2-71b9-4dab-93a6-68a479c1bbe9",
          "length": 253,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "8af65c68-ed6c-4fe6-b6d2-97e6827a3aee"
        },
        "item": {
          "id": "02ce490e-ac7e-4203-af60-21476a7948bc",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "9891cfbb-bc9c-475d-af67-954d3c687d0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf1055a6-ba1d-4393-b875-6fe534fd23a6",
        "cursor": {
          "ref": "0e2ce65c-fd0e-447f-94e8-1beaf7044035",
          "length": 253,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "76df39c3-5b2b-4172-b2a7-94a4c543abc8"
        },
        "item": {
          "id": "bf1055a6-ba1d-4393-b875-6fe534fd23a6",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "3b129052-3a4c-4479-9d78-8f08fcbc4110",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68d050cf-b6e4-4181-999a-1cea8658f9eb",
        "cursor": {
          "ref": "23fa9cad-fc84-4f74-8fbb-8a61d17f8807",
          "length": 253,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "e6dcc721-5611-4a9d-80d1-6c5f437fa4b1"
        },
        "item": {
          "id": "68d050cf-b6e4-4181-999a-1cea8658f9eb",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "13db843d-a806-4a1c-90fe-cc0e64dead35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b952646e-52d3-4cec-98d2-e786f0c7d21c",
        "cursor": {
          "ref": "0475e6e0-d1b3-4634-8886-e7821564e8ac",
          "length": 253,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "4a257bf9-171e-4f70-9c25-9ef2971b61cb"
        },
        "item": {
          "id": "b952646e-52d3-4cec-98d2-e786f0c7d21c",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "88643b3a-7996-407e-91fa-0cf47928af66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72cfd92a-fec4-4e92-8d91-295b0d17cb91",
        "cursor": {
          "ref": "c04ac610-073c-4004-90dd-fe3151dfe028",
          "length": 253,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "4864069f-72c4-48cb-9732-a62c16921ec4"
        },
        "item": {
          "id": "72cfd92a-fec4-4e92-8d91-295b0d17cb91",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "fe7293e7-9a24-4015-8b07-3bf84aeadee6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9341ab4c-f3b1-4be5-83b8-7bb966aefa8b",
        "cursor": {
          "ref": "60cf96a2-5a74-4d7a-a5f2-aa2129263d37",
          "length": 253,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "f0bc1659-4a2b-46c5-97d1-3523ccaacfa6"
        },
        "item": {
          "id": "9341ab4c-f3b1-4be5-83b8-7bb966aefa8b",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "090d0095-57c9-4e47-9789-8f5785d2dceb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc658b91-caf6-4bfb-938e-f667cc69a929",
        "cursor": {
          "ref": "18056e6d-33ac-44fc-a692-511b089641ce",
          "length": 253,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "a8877d76-1066-48f5-ab85-e06fd9879d8e"
        },
        "item": {
          "id": "cc658b91-caf6-4bfb-938e-f667cc69a929",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "d4e9dfe9-1351-4fdb-a85a-5c728466f2a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f080e08-da31-40d7-a586-1d872dc9f5ac",
        "cursor": {
          "ref": "6958e674-3312-4228-a12f-eb91acc2beee",
          "length": 253,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "79887a8e-a9a5-4597-9849-5b1c035452ed"
        },
        "item": {
          "id": "2f080e08-da31-40d7-a586-1d872dc9f5ac",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "f8fb2461-e09a-4604-8be4-2aad42d8c234",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c04b4fd-2078-46a0-b467-aa78a2faf0e7",
        "cursor": {
          "ref": "6ea76476-1c44-470c-8729-a7c75072e3f0",
          "length": 253,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "33077ac7-897b-4e23-9dc5-6691b22254d1"
        },
        "item": {
          "id": "3c04b4fd-2078-46a0-b467-aa78a2faf0e7",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "ef98a978-435b-431d-bf45-13826ee355af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48b44ba4-7133-4b5d-9cf1-4299ffd50a28",
        "cursor": {
          "ref": "4853a60e-247d-4c7f-897d-c55e9b8ae63f",
          "length": 253,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "275dae62-8e07-4565-8a1c-4a173f0c5adb"
        },
        "item": {
          "id": "48b44ba4-7133-4b5d-9cf1-4299ffd50a28",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "07b02f4e-de7c-4708-bd5d-16fc97823c9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "3154b657-c4bd-44b4-8a20-3c1bed32bf64",
        "cursor": {
          "ref": "ceb03929-2cb9-4068-87a0-4be0dd2b4d31",
          "length": 253,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "2a940a98-44f2-4e45-8ea1-31217af196e1"
        },
        "item": {
          "id": "3154b657-c4bd-44b4-8a20-3c1bed32bf64",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "2b7052f6-dd7b-4de7-851d-3f8ff056429b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e2594f2-c1d1-44fc-8729-ff330efcb909",
        "cursor": {
          "ref": "7037f785-4b8a-4e14-bafb-a61595d78adb",
          "length": 253,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "32f72637-5071-4201-b4ae-02d8070e8688"
        },
        "item": {
          "id": "7e2594f2-c1d1-44fc-8729-ff330efcb909",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "cdfa7b8a-b706-42af-a412-5a933130b612",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33e95a41-fbbe-4c15-b47f-e4318896f3eb",
        "cursor": {
          "ref": "67298dd6-fe4d-4b81-b2b0-0592eef0e513",
          "length": 253,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "6413651e-d8fc-4147-9769-9c69bb12448c"
        },
        "item": {
          "id": "33e95a41-fbbe-4c15-b47f-e4318896f3eb",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "0d9db6d0-7e98-493a-8e60-cc1feb171014",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab8fd121-d29d-4712-b826-c7d690ce9a9a",
        "cursor": {
          "ref": "fe33c357-d20b-4487-b1ce-c54375d47598",
          "length": 253,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "368a04db-d240-4d1b-bfdc-b42a1e378c5a"
        },
        "item": {
          "id": "ab8fd121-d29d-4712-b826-c7d690ce9a9a",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "b8e6965e-5e95-4f1e-b476-36234d5703cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4590b72d-c5d5-4d17-8d78-dfc7dd5b1f08",
        "cursor": {
          "ref": "47b3ceaa-ca38-424e-8c2a-aab3314dc8e9",
          "length": 253,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "53238a97-a9b6-4f4c-a7e7-341cc931e11f"
        },
        "item": {
          "id": "4590b72d-c5d5-4d17-8d78-dfc7dd5b1f08",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "66191342-d126-490c-965b-9663aa739259",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07071275-01da-4bbd-96f8-32de695ea852",
        "cursor": {
          "ref": "6427ab08-ed24-4251-a176-0abf1cde6f6a",
          "length": 253,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "b800e126-eaf1-4b41-abd8-bf9deffd926a"
        },
        "item": {
          "id": "07071275-01da-4bbd-96f8-32de695ea852",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "00827d24-3efc-4659-8f93-78b641639b2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28a46f79-0ad2-422f-bdc4-b39f0dca99c3",
        "cursor": {
          "ref": "21bfe016-4c81-4fa8-8348-c2b164b84f0a",
          "length": 253,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "de4aacf5-7a8f-4aee-8ae0-5e45532f4bc5"
        },
        "item": {
          "id": "28a46f79-0ad2-422f-bdc4-b39f0dca99c3",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "96fa7dc5-533b-49c9-bdae-5923b8a026fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "f8b4929f-4ea4-4a25-9c0a-0a9461f8646b",
        "cursor": {
          "ref": "2112e761-96e4-4c00-966a-66599132ef7e",
          "length": 253,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "cd352f05-3f7e-4eab-9692-bf695074e272"
        },
        "item": {
          "id": "f8b4929f-4ea4-4a25-9c0a-0a9461f8646b",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "482a0df2-b06d-4e93-b6ec-02b8718b134c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d34c2b1b-9d11-4bae-9048-3ae8b9509c69",
        "cursor": {
          "ref": "fe98a676-795b-416b-9864-b2e99f740c80",
          "length": 253,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "7f27029a-cfde-46fa-b39b-9d03304ea1e3"
        },
        "item": {
          "id": "d34c2b1b-9d11-4bae-9048-3ae8b9509c69",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "72f93700-18b8-4a9d-a60f-fdfac12bf53f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b365efbe-c162-4b4e-b362-e79ae1855e1c",
        "cursor": {
          "ref": "df656af2-5c47-4cbe-a72d-995a88b798cf",
          "length": 253,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "a86e210f-10fd-4ce7-acdc-0f902c299737"
        },
        "item": {
          "id": "b365efbe-c162-4b4e-b362-e79ae1855e1c",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "ea558e36-404c-4c19-83ae-2028d31ff9c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63304980-999e-498a-876d-c55491c4cc5f",
        "cursor": {
          "ref": "b41099c7-cde8-447c-acb9-17e990300ad6",
          "length": 253,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "bfc821cb-f4e5-4245-9398-226673876c52"
        },
        "item": {
          "id": "63304980-999e-498a-876d-c55491c4cc5f",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "68e30396-75c7-4ebb-9274-3c6f606d2355",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd7d9ad7-5738-4b2a-969e-7ecba2cbcfac",
        "cursor": {
          "ref": "0a3435c6-c62d-4e6e-aaf8-e4da17e65917",
          "length": 253,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "7af401a0-0e2c-4897-be4f-78a7885a949f"
        },
        "item": {
          "id": "bd7d9ad7-5738-4b2a-969e-7ecba2cbcfac",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "24208d58-6d40-45a6-871f-ace8bb6fcd44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "035c53ca-4f2d-413f-a0dd-f3ce98877d0c",
        "cursor": {
          "ref": "acb0ad71-9435-41d4-9059-f0c53a6fe39e",
          "length": 253,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "5a3e2832-d764-4652-977d-6a06bb39bb3e"
        },
        "item": {
          "id": "035c53ca-4f2d-413f-a0dd-f3ce98877d0c",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "d7ac0694-ada6-40e6-9555-0363d11ee62f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "021b6861-9b62-411d-8fbc-a88226591aff",
        "cursor": {
          "ref": "11ae9348-891b-4c47-9834-6b8283df5b78",
          "length": 253,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "40573f76-7f7e-4fc0-b9dd-a13b9e36600f"
        },
        "item": {
          "id": "021b6861-9b62-411d-8fbc-a88226591aff",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "6b48de68-802d-4d43-8b48-d54ddba280bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa74c06c-49b2-40b7-b92c-ef6610dffe79",
        "cursor": {
          "ref": "6235cfc5-3c27-4c1f-9c59-4aa9e33afb6b",
          "length": 253,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "b34db797-f638-432b-b347-fe6fa50ecca1"
        },
        "item": {
          "id": "fa74c06c-49b2-40b7-b92c-ef6610dffe79",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "0c207ceb-f12a-45b3-8793-939bf26a139c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b20b50c-4e12-4c90-9cf0-2fd9c80fc490",
        "cursor": {
          "ref": "09b1f686-7b7a-46db-bfaf-3bc0a21e41d5",
          "length": 253,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "b752fcf3-672e-4e9f-b046-0df4bde7df52"
        },
        "item": {
          "id": "7b20b50c-4e12-4c90-9cf0-2fd9c80fc490",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "72980643-3773-47f8-80ea-ce980ae92d3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "549f0612-4cc0-45c5-b24d-d802c9a7d701",
        "cursor": {
          "ref": "a03967af-5596-439b-94b9-21a549858138",
          "length": 253,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "c3862f69-b06e-40af-921a-f33241b4cf3b"
        },
        "item": {
          "id": "549f0612-4cc0-45c5-b24d-d802c9a7d701",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "aa60ddc6-7392-4ee1-8ced-7659b6cec4aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8a38e6c-3e4d-4cf8-879f-f66138030472",
        "cursor": {
          "ref": "4beceacc-d48a-4a6e-8df0-d62c338650d0",
          "length": 253,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "663a4188-c7c3-41c5-89b9-de6bde1a0d18"
        },
        "item": {
          "id": "d8a38e6c-3e4d-4cf8-879f-f66138030472",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "77977511-07e2-45b1-858b-46b8226b7630",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "326aba86-dd79-4d6e-a712-ee7558286200",
        "cursor": {
          "ref": "ace6ff69-2d4f-44f3-98f5-1e862afe3988",
          "length": 253,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "2f2f6d6e-17d4-4de9-8575-d9bce50c9e11"
        },
        "item": {
          "id": "326aba86-dd79-4d6e-a712-ee7558286200",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "383c49c5-84f1-4c07-bd3c-37c83d645566",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99cd2412-6820-447d-92df-371f14325c44",
        "cursor": {
          "ref": "5e3a73d4-ba9f-480d-8fc6-574a3f3e1f71",
          "length": 253,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "10668b65-89f0-4abc-8cab-718a38816a53"
        },
        "item": {
          "id": "99cd2412-6820-447d-92df-371f14325c44",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "7bca6d82-5b7f-4f7b-9d21-183b0646f5b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04ab82e2-457d-44c0-b137-c3a4883b20c2",
        "cursor": {
          "ref": "93f77ef5-8c7e-447c-a89b-d8f18615b7e3",
          "length": 253,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "2abc3afe-d047-4c2c-bb24-4c63b9b094b0"
        },
        "item": {
          "id": "04ab82e2-457d-44c0-b137-c3a4883b20c2",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "0238038c-2cba-4d5d-8bff-0970e12c6ebc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6546a6c-ab12-473e-85a7-1b48c21284d7",
        "cursor": {
          "ref": "292748fb-2dac-4fd4-88f6-0ff9e3979d9b",
          "length": 253,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "0ffeb5f5-7eb1-4a29-bccb-835fd158eb3d"
        },
        "item": {
          "id": "f6546a6c-ab12-473e-85a7-1b48c21284d7",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "d18b54c1-f80a-4bb2-bf1a-4c416e177f88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f37c1af4-49cb-42c7-b9e5-1e4966624e3e",
        "cursor": {
          "ref": "76cfde16-5d87-4b2f-a38f-86106b3d2299",
          "length": 253,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "b1d3e98c-8e89-420a-a2cf-3311325409a7"
        },
        "item": {
          "id": "f37c1af4-49cb-42c7-b9e5-1e4966624e3e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "deacf70b-1a06-4810-a2ae-90ceda69cfe0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "866732bc-e6ed-46b6-aab8-bb238f0f4b36",
        "cursor": {
          "ref": "639f1e50-ac6b-43d4-90d8-7efbc906f84a",
          "length": 253,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "06e8203a-3199-47c6-8d07-44fdc6ac2208"
        },
        "item": {
          "id": "866732bc-e6ed-46b6-aab8-bb238f0f4b36",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "bd6d9a8c-d2c7-4d31-951a-feff7c898e54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e293e84c-68a7-4a27-b501-d7fec18c5221",
        "cursor": {
          "ref": "d2e3309d-a81e-4b63-9cc0-3894c9631ce8",
          "length": 253,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "8778da4c-7045-4486-af5f-8fb4e6d8c94b"
        },
        "item": {
          "id": "e293e84c-68a7-4a27-b501-d7fec18c5221",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "235cf3af-1b8e-418b-82a4-e8c4f92edd85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4bb98b1-50b9-4204-85ab-f5d4ec4751f2",
        "cursor": {
          "ref": "24b5731a-f95e-47b7-be71-baae88226e25",
          "length": 253,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "7b201185-a5a5-4b9e-8fb2-2b0a4e6a4b24"
        },
        "item": {
          "id": "d4bb98b1-50b9-4204-85ab-f5d4ec4751f2",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "a76528b2-1f2f-42ad-847e-f5d0cb9128d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47d92499-6776-4cd4-a93d-45e56c9ee992",
        "cursor": {
          "ref": "6bfde9b9-4df8-49f9-9469-816061728ace",
          "length": 253,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "ccf66419-1785-499b-9e1e-02854b6abaea"
        },
        "item": {
          "id": "47d92499-6776-4cd4-a93d-45e56c9ee992",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "6b97f910-1441-425a-b492-3af7765b1341",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 684
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e699319-7f51-4704-a51e-abeb590588ef",
        "cursor": {
          "ref": "866104f4-5550-4a61-a435-93c9dfac76a1",
          "length": 253,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "dfc6f29c-5872-4ca3-a3d4-c1ba42d6ed64"
        },
        "item": {
          "id": "4e699319-7f51-4704-a51e-abeb590588ef",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "d582687b-7d5b-408e-becd-bc724a27c359",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 683
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea70403e-b94e-4cf9-8a93-08114421ac2e",
        "cursor": {
          "ref": "df76873a-919e-4dce-bb93-31260b38836c",
          "length": 253,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "a91ad157-a068-449e-896c-f23532bc04a1"
        },
        "item": {
          "id": "ea70403e-b94e-4cf9-8a93-08114421ac2e",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "d882f220-d33d-49b9-a728-eb0e9f1eca5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89c99d4f-c200-4238-8dcd-5fc334e15408",
        "cursor": {
          "ref": "2bec29b8-dd5a-4a13-9a9a-94ffd30773f2",
          "length": 253,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "0fc95445-245c-4d7a-ba9c-b16724e5e5f9"
        },
        "item": {
          "id": "89c99d4f-c200-4238-8dcd-5fc334e15408",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "3c42f0eb-d5f5-42ab-ab7f-e68e9ef0e7b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7cb9cdc-5b95-405e-8245-a39b9fd57679",
        "cursor": {
          "ref": "f852421a-9003-4b21-a810-688b1f4ba5bf",
          "length": 253,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "d44eeed9-70b0-465e-9ac5-ef12670adf17"
        },
        "item": {
          "id": "e7cb9cdc-5b95-405e-8245-a39b9fd57679",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "b96bf167-4053-41aa-949d-e86719443afe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a1dbdbf-55a1-42c1-8bb0-95dfecd01458",
        "cursor": {
          "ref": "4a71deec-ec68-4763-b3b6-1613c72f204c",
          "length": 253,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "3075abee-23ba-46bf-960c-2d8d7634c6b5"
        },
        "item": {
          "id": "8a1dbdbf-55a1-42c1-8bb0-95dfecd01458",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "dd0b2677-296a-4428-a3cd-9dce7474bc63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf34523b-5a4c-4664-b106-a4cd6f0718d5",
        "cursor": {
          "ref": "bcf378fb-5aa0-4768-81c0-2a5c2c7f966e",
          "length": 253,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "5d58a0b6-8039-40cb-8846-782ab4413bd9"
        },
        "item": {
          "id": "bf34523b-5a4c-4664-b106-a4cd6f0718d5",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "9911e05d-fbe5-4ef0-bd70-983afbfea586",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02eb323b-f7e7-4544-bafe-fae6ddb5db14",
        "cursor": {
          "ref": "c9a51b7c-59c1-433c-8563-2b4c1ec3a759",
          "length": 253,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "42c578eb-bd85-4388-bf2a-2f4bb95f8285"
        },
        "item": {
          "id": "02eb323b-f7e7-4544-bafe-fae6ddb5db14",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "f72a97a7-a4b9-4569-92d5-12441782995f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15552630-7730-4def-b3b0-363ea46f9dc2",
        "cursor": {
          "ref": "c3628ac2-6136-4048-9013-87c56681234d",
          "length": 253,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "46cbc6b2-eeb1-438a-a240-2bae9130762a"
        },
        "item": {
          "id": "15552630-7730-4def-b3b0-363ea46f9dc2",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "0015c914-0e6d-4a38-9db6-6ea40247372d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d14dde8-029b-4960-8874-10660682175f",
        "cursor": {
          "ref": "67d2383b-9d8c-41dd-b243-12e7b36cdc50",
          "length": 253,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "c02f4415-0f7b-45fc-96fe-6f84b13955b5"
        },
        "item": {
          "id": "6d14dde8-029b-4960-8874-10660682175f",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "a7d2e30d-018d-4148-b65b-b0593b7639b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16ad4ec0-2492-4268-9822-fee40f494509",
        "cursor": {
          "ref": "312d4c76-c1b5-46b4-838d-ff31c6d1bc22",
          "length": 253,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "cc312e82-c376-4768-9434-2f0e151b2bd4"
        },
        "item": {
          "id": "16ad4ec0-2492-4268-9822-fee40f494509",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "b93cfd8d-95fa-4c0c-b5fd-6a06363a5a33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a188075-f539-4940-83d7-0600f23c63be",
        "cursor": {
          "ref": "615344cd-6ac0-4e16-927e-94c68dd3fcba",
          "length": 253,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "a142c28e-39e2-4feb-a50b-d6d398b731b8"
        },
        "item": {
          "id": "4a188075-f539-4940-83d7-0600f23c63be",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "71484725-2f38-4be5-95e2-72448961dbb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d53d65a-8797-4a69-966a-805ca6e19c04",
        "cursor": {
          "ref": "086eb4a4-d0b8-469a-8f4c-ff46ebe6d40e",
          "length": 253,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "23657a65-71c6-4e6c-b70c-26cf2fc2885e"
        },
        "item": {
          "id": "9d53d65a-8797-4a69-966a-805ca6e19c04",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "d51ff71f-7e49-4324-bbf7-fd28a880221b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2cc3119-a611-456a-b3da-086ac1f50987",
        "cursor": {
          "ref": "1f2b5263-da1c-4aca-980e-2166698889fe",
          "length": 253,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "a985863c-1ca7-4da9-9b08-14a339ba38c7"
        },
        "item": {
          "id": "e2cc3119-a611-456a-b3da-086ac1f50987",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "c337bd1e-04c9-44e7-83e9-c0726fd0174b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92ef0164-9a7e-494f-b631-72afee8f8a5f",
        "cursor": {
          "ref": "3f401a21-095c-4fbb-90d4-d325903dee3d",
          "length": 253,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "5811aaac-fdd3-4287-9e8b-bc4f8349397a"
        },
        "item": {
          "id": "92ef0164-9a7e-494f-b631-72afee8f8a5f",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "db024aed-e174-454c-9ed7-f876d943ee25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4138556-f2d6-4c3e-89d8-fbfa145c9d98",
        "cursor": {
          "ref": "2234f45f-1c89-4b29-89af-dbab8392a3ee",
          "length": 253,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "477733f6-9f9c-4482-8f26-0be63e7686cd"
        },
        "item": {
          "id": "d4138556-f2d6-4c3e-89d8-fbfa145c9d98",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "a04f6f7a-ba4a-444a-b334-f5d75e89d5fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8052078-5844-46c7-b3d8-0d16be9cb592",
        "cursor": {
          "ref": "81bc95de-c57f-418f-b21c-adba6090ab40",
          "length": 253,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "0fccd3b1-e9f3-4eea-a46d-275333e9ad18"
        },
        "item": {
          "id": "b8052078-5844-46c7-b3d8-0d16be9cb592",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "39f85ee2-225f-4019-ab41-59f04523fa7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35366af2-a7ca-4763-9e35-5835a7b7c1d9",
        "cursor": {
          "ref": "1343f468-41a6-41b2-977e-20a300ab175c",
          "length": 253,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "0e3a2bef-f5d8-4d21-a71d-a0a47c45b130"
        },
        "item": {
          "id": "35366af2-a7ca-4763-9e35-5835a7b7c1d9",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "1f8f0094-de95-4112-a6ab-84e8e0e01f62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a5a72d7-31d9-4e05-9a88-d39ebd03a6de",
        "cursor": {
          "ref": "3cad1599-6d6b-481b-81d7-d364f110e7ba",
          "length": 253,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "78433dbf-8bb9-420c-b644-45d856303636"
        },
        "item": {
          "id": "7a5a72d7-31d9-4e05-9a88-d39ebd03a6de",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "400c784e-d46d-4c95-93aa-32cc5b5057cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 515
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79348d40-562a-4012-b279-673a252964de",
        "cursor": {
          "ref": "7d988c8e-b07c-44a4-b651-26cd60aa2664",
          "length": 253,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "c2f0e66c-958f-4a35-944b-a12d2bec7f1f"
        },
        "item": {
          "id": "79348d40-562a-4012-b279-673a252964de",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "64e27cbd-87e9-43a0-a660-ca8c8efe466c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 514
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aad90c50-eb3a-4c64-955c-eb9c7dc62da6",
        "cursor": {
          "ref": "256a16a1-ca9a-49e9-bbe4-5d4418660745",
          "length": 253,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "b70504c6-68d6-4820-b28e-2d2c0c3d2e42"
        },
        "item": {
          "id": "aad90c50-eb3a-4c64-955c-eb9c7dc62da6",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "765cdbd3-20d4-4278-a0c9-77e4e9f295d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 516
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b23920be-954c-45c6-9ea4-173be04f3f6c",
        "cursor": {
          "ref": "c18f2ad0-203b-4915-be31-1c8efa2151da",
          "length": 253,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "e968b2aa-3eee-450c-9abb-e5d5fa4f9624"
        },
        "item": {
          "id": "b23920be-954c-45c6-9ea4-173be04f3f6c",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "021baf22-2702-4319-93bd-fd8a765793df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a8b0008-2b28-4f1d-b638-694cb4463b78",
        "cursor": {
          "ref": "8494af43-ad4a-4332-9ad5-51b5c99450dd",
          "length": 253,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "4b8bb700-3a36-4634-a329-469ffac9cbdc"
        },
        "item": {
          "id": "5a8b0008-2b28-4f1d-b638-694cb4463b78",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "e26df31e-98d8-414b-a9ba-b92189ecbf2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 516
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "940279c5-d4a1-4023-bf48-e86ddad164a0",
        "cursor": {
          "ref": "1bf453a6-fe3b-4d2a-9280-6211b2415f32",
          "length": 253,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "076a82d7-e244-4bc6-9d06-977890defb34"
        },
        "item": {
          "id": "940279c5-d4a1-4023-bf48-e86ddad164a0",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "64076c79-3ac0-420d-8961-18c11f986298",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8181d92-8d89-42f0-92bd-5fa29d35a00b",
        "cursor": {
          "ref": "34ddc06d-9fb5-4d24-90f8-7f6d0b6ee5fb",
          "length": 253,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "cab59188-5bed-4380-b807-b655b3cf2975"
        },
        "item": {
          "id": "e8181d92-8d89-42f0-92bd-5fa29d35a00b",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "a382e363-7e7e-4c64-a4a1-5b18e0a4acc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78636826-2d6d-4054-85e4-c8a32b008248",
        "cursor": {
          "ref": "fa5734a3-3182-4f8c-966e-482937f2da41",
          "length": 253,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "865a58d8-56d2-4dcd-893b-07bea003e867"
        },
        "item": {
          "id": "78636826-2d6d-4054-85e4-c8a32b008248",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "b02b242c-1185-4666-be81-14680429b3b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3de7e1f4-e958-495e-af71-729567fabf9a",
        "cursor": {
          "ref": "9f9ce922-4cc1-49fd-85f6-9fea8c7d7bf8",
          "length": 253,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "48697067-876f-4a31-b983-ee55fc582088"
        },
        "item": {
          "id": "3de7e1f4-e958-495e-af71-729567fabf9a",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "fa4f1e82-fd0a-49d9-93e5-bce7c7f425af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2da0ee24-bff0-4748-8aff-dc681e83c9f5",
        "cursor": {
          "ref": "f12b3294-e25d-402b-bfa6-362f194f5e47",
          "length": 253,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "40a6945b-f7af-4b3f-bec5-14660eb5692b"
        },
        "item": {
          "id": "2da0ee24-bff0-4748-8aff-dc681e83c9f5",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "e2b8bcd9-7bbd-4ab3-9afe-eebd34479b60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efffa0a3-0672-4f03-a1ee-19051b881ccb",
        "cursor": {
          "ref": "eea6b132-2787-40b3-87c5-ef0a758a17b5",
          "length": 253,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "4160a6c9-5c88-42b5-b0df-cb3af2e4be70"
        },
        "item": {
          "id": "efffa0a3-0672-4f03-a1ee-19051b881ccb",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "55cd4bf0-c7b2-405e-bae4-53b04e37958b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8dee207-a09c-413c-83ce-6daebb6cad7c",
        "cursor": {
          "ref": "d3541f40-7eb8-4bf6-a3b5-00fda3c493df",
          "length": 253,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "69c0e17d-f9df-4c24-ac41-565a0a0513d8"
        },
        "item": {
          "id": "a8dee207-a09c-413c-83ce-6daebb6cad7c",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "5e6858cd-355b-4558-a7fe-7695f92faa77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 146,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65050f40-314f-41e1-a3f8-5837c9aac7f2",
        "cursor": {
          "ref": "bcb5c15b-0f44-44f7-9a71-f995ecfbcd0a",
          "length": 253,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "de6dc365-a923-4475-9fa5-78ed50b87735"
        },
        "item": {
          "id": "65050f40-314f-41e1-a3f8-5837c9aac7f2",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "48e2a92e-cb17-480f-8edd-bc2f47ec0caa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:104)"
            }
          }
        ]
      },
      {
        "id": "600047c7-b12c-4a04-b021-1839ca22d756",
        "cursor": {
          "ref": "a8bfb14d-b0db-4514-9595-d32447a205d8",
          "length": 253,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "7f3545e2-526f-482c-83b0-aa1954f9b5af"
        },
        "item": {
          "id": "600047c7-b12c-4a04-b021-1839ca22d756",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "b74b6a70-d57e-48a2-973a-969839b94fa1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:105)"
            }
          }
        ]
      },
      {
        "id": "28660cd9-cced-4042-b5db-31c03099d389",
        "cursor": {
          "ref": "bdbc2359-f546-4d92-8c29-ca88d53cea21",
          "length": 253,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "bfa80b7d-01f3-45de-adee-e6d8695473ba"
        },
        "item": {
          "id": "28660cd9-cced-4042-b5db-31c03099d389",
          "name": "credentials_issue"
        },
        "response": {
          "id": "33f0aa7b-d46f-4da1-bb9b-7a78307520b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:106)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:106)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:106)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 5,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:6:106)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 6,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:7:106)"
            }
          }
        ]
      },
      {
        "id": "2d71f135-60d3-4e2a-9f19-418ea958140b",
        "cursor": {
          "ref": "78ecaafc-e1f1-425b-9735-b7750a829dd5",
          "length": 253,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "1e005289-4895-448f-a485-9402b40f8a95"
        },
        "item": {
          "id": "2d71f135-60d3-4e2a-9f19-418ea958140b",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "37c2e34b-e3df-4e8c-b8cd-1798b42d05cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:107)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:107)"
            }
          }
        ]
      },
      {
        "id": "c8f99b50-9e65-447c-b242-a8d48903e0ef",
        "cursor": {
          "ref": "0551dc47-28f1-4c38-bf6f-c0899b10223d",
          "length": 253,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "5d9d67c3-3e85-4d25-9d4d-4fd288fbd3f1"
        },
        "item": {
          "id": "c8f99b50-9e65-447c-b242-a8d48903e0ef",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "a0042cf0-ca41-4b14-ba51-7b8ddeff8705",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:108)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:108)"
            }
          }
        ]
      },
      {
        "id": "8b5f13ee-ebbe-41cb-ae28-ec9d35f1d2fa",
        "cursor": {
          "ref": "48649f7c-4371-4fe8-af6d-083ec90c84f6",
          "length": 253,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "d5f656da-3a79-42f1-be0d-5a9e6ce8182e"
        },
        "item": {
          "id": "8b5f13ee-ebbe-41cb-ae28-ec9d35f1d2fa",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "afa2e451-db6c-443a-ae7e-b592974a8a4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:109)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:109)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:4:109)"
            }
          }
        ]
      },
      {
        "id": "b6358e11-5215-46ae-ba37-9050af016203",
        "cursor": {
          "ref": "cfda1af3-b1ed-4a62-a41c-4fe2c3557197",
          "length": 253,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "4bddafc9-7afe-46e7-89b3-ae7d7b09f570"
        },
        "item": {
          "id": "b6358e11-5215-46ae-ba37-9050af016203",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "c2ee02e8-200e-4af0-9049-a699a8b18d25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:110)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:110)"
            }
          }
        ]
      },
      {
        "id": "2b985979-a4f3-4034-a232-b1e37083958c",
        "cursor": {
          "ref": "ed5bd247-999a-4ca0-8383-19417105d5f0",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "9d5fb985-4034-4729-bc73-46e0489f7029"
        },
        "item": {
          "id": "2b985979-a4f3-4034-a232-b1e37083958c",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "82413afe-ba21-4aa6-a7fe-7168f3601d6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b985979-a4f3-4034-a232-b1e37083958c",
        "cursor": {
          "ref": "ed5bd247-999a-4ca0-8383-19417105d5f0",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "9d5fb985-4034-4729-bc73-46e0489f7029"
        },
        "item": {
          "id": "2b985979-a4f3-4034-a232-b1e37083958c",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "82413afe-ba21-4aa6-a7fe-7168f3601d6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c043d645-7828-422e-95ea-951f8044358a",
        "cursor": {
          "ref": "31609c3b-ce37-475f-8558-1577b649a13f",
          "length": 253,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "da3d07be-28c6-411b-b641-a30866e68286"
        },
        "item": {
          "id": "c043d645-7828-422e-95ea-951f8044358a",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "a3e41667-2efe-4cc7-b12f-9aee16067d69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 307
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14b7f569-3418-48bd-862a-ef9ac4a42836",
        "cursor": {
          "ref": "55b78bd7-ddab-4572-bbf7-e45b3737f20c",
          "length": 253,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "d68f985d-2155-4eb0-add0-ad8901171c70"
        },
        "item": {
          "id": "14b7f569-3418-48bd-862a-ef9ac4a42836",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "86098422-7379-467d-b445-ab67482d993b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 306
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2da5534b-f443-4ced-b9ec-ef701062e2fe",
        "cursor": {
          "ref": "471fa1b9-12dd-4869-8dc9-f2bc52187628",
          "length": 253,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "0dc8c1ec-c74a-486a-8255-2da1c1e43b21"
        },
        "item": {
          "id": "2da5534b-f443-4ced-b9ec-ef701062e2fe",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "2ad87deb-1e39-42e2-b51e-a1899e17775a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 308
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75120a53-9cea-4c31-a893-806d3f37bc60",
        "cursor": {
          "ref": "11cd851f-bfd4-40b2-b9ed-ac7f62e0144d",
          "length": 253,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "edc7f721-a3c5-48b3-928a-79bb0d1feef4"
        },
        "item": {
          "id": "75120a53-9cea-4c31-a893-806d3f37bc60",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "c0721935-5893-40a6-8114-9b14d1667300",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c141b63-c8c3-4829-8a26-c0b73188453b",
        "cursor": {
          "ref": "618b83b6-a8af-40f2-985d-63ef79eaf95c",
          "length": 253,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "785257f8-3653-4246-8655-a1b0d67e46df"
        },
        "item": {
          "id": "0c141b63-c8c3-4829-8a26-c0b73188453b",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "598dea87-eea5-488a-8c77-fae9b42877f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 308
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d101e67-89b0-4467-b796-a8e21c88889a",
        "cursor": {
          "ref": "8bc6f810-81ac-4c32-84dc-ec6c15eb7d50",
          "length": 253,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "7fe931a4-4a1e-48a2-a85d-3a7a00bc047f"
        },
        "item": {
          "id": "8d101e67-89b0-4467-b796-a8e21c88889a",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "f707767c-45eb-49a3-aa25-465c44d7ce73",
          "status": "OK",
          "code": 200,
          "responseTime": 48,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "ab421a3c-494d-47b6-b140-7e24f429da68",
        "cursor": {
          "ref": "0baf7865-b992-4e6e-b2b9-bc267ac661c7",
          "length": 253,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "d5b672da-be89-4827-a96c-db4c061685d6"
        },
        "item": {
          "id": "ab421a3c-494d-47b6-b140-7e24f429da68",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "c4df2f37-2325-4182-a2b3-8cc0f10fe735",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f885b8e-b2f4-4ca0-98dc-3033cfb2e463",
        "cursor": {
          "ref": "472d2563-97a4-45d9-819a-048e138136b3",
          "length": 253,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "1b94f9cd-b3de-481c-8f6f-0db756cd7498"
        },
        "item": {
          "id": "1f885b8e-b2f4-4ca0-98dc-3033cfb2e463",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "10787c3a-593f-4915-981c-a6a98bf8e810",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77da94eb-47f0-4385-9607-ddf876926d28",
        "cursor": {
          "ref": "315190de-1b4d-49a1-b67f-7cf996d1ad25",
          "length": 253,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "a3f514a5-a58d-44bc-9d78-df45f6c7f860"
        },
        "item": {
          "id": "77da94eb-47f0-4385-9607-ddf876926d28",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "c457e49d-7cec-4f41-b5b7-5fac2eceb82c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b137213a-7fa2-47c1-8c09-5d58b932d061",
        "cursor": {
          "ref": "3a4a0440-dc1d-43bb-a9f1-43cd6b1ea986",
          "length": 253,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "53c77546-b7c0-4738-ac6f-13d3586de09a"
        },
        "item": {
          "id": "b137213a-7fa2-47c1-8c09-5d58b932d061",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "ca8e9ff3-36a9-480d-80b3-3ca5b49fc736",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c39371b5-9a2f-40ec-a736-9865058ac4b6",
        "cursor": {
          "ref": "63c9410c-c6cf-40de-bb6b-46e22d6b2567",
          "length": 253,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "7bddefa5-4e3b-4163-a57d-301296b21653"
        },
        "item": {
          "id": "c39371b5-9a2f-40ec-a736-9865058ac4b6",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "71a5bbfd-8ef0-4920-a1e9-628043c9d832",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdad903e-bb8f-4c91-90cf-6db23cfd0f3a",
        "cursor": {
          "ref": "ea808a6a-0eb9-42b2-b50d-8590fa67f86a",
          "length": 253,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "40200252-49e4-4d3e-bcf1-1172c41a7104"
        },
        "item": {
          "id": "cdad903e-bb8f-4c91-90cf-6db23cfd0f3a",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "ea095e64-81b8-436b-be9e-712b86cbc1e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d81ecbeb-23e7-4501-a053-478682937d7a",
        "cursor": {
          "ref": "59b64028-9887-48f0-a048-bf1c2c545b45",
          "length": 253,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "0b22df1a-4cd8-4686-9357-7f0efb3f7004"
        },
        "item": {
          "id": "d81ecbeb-23e7-4501-a053-478682937d7a",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "cdd7e3ad-73e4-4bdd-b632-cb680510e4c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f39436b-de46-4a1a-ac99-885eb57b6a46",
        "cursor": {
          "ref": "78674436-74f0-49e3-96c7-ceaaea82d08a",
          "length": 253,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "a0cbc027-cbec-4501-95e3-b114166fce37"
        },
        "item": {
          "id": "6f39436b-de46-4a1a-ac99-885eb57b6a46",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "8030cf85-4b5c-4bb9-a8bc-1a6b83a4e56f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62178ef5-b5bb-428d-b034-f3274f27ee83",
        "cursor": {
          "ref": "f77ff7c8-44e8-4d33-ad43-dd2ebd132e5b",
          "length": 253,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "74f1bf77-ddd9-49a0-b963-e3bb4dcc7c33"
        },
        "item": {
          "id": "62178ef5-b5bb-428d-b034-f3274f27ee83",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "2d3094f7-2b1b-4d78-8067-ca1e0f3de33b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc043ef6-f6c1-4ccd-9f44-bbe12e5e6e99",
        "cursor": {
          "ref": "e6b64dc0-8c46-4bc8-92ff-dc9c5b5cfcc1",
          "length": 253,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "6bd9724f-b28d-45d7-b8cf-7931d0a2f945"
        },
        "item": {
          "id": "cc043ef6-f6c1-4ccd-9f44-bbe12e5e6e99",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "626db050-1414-4578-b49a-1fc9ac7757b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bc45f0f-a92a-4f2c-904a-b5fcbc49448d",
        "cursor": {
          "ref": "09d0cc4e-02ac-4a26-a79d-4a26f6dfbf42",
          "length": 253,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "78724a87-48d3-4ae2-977b-4e404d9f1aca"
        },
        "item": {
          "id": "3bc45f0f-a92a-4f2c-904a-b5fcbc49448d",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "68010a99-ca84-4e72-a89c-c96dfc39fc90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ada1d47e-91fd-4b25-996c-1d72ce1934f4",
        "cursor": {
          "ref": "c6cd8dfb-0148-4e55-843c-832b0c71c0bd",
          "length": 253,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "ba483066-7f46-454e-b125-a1265c6be239"
        },
        "item": {
          "id": "ada1d47e-91fd-4b25-996c-1d72ce1934f4",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "1bee0e5f-759c-4048-9fbf-5fcaa7bc133d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9fa5c6c-5421-4315-aa51-6114fb8f1e80",
        "cursor": {
          "ref": "e43ad062-716b-430a-8970-927c327c9b62",
          "length": 253,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "5d9062b7-db3b-4682-bf78-7c9040c96bd0"
        },
        "item": {
          "id": "c9fa5c6c-5421-4315-aa51-6114fb8f1e80",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "61730be6-ac7b-4a09-82cb-1c28d23096a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e9c1b47-5ecd-4925-b459-c0df83798178",
        "cursor": {
          "ref": "3c6aeedc-8a00-4602-ab22-73af898a934f",
          "length": 253,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "8cb387b6-1368-4683-84b1-625d90de8aa1"
        },
        "item": {
          "id": "7e9c1b47-5ecd-4925-b459-c0df83798178",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "8efd5c3c-7471-43bf-981c-f6600e351e58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e0e7066-019d-419d-957d-b7f32f207d2d",
        "cursor": {
          "ref": "333d0012-ca7d-4e87-a3bd-42e21a8a9a94",
          "length": 253,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "103eb52a-571c-4124-914c-2fcd3d34b4cd"
        },
        "item": {
          "id": "6e0e7066-019d-419d-957d-b7f32f207d2d",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "e9a9e705-e9cc-453f-9858-66639614d011",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c18ecb89-7a16-40be-ae74-47fc41a259f5",
        "cursor": {
          "ref": "a0f5c917-acf0-4580-a8cc-66205f637e3a",
          "length": 253,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "3f9deea2-670c-43f2-b19a-12676c9eb3c0"
        },
        "item": {
          "id": "c18ecb89-7a16-40be-ae74-47fc41a259f5",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "f4bbfd5a-c5a0-4a06-b2d3-aa52ddebfb67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d39bce2-2cb5-42b4-a898-704e58531aa9",
        "cursor": {
          "ref": "af483832-6663-4ea9-b24c-f6313f64d931",
          "length": 253,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "a07c08fd-0692-4a2d-a441-71ae73174879"
        },
        "item": {
          "id": "0d39bce2-2cb5-42b4-a898-704e58531aa9",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "e320d017-3ba1-4e26-990d-29d46413e5ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86b0e0ed-496c-4719-a3ce-c46a8c136ea5",
        "cursor": {
          "ref": "02352805-6184-47a7-86be-7d06cd733ace",
          "length": 253,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "40cea33d-cf74-4ee5-8b62-0db99090349b"
        },
        "item": {
          "id": "86b0e0ed-496c-4719-a3ce-c46a8c136ea5",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "7b8b1cd1-68cd-4727-9c3b-f48ac358bb83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c68d840-6a56-4159-9883-2350836d477e",
        "cursor": {
          "ref": "05449c34-c82b-4592-b7ba-f1196ec2bb0b",
          "length": 253,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "4fef9813-db6a-43fe-9aff-83b71923fe9c"
        },
        "item": {
          "id": "3c68d840-6a56-4159-9883-2350836d477e",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "f4eb2114-a9bf-423b-910b-e0fbe61ba41d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b67a7159-739f-4716-afd6-de3fe57582f6",
        "cursor": {
          "ref": "54bc1df5-da02-4120-a558-e1847d25ecca",
          "length": 253,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "62ed9813-6141-4931-be26-558d20228389"
        },
        "item": {
          "id": "b67a7159-739f-4716-afd6-de3fe57582f6",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "a0fb8485-e7bf-442f-884c-ddfbce2cde2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac3d6a96-d113-4b34-99b3-e34f67098755",
        "cursor": {
          "ref": "ac382810-1499-44fb-bd1c-fd2317dbf6df",
          "length": 253,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "48f2f502-0477-4a55-bcc9-ca9a48fc416b"
        },
        "item": {
          "id": "ac3d6a96-d113-4b34-99b3-e34f67098755",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "a8603e3d-9a46-427a-9d20-e378f6a935df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc05f7d9-98ce-48eb-a160-c90ad4205745",
        "cursor": {
          "ref": "14c7d583-1689-4144-b1f7-8e84043299dc",
          "length": 253,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "c06f3430-8844-4c53-a29d-b2a911f1a25f"
        },
        "item": {
          "id": "fc05f7d9-98ce-48eb-a160-c90ad4205745",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "7da747ca-93f6-4391-aa44-5ed2b449e06d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "527b755c-8dd4-430a-9c5a-01780be9275b",
        "cursor": {
          "ref": "e0ebba0d-740c-445b-948f-5c1c42995a73",
          "length": 253,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "bf93ce9c-15f2-4de4-95e0-e084947c15b0"
        },
        "item": {
          "id": "527b755c-8dd4-430a-9c5a-01780be9275b",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "c441a147-ec42-4cfe-8d2e-e90265625f72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9997148-bdea-424f-a7bd-5d8358f78363",
        "cursor": {
          "ref": "b7d4df7a-080a-4e3e-a24d-3bed802def02",
          "length": 253,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "23effc76-656d-48bc-b5c0-aaba985da63a"
        },
        "item": {
          "id": "f9997148-bdea-424f-a7bd-5d8358f78363",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "66499f95-1bfc-4352-b8ff-3c6156833dc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25732fc8-8913-425b-951c-792f3e505265",
        "cursor": {
          "ref": "92de8f0e-2ef0-43e9-9797-e9d4be527176",
          "length": 253,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "ea6b2335-8c45-491f-b6a6-fcdf732fca5a"
        },
        "item": {
          "id": "25732fc8-8913-425b-951c-792f3e505265",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "1f92524e-7408-4a4d-a459-cb6c0889ac04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e416e524-6d85-4e16-ae4e-9c482cb2ffb2",
        "cursor": {
          "ref": "22462a54-df29-449c-a1af-01df39b523b9",
          "length": 253,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "c467e110-388d-467a-a518-42beab567872"
        },
        "item": {
          "id": "e416e524-6d85-4e16-ae4e-9c482cb2ffb2",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "10407a62-028a-4381-9436-2e4609c12763",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "6ad66acc-ae14-41a0-945a-68f9147b5f5a",
        "cursor": {
          "ref": "85f5960f-e8b1-48f6-b395-0f757d832aac",
          "length": 253,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "c4ddd309-0c60-44a3-80e6-35b5c701ca77"
        },
        "item": {
          "id": "6ad66acc-ae14-41a0-945a-68f9147b5f5a",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "a0cb5174-d324-4aea-bd99-6a7ff478721a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "1763e76a-493d-4268-ae10-d30e4bc62179",
        "cursor": {
          "ref": "93586c23-dc6d-45d5-857e-f90396c75791",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "eb7bdae2-203a-40ff-b709-23577c40b856"
        },
        "item": {
          "id": "1763e76a-493d-4268-ae10-d30e4bc62179",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "15752ec0-60ef-4909-9212-6e93238b6b90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1763e76a-493d-4268-ae10-d30e4bc62179",
        "cursor": {
          "ref": "93586c23-dc6d-45d5-857e-f90396c75791",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "eb7bdae2-203a-40ff-b709-23577c40b856"
        },
        "item": {
          "id": "1763e76a-493d-4268-ae10-d30e4bc62179",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "15752ec0-60ef-4909-9212-6e93238b6b90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09f35b88-23f8-46f7-a3fd-116ce4b83111",
        "cursor": {
          "ref": "1eeec9b2-5724-4aa3-8bd8-af764692de48",
          "length": 253,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "f5afbb52-96db-4c4f-a3a6-ebc37fd6fc4e"
        },
        "item": {
          "id": "09f35b88-23f8-46f7-a3fd-116ce4b83111",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "dd5d9bfa-41da-453e-b9e2-31edf6d97424",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05ae1c07-829d-434e-9aab-6c6a883f6f5a",
        "cursor": {
          "ref": "1891dd9b-b12e-4d94-9046-c92ac7e64545",
          "length": 253,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "6323d769-5413-4583-9a84-f55e9bff9da9"
        },
        "item": {
          "id": "05ae1c07-829d-434e-9aab-6c6a883f6f5a",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "de031712-d56a-490e-bc83-9303d8fbb105",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7b2b520-32d0-460d-9ff4-9c42a624c989",
        "cursor": {
          "ref": "83dcce59-537d-403c-822d-433b724b54dd",
          "length": 253,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "b9007449-2d77-4338-8916-39012437b2dd"
        },
        "item": {
          "id": "c7b2b520-32d0-460d-9ff4-9c42a624c989",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "7986c097-1a8e-4ccf-b7ac-cde73b73bac4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08fecf53-5140-4cac-9af0-cf6a340bb259",
        "cursor": {
          "ref": "a9aff52a-c5ee-49cb-9cc3-ab3190d0b45e",
          "length": 253,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "8a9f4207-4483-47cc-82c3-0713916416f3"
        },
        "item": {
          "id": "08fecf53-5140-4cac-9af0-cf6a340bb259",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "f6178120-3b44-4341-9c9f-150abb1863a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "044ff729-a401-44a3-a5d7-9d9fcff8a89c",
        "cursor": {
          "ref": "f723b91e-e63d-48d2-8847-b8ba7c9b70d0",
          "length": 253,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "dba85e09-d806-4deb-966f-a689601976ae"
        },
        "item": {
          "id": "044ff729-a401-44a3-a5d7-9d9fcff8a89c",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "3e52f6e2-253e-4936-ab00-2c218452787f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "334ad9d8-3541-4802-8ec8-ae0a3d9039bd",
        "cursor": {
          "ref": "93d6b7f7-e81a-458c-b752-a5f0efe887a4",
          "length": 253,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "8d3090f7-7e74-4065-a313-705c784cdaea"
        },
        "item": {
          "id": "334ad9d8-3541-4802-8ec8-ae0a3d9039bd",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "bde1f6bf-ec84-4efb-96bc-7a1734436005",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c2788a1-cc4f-42c6-af22-5234bc21a045",
        "cursor": {
          "ref": "4d1eea8e-4542-4be6-ae7f-38546995430b",
          "length": 253,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "67292182-71d3-4ff1-ae2f-67a3c3b0ad0a"
        },
        "item": {
          "id": "2c2788a1-cc4f-42c6-af22-5234bc21a045",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "3ffc6b97-11a8-4f75-9500-c95e205aeab0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29a18488-c80f-47ab-93e0-168146a02419",
        "cursor": {
          "ref": "985341e9-6110-45a8-806f-6b4e0860f02c",
          "length": 253,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "ba061e6b-68f0-46f6-90dd-dd2c71b58aed"
        },
        "item": {
          "id": "29a18488-c80f-47ab-93e0-168146a02419",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "b4817e4a-26f5-4ad2-8f99-971e5c93cc5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59810c6b-f7c9-4364-a8b9-0783f62f6f78",
        "cursor": {
          "ref": "2c7e17db-e396-4ec6-b46b-b31197d85c78",
          "length": 253,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "56f36a38-8ffb-4f2f-bc19-5e3bb963de5a"
        },
        "item": {
          "id": "59810c6b-f7c9-4364-a8b9-0783f62f6f78",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "18b5766b-e415-4623-9238-19f218f030ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51ac66de-e5f8-47f8-ba8f-2aca75131db4",
        "cursor": {
          "ref": "ba645eec-f340-4876-a337-c9ae44cef6fc",
          "length": 253,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "c32359fc-b06b-4ef6-9845-891f8349e687"
        },
        "item": {
          "id": "51ac66de-e5f8-47f8-ba8f-2aca75131db4",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "ed9f388b-4892-4d6e-8222-553dddcfba4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8e00ba0-7330-41ec-98a1-e92ab21e7ad1",
        "cursor": {
          "ref": "eb7d4039-b5b6-4082-9a15-e87ce7a36e63",
          "length": 253,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "234e7b29-e594-4084-9893-901b2cef9228"
        },
        "item": {
          "id": "d8e00ba0-7330-41ec-98a1-e92ab21e7ad1",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "1f62f3d8-dcfd-4781-817b-728f2e77a074",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2826137f-5d97-47a6-a4d5-edd8f438f56c",
        "cursor": {
          "ref": "1b182634-7dfd-4b24-b7da-08505ca31891",
          "length": 253,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "9cd6a8ea-15e7-4b34-8b1e-c678848226d4"
        },
        "item": {
          "id": "2826137f-5d97-47a6-a4d5-edd8f438f56c",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "ed980c60-7cc8-4bf4-940d-ca2937b668dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d41e593a-a1cd-4cd9-ae22-7451130bd363",
        "cursor": {
          "ref": "95923673-20e8-4686-8103-5f5d2457c3db",
          "length": 253,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "cd53b046-192b-4796-8abc-cc913906d2e3"
        },
        "item": {
          "id": "d41e593a-a1cd-4cd9-ae22-7451130bd363",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "988f3394-66af-4752-b148-1e44746b1028",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84a65d1c-ceb2-498b-b5bd-51ece3582df5",
        "cursor": {
          "ref": "88ca6627-992a-43ab-90b1-9b6213bba5b4",
          "length": 253,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "7189dc9a-76d0-4888-9462-4021f63cd6e9"
        },
        "item": {
          "id": "84a65d1c-ceb2-498b-b5bd-51ece3582df5",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "9bfcbd61-2ad6-49e4-b4ac-724f96db29a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0e80236-bb66-4ec6-920e-1c28f4825da5",
        "cursor": {
          "ref": "5dc6ac7e-952a-4e89-829f-0bffb58d145e",
          "length": 253,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "19520857-6af7-4de7-b1f7-6c4b6819821a"
        },
        "item": {
          "id": "f0e80236-bb66-4ec6-920e-1c28f4825da5",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "72075cbb-28ec-4b69-9d15-de962794823d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d4936b7-3e40-44ab-8a2d-ac8fb9537b96",
        "cursor": {
          "ref": "3de5b909-79f9-481c-90f5-066163ba9779",
          "length": 253,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "0e6390fb-df45-4c6f-a160-f32eae24c34f"
        },
        "item": {
          "id": "8d4936b7-3e40-44ab-8a2d-ac8fb9537b96",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "03c99262-9854-4a02-adbd-a0d876828f78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f8705ea-d345-433b-8234-5802822e9cc9",
        "cursor": {
          "ref": "60150ace-d5bb-4b5f-b149-5f942de2be5b",
          "length": 253,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "b1ea5004-1c07-4281-85b8-7574f1160e81"
        },
        "item": {
          "id": "8f8705ea-d345-433b-8234-5802822e9cc9",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "0e12f4a6-2ab2-41b0-9bfc-6567f4a07053",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9a76363-0d62-46d0-a092-1d5deccaed5e",
        "cursor": {
          "ref": "1adc3327-aaaf-402c-b8ff-1b15cc71f75e",
          "length": 253,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "02e0e8c0-3acd-48b1-9787-a9f621c8539d"
        },
        "item": {
          "id": "a9a76363-0d62-46d0-a092-1d5deccaed5e",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "53007e1e-1849-4f9d-a495-716ef3650a7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "512e5644-ae90-40d6-822f-1060aae20834",
        "cursor": {
          "ref": "03360dc9-58b1-43cd-9c3f-e483d88831e7",
          "length": 253,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "c3c072b3-f8ee-4b26-bbce-d3ae16b53c1e"
        },
        "item": {
          "id": "512e5644-ae90-40d6-822f-1060aae20834",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "0bd1c0c3-dbe8-4797-b7e2-47bc932f0fa9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f85d084e-377f-4206-b253-c76f331fd20e",
        "cursor": {
          "ref": "6c873fac-6be8-455c-8987-1c43d462651a",
          "length": 253,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "3fbc4084-e81a-4c5b-b89a-027c59842cfc"
        },
        "item": {
          "id": "f85d084e-377f-4206-b253-c76f331fd20e",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "cacb46b1-7aa9-48f9-859a-e3b42adbaaca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cf34688-29db-4498-9e05-96e198ea4923",
        "cursor": {
          "ref": "6c74160e-aab7-4268-80bf-efd844c3a6af",
          "length": 253,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "d1f83130-a1a5-418e-8a5e-77b4d0e126d9"
        },
        "item": {
          "id": "3cf34688-29db-4498-9e05-96e198ea4923",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "59685c1d-16a9-473e-9d76-b3d2b003cda6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2ba479e-ece3-4464-877e-10802ba6af9d",
        "cursor": {
          "ref": "7d0e01fd-e82e-443c-85e7-f10cf9f43271",
          "length": 253,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "60fa069e-5b12-4734-a550-a5a5b0bb0299"
        },
        "item": {
          "id": "d2ba479e-ece3-4464-877e-10802ba6af9d",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "57ffb149-67f0-4b0e-aecf-d94e1cc29815",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7c8b5c6-8609-47d0-8946-a78838c99b38",
        "cursor": {
          "ref": "e9503a47-b223-46bb-8ae4-0645289444f2",
          "length": 253,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "7a1913d9-96d4-4d9c-85e2-063bca801089"
        },
        "item": {
          "id": "a7c8b5c6-8609-47d0-8946-a78838c99b38",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "595e7492-26c7-49ba-8de6-ef0ec4d4c756",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4432208d-fde3-41e0-9487-688988ad99f6",
        "cursor": {
          "ref": "477a5b4c-c6b4-497f-9670-9bbf002ff562",
          "length": 253,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "1afd7aa5-87d2-4daa-858c-2fc31a14c209"
        },
        "item": {
          "id": "4432208d-fde3-41e0-9487-688988ad99f6",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "32723656-1e4b-4bd0-b23b-54b328de39b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff5f18a2-7783-44b6-9d52-11686b9fdd66",
        "cursor": {
          "ref": "4b6d7029-de4e-49e6-b703-a926f628c4e3",
          "length": 253,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "1ec636bb-68d7-4c4a-a58a-4addfbe28663"
        },
        "item": {
          "id": "ff5f18a2-7783-44b6-9d52-11686b9fdd66",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "2af79e8e-0bfc-49d8-bae1-30c48e197479",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfd90f58-236e-45ce-bec9-0581aab32e17",
        "cursor": {
          "ref": "7401def2-b1c0-41cc-9ac6-b99460a43200",
          "length": 253,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "080e523a-fea9-486e-ba97-3b408e5845b6"
        },
        "item": {
          "id": "cfd90f58-236e-45ce-bec9-0581aab32e17",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "0be039a5-9350-4787-be61-002ab8d92985",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a59e53f7-c4ad-4f5d-9170-bdadfb9c8e3c",
        "cursor": {
          "ref": "8bec7019-9670-40ec-b885-21c8d76d8b43",
          "length": 253,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "6291b910-1732-4849-a5e7-a476ae9f4a26"
        },
        "item": {
          "id": "a59e53f7-c4ad-4f5d-9170-bdadfb9c8e3c",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "a8ae77e4-c704-4585-9906-915b8e3ff205",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "deda6415-5318-42e8-bb5a-b70cf28dc85d",
        "cursor": {
          "ref": "441c3aab-0052-401d-8d9d-351737bcb7c0",
          "length": 253,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "dfbbeac7-6272-4dab-be91-dfd6163f1620"
        },
        "item": {
          "id": "deda6415-5318-42e8-bb5a-b70cf28dc85d",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "42b1fd9f-cb9b-435a-9d30-b77a2c34548c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6cf0791-9789-4dbb-b6bc-92fb7df3b6cc",
        "cursor": {
          "ref": "d4afbad8-a998-405a-9c48-59ce876e8cbd",
          "length": 253,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "d86ac221-e9b0-4308-8c91-3015bb18e1d4"
        },
        "item": {
          "id": "f6cf0791-9789-4dbb-b6bc-92fb7df3b6cc",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "87a34d12-75eb-4558-9df1-e2e632fabb2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a10c7518-ac95-4b23-a433-8670735b9765",
        "cursor": {
          "ref": "6ae90f46-1c9e-4a6b-87fe-c8e3a8c14cec",
          "length": 253,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "406bcac1-a90f-412b-8a1c-2ff183e55f0f"
        },
        "item": {
          "id": "a10c7518-ac95-4b23-a433-8670735b9765",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "78ecad61-2bb1-4185-9baa-f1eae28893e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "966f3f1c-f718-430a-b39f-edf32384f335",
        "cursor": {
          "ref": "e83876a6-e33b-4b5a-a14d-f879ce031fb7",
          "length": 253,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "50f387e2-f4e2-4d23-b0f7-7f2e98faedf3"
        },
        "item": {
          "id": "966f3f1c-f718-430a-b39f-edf32384f335",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "15d7fcd1-f3ed-4a9f-b7b2-3d55deaa6261",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f793a607-3fc6-413e-b493-eb3d95d63068",
        "cursor": {
          "ref": "2767371c-6983-4c0f-a7df-5715ffc0ce47",
          "length": 253,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "0d87e12f-73f4-4bca-a731-4b29bab1193c"
        },
        "item": {
          "id": "f793a607-3fc6-413e-b493-eb3d95d63068",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "1ca0a394-617c-4677-a1a1-6dda0fcbe2e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "380920b6-88ea-4afa-9cdd-500ed0e63c89",
        "cursor": {
          "ref": "4ca94f87-060a-4e5a-9c2a-730ca93ed2e5",
          "length": 253,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "6c6aba84-c6da-4315-9cd3-224ea1327ed1"
        },
        "item": {
          "id": "380920b6-88ea-4afa-9cdd-500ed0e63c89",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "ff75251b-d8c5-4e0d-8b70-9b27c632ef39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd1a3992-8c0f-4d5b-9dca-9081927afb2e",
        "cursor": {
          "ref": "bd97487a-1caa-465b-8a24-bb22997cbda1",
          "length": 253,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "53228aad-e509-4e9e-b510-cf6ac8bc61f0"
        },
        "item": {
          "id": "dd1a3992-8c0f-4d5b-9dca-9081927afb2e",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "f674928b-19e1-4f8e-8106-63c6bb7735d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e921789-abe5-48fd-80c9-be175a513b0b",
        "cursor": {
          "ref": "da054ab4-50f8-4bb3-acec-00fa673eb0f9",
          "length": 253,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "ac918287-5573-49b6-a152-e4dc27f1822d"
        },
        "item": {
          "id": "8e921789-abe5-48fd-80c9-be175a513b0b",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "b234be5c-b9cf-4c78-9c1e-85b4247234d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb5eecd3-e641-48d5-8b29-6390f321d85d",
        "cursor": {
          "ref": "cd012ef1-2584-4102-bc30-ce024fda9edc",
          "length": 253,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "f27a15a6-cd0e-41a3-b3e9-d0bc5bc67116"
        },
        "item": {
          "id": "bb5eecd3-e641-48d5-8b29-6390f321d85d",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "1b41c1d6-c265-4494-9fe2-7db98820b389",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8d8538a-045f-4476-bd03-6dd8c5202175",
        "cursor": {
          "ref": "a12236e5-de16-4c39-a7da-7193ab766a60",
          "length": 253,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "28d1a559-6944-48e0-8a80-7e5f948d0ffd"
        },
        "item": {
          "id": "a8d8538a-045f-4476-bd03-6dd8c5202175",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "e3c75901-477f-405b-ba21-6fb1e1c7e9ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93f9061a-50c7-4b37-a86a-f495badc4398",
        "cursor": {
          "ref": "9ced8ae7-3084-48d3-832d-6fee92ab0f59",
          "length": 253,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "2a68babe-791b-452e-bfb3-00362e931dac"
        },
        "item": {
          "id": "93f9061a-50c7-4b37-a86a-f495badc4398",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "37a28fa7-02c3-419b-b2af-fede253af730",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9aa45063-c65b-4767-9cc2-3fe040d7ebd7",
        "cursor": {
          "ref": "e133bff7-e5b8-4cbe-a4e8-bdf6ba9dbd97",
          "length": 253,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "7dba1ad2-0924-4a09-b926-77003c75ee0d"
        },
        "item": {
          "id": "9aa45063-c65b-4767-9cc2-3fe040d7ebd7",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "44c744a7-913d-42d5-a49a-9438018f3325",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc34673a-7442-44c2-aced-0c5027f1de61",
        "cursor": {
          "ref": "40b52fef-376a-4355-894d-a6400ee83022",
          "length": 253,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "0d13865b-86bc-4352-b3c4-27722c601154"
        },
        "item": {
          "id": "dc34673a-7442-44c2-aced-0c5027f1de61",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "e6e4b825-f120-40f3-9175-c60f2389e340",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a409310-7419-46cf-b1f6-94d5aff2ac3c",
        "cursor": {
          "ref": "9922bd25-3374-4c07-8a02-494741d8c71c",
          "length": 253,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "64983baf-d389-41ee-8d6f-7362dfca44e7"
        },
        "item": {
          "id": "0a409310-7419-46cf-b1f6-94d5aff2ac3c",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "58ad756b-55ac-45f2-b3af-d2d5e6a1fd7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8657df25-0a94-4e6b-a711-754b0e0ce897",
        "cursor": {
          "ref": "0a7e7e78-a8b3-4203-b5bf-b660ca7bc71c",
          "length": 253,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "23b9da7d-ac2d-4888-bee9-2c056b98e156"
        },
        "item": {
          "id": "8657df25-0a94-4e6b-a711-754b0e0ce897",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "fa3bcc0b-d25b-411a-8401-7774dbb94118",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71972a16-ddce-45e4-baa5-f173f63055b8",
        "cursor": {
          "ref": "aa9df2ce-b046-4152-a3a0-443dfc15504f",
          "length": 253,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "dc6a62f0-0200-483a-bb70-0ec440ed4e83"
        },
        "item": {
          "id": "71972a16-ddce-45e4-baa5-f173f63055b8",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "87077632-ad5e-42d1-b045-dbbcb697dbfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8e5e4ee-1442-4017-b16f-3dc4218f96f7",
        "cursor": {
          "ref": "fdd23597-813d-4046-9583-c36eb0760138",
          "length": 253,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "5812cd09-056e-463a-8d49-3648092d0ac6"
        },
        "item": {
          "id": "e8e5e4ee-1442-4017-b16f-3dc4218f96f7",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "e80c75c6-d124-444d-b5b1-50bca3fb938b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f09dbcf8-78d6-4e30-9c03-f7a24c8d74ef",
        "cursor": {
          "ref": "25273a3d-cff3-43e0-ae2f-5f0b566154e9",
          "length": 253,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "54615016-479a-4dc5-a67e-6c326de615ab"
        },
        "item": {
          "id": "f09dbcf8-78d6-4e30-9c03-f7a24c8d74ef",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "2d90d5a9-0b8c-4f19-b80b-1b88f2f105de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ea2fc65-12b4-4433-b254-1dcabaecc576",
        "cursor": {
          "ref": "19af709f-1a26-455f-96da-e1f5c23b3f74",
          "length": 253,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "567ff580-f62f-45f4-8663-f834f542823d"
        },
        "item": {
          "id": "1ea2fc65-12b4-4433-b254-1dcabaecc576",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "cdb763e1-70b1-4d62-a7c5-57c4db78b532",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db93a9f6-9b66-4a33-88c8-ad44f00cca76",
        "cursor": {
          "ref": "bcbe0724-bfd5-46cd-acd2-1c970d068bbc",
          "length": 253,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "d1ea54d6-16ea-4afd-ae01-1df066204b8a"
        },
        "item": {
          "id": "db93a9f6-9b66-4a33-88c8-ad44f00cca76",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "92c77931-ced8-40ea-8442-82c3816d162c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "551c7172-ad39-4432-b457-07b22c57ec6b",
        "cursor": {
          "ref": "9654a133-a439-4e9e-8b9e-00f1420ce4af",
          "length": 253,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "8acfcfb1-072b-4f11-8b27-bd90720ef4aa"
        },
        "item": {
          "id": "551c7172-ad39-4432-b457-07b22c57ec6b",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "eac51d18-ea44-4fe6-b99d-a3490f31384f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aee52b4e-a396-4b7b-bd5b-b989dc0552cc",
        "cursor": {
          "ref": "c2883f7a-376a-4796-a83a-6c8da7714ab4",
          "length": 253,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "8232bc3b-6dbf-4608-a7a0-8f877bcd7e44"
        },
        "item": {
          "id": "aee52b4e-a396-4b7b-bd5b-b989dc0552cc",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "28d9f1fd-47cb-4197-b988-f0acd88cc0a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebe28ac0-3abd-4c89-a8cb-ef5f1a080a3c",
        "cursor": {
          "ref": "a3bf5805-04c3-4083-bfd5-25371280c6a6",
          "length": 253,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "00fc5c08-58b3-43f3-a433-effd0daa2293"
        },
        "item": {
          "id": "ebe28ac0-3abd-4c89-a8cb-ef5f1a080a3c",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "39dfdbbc-69e2-4b80-ba6e-e5d0e84ceb31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f3213f5-d3c8-4017-b0cc-4f86a43cde04",
        "cursor": {
          "ref": "d1d7688e-24a3-4027-a01d-b21296f8b66b",
          "length": 253,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "5c350acd-bd2e-41c7-8620-5fc7ac30fc41"
        },
        "item": {
          "id": "2f3213f5-d3c8-4017-b0cc-4f86a43cde04",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "2f1e2887-2ec8-4691-b759-7bb5ff54bd09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e14f0ee-322f-457b-b461-6a9eb14687c1",
        "cursor": {
          "ref": "73cbaa24-d968-4746-a677-6f37e06866e0",
          "length": 253,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "ae9c8722-dbe4-4d1b-b095-f70ac79593e2"
        },
        "item": {
          "id": "1e14f0ee-322f-457b-b461-6a9eb14687c1",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "54c1b396-6018-497c-b70a-9f5c3cc02ac5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9921f8c8-dcac-4731-b8d0-44db54e9812d",
        "cursor": {
          "ref": "910f7928-7086-4a23-9452-46b3fe9fe53b",
          "length": 253,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "11eb2978-1a28-48b0-9ebb-b265e0dc4cdb"
        },
        "item": {
          "id": "9921f8c8-dcac-4731-b8d0-44db54e9812d",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "d72ffc07-d8d0-4ccc-92ba-430a248ff4d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee85bca3-ba20-4315-b3bd-a7cc8aefb2f2",
        "cursor": {
          "ref": "509f8fdf-d13c-4296-b921-ad07c6703e1e",
          "length": 253,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "3fbafa2f-6c87-4ec8-9548-ed5bc5cbe51a"
        },
        "item": {
          "id": "ee85bca3-ba20-4315-b3bd-a7cc8aefb2f2",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "f69ab725-ba19-47a9-854b-e9361245d51a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3292e5d5-fe5d-4252-8604-a130a03342bb",
        "cursor": {
          "ref": "b4ec0383-bb82-4da5-be45-39fe8373576f",
          "length": 253,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "004acbdc-e64d-45d1-83b6-5e7dc0c01514"
        },
        "item": {
          "id": "3292e5d5-fe5d-4252-8604-a130a03342bb",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "e27e4d6a-3775-4945-951e-f2b309f61189",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "576037ba-6547-4035-8539-0e958f710bfc",
        "cursor": {
          "ref": "3035233e-9bbf-4209-bfe6-b9bfc7137feb",
          "length": 253,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "af4c84f6-aa4a-4800-97d3-80828e1f9eb2"
        },
        "item": {
          "id": "576037ba-6547-4035-8539-0e958f710bfc",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "a65faff3-22d8-44ef-a095-7ba970c05824",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d08c30e-a997-4b83-a1bb-d05eba180a0d",
        "cursor": {
          "ref": "6d3ef1e1-9271-46d2-b9ff-cf5abdab6988",
          "length": 253,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "75e096a3-460e-43c4-9c0b-773e29fe92e2"
        },
        "item": {
          "id": "1d08c30e-a997-4b83-a1bb-d05eba180a0d",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "09ef6989-6c59-45d8-9cd4-716710058b14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34350e5f-bbb7-4b00-864b-cf4a82ae846a",
        "cursor": {
          "ref": "7147a255-f27d-4429-9708-c18b7cac6fa8",
          "length": 253,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "28717e83-af15-420d-804d-ee9f6ce1b296"
        },
        "item": {
          "id": "34350e5f-bbb7-4b00-864b-cf4a82ae846a",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "edbcf1f4-f3a9-4266-8fdd-0a11543861fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 151,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c9f49dc-4ab8-4aca-a81d-556dc8c9f020",
        "cursor": {
          "ref": "ea644405-5fb2-4963-a765-78efed64c4c2",
          "length": 253,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "34a28037-2d18-48b1-9009-a05321486c4b"
        },
        "item": {
          "id": "9c9f49dc-4ab8-4aca-a81d-556dc8c9f020",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "7de3efa0-9e99-4cdb-8f3d-d1bf86fe445d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1687e87-e9b0-4415-9647-5c4b9d12b379",
        "cursor": {
          "ref": "d710a583-717d-46b2-a9ed-d2d25688482c",
          "length": 253,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "a24b2f04-90ad-4f6e-8870-6f355ce29fae"
        },
        "item": {
          "id": "f1687e87-e9b0-4415-9647-5c4b9d12b379",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "4c4744fe-b7cd-4732-8ea9-de585eb89141",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d503e82-4afc-46f9-93de-35a7a8cf971b",
        "cursor": {
          "ref": "981dfec2-7c4e-4fe0-9468-589fc7e3b84b",
          "length": 253,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "94f8182c-6fa2-48f8-b5d4-2b094ae856d6"
        },
        "item": {
          "id": "0d503e82-4afc-46f9-93de-35a7a8cf971b",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "5c7c1af4-adad-43a0-9a28-7c00287ac625",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fbc3aeb-4cdd-4e01-b614-753f47d65b0f",
        "cursor": {
          "ref": "99ebbc40-796e-4a04-b2d2-248ada87fdb7",
          "length": 253,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "2c703ac3-8352-414a-8275-1000cc25c378"
        },
        "item": {
          "id": "4fbc3aeb-4cdd-4e01-b614-753f47d65b0f",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "756e8f66-33ef-480d-b8ec-6c9b7d0f8bab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aaa71396-e52d-4319-be52-6359a5a733cc",
        "cursor": {
          "ref": "69d5145e-666e-4f9d-8385-f9acc4b03f8b",
          "length": 253,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "afb9a111-f200-4a3c-b78c-5c1d26e0233f"
        },
        "item": {
          "id": "aaa71396-e52d-4319-be52-6359a5a733cc",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "5beb8b61-fc61-4890-b21f-92983aeb612b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "763b34d6-bb39-4ca1-b541-2c0bb8936c3a",
        "cursor": {
          "ref": "ba1fbc58-c3b4-4cae-8637-1434480ca07f",
          "length": 253,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "d790cba0-26f0-4f11-b2da-f05fb003b76f"
        },
        "item": {
          "id": "763b34d6-bb39-4ca1-b541-2c0bb8936c3a",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "b87136a4-4fcc-4714-a809-6b47bbbd1c96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e04a480-f1b2-406f-a23e-4e9d54ac0b50",
        "cursor": {
          "ref": "8611cab4-feba-42e4-adb1-e373c0c1de0d",
          "length": 253,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "4aa34347-21c9-4a99-b773-459db75181d4"
        },
        "item": {
          "id": "5e04a480-f1b2-406f-a23e-4e9d54ac0b50",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "fc75d691-e58e-47b6-b19b-0f6a5d761327",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0667b04a-ddf6-48fe-a242-1ed66d6ada90",
        "cursor": {
          "ref": "d329ad29-4ca5-42e4-a1a4-817002598e09",
          "length": 253,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "b5f6362c-6090-44a0-8ec1-b70991dfbeab"
        },
        "item": {
          "id": "0667b04a-ddf6-48fe-a242-1ed66d6ada90",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "bb7910fa-d0de-4a17-8eff-a47c8b92adb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99a5e867-b2a7-41e2-884a-3d2d9454849e",
        "cursor": {
          "ref": "4d4f849a-710a-4a18-9c94-b4f80133248b",
          "length": 253,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "58572d5b-dc7c-418b-ac77-b350ce93c21c"
        },
        "item": {
          "id": "99a5e867-b2a7-41e2-884a-3d2d9454849e",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "212cb7bd-d702-4335-af3d-ca23a79943ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80f847fd-49f0-480a-9c90-2e5321b2b4c1",
        "cursor": {
          "ref": "d4d1bf00-a331-4ff6-bdb3-144c7f9a9fcb",
          "length": 253,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "a6302a2c-a172-47da-ba76-716a08d722d5"
        },
        "item": {
          "id": "80f847fd-49f0-480a-9c90-2e5321b2b4c1",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "db12b93e-394d-4005-bf7c-9953a9811fab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1ab76e0-381c-4c35-9861-251e34f72019",
        "cursor": {
          "ref": "a6f0e845-1dcb-4753-b546-14f5ef8e8cf0",
          "length": 253,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "5387e5f1-fb1d-4b08-ae12-8fa9dede1d0f"
        },
        "item": {
          "id": "b1ab76e0-381c-4c35-9861-251e34f72019",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "39befd0b-f860-4180-8a50-f14862414b5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2de46401-c306-44d8-993f-d9cadeebf53b",
        "cursor": {
          "ref": "dcfc1a0d-f3af-4257-8e7c-d0a085cf01b1",
          "length": 253,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "5340cac5-5c78-4fd5-baee-799525a6a3a9"
        },
        "item": {
          "id": "2de46401-c306-44d8-993f-d9cadeebf53b",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "2300b22f-4061-4660-b046-a185b9cfad38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "634f8839-ce68-44be-a178-ff5a0089d0d5",
        "cursor": {
          "ref": "b6b66614-66c6-44b3-9368-ade8a560b875",
          "length": 253,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "da750d55-806d-4f56-baba-835bd29594f7"
        },
        "item": {
          "id": "634f8839-ce68-44be-a178-ff5a0089d0d5",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "33bb82fd-855e-42ce-9bd9-78697e0f0de4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "982dcbc6-071a-4b79-bccc-9cb39cf15623",
        "cursor": {
          "ref": "827faf9b-2bfd-4952-8b0c-0d5ac8216082",
          "length": 253,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "a2366e75-9caa-42a8-a2fd-fc2c15daa2aa"
        },
        "item": {
          "id": "982dcbc6-071a-4b79-bccc-9cb39cf15623",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "15a55b7d-237d-4fdf-8f53-e095ea5ac43e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33c0e368-bb4b-4bc4-af81-7b7a589842c6",
        "cursor": {
          "ref": "6ebd04d0-0d1f-479d-853f-e82e6313f56a",
          "length": 253,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "f9980063-f93b-494e-a830-68feb06fc785"
        },
        "item": {
          "id": "33c0e368-bb4b-4bc4-af81-7b7a589842c6",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "9534f8ba-98bf-49a5-a27e-e98cf0ef2464",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7405f87-8194-4d3f-ae0c-0608b8bd2d52",
        "cursor": {
          "ref": "df1856c2-29bc-4b0d-a37c-eee42794aa00",
          "length": 253,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "e8a879b5-d7e8-47d7-bc28-9fbc8fdc190e"
        },
        "item": {
          "id": "f7405f87-8194-4d3f-ae0c-0608b8bd2d52",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "407b6adf-04b6-4ce8-b638-709e617fbe63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1751bd26-2144-418b-9dde-4e4f89f6d146",
        "cursor": {
          "ref": "e8732e31-c8e3-4e47-b1b4-152818efc28b",
          "length": 253,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "4af30dee-84e4-4ab2-bb3a-934e8bece39d"
        },
        "item": {
          "id": "1751bd26-2144-418b-9dde-4e4f89f6d146",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "e87119ee-ab12-43fd-92c0-2c008b7aa73c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8431981a-efdb-4048-a404-3384c4ce4c0e",
        "cursor": {
          "ref": "957283ec-2b75-4948-ac65-456807503757",
          "length": 253,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "db5a5ee5-93ed-4a0c-9f86-01bdc698b09c"
        },
        "item": {
          "id": "8431981a-efdb-4048-a404-3384c4ce4c0e",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "e69623e3-c6d3-48d6-96d9-c617fde3bc93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53357920-923e-4333-9241-5de69c3b0f90",
        "cursor": {
          "ref": "cc460c2c-cace-444f-9013-887cb2577f98",
          "length": 253,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "8868e005-774e-4367-9bff-e83dbd4ba3bd"
        },
        "item": {
          "id": "53357920-923e-4333-9241-5de69c3b0f90",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "73eb23ed-a886-4a30-876f-70379a4aaa07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93578b15-c4d0-4c43-92c2-4d4f54ac8969",
        "cursor": {
          "ref": "12d140b7-0e00-4764-b57e-05c8182b7fee",
          "length": 253,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "c798d8de-5ec6-46c1-aef0-423b305b1d23"
        },
        "item": {
          "id": "93578b15-c4d0-4c43-92c2-4d4f54ac8969",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "e4e69e7f-c154-4afa-9c13-e46a8f471499",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d427f8b5-e0a2-4142-9655-971247822169",
        "cursor": {
          "ref": "e7ad0cff-c2a3-406a-9827-d86631a1a576",
          "length": 253,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "dfb5a050-d905-4a32-84ec-458dd5fafd5a"
        },
        "item": {
          "id": "d427f8b5-e0a2-4142-9655-971247822169",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "093a5b26-c4d4-4867-aea8-dbba67850a43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "774e6eed-d7e6-4151-bfd9-3086acb4491b",
        "cursor": {
          "ref": "aef64ac9-4b5f-4e71-87cb-f661b6e9afae",
          "length": 253,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "413441de-ae8f-418d-b55d-06b4aea43ed2"
        },
        "item": {
          "id": "774e6eed-d7e6-4151-bfd9-3086acb4491b",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "4e517abf-67a1-409e-a13f-9d8c6d766ca8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "831fdfd4-6f6b-42f6-9d37-b76e3460eacf",
        "cursor": {
          "ref": "5cce949b-5a0d-42eb-8a2a-dcb99bb3f868",
          "length": 253,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "e5ff6b00-81d9-4015-ba85-2f93c9c09dac"
        },
        "item": {
          "id": "831fdfd4-6f6b-42f6-9d37-b76e3460eacf",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "4cb77c39-3240-4e23-a7e1-33f014fa9513",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e9bec6c-1389-411e-8cc5-72c5db633b4d",
        "cursor": {
          "ref": "78901dcd-fdb0-46da-a8ed-8ff6fee4e381",
          "length": 253,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "0f14f2b3-2a33-4a69-9739-d64044d99ea2"
        },
        "item": {
          "id": "5e9bec6c-1389-411e-8cc5-72c5db633b4d",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "2fb4106e-55e7-4fd1-be55-0bf9a6d11bd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d44222c-0d1b-4e46-a089-3edac3a14d33",
        "cursor": {
          "ref": "25329867-2ee9-4f8d-bcf5-69d37505e8e9",
          "length": 253,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "23d3d369-2804-48dc-86c3-53ca82f39c45"
        },
        "item": {
          "id": "8d44222c-0d1b-4e46-a089-3edac3a14d33",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "2459b4d9-6134-46c5-9394-4524a70b12a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f8e1749-a28a-44a3-9eda-bca4dd6c6f20",
        "cursor": {
          "ref": "f43daafd-e904-413c-af2e-1579656b8f96",
          "length": 253,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "ade63d5c-832d-484c-bfab-ada580548f9f"
        },
        "item": {
          "id": "2f8e1749-a28a-44a3-9eda-bca4dd6c6f20",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "07de1f01-c4dc-4c38-98e7-f5454c217aaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfac9a5e-a951-4205-b26b-6b70fef5a2eb",
        "cursor": {
          "ref": "124034f5-fff0-4bf4-b88a-3fd28830039d",
          "length": 253,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "d0d558b6-6d2b-4ed2-9957-4aec086f3fc4"
        },
        "item": {
          "id": "dfac9a5e-a951-4205-b26b-6b70fef5a2eb",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "9399f95e-3f8b-43fc-bfc6-883a6c7f150a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f85f035a-62bb-47f8-8912-579976f86244",
        "cursor": {
          "ref": "98448014-9c04-46a2-a9e1-b9423015d2f4",
          "length": 253,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "78190a0a-5e5d-4062-9118-19857a9f63fd"
        },
        "item": {
          "id": "f85f035a-62bb-47f8-8912-579976f86244",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "215278d8-7037-4ad6-bc3f-cf4a05ae9ff3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66f24daa-c4f7-4990-89bd-be7a54dd14ec",
        "cursor": {
          "ref": "5b682e46-2fca-4c2f-a47e-70afca5505d3",
          "length": 253,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "06bd6049-dfe8-4f2e-a207-4a8663d5722b"
        },
        "item": {
          "id": "66f24daa-c4f7-4990-89bd-be7a54dd14ec",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "9c8e8db7-4522-4c99-a4ca-11a4c87cb501",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8687c211-72c1-4c6b-bff5-7803f8c1459f",
        "cursor": {
          "ref": "ce6f2a7c-c930-4007-ad4a-5ae4bb3825f2",
          "length": 253,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "51a95072-b328-4491-89df-0073c576f66c"
        },
        "item": {
          "id": "8687c211-72c1-4c6b-bff5-7803f8c1459f",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "cc44999b-8696-4f6c-b3a6-77f809db4258",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04a2fe41-3399-464d-87bc-a56a03b97e8f",
        "cursor": {
          "ref": "1b4c9ec2-1c9f-4c94-b0e1-034250f8dec0",
          "length": 253,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "81b7b539-8e44-4f2a-aa58-02d75077bcd1"
        },
        "item": {
          "id": "04a2fe41-3399-464d-87bc-a56a03b97e8f",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "89f4c374-6056-498a-a8ac-8e370b5e3b91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6d0d5e4-aba8-43b6-96e4-127cb667e21e",
        "cursor": {
          "ref": "f6452cf3-252c-48f3-bdfb-0af1ab3b1808",
          "length": 253,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "296a5fd3-8759-4ec3-b432-269904bb84d4"
        },
        "item": {
          "id": "b6d0d5e4-aba8-43b6-96e4-127cb667e21e",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "29b37a65-ac06-4379-ac6b-3ca20136de78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1599cc92-7ebe-48a1-975e-d0c31cbcc717",
        "cursor": {
          "ref": "b3c2860e-da70-4967-87a3-54fdcc2983cf",
          "length": 253,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "cb04ff09-5f3a-43f7-9a5e-974d8266e481"
        },
        "item": {
          "id": "1599cc92-7ebe-48a1-975e-d0c31cbcc717",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "56a6281f-0b9c-4a8d-8bc2-b2b33beea783",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67f7eb10-c1bf-4f20-85fa-d572d01ba3ba",
        "cursor": {
          "ref": "8904b6a3-8432-4ce9-9912-d2471e252b3d",
          "length": 253,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "1ddde223-8b48-4c69-8425-f1b5e683362c"
        },
        "item": {
          "id": "67f7eb10-c1bf-4f20-85fa-d572d01ba3ba",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "d4cd0808-ddc5-449b-b331-02f865a805e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67a5b469-e7b9-41ee-8fb3-5774f4458218",
        "cursor": {
          "ref": "f37c0ef0-3a82-462a-b3dd-bcca8679e819",
          "length": 253,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "4c460c8e-ee93-4820-b075-9accbad603ef"
        },
        "item": {
          "id": "67a5b469-e7b9-41ee-8fb3-5774f4458218",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "cb3248d7-6704-4a49-9d1c-740bc04c8801",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5628d678-a3fa-4900-9d91-844821efc3fa",
        "cursor": {
          "ref": "068b40e1-6aee-404e-8579-6b54c29a076b",
          "length": 253,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "894ea0cc-4b86-404e-b4a6-8f5871b54e90"
        },
        "item": {
          "id": "5628d678-a3fa-4900-9d91-844821efc3fa",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "ddfd8c4f-ace9-4ce6-8803-6b1e459ddf3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be0d4b4d-59f5-41a0-ad14-77b02ff1b366",
        "cursor": {
          "ref": "3d779a38-4335-420f-a087-8f7ccf24eea7",
          "length": 253,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "7a58fc26-307d-4ee3-8b89-0a44b7da9ae8"
        },
        "item": {
          "id": "be0d4b4d-59f5-41a0-ad14-77b02ff1b366",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "1cf3b4a0-4919-472e-b1c8-82c793684008",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dcc0eca-51f9-4142-b788-63d8c5ab6b28",
        "cursor": {
          "ref": "4829f400-43cf-4b3c-9d45-eb58a8378e57",
          "length": 253,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "35f3d00b-b73f-44ad-8872-a13a2917823a"
        },
        "item": {
          "id": "9dcc0eca-51f9-4142-b788-63d8c5ab6b28",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "5e3ee9c9-c378-4189-9262-f65a0efd1e27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9b2ed90-60d7-40b3-9b08-c3475e629585",
        "cursor": {
          "ref": "3f0b2167-5974-447f-8164-b406c0f8a2ea",
          "length": 253,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "3e8a2565-65fd-4dcc-9b1a-33b510582c82"
        },
        "item": {
          "id": "a9b2ed90-60d7-40b3-9b08-c3475e629585",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "d410755c-9c46-4979-bab8-a2024611e514",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53a4246c-4aaa-4b6b-9eb2-4bfd3dc5f067",
        "cursor": {
          "ref": "8ee6c44e-92d5-452a-b8ff-a084a76d4a88",
          "length": 253,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "c11af4b9-eead-48af-90ac-e19933a8f652"
        },
        "item": {
          "id": "53a4246c-4aaa-4b6b-9eb2-4bfd3dc5f067",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "c64caeef-1c48-4a74-a239-4dec6e49da2b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b31cffbb-caab-43ee-ae78-6ae744cd64e6",
        "cursor": {
          "ref": "f7442889-2cb5-4de6-9d7c-79fc21164da4",
          "length": 253,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "fc62c7e1-ec23-4abe-a45c-ca19b66a70ee"
        },
        "item": {
          "id": "b31cffbb-caab-43ee-ae78-6ae744cd64e6",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "4cbefebf-2448-4a31-a4a1-f77fec706579",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 48,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85779723-6964-43c6-b388-4b4f2e0dfa6a",
        "cursor": {
          "ref": "5b917080-afd7-46eb-a518-463c5a90f7fc",
          "length": 253,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "8ce840a2-f9d5-41c9-8769-7d4e47b44300"
        },
        "item": {
          "id": "85779723-6964-43c6-b388-4b4f2e0dfa6a",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "60cc3acf-9c2b-4b7f-be9c-8ee7b8014371",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "ff333850-9972-49e8-a916-f7c5fe7da4f2",
        "cursor": {
          "ref": "b30f6461-a80b-47c5-a89b-0fbd8dcf6136",
          "length": 253,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "92aa7613-35b4-4c72-9011-19616505e2ad"
        },
        "item": {
          "id": "ff333850-9972-49e8-a916-f7c5fe7da4f2",
          "name": "credentials_verify"
        },
        "response": {
          "id": "d4128b5d-6b41-48c5-bca6-f8328eee2abe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:246)"
            }
          }
        ]
      },
      {
        "id": "9ead13c4-2bda-4d78-b0e0-a1ea2a0e9b60",
        "cursor": {
          "ref": "9ef41800-8357-4b8a-a06c-1f6a521ed0d2",
          "length": 253,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "df7435ea-e05a-4b4d-8605-b86f66dc47d6"
        },
        "item": {
          "id": "9ead13c4-2bda-4d78-b0e0-a1ea2a0e9b60",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "3ec7b48d-994a-47e0-87d7-ae7c4049cf06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:247)"
            }
          }
        ]
      },
      {
        "id": "af8f4235-fb69-4084-9b0c-fe628eeeb3b6",
        "cursor": {
          "ref": "82b523eb-db7e-4dcc-996c-e4087d3281f8",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "c17ae961-b8dd-45d8-91ad-78c44c92601b"
        },
        "item": {
          "id": "af8f4235-fb69-4084-9b0c-fe628eeeb3b6",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "af8f4235-fb69-4084-9b0c-fe628eeeb3b6",
        "cursor": {
          "ref": "82b523eb-db7e-4dcc-996c-e4087d3281f8",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "c17ae961-b8dd-45d8-91ad-78c44c92601b"
        },
        "item": {
          "id": "af8f4235-fb69-4084-9b0c-fe628eeeb3b6",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "af8f4235-fb69-4084-9b0c-fe628eeeb3b6",
        "cursor": {
          "ref": "82b523eb-db7e-4dcc-996c-e4087d3281f8",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "c17ae961-b8dd-45d8-91ad-78c44c92601b"
        },
        "item": {
          "id": "af8f4235-fb69-4084-9b0c-fe628eeeb3b6",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "e31e436f-a3cb-46db-b5e4-e26284dd7cb4",
        "cursor": {
          "ref": "66aaf6e7-5205-49e0-9873-beb06ed9c47c",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "9222c23f-7e2a-4bbd-98f7-fb8821367877"
        },
        "item": {
          "id": "e31e436f-a3cb-46db-b5e4-e26284dd7cb4",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "47b622ca-cad3-4d00-9213-b1e73bc28b2c",
        "cursor": {
          "ref": "0e80fa68-ad20-4220-a1e9-b3a790eb9019",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "e1c6099c-12f4-4c0e-916f-5006835ee6d9"
        },
        "item": {
          "id": "47b622ca-cad3-4d00-9213-b1e73bc28b2c",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "47b622ca-cad3-4d00-9213-b1e73bc28b2c",
        "cursor": {
          "ref": "0e80fa68-ad20-4220-a1e9-b3a790eb9019",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "e1c6099c-12f4-4c0e-916f-5006835ee6d9"
        },
        "item": {
          "id": "47b622ca-cad3-4d00-9213-b1e73bc28b2c",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "14f0706e-0869-4666-ab32-facb6e23d919",
        "cursor": {
          "ref": "ed68ff7d-787c-4a93-8e55-3f2c75184919",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "842660a6-e02f-4deb-ab67-653762ac5479"
        },
        "item": {
          "id": "14f0706e-0869-4666-ab32-facb6e23d919",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "691554cd-db26-4d31-978d-376acbc4905f",
        "cursor": {
          "ref": "4ee12edb-8866-49b2-a092-561f3df9dac3",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "c8a607e4-09ff-499b-9475-e591d5f92102"
        },
        "item": {
          "id": "691554cd-db26-4d31-978d-376acbc4905f",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "691554cd-db26-4d31-978d-376acbc4905f",
        "cursor": {
          "ref": "4ee12edb-8866-49b2-a092-561f3df9dac3",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "c8a607e4-09ff-499b-9475-e591d5f92102"
        },
        "item": {
          "id": "691554cd-db26-4d31-978d-376acbc4905f",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "a14637d3-7532-43c5-857a-9100baa23f42",
        "cursor": {
          "ref": "215dd99c-f72e-4ad0-8054-1f91a1e7b616",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "cc7fd93f-60b1-436b-96f8-578c0e595bd3"
        },
        "item": {
          "id": "a14637d3-7532-43c5-857a-9100baa23f42",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      }
    ]
  }
}