{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "2702e6f7-377d-4ce9-b986-b8e6b1fa6138",
        "name": "Clear Cache",
        "item": [
          {
            "id": "53090bee-9db6-4850-b89e-b3141b0a8eb5",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f4d02ddf-11d2-412a-8b1b-f2f696b23419",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "c2ff839e-7d79-4028-95b8-6dc7dc86bb85"
                }
              }
            ]
          },
          {
            "id": "d5864db2-a87e-4bdf-9ba0-0e45ea3e9f3a",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "009b20be-ab0f-418c-8ba4-6782aba033a2",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "b037af77-83ec-484c-bfaa-c63112777d40"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "9b195362-8575-4b3b-905f-11c2a9342c1a",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "2a566ba2-403d-47d8-a039-99eaa96e38b3",
            "name": "Positive Testing",
            "item": [
              {
                "id": "82c198e5-88f0-4b04-a085-fccbea094820",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a3eadb43-b788-4be6-b192-9a1e2350f705",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e53db04e-0f58-4b08-b7bb-f95b8e5724ed"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ab5ee959-f34c-487c-ae2d-b1374b5ed53a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "eb91555a-7939-4e7a-86d4-fe8ba88ccd98"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d0422549-6629-4d08-94ae-9f867a9ae234",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2def49f3-aae5-45a9-b5c6-dbd559bec44d"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6d09bc7d-452d-49e8-9640-68a83ba80038",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "b5e66c4a-1723-418c-b0e1-c7f1e45a968b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ac174187-aa1f-4385-a428-63326900b707",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6a9c8d5b-602d-41f4-8ae4-3e8937bd2245"
            }
          }
        ]
      },
      {
        "id": "01acb165-0fbf-41c6-8f92-9afa158a828e",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "0fc1cc91-8dbf-4efd-a503-f3c6545329ad",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8ea298cf-5f11-4eea-be45-d6b45d775b86",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "9f4a9ecb-e6c9-4233-8089-0c59321e80a9",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ac934f5-ebdf-4add-a4cd-8d6dc04fb924",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bb7df2f7-d6a3-43b6-acc6-57c85956c391"
                        }
                      }
                    ]
                  },
                  {
                    "id": "142994fa-f2f2-449b-9d6d-b0f4a2bb4428",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eefd89ef-16ec-4586-bf3d-be9eecb9d33f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b1b7d788-b844-4147-98a9-0ae85edf01d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f249d3c0-b25b-4723-bd86-85d554624991",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d2b970b-892f-4419-b1c6-5d5c01ba3661",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8dd7a654-f954-4ae7-9262-18e29cb29559"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ddfda35d-8104-4533-ad93-f4933550676c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9ff2e61a-f302-41e3-b2d2-347c0342a7e4",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bcb2f5b-0a85-4d82-b43e-3efb1c87dcc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b735bb7d-9a1c-4a49-aac5-82e4c131c035"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b2b7dc7-8f19-429a-b788-e943fdfc50e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae8737da-d09c-4b8f-ae9b-79d38a1ad166"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "f2c7bec6-9375-489c-93e3-10071d39f87a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "25f40a8a-c971-4b9f-b037-dcd056366a0f",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0ae84c90-93b0-4f8e-b511-7479e7e2afc2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "dd746c4c-c96d-4793-9127-0c5fcdc50dd2"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4d84ff16-6080-48c1-bc44-ef8e4d38d0fe",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "bdddc1ff-e7b3-4ae4-929c-53e674b28a57"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7cb14f67-8875-47a4-b55b-873e4ddb3bfb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "af40193f-4a79-49e1-9b60-e06a157b4a47"
            }
          }
        ]
      },
      {
        "id": "3bc11f62-fa99-4529-b848-73ee5925ba1c",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "e3205640-32b5-4bfd-8a1c-77b01c85ee86",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e1e0e422-c2ea-40a6-ae76-0deabd4ece21",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "f6b95c06-e285-49d7-a4d7-61dabee40ad5",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e375e367-49d9-4e59-b137-497b362a85c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee5cf72c-92b5-4883-9ef2-8a67fc3d3ad5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3861ee9f-e66a-4d71-b628-c0e63a2593b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "df9eb132-2989-44ef-9605-9f6b2c6c0386"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02720834-e7be-4adf-8013-d1424fc63110",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de6d5d6c-4294-437f-805f-68a1899b9a1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77e7f28b-4336-49dc-805b-9680d2ce0d27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b710c39-51c8-4e34-b4f2-54836d440894",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f5045316-6333-44db-95d4-ff95804ba4bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4707b00-e44b-4c8c-be20-42cff511f2c5",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5373ec52-4056-4292-81d1-b97d332b6f65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69585c9d-007c-4de5-aee4-87f4f7206d82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1884e4f-c9bd-4ad1-94f7-0946e7f8aa55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "493f1c4c-302f-40cd-acb3-e38aca30c63d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5d1af6d-5254-4915-9045-908c6ca0a2f6",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02138cb4-7609-4a32-aef6-785c1e5e7937",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8af8e4e7-8a06-4d5a-bfed-ea630efe1753"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6f245fb-e946-409b-96ed-25a5f5d99ab7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c79b9c95-a8f0-4a66-b07f-bf2d6d4e0b3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6024b211-95a3-4a8f-9935-8394d391b9e9",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "674d44f8-d761-4533-95c7-2d3eb5fc731f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "caed9cd5-bd92-4aed-8dc3-5d65e818c5b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10b8e7a1-09b9-46f7-84fa-6fab19323df8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a7489ab7-7449-4f0c-ace1-0b689943e5c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7656209-b9c5-41dc-ace8-efdb4e7d92e4",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46b0ad4e-7a4a-49e6-858b-2dc106fd51af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff6cde41-8627-42f8-bef2-45af0f3b8675"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67f32664-4491-4953-bf7a-984f02482cf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3518726e-85b1-4d81-9a1c-28d2395bf738"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57af4d22-9a60-4dde-939e-70a12880f4f8",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9b93464-a127-4d7d-8e72-3b33d1311f07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e63b02f9-2449-44cf-81db-be13e2756cbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c4a12a0-18a5-4b27-b838-ec9d9cdcddee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ea90c717-93b2-46d5-8e9c-4f122de11758"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28651ff6-93d3-4d6b-91fa-b880e037d0ae",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2254932d-7c41-4aa2-946b-0d77e9318e8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8603f7ff-ac97-48b0-a7d6-4cdb5b806c60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1b2efe0-eeb0-42fd-b83b-7ec58f7084a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9ed02266-adf2-44f6-85eb-99492d0d968e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb528dd4-b1e3-4193-bc0e-a082d327e16d",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c1d8283-c452-40a0-a5a1-b6e19c05cb07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "918496e6-33dc-4ef0-836b-68e7c00d08aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "464d4717-2f57-4e09-b873-cbae8126a631",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6a5ec386-6d18-4f17-a6a9-04256f34120a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "793a822a-2df6-4648-bcf4-a2df8279831b",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "073a29d4-5c3d-4988-861f-ec20d2cd3897",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85b5e3c8-0d42-4180-a915-8c39be26225e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9488a68e-93b2-4b9d-9b73-32c757258dbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "32567d60-5bf3-4572-bb4f-be96e7a7b9d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00f4f87a-2f19-4d84-974f-b16da0a9026b",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67eae6c7-1df2-42a8-9425-16940d43813b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ed99899-f58a-47a9-954d-badafa8843bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "889fa655-38d9-4fe5-a5e5-4658f1e8b4fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cdf0f385-4e0c-40d4-9953-e0ceb55f0824"
                        }
                      }
                    ]
                  },
                  {
                    "id": "398691ab-2d01-46f9-a9bc-08fa9cbb9dd5",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12ac92c0-a7ab-4dfa-a2e9-8f7740c1566c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae80c4df-d8e7-491d-b29c-25636e1861c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a0a59a0-5b15-4d82-a0a1-3a86a92c6201",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9850bbf7-7c4a-4c87-8635-56508fa0a04e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cabe11c-e0c8-454b-b92e-c6ea60e447e4",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff9dd9e7-edcb-4f4b-a48b-1a17578c8c29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4210252b-26fa-4e12-9115-c4a67eff1b4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "007cc5cb-b4a6-4d3a-8b97-b4515b14bb3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0fb182e4-ae34-4b3e-8df0-6e9ce1b441cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05002e8b-9c53-4872-8942-3160ccf8006f",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b7dbe6d-73fe-47ad-8b47-aa222dbcb300",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "325aadba-6a91-4780-b1d9-23232d602c42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "484e580f-f016-41e1-82aa-5db6b6745273",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7e22e606-0f9b-4709-8741-1ac8495f84a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07676399-f494-45d9-a99f-202df82ce127",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f2286c1-622b-4b16-be34-9c66cd0afa8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff41dc4b-5598-42b3-87e2-bf23ff6de90a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25fd6f75-1ad7-4165-b0bd-bc2578db6618",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4c00b053-9b32-4ec0-9515-fbf79a7fd210"
                        }
                      }
                    ]
                  },
                  {
                    "id": "858cb35a-742d-4e6b-8c0a-4ae5a8aa2fd4",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "501f1b9e-d1b5-4f16-9fb6-52d29a2820fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5aa3ce69-3eee-4a19-81d4-0cc89df703ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff70f51a-3319-46fc-9ddb-fdc99e2545ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "67a1f621-754d-4a7c-8880-e2948a0c2c50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f6bc126-3054-4907-b5b2-e0ee3a237b7c",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc9cc65b-21c5-4768-ab5f-91826e33579a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e4e9198-ea95-48d9-bdf7-7ada51657dc1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dafc2c2-31a8-4a6e-b7f9-eaa67c86292a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "895653a5-a7d8-4e09-929e-cda7b93129cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2921fb3f-e071-4491-817b-3fc4f18fd97a",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da2c06c5-3441-4d04-92e7-28f9ea24ba2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "822f942a-bc18-45bc-a3e6-565550349228"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a21ac12f-1ae9-4663-9f58-67096129c9a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "3e452f09-f50a-40cd-ade2-ac159def1585"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac17b904-dbb4-4fe1-9a19-774830916104",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2754c772-cc3c-47ad-898d-782c430a102a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22b2ce77-8bce-453f-86e4-836de27bfa38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a318599-c587-4703-845e-82c999c76532",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9f3c0639-7006-483d-bde7-13be2442fef1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "170342e0-418f-4297-b9e5-9961abe48c4a",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3d5da5a-1bdd-4290-84b0-89459020cb76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4869af13-e9b3-4baa-8faa-329ad3b6e61b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e8e1160-e75c-4211-a27a-eb347dfdc12d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8fea1195-2ca3-4a0e-977c-41b4380e77e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4450338d-807d-4d42-b6be-f33fba3bd477",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0795bf8d-6dc8-4c8f-bcf0-980e291a169a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9eb60cb3-8959-4295-a564-4f0b1817a7a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43e6d047-7bff-48f1-934a-fff2ca136d03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "03341502-d624-4482-9be8-c4765569c119"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90d01003-52be-49ec-8d7f-48222dec1888",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "767c760d-ba73-4cf4-b25f-e6c38c1bf8f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb873a78-5f6e-4085-bb7d-a4bc5c0c4886"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d83f0b20-f18c-4e2e-963c-5ebd0b472508",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d4f28a91-fb53-4273-92dc-08484f88e4a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d0f1f2c-fa26-4bb5-aca2-2912f10b96d5",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23ba22f7-a932-47e0-be91-81b1307422e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b517e43-638c-4bd2-83be-8458ae03bfe8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dd89bc5-3945-45c3-bb67-8cf14f7cac97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ccb8ba13-739a-400d-b6de-8a624598bd7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56cc25d0-921b-4984-be6d-527ffee9ebaa",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99d0c6e5-8506-4cb9-a90a-3bb3fff4c067",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3daf45d-a2df-472c-a82c-3032b68be76e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b759e054-7a1d-41ed-b310-4672678fd96f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "288b2f8f-7cae-4b30-a75c-ae3a5154a05d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc79fdea-6f89-4683-8500-12865f12a026",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36bcdcd4-cf9e-4b1d-bf5d-8d3644528204",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "084c633f-9273-4a26-b740-fc3b63ced5df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57b80971-bd16-475a-ae05-923ad2199ad7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d38f6cac-f760-4ed0-8634-42b6f3ae3b61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7725ef66-0059-4ece-b4e2-f762956e2e34",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdd3e7db-72d4-4430-ad24-1e163fd3e2cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c338daa-4c7d-4b72-b9b7-d17ddb59ba4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ecf0fcc-0d5c-426b-aabd-8e62d46b1255",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "eb04734b-cbe1-4da6-ba61-fb7d6a63caf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1fd2664-fc02-451e-983f-82d052fc36b4",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "336230b9-1ec2-4495-881c-65ead3589c27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e36c763-32f5-4a71-86db-f7be29b4df26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef2cf0df-5d10-4208-8470-831988fe6388",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c61c0ccd-da4d-4e5e-be85-98f4ab6a3656"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b83f1e00-ff49-40fd-9155-bf04c7331bec",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ec63549-5fa1-456e-a47c-19e4eebfd8d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9022ffd3-579f-4155-bd7e-fbfdae5e74ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccdff7c1-76f7-4958-9a81-80faf13795cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "94d39526-bd2a-4d2c-9a12-df571daac0d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7b6132e-21d8-4eb1-9d5e-cdfc5a0cf000",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6b1a4f1-6d38-4fab-a7e2-52caedfee71d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4d10cd2-135d-4631-9939-7fad6c9bb435"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b57779c-f853-4e18-a18e-72061d9a9ab7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d8c2ab1c-6676-480d-8e9d-5aae743c8ae5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1615c5c6-0178-4a70-976d-55b1c53782ca",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cb53bfb-0f0a-45b3-85ae-bc48ce724312",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0044cf2-29bd-406a-a2ab-26b1450ce6f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97470d6e-d41b-416b-94dd-684f2dab7cc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "9e755030-a59d-4b85-84ba-cef3bc5cbf0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1576c16-0b9b-44fd-8e30-c630a86907cd",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7c751ec-e926-4a2e-8470-ccaa26b01b59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84b6ddb4-3e94-468d-962e-25fb8f697401"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3528f818-bfd4-446e-b9cd-529b6bf06324",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2086d8e4-6be7-4042-824b-94ab6bccaa51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f18fe06a-4d94-42fa-8a2e-f2eb08eac0f3",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f9269cc-71d4-4d5d-a7d3-f1dcadd7e615",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6aa69ad-220d-428d-a208-367c44fff8fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef6e7474-2280-4414-96e2-a28665dcfda1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fe08866a-f67e-490e-9f83-95f5fb5a1b85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff06caa4-59e8-410c-8e42-821a62c89172",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f01a60a-b81d-4ee2-8cd6-81e3af67a725",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "218cf8e7-63d8-49b4-85c8-3f9cf2068aa8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a85359a1-3137-4399-b3b6-bbb818f042ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "14ab5b29-4aab-4a7d-8f8b-b11952620e52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6aa656a6-281b-4539-9971-2a4077b07017",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66e922ac-ee6e-4140-9528-9d514216f37a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04933c2f-b2b9-4754-a3e2-cfe06f3a45bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c633c7f4-e839-432d-898b-f3610c3e8e3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "962348a7-6c3e-41b3-802b-d7b63465b714"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c6a6db2-0480-4dd5-998f-b5555340bd32",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bcdb983-8ba3-441d-95c6-219f87436b13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1cb65cb4-a3c5-480d-ab5f-59ed9003b8aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ec498a8-0e08-4ed8-a256-ba66c95f81d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "0c849a5d-ce8f-4fc6-a96b-3d0c2d25b3c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcc10b99-e066-4a12-93b1-66557649a4ad",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e4df212-548b-4fae-8dcd-17ceca16799f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fa0e3df1-886b-4588-ad21-0994156bea3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84ea4497-8682-4d99-9079-8d22e35bc906",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "99f9bc54-125d-4409-99ac-0d6d1120fd81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bd2c8ef-5a82-4c1a-beb0-e106ebeddc4c",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0c11ec6-4054-4cd3-9fb3-e2bff85178fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06f58d5e-08e5-49f8-880a-cf17ac0b4395"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "578a662e-32a0-4e37-9c69-14ae9d6d587a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5e2c8e88-b8d7-4785-acaf-692c06331b29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69b0e793-029a-4f50-a616-2628a7f6cb5a",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea144bae-03f5-440d-9514-b71f91ea2821",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e30ce69-854f-42bd-afa0-f139cd294316"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26b784cb-d1ca-4975-a8e6-841069712402",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "7a7a1d81-ff56-4cff-b711-864d2426ced3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53af52aa-d703-49dc-8b09-ede568e2bce3",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e1aea67-303e-4374-b3d9-6d5a4b89ddce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "887286db-1fc1-473d-a826-301ef6f753d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4cfa591-5f49-4ddc-bad0-c22ffeaf855a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "4b986e9d-17fd-4b24-88f4-c5cf7dd3edd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af8019f8-cf0c-4100-ba3e-8a0a766d5ba9",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39a098ab-9982-46a1-a5f9-94d09b14fea8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "689fc19b-ab37-4e15-b3b4-808e5ca242c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1deb7596-8201-448f-8e31-49baa9a01bc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "40b730a2-9ff4-4074-bc52-93b942fd0e20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfb638d5-541b-4bc1-988f-3ed464ef7779",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54b4c11b-ad2b-4d0f-b815-10bb99fb7ed6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24023d8f-60cd-4575-9ef2-42795b6e51ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1324c32b-7b4e-4f25-89db-221b180cb7d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "4e463fbd-3fdf-44e5-9e10-5cef9d6415bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e5162d7-9ef3-41f3-acac-c9ca79fe475e",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01463af0-9a47-4614-961e-6e29975ee82f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "303f4cfb-2045-4608-b21a-cacb3ab1157e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "106c4d0d-9ced-4828-bf3c-9ddb06d03129",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "1f388f11-d936-4aca-89ae-afb59ac539bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bbf0f23-765d-4386-8af1-bcb75d4c295b",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53dd4956-0c3b-4452-b619-53ebae5a4619",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3532f3ef-3231-4a4d-a464-0b314ed7c5b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef625cea-7b66-447b-b9ad-4a7f9d39fe6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "f0f6bc10-5ee1-479e-96fd-34b0661419ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74e1036f-4ff9-4806-8733-f4071d80f95d",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "107b2eaa-eb26-43af-8d6d-ae34954d1f20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73c239f2-9bd5-4cce-9f05-ab49a5611e20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1217d15d-acd1-417c-8869-3eb72659ff86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "6b354be0-3a53-4d24-9ce4-5cb26514fd05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd283c1a-fe2d-4a63-a09a-c54c3262236e",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10e7ccb3-f2b4-496f-b73d-30bcddf54cbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b912f4e1-8f1b-4448-8c97-79dbb1688992"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e49aadc4-d0cd-47c4-9598-2da93a5b8981",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "59844c57-537c-4e02-a9b6-af2515d1824f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d827b843-aa41-42cf-9ce7-d89acde8ad07",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "150ab60a-b44e-4926-a04d-fef2db0049f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4684c2b5-57e5-4108-951a-c0277a32e2ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad12b74a-bd87-4186-9df2-ca72b717d8fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b9b2eca3-3c79-4a6c-aa8f-3e9ee5f1e146"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bc9e338-f85b-4fc0-be4f-e67bccb11dcb",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edbc2645-e72a-4d41-aca5-f48ac0d223e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5514eb26-65ba-45ea-9466-a32403fe7d08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a34886d1-d043-44a9-aafb-f9eb2381698e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ef444c38-671f-46a2-a5bb-8880f9c3258b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63de53ee-73f1-4ab5-add8-d66ae3feb161",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b93f4261-cbe7-434b-9db3-4dda694df425",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27e06fc3-9a21-439d-9a94-83075502ec3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83d7513f-f6ed-44d0-b6b6-f7b2475503db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ff382477-de59-4eb4-8896-41515a2022ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d779911f-0dbd-4f38-b716-b9e85e4825ba",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d58eb1d2-5a7e-485c-a065-40e3021bb515",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "237f48a8-a670-40c4-8232-cb22756dffbf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d90fac2d-2d11-4f87-8648-75c891cd4c9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e363f06b-01e8-4775-ae33-a440cff5e6e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c714349-4b78-46ba-8bcb-57783bcfa127",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bcfd706-37cc-474f-9fd8-ea7874912d88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8271ebe-2220-4df5-9d11-6ba5a1808893"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8eb28b65-0856-457d-a18f-a3acfae10ff7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9b8ec1ae-8670-444c-a9b4-ebbeec5f725a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c5e0f51-66c0-4b8a-8e2e-0a2e09e1aa21",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6c33aa9-c494-4ab5-b033-b4e21934f0ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "852b67ed-b17b-4387-aa99-c994fc244b4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb58fdcc-1253-4f62-8f89-94900ea6c3a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "f47b269f-2a0e-4cdd-a993-ce6d07b952f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15819a94-3913-472d-b2e9-4b0591f0af1d",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06b2ea44-80f8-4ad1-9ac3-12c7bcd986c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4c3f75a-aec1-4f2c-99b5-0597e81598dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57d2f9ba-a5fd-4c56-afdd-ac3efec5cfbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ebdc574f-ea6a-4707-86df-05fab62404dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9ec824b-9cf3-4221-a164-78c5b1cf09b2",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35990f02-83d4-48a7-8402-b41a2fed66f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72149c85-17ac-4023-bbea-71ce78f54d3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e2c53c0-cf9c-4cb0-a4eb-f8011f734e68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5944b8d5-36d7-47fc-9923-5e22bd9068ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15d9ceed-9535-4d3b-b7ce-9e35cb3df332",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1c4cb64-2ba5-4657-ac69-e5225a6cb04e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f05caaa-c138-4ed7-bd43-a1d444a0dbc0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f29e28e4-133d-4aa0-9893-4bff1e895963",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f072d386-e4c3-46d6-a0fb-f64ae527fe1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcaf891d-cf0e-4f61-8e58-97f94eedfb93",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25b27bfc-6e87-43df-b2ca-88f31d129652",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c5c666e-d5ec-4c87-a78a-ec75ed70fb9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4e4a179-0a29-489d-a216-9abd18d4cd3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "441fdc13-5327-42a3-b5e6-2199dc6d775c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "facf0264-c2c1-48b1-aa1e-870b1880d906",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb283fa8-151b-47fd-924f-52bd981b8b7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30da45c7-d86f-487a-94eb-c7de8b4dcec5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f979441-0f7a-42f9-a232-0e0a6b02a320",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "fedfa0b3-2014-45db-ab13-d8b4deb0a541"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60b3912d-a810-47c7-9ea6-7d833f4fc99b",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f1a4536-3d9c-49f5-a27a-23a017e83fbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ddfac24-cf3a-4a80-912e-5b4e42cd6750"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f58b725a-d12a-433a-92b9-a9960518741f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "cd62496d-17c8-4360-9529-b02c4371ced4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43a5e6f4-3170-4425-8fe2-dd8ee968dd3d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "080ab2d6-b1f4-4f9d-ab65-7b7fe5b6c7b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddca7eaa-e5ea-4e88-8f83-1ceeb70a7f99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cd9582f-0cb5-4601-bc65-280e8b59f086",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "540490e9-6e78-47a3-b303-87b64a2c8eb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdf3cc02-2ca7-4398-8d88-a4bccdc4a0f8",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b06e1174-934a-4518-a8e2-113e4e52ccbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f561ee5e-c21d-4b55-9ec1-17d41c87ba45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2aa97a56-d2ed-4a97-95c4-98126dc9ed04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "f16c6b6f-1ec9-4430-aa74-1f85d2234b5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f983eeb3-de45-4e09-a138-29a62028467c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35aacccb-5c50-42ff-807e-d667a04b7034",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f925ddad-b0e4-4b6a-9fd8-3a4bfc9bdef5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a4765ca-7d99-4b43-a913-ccc4415459e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "5b9ebfc1-6c6f-412f-ba7d-c56897327492"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a36fa5a3-cd88-4171-801a-ab998f914719",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ceb61aa-27a1-431f-9f37-421c86a6885a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "669e23f4-40fe-4750-aa4d-dc79fe349cf2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a34fcd27-330a-48f5-bf0f-bfcab1f6c625",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "ee2fe6f8-eaf7-4fee-8abe-d643c85921ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b4a65a6-8e3f-4930-8dc6-293b19ff05a0",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c7d4827-050d-4cb5-b172-7a1485048d2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de465cba-7d4a-4fca-9574-1eb9f92204b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01bc199d-f476-4b50-96d4-e5e6d7b89027",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "97643cad-2df1-4a05-99a9-19d8bc310ca9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96a7d17c-7470-4f40-8478-32df2216c6ed",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1171560d-c583-4b01-b2b7-591ba510a58f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c3baf6b-b8cd-4ff0-b7db-5790772de358"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "524e32bc-19a8-4aca-a8d9-ceff97e8762e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "21fe7049-ba53-4232-9987-4286d549374b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f8230d8-498d-402f-ad58-9a162bd6eab7",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab5e68e7-db19-4785-aa11-19321f4df2be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec0771ba-8adf-4cdf-afa9-37268c82ef9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2c5ac10-d51e-44cb-8bdf-de33cb59df82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b14ce7d8-dade-4b5b-b968-6483b5cdab1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39b6ff5c-be7c-4d82-bef7-4656e120d9e1",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1cd9e7b-84f5-4540-b32c-2d56e0e22097",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4add368-5f28-48b2-8664-729aa9e54db5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19296041-2912-4b50-86b4-109c78cfb1b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a31df73d-7253-4131-8101-22c6ef54ac39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47ec07d2-4434-43c8-a04f-ac1429fbfb17",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7edc060f-98bb-4c04-a188-0ae6869f5dfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ece41a5f-186d-4399-a112-b5f0c46ae328"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd1eb087-82be-48d8-a04f-5d6263fe1086",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bd6e1e39-1215-42f1-8ad3-1f0d6727fa16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "786f62ec-853c-4834-95ca-ff83c0de7bbf",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f620547-4681-4c85-a54e-ce925157b6f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3096982d-35ab-4033-bb77-74847c94125d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c7c75c9-e5c3-4e31-974b-8c682de04d0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cbed6eba-0096-4e16-bf19-b93ad33caa72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42a74bbe-10d4-425f-9ac5-e4a501393b8b",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cf4dce5-a66d-478c-8338-b3dcf596d49b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "872492af-540e-4653-a864-daa426eac082"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b984a49-78ea-4eab-833f-b0d71bea8e29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "cb15eb76-47c4-4518-b36d-2730cc8484f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c92a4466-f7ec-4665-9b27-e3574f67e2b4",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9e42229-f9a0-4d10-86e2-61e5c40d3c2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69babfa6-f283-4333-b8eb-49ad5bb1a320"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b945487-3c2c-40ea-9968-2a60afdb1bfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "682f39ac-4d83-4bd8-bf79-ad40fc9e5218"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4e94727-93b0-4e0b-a890-7769e3f0e7b9",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8ba0ee5-fac5-4eda-a205-3107d31096da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f87e6ae0-689e-4610-b818-e939abbed405"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2a32f3d-36b0-41b8-a526-16c6152d390c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6e242db9-ca77-4801-a799-cb807e8f143c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8973fadb-76bf-445d-aa59-4ef4a455acaf",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebfc6379-2194-41f0-a9ce-4dd0b63e3896",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f981c36e-05d2-4482-b1a5-6fb733655eed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b89cdb9-9e8a-4bbc-8d9b-013c56bfad62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f7192700-641d-4d33-a458-044093e1ace2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c689cf0-ec48-4505-b2c5-0bb62cc735cd",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2056ac10-bcaf-426e-848d-763a9e5913f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8eb355c-4102-449c-bd74-2904ced88d4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86ce8d67-386c-4a44-bdc6-661501131616",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e6f72526-eb98-482d-b5e7-61014c94a827"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98d29c03-348c-4f02-a3a0-1b993c0e24f0",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d95bb84-658c-4d97-9660-c5a86dcb4afa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58ac6d6c-80ba-4c17-b0bd-792f1fe40f97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a120b061-b8bd-4fb5-9e99-3d00c66245e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b678a074-b29f-4e25-a25c-4c4e2c2dcbab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f97ee15b-cb7e-434e-8816-cda638b5d87f",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6d8ad77-ce7e-4619-818c-9de01557fe02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20d2f00e-a05c-4467-9209-1f53a4356d36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3945babf-d822-4727-87a1-37c98513097b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8f79967b-c059-497d-9c2c-6acf2f8b33e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f75610b-48da-4349-8555-89fd6be3eb9f",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36560977-14bd-4599-bc47-edeef502def5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5dc6fdf1-0e3a-4cde-a350-a4e8841894f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a42a069-7fe6-41e9-8375-0f8c362b949e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "902286de-6700-44e5-b761-91bf63692797"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e8c940f-c3e7-4e49-9928-ee79c0bcb126",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13d29f49-b178-4728-b2bd-7b4963890fd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa8c1352-c97c-4f63-9b53-883a294f2af4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c4010f6-cd3e-4f57-8b74-bfda05f576e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "34de9a41-d053-4a6e-bf82-384e90db7f0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32d48814-7f68-42e7-a512-e55664ef5278",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4747eb78-deae-45a5-bb24-91e5107a96cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f13fc4b-cdef-413e-a170-54ed8731f25f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5893bf3c-ef84-4649-8ace-f80b562871af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d70093ad-1fce-4f4b-961c-65ac77efaddb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3700b7d-42bc-4dab-aaec-5220e9ba72f9",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e795e980-deb4-4dd6-839b-47576c0d5068",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d0cc175-1fe3-410a-98d4-db594919ef32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad1074ec-e20e-405e-b0ae-f1f178b43a24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d3198c6d-b2b0-40c3-96af-9e32f2a17c57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9d6b5dc-a336-40c8-8522-c593631a91b7",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9051f4e-e7d8-463a-a714-5ae789314d62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4f7eaea-7849-4ea3-8cb3-53388d808923"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abd2eb66-3e4d-4b62-b317-65366a0845db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "310334dd-d52a-414f-a4c6-4027beb95db3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6adc23f4-9541-4778-8e60-fae308b89c14",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fff49de8-41c8-4d43-9a31-94e057564378",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4da6f4aa-71ef-4a65-9928-6fc777954993"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22198a8f-e613-422e-9cbb-89cd514272be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "17e20da3-9ade-447f-b8b0-fc8593c92ef4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0901525d-5579-49f9-9ba7-b194a037c709",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43251f0a-d7c1-4d72-8790-9d3de2d60c4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "720a6d79-ec02-4a6c-9b5a-629e8c3bce06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70584c1f-f90c-4e01-8b9e-6f0ad09d675f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "d02e4e17-ce13-41d5-be6b-865e00854c6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac2da174-ace4-4b52-905e-51ec3f1cff2e",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0e7a942-c0c0-4790-80cc-880013ff412b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7278b38-bc8b-4b52-b4b3-48adb7fcf7cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f7780e5-cc10-4fdc-93ce-d1d75f387e7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2709422b-9b45-43bb-b006-4cc05ba06562"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10f54a71-6657-441a-8290-187aa2c8132d",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1da6506-24fd-4a2c-a4f1-7c75800c539a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "708466de-59a3-4e9b-8543-84aad6b44692"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96498aa9-4e69-478f-b3a6-2d7e1506bf49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1aee8472-62d2-43b2-ba16-9bc0d3c6f797"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b41fd4a-667f-432c-adae-115b97abab8e",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29ebbec8-e836-4ea8-817b-32a5c8358e11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56ac52ba-52b7-4b8a-a11b-f70400eaf0cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9058ff8-ccf8-4d86-a12d-4ebe74d0ba93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "80dee1bb-d4e9-4871-8b4b-4db62f108254"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d67db55-b592-49f5-9e68-3a763dfbf739",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0535c795-8ec2-43a2-a41a-1d224eb9e000",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d499f156-509b-4517-a789-cd87f0ef15aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6017f9b-2f0d-41eb-85fc-dc8236506ee2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "33f30f0d-eeeb-432d-bd94-40fc3ad719b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "718837ae-3659-4f04-8d78-2593ebe71894",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8e3dd6b-0b0b-4ffa-afb8-321b7e582a48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac8aef5d-4f6a-4857-93e2-8aa4c06d6650"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "133a294a-b689-4bc0-9574-0ed10e3a26a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3fa08d1c-edec-408e-90c5-f14d6591b14b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "047e54a1-a3cc-4404-a02e-da1a87dea07d",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8234f934-3be0-4950-bc62-46a84264ef2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "790f3af2-8c04-46bd-b5bf-45b94d09070c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5525422-ff2a-43f4-8193-86f4791dc918",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "3f2c7a65-8db7-4ea4-b4a9-863fa237d0b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f50b367c-df87-421f-a38c-88c62bd67a1e",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07a944bd-8c7d-4971-b691-0ba002ff0b92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7e92023-94b9-4b88-9957-0dc8c329bc34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e53e811f-a5bd-47a3-a36e-aec30f1c531c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "e2524ca2-5f0a-4344-b033-5d2f9797c25c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bd873d1-c1d2-4523-bf26-feeab026b31f",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7dd1232-2d8f-43c9-aa94-d59803dae0cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1564239e-0627-419c-bf7b-ba600548b128"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "124bc174-00ef-4494-bdd0-5404ee332012",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "7e435dd1-3acc-48fd-81ca-2e9056254f02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03643477-5c62-4999-a1aa-20a81f1ce459",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d4d9ed8-6c42-4f87-9aff-091a5e6671e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06a16931-b860-4139-abf5-ebbf90120580"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f704fd64-195f-4163-ab77-f805b8ce0d40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "9114f4b3-38a1-47fa-be12-451d17555c4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f28710dc-a09c-4805-89dc-5d3986dd9778",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0796ed18-e98e-4340-b488-9f2233c01f19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ace1e6e-e5a5-4159-a9fb-973bfb7bdf09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "066c7fd9-8a88-4f44-acd1-67606119ba68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "854ce67d-a622-49e2-9de0-772e09929c01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28612fda-2d4c-45cf-92d4-32993ab0c639",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dec398f-c181-4068-872b-9cdd928db0e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "735b32db-3aa4-46b5-aa3f-28107a86dd6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4678e24-bd7f-492c-92a8-dd31b6cf0c4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "f7f645fc-b8c5-4481-81d8-5502297be9ed"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "18a6ee2c-70fc-4a3e-a33a-f0bf2e6ae50f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "14e3e2b4-c5ff-4b00-8b77-d166165ff432",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5498f9c4-144f-4bb2-b07f-13549e9c0b03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bf7380c9-6cdf-49e7-acc9-0dcded19e29b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cf4eae7-4c70-4030-a483-b55748c59314",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ca7738ac-6fb7-4287-9b07-2466ee20951a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5d23dd8c-1285-4a6c-88b5-ffb2b90e782b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8de4fc8d-d918-48d1-9e9b-f5769dadce4c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "371583d0-16d9-411d-a9c5-3e44aa7d30c3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d994b355-f6d8-49d8-9c29-642181c52d7c"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "da700da1-5284-487f-8295-3e303a6da23d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d3c7fdb0-9334-4702-a9ab-8c0c38ff3916"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "0473f909-9fff-4db4-b978-bb5ea5183bbb",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8e565d83-ffb9-42dd-9adc-b194b498f961"
                }
              }
            ]
          },
          {
            "id": "e9128076-abac-41ff-8921-5fd7dfb74153",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f143f846-24ef-4cc4-adbd-10b0828bfdbf",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "401e50ff-5125-43b3-90cc-fa89bc09c5bc",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a314916-b8eb-484f-a817-8a7c3d5346f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "c7e12523-3fe4-4dbe-a0de-e073d1b128d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96f4079b-532e-4e92-bee1-d9e04cd3d26e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1568733b-850c-4f7a-b002-5906b7bc7ff1"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "0f346a9e-5232-4884-9a3c-7c43484fc60e",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d0cf7d29-9582-4153-b4ee-85e2abfb54c1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "42edc2d1-83de-4617-a05a-6bc5016d663f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6713a1d9-91a8-4552-8f37-cc263e8bc148",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "1aa2e352-1de1-4fc1-9ae5-ae00478d1368"
                    }
                  }
                ]
              },
              {
                "id": "03802731-e298-441d-8a86-248be2fe16ce",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "42cdb6f3-5ffc-426a-a3b9-3ff081e1ad7d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0a81e7c3-b22d-4940-be7a-4b1add652a1f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "59488186-21e7-43c0-a77a-109c19f332cd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "cf961d87-bbc0-404e-ac30-97fa756ca77e"
                    }
                  }
                ]
              },
              {
                "id": "52641214-cd3f-4696-acba-fee80b66de80",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6a09c44f-f106-45d6-b89a-4470c6ebbbae",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "390a75e9-c93b-40a6-9cee-a08040724285"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "055a3d83-3785-471f-ac60-a0729baf8ea7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "7857ae95-bbc1-458e-827f-fba7fd1c83be"
                    }
                  }
                ]
              },
              {
                "id": "bf84b438-d7e8-43a4-98f6-c011a5550512",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9b551bb2-4375-41d3-b1c1-1be8d88c7a0e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "49b2b1d6-ee2e-496e-9c07-a1cd36e81091"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d6f2263e-0e7b-4f90-a43a-62c321944e60",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "b9d86dac-1ed4-4b01-a551-e21ba1dc48e9"
                    }
                  }
                ]
              },
              {
                "id": "d351d227-4cb8-400e-b031-c27fdb5f51de",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3c1f2a96-7202-4c40-a51b-768ef5ae845e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c94ee1b9-e2da-4a47-88cc-1168c8d0ef22"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "61ecb0cc-b6d9-43e4-9f1b-86bb63374801",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "63aa7c41-ccad-4e92-ac5a-f4bd22b0604d"
                    }
                  }
                ]
              },
              {
                "id": "6bf08b9f-a012-4fa5-a932-3a32ec9ed65d",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d81daeb5-9469-444c-b616-7cb08cfe62db",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8d10f537-49dc-4ca8-bb3d-d97e77f70643"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d366e166-6153-4084-8b2d-aba69228290b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "01ef42ce-cc19-428e-ae8c-60519c54b995"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c9ca59a5-bdc4-42b6-bde9-1c6cc5e35c25",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8b58a031-ca99-4b7b-ac01-f5c87254d327"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "bf84297e-06b7-4cd2-a3d7-be1d659646e2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "385e8b10-ee8a-43b0-a4ba-7daf5c52c827"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "414fb207-f486-401f-a764-25e3a8393b81",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "ba5833af-4528-4078-8798-ff21a2f728b4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bb2ef2ae-98b2-436c-b289-3179e1a2352f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2bd1e4d8-40fa-4f9f-a227-06ffd9586154"
            }
          }
        ]
      },
      {
        "id": "d9531180-db07-4f9b-9ab3-cee7da351dd4",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "ffbe6f6e-063c-4d76-884e-ed0143b2b20d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "fe9f1b1d-903d-47ed-a808-44fda463a23d",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "26867f2d-3872-46f7-9f63-5264e8f776dd",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0d6ea3c-2016-4021-b766-92396d2f0746",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "589e0e50-9c86-4602-94b0-a3311f155749"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a83cddd-c7fc-41e4-b6e9-0c81321cf5af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "d1361a56-0d35-4ae3-bf9f-8071d51ee4c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30b9c6f2-3a50-432d-a12a-9a8490781396",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70c720d1-4cf0-449b-921f-650ffddf5913",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de006a4d-9b01-4ff2-b545-715fdd542cac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dbd3f26-a4ba-4a88-ac33-3c715b749b39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0ca9e311-8912-4d57-b3d4-a6f0d47b4c20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c57658a-7379-4725-9c0f-a33608edd4fd",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01754a06-516a-4501-8f80-82aec0f56c89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03b4bb4b-175e-4eab-aaf5-b1d58cc29853"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0154ede3-00e8-4847-8dea-b1518f3001fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "98bb020f-0d73-44f0-b32a-016e807527db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec3473de-9a6d-46c0-900f-f8438387dd64",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c593d33-abae-4d50-a7eb-6ec12e6a9294",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c27537c-851d-4415-bb6c-bba96508b05c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66c51159-fa13-4ac5-b96e-bf561ffc0306",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "faadfb44-17dc-4243-bc7e-65344ca6d747"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a3b22de-5531-4991-8af6-a88102e55e73",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d1a62f2-cfd4-46c4-a7ae-30f8d874f1f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1791d50a-d24d-4903-a264-ecb9a55c7dbf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79e5e8e1-645a-4420-933f-e89456e850a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b2c86ed0-4240-4ac5-8e2a-ce2f97f44ecb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aee5b15e-0d44-40f4-9b7e-26fb323a1d34",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0aecfe3-416d-4368-9f16-16cb7e12c6be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ab44058-6a94-4a95-8da4-2467a96080b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44cc60ed-a9e5-46cc-a2c4-b0b99cc459eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ad9a50d3-862f-499b-995a-69187d1f4292"
                        }
                      }
                    ]
                  },
                  {
                    "id": "beb10ada-a2b9-4f4b-af49-abbcaeb75a8c",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ffdb760-3a6c-42e6-902d-24a3cacc7ca2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd26fb55-ffd2-430d-b083-7d392f594ebb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72e7b5ee-b3f3-4c8e-87e0-a9e9bf570a07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "635558ca-2f87-4b42-af43-ca42c3e51769"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e267ac01-f987-4448-9bc0-c557673c7523",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06f27ffc-0e89-4ef8-ad83-2de0a2d5c131",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2221dbae-9d53-47d4-91a5-c4a9f10d2127"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b641a09-63ba-4e21-bf28-976d8f202a00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "01168d2f-440f-4f57-81a1-cbe56ea8ee18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ec03bc1-5d14-4149-9d18-25deae3fa6c4",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cac3d2d3-97fb-4f88-85b7-fc5029936e9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e05bff3b-9ae5-46b3-8baa-9513fafc30c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8cce5c2-174d-4d9d-a4e9-975219e1b266",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "156047f5-13e1-41bc-bcd0-745857c55c85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d7a7a3d-6031-4336-83d1-8f4494e574ec",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "302227fc-5ab5-45cb-b5fa-79364bcb2bf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "484f71ca-0031-40d2-9e4b-8fdfad8a895d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "753e054d-f302-4271-ad06-4e7a591da421",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "85c5fb40-8c95-4201-941f-f5f954b01527"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80792fe0-0d90-48f2-ba73-f8cdc58f2595",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0a2e842-11db-4e84-a296-e46f8a086ed6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a45bd8f0-9fd9-4500-b779-356f36048147"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d764852-7142-45e2-b849-c041d7d2cb14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "bb688b03-9185-4453-83fd-fba401035c90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f005cbda-780c-4c6b-9f65-e40ca90970fa",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f385a57-b978-4d6b-a8d6-7649c2efd5e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e9adca1-250a-4027-9fa4-a249df75e666"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04100d79-0a47-47be-8757-7137df413809",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d33d2930-71d1-4a3d-a958-db2e3a6d8d49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb12578f-703c-4b1b-ba1b-3379f61f321e",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1167c6d-a6f8-45bf-81b9-f448256732b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01e20a93-10e2-4ad3-84a5-d9879b8ad9ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c80780d1-b6cb-4e09-8752-4b08b76a3d8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5f853d28-8d7c-40bf-a5ad-83d64672bb51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd809765-1c37-42ec-9a5c-e6a3ed34d09f",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "037aabca-4e3a-4c9b-8380-8668a06e0547",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90038ed8-4ccf-46aa-b3d1-79171828b9fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "711e9524-cf62-490e-a7d3-3cffcda653ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "87a321d4-d3d4-4d1c-a21f-4c02f6bdc1cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83d93e0b-ff96-42ae-9a2c-e27f24873f08",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11d9deb9-2e5b-43eb-a24e-30590acb5895",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d12ce479-d650-481a-b70f-e8d5392daf91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c2308f1-806a-48b3-ad24-67eb601db6c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "82e4a1ce-4d65-4395-bc8b-f697fb232cf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cde2a532-2940-4d6f-9015-e4094b1d1856",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a79d3fb-d85c-403e-8ce6-5f8fac897d38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "564b935c-2540-4a4e-b800-38e1e110dcb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8df299d0-d187-4de8-a614-aa0c5dacb0ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "f5ff7449-89d5-4b61-aff0-060b3a5ac7e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26fb361b-af26-4f4d-ad1c-7bd632cae9c9",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5b326d6-03fa-4ddd-9040-689a8001a4d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70370e06-c582-48dd-9414-c6b0ead19cdf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e42325b-8c66-4341-859e-66f0e58fafed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "ab8a43dc-9bc0-4c6c-b91a-a861f27f4ee1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de94d9b2-ba55-4682-984b-66ca809dc1be",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4eb63f7-faa8-4633-bc23-e2c0d09ccef1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83ed2484-9f6d-428c-b15c-867c0a8de673"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df0904db-5745-4658-9a5f-0c18923d3329",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "ed759ead-ad70-4050-890d-5e4f142d3dd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87ce38dc-4886-4eba-bf1e-bc411073adcb",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81d91be9-78e8-4942-8519-76873067ba8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4628fdc6-ab95-4146-9624-705e752f5f24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aec60f98-32b0-4890-85e1-cea41e726ae1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6da5a07f-4f79-4d7e-ad59-b72fd00c284e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b6c57dd-bbeb-4693-bcec-92c583494135",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a6d10a4-f485-447d-a321-4d94bc3b4249",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38bc086b-a551-455c-9924-2dd51f254499"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9312c37-6883-4361-abcf-3e97d5b3cdc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e2883055-5ed5-43c9-b2c8-51c76fd8a593"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74de49b2-6086-49b2-927f-d3c9bf9f3d54",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "369daf7e-8626-4f7e-a7dc-3a74d22c81ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a993fc8-1958-4d65-bc31-14a2b91fc737"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e64a8c36-87ba-4650-bc41-1b6311d4cd50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4fd817b3-3ec1-4e0a-b8e7-36dab7d409ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e365f498-d855-44a7-87c8-20c45e3a31e2",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0464713f-d93d-46d5-bb44-a410f64601e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c962618a-aa34-4b4f-bbd2-43d56792766f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f7ef973-9c66-4f0e-aefe-51414bef76c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fce89720-1aac-4ce3-aff3-0ee6959ad47e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2573dfdf-acee-4148-9029-350059c0cb26",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71a320c7-b3a3-4e54-8641-4eabd334a630",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f79832ba-9280-463c-9a28-c2667e952ee3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34e31faf-1b00-42c0-a36a-0433ea56805f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4a58f4c6-0e6f-401b-aece-c44c5e6a4961"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ac89a10-f549-49dc-b4fd-bf3f830be35c",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35dfda9f-8525-49ec-ae88-5943693743e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "954b9717-70c7-4bf3-a267-951e2048697d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ef04bb1-be1d-4a60-b64e-23c63994e0bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "56ac7687-9d58-4e20-b345-6969fae72857"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11a6e3bd-e1ff-4925-9c59-5a7404eb4604",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5390b412-54ca-4a41-9f5a-6bf46a428f42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf9f3770-fca7-4c88-920b-b1084275495f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4dd0cb5-af92-4085-ad07-db35df4ef827",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9ebcdc47-b7d6-47c7-808d-c93bee2b8df4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d652ddc-3c8a-4068-9750-3bbe2695405b",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69fe2512-9ea2-4a4a-a6a4-f8d5e763a8d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d25aa61-90ca-4232-9eb6-fa1033b2b25a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdb9b5d4-e7c3-4929-8d02-a5fc7abae874",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0a1482d0-bcb8-4717-a2d8-20465b563802"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4be9e6a6-8f28-4993-8757-8de4ce4175b8",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3945b681-d989-49f7-9a9c-3115e2dc815f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37e1ae6b-9027-412f-a72f-f31fa49d1830"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e8a7adf-f02f-4c29-abbf-590fd99558b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b74c6f3f-71e2-4b30-b2c6-0769c50e03c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c162a40-74bd-4e03-94b9-825d39f02d02",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33442e89-777a-4477-82f2-5e51c665a457",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc17132c-20b2-46e8-8312-7e689f071d1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e815473d-590e-4120-85cb-bd4dbce7bd6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f58b9e0f-81cb-4413-80db-d575c6e4a678"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f79cb48-16bd-4d44-b49e-863ac9045810",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f28d85bf-5486-4732-bed1-b08fafa63f6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e81bbe17-cce4-4346-8fe0-0ec1d770c274"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a69de12c-24f2-4836-acb8-d8e68e4be362",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6928b183-9ea1-4f7d-84ac-c1cb74023eea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7c81232-8fa7-4a64-805a-381bb4d6a595",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fe4735f-7dd9-402d-b5de-b5dda7b5fd94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f369923a-a305-4a6f-9a81-d3c396fa52f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a07fc98-96d0-452c-b7aa-45c0502fbb88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "107c0818-9818-4d58-a7ee-5199fdca651d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "970157f1-308e-4e56-9f57-bd67b24238e1",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7dc7128-fc84-4423-8eaf-e454ac2d6686",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd66aeee-91dd-4381-80f9-e05471ecafe7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b197efcb-3425-4285-9594-aec2a7a86afa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dfd26a65-3e59-40a6-8c2e-480f3e88ea69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e55ed8f0-ec15-4977-8aa0-ffebb943cd37",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4354fa9a-79ad-4b4f-8a7e-ed826eaf118f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33d0af80-dc11-4006-bdec-b0b7371c1496"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "283ab72a-904a-4d53-8227-c795947e4f61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2a95f823-2adb-43fb-9ae6-e966d175a34c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d3a59bd-ab91-46ae-9227-3baf15d0f37d",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "891a708b-725f-48ae-8c56-016d04540172",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b4fa25a-02b6-4037-aa41-2a043aee0e04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c7769f3-9de4-42a1-abc5-fdfdd7880650",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "08a42bd3-a5f0-48fe-bd51-dd7bee977446"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c15880ea-c7f0-45f6-b4b0-6e680f5b1b56",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfa8fc54-46c1-4f53-b9f4-f6d5f5987eae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7d9e60c-3a09-4fc2-84e6-d4fddce23cff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26ebc9e8-2d41-4646-8866-f493626492e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ee24e1fe-ff1c-4949-a901-fda29e5d87ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6609701c-f8bc-4615-866c-1423d900c93f",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a91ea29-79d5-4163-9b1a-ebae026eefca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9db14360-9d4f-4191-8852-640d406b446e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16523b17-da6a-41ae-8b17-308aedc36387",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "85c64997-9c9a-4376-a437-3b1aad47ab56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd7b6b0c-0fb2-4056-93a6-bf209b518f8d",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28399022-1120-4cdd-a542-ec30b2c40bca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71f0889c-e2dd-4185-b9df-aba8725a89ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "479b7815-935f-4cfc-9fa1-3deb606677b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "556107dd-6d9f-4cfb-b1ed-34f3aa1628d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8777840d-d342-4983-994f-9bc193a43172",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "827eaec2-67db-476d-9ff5-790d58cf03fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96823270-0caa-4e06-9e22-95dffba28a6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f46533b3-4fed-4d65-a10b-cb6a89c818ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0759b467-6f8a-45f6-842a-5ffabf9b9fd3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "5f455b6b-72b0-4655-94ae-3e89f3e02573",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8d7b32cb-ed4c-4a41-8efc-4d3611d313cd",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db6a8054-daa0-4c31-a260-3dee9f7ffab8",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "f09c2b7b-2a47-4a26-8058-233ac9b08128"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5e7f8a6-8669-4639-884e-6afa82ea1cc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7d93c678-1221-47b6-a19c-ceccf465f57c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bbb23245-8219-4da2-a743-b4a860376337",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "29746386-8928-470a-a838-7dd9070c6a44"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "54dfd925-70aa-48b8-829f-df1f51084f92",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a33a01ad-f94f-4bff-9f35-935c0b48fb73"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7d962491-fdf4-4a7e-8a3b-698a02094474",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "d59f0966-6044-40f1-895f-dd38fc3bbdc2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "aaad74d4-4812-46ec-a4d4-37402f76220b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "83c2fe1d-2c6a-4879-9bc4-56e61898cc2f"
            }
          }
        ]
      },
      {
        "id": "ad448eaf-2915-4d73-a41f-aea60d1228fb",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "08d3385e-eef0-4029-9fcb-60740243056e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2e518d45-e999-407f-960c-e7807bfdf2f4",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "972d48dc-91f6-49ad-bbd6-c8e5f7fde0d9",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e92d7c6-42e4-4a61-8603-927adac26fce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d4e11ce-5ced-4c13-9641-89a9c19123c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8381d606-7852-4d15-bc71-43725de6da7b",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6fffe19-1f44-43b4-91d1-4aae4ebe7904",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59671a11-1cc6-4f53-be35-d964d3d19a3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f071dec0-3222-48cc-b406-86c8421b2280",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e99e8782-4363-49d9-8fd5-5239e22631cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e3fc01b-2c88-45c1-8242-d0232ae025b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d031b831-48a6-4073-b80e-a40128cd5ce1",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9276cfc6-4c46-405e-a008-4f305c636af1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2fc09b2-5189-4f9c-a016-637db6cc4034"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1ee88ce-b6bb-49e0-977d-202517026dd0",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13e5cda7-3007-484a-90b7-1ab82401ed48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "497e2c2f-f752-4c8c-80aa-f9867d5daaaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5e63e73-f600-4ca7-8338-fecbf59db42d",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "808b0780-82fa-4c61-83d3-27d266957870",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d7046fd-8a39-47f0-a981-bc0494fb0cf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd9411ae-6f10-48ff-b59c-ccc90bde34b3",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30301abd-0571-40e5-8e38-af8b0bd7f8ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6090cb10-96db-457d-83a5-0e8dfa5c91ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "122fe908-96a3-4c1d-9ec3-956922b3dbfe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3353ace6-5f82-43c4-961c-8f1a4418b0da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ec345b8-2e20-4cb2-937f-f4619ce648c5",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f445614-83d2-4cac-8e67-0d5cbe1f8a40",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ed0f7a66-b1f7-4032-b940-ce3d8c7df4c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "847e5363-64e3-4ed8-9e3e-cbebf9f06305",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "161f78f2-18f8-41fc-90dc-df29d1893010"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b201382-69cb-4830-aad2-8d0b63ff1d73",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5929cce8-8073-4efa-b7f1-b7d8e1b6e347",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "87284814-bd0f-4b61-a8e5-1d11819f2e82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af80f6d0-c1b6-464a-9d68-f9e816b0f107",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fe7b770-f0a1-457b-b00d-9997216feb4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d63ef8d-c9ca-40e9-a0f9-1b8dc06b8c3a",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b664e725-c500-4054-bcb1-3f45ee8e44f9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aae71bf8-253f-474a-86cb-fd1ab6379455"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30e6c236-e581-4056-a062-7bd1a87109ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e5c5808-4651-4459-8485-0e0993608bdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68419224-c3e2-459a-a3a9-1508f3c663a8",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa1ecce6-c511-46bd-a772-8aa8dc4c4da8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4f53e4e-5523-4365-b891-d5862d4d839d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1113d3cf-b057-494e-8315-0585191c3a9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50bfa6a5-6673-41dc-a68f-ca1a7569ab04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e5790f8-b3af-4930-8a76-4e37352816bc",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6b796bf-24b7-4732-aea3-f18c9bb4be0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "661f16be-caba-432e-9bcb-225a912e34c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "435de893-a41f-45ee-9873-4c61b82369e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3708770-7d63-40ed-a626-699889028b6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0d27306-db7e-42fb-a7e5-56f4b131129d",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79a2a4bf-f328-4eef-a80c-6697aefc3b00",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d6b12894-4279-44ef-aa71-2c6a2d98ade8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2251a5d4-250d-4072-94a6-dbc7d9d31c4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f72656b-b413-4b97-8c0e-420107b5ea3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27e700cd-e824-4178-91ec-1dc6cc2472fd",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94e6cca3-4145-468c-86ed-16fc8d8e835b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "83d6a10a-1b5d-4658-8a50-701c877b676c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e29b238-09ca-4eab-b036-c99eafe5cf3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0929c979-7ed3-47a6-99bc-6838747805ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d48d62c0-cfc3-4909-b779-55d1e8f81a54",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c874df30-35d0-4c2a-ab92-1d26f4357118",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9b3e88e5-28ec-44ae-9c8b-870feba94799"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "346e923d-c554-422a-91f3-143af2547a81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9ff0ca1-0980-4abf-9aab-ba49b337bdfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "485c3f71-a87b-4a93-928e-fc9897e499d0",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea2a14b3-01e2-451b-aae8-a7e7b3617c03",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "837893a9-330a-474d-ac9a-957ae77735cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bb56946-b389-4dd4-a32b-a735a1663796",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6721311e-0db8-4e9d-9156-0b3298b27300"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab973444-a75b-4413-b14d-038709370204",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8eadd7e-8330-41a3-8a80-3f3ffaa9f6dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "504b2d1f-f324-4f25-9615-45026ba4407c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b110b6d-ecae-4150-bcda-ff29590b3bcd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16356d20-6470-40c4-be2a-759320d59c92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3403be81-67b4-4f47-a41b-8070f289ddb5",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba49ec46-bb2c-4ff5-ae1e-a2f7b26aa0fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76f2c537-1d04-466a-92c7-41a9daad4a87"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd8b8b91-0549-4086-a235-30b1996da499",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3ef39e1-d24c-468c-8e68-6b32a1cab420"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a97a2f72-e2d5-4f7a-9292-907d76659615",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c47f6964-dadd-433d-83f4-19d48009264c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df40e572-24f7-4ef6-afe7-83288b626da9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ac53e4e-9936-4d55-9129-186fcbe5f150",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73965df1-f5fe-49dd-9fa3-3002073fe023"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1f74801-36b0-4453-9951-b0315d4e7039",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb43c972-93b0-41c2-8f88-1fccf2fd296f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bf7b937-ca7b-410d-a575-ef8f831446b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69034b0d-e3ac-40b0-9bb6-71b3d90d6f21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6d25b70-3239-4cc5-b26a-16d2dfd2dce7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edb31351-096f-4a42-a741-8698ae8f346f",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aabde09d-dd34-48f2-bdd7-5b03b5794f4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19db3855-9f49-4bb0-b62f-7a8aac345834"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "763bb970-f1b4-4c9c-a9a9-9621317a82e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d04039f-bcba-4017-8c1d-cfd98b76f457"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36dc06ed-509a-49e2-95fc-91c4b2463f78",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21b3175d-8ed4-417b-9258-39ed1e6ea5a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85fd7a9d-0ea8-41fa-b9c5-aadab4328d7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8cf2e01-cb39-4618-9673-50d45d2a158a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbfa64ea-8d34-4a40-a000-062813f82c63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cbc2be9-b55e-4920-a658-19dadd34e853",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8520bbb8-cf47-4319-ad35-906f3bd87daa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6387ba2-9003-4630-893c-adfe7b2d9c7f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f329437c-3540-463f-ad78-0b04f53a5f11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8a37ff7-b7b5-4800-8160-53dd2df6214c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0909b1d-b0a9-49df-be54-dbf6dfdd2c8d",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94a4b6e5-2784-43fe-a5e1-02116b016ce2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "69016c95-1556-4309-9424-29688a01fadd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f8d8a87-fd00-4709-9852-ea303bf1dfc8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc7668c6-5241-4a1a-8979-543ab687dc2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ab8ac57-a78b-4bf2-bb2e-4620b0bb1cb6",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca4f9055-cc25-48d4-9293-d07362bf470f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "22786dab-1035-4f76-8ddf-96b16b900f17"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebda2114-5312-4ce9-9461-4dc10c320fdf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0395cb0b-d09c-4d8b-af01-ab3ea0f5964a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07108852-3bdc-4cca-8f14-68c50ed4bc14",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ad75b51-a66d-4b74-970a-13ef91d36fba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7c932cc9-30d0-42c1-b2a4-68388bf069e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ff13b8e-12d9-4d22-96c2-a294f0d875eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "452fe6fd-a318-4d8b-a1a0-cbf847ba6cf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fb21921-970a-4942-b057-ccfa7c376c67",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14c379cd-d0c4-4d0d-9898-81e085b8ab1e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b6709c0c-c220-4940-9faf-4949ab64181e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0218ba75-e5c5-4dd9-ba0b-949b9c2a6421",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c0c6c7c-ccb0-426d-bd4e-821367f11d6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac94c4b7-52f0-4d59-9132-0e1e30876d27",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0cce6ae-9a7a-40da-af46-5f7a34aa6dfb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2dc371ba-bff6-43fb-8234-a30e8f5e5ca7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b77d003-7f84-4fd4-81fb-e107aa2522e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b207ef3-001f-4eb3-abc1-0b000fc3f21e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11f5f9ec-3e6b-4fdc-b711-ce75e1797d28",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d258ee0-8cf8-4b13-90f0-a3fa929bb0ba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e54a7d33-cfa8-4a6b-877e-2da80c32e006"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b70e209-968d-4234-9dab-5303e037bc9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e9adbd3-798a-4b05-b7de-a2f1fe79689f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02eaba0c-fc6a-4feb-b4cf-5b1dd0511e54",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "853ff01f-b56f-45de-89a4-ad5e0bfe678b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "54ab0592-bedd-4dfa-9b09-6db102cecbac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fce7e7f-7e75-4160-a15f-65ad194e9cc5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21185ad5-372b-408e-b774-c092e873c050"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c10da60-df53-4f2d-938a-3537a3efcbe9",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45deea39-acb3-4bae-87f1-a66b41857ef3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "001845e4-068c-465d-bf10-5334f53957ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a2983f2-26e3-4816-a3d9-d7441c452adf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0ce45fb-062c-4ccb-a01e-71cd31016a7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94c7b97f-05bb-4b3e-9144-1fa7c0b9787b",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12f883fa-2db8-4c69-b5ee-1f720fc46a20",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fb5765b5-dbd1-4f56-8f19-8babfdf69c1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa96cbc5-e593-48ce-b9a2-70df94d56639",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6ab771c-2482-4fb6-bb74-1b7e1d7703d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a4093df-0a41-4019-ac4b-d8eea024a3ed",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b45c258-e71c-4b4f-9f11-bae80fa154bc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "56b10ee0-6a25-4c9f-8164-bcd9769494e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4bcc36c-e739-457b-9653-edf76cabb8ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3df2183-5060-434e-9946-80c8852ce3a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3908db39-495e-4b9b-8458-091d8c050bb6",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9ec724a-1a72-48ee-96a5-571f6e365e40",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "24104a32-e58c-4c0a-af06-d7293bce5c26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c98dc4b-5692-4592-a8c6-8fc4a8dc275b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2027a549-2ac5-4674-b2dc-76bd0b5fc1dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "747b76a9-2462-4eb3-8d97-398507ac6e20",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52704d04-56f7-45c3-a28b-18828e8d6518",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd185225-4355-4371-a612-e0f15b6a9aa6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75e075b8-5573-406e-b44c-a01cb8355e0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d841f900-a248-4dab-be9e-d85d9a19aebc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ee295b8-4cc2-4596-9b89-7c402054e1eb",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c9de15c-b4e9-408b-a029-3bce9863def8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef1cb0e1-7df2-47ba-8d49-02a0b522a994"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3689b4dd-313b-461f-82cc-8c8c2c1a5853",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60e99f31-03ec-4f3c-922d-7394be323ca9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91e58c47-68c4-42c2-a3c1-5a515ce8a7ef",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2c475f5-7188-46ed-8ade-8cd3960e0ca8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04b2c176-e658-4ff4-864a-8c4999cfd400"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce9e520b-db1a-4717-ae52-a23467d95edb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83a8fca2-7333-4b4f-bf33-4a2bbfe7f8be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb490c19-9ed4-4d0c-8508-c3d9ad267686",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b52cf16-969c-4d28-8b2f-ddb5bd5fcfbd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "801abbbb-81d4-45b2-b329-e3e83d4da5a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93a33dec-7d34-42d3-a947-2afbc5d2e981",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f813543c-fda6-4d08-bd80-7bc32ab0875a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8c6149e-36cf-47cc-8c8c-c0362bdaf4f4",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f34efdab-8381-43e2-acb1-0a944fed78b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d2d8431-b1af-4b34-a822-3d6b02b32632"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79af9a28-9464-469a-873c-df312ad14045",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d3d54eb-6d58-4454-9bfa-70ac1c830998"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abd42c8d-80c6-40b8-a6a6-69819e4121b2",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "274fa0bd-a7ff-4a87-bef0-8365d260f691",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d881ee75-b0dd-4bf3-8f22-e0f653efc48e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "506b4aed-23e8-4fe2-80bb-098015157734",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c11f4d0-b9ea-47d4-ab7d-2523f9014f03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "019453d6-10cd-4cf5-81f0-77d77914ce29",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2dbd2bd-e140-4589-bfd8-afc2f9f77773",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48b8d40c-64d3-489f-8b0e-96ad0f5a0b1b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fed9d73-387c-482c-8f58-b6d160eda73f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91d721ad-a62a-4e04-a2bc-27764d02bd3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "166dd77f-7e31-4e4e-81e8-aa79b4517160",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18d38b1f-f021-4ff3-a558-3564031a65ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e74949a8-8d24-4c9d-b6f5-07df43b7f5e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbf3c71b-216f-427c-89d8-9f49aa0720ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "235b5fc1-e333-4e2f-94dd-b9bb0f6b5eab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9903d63f-9e45-427b-97a7-6a2d6beb38de",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51fb3581-fe53-458e-b317-ed36a3d88940",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbd09091-a4a7-407e-8826-b057d1cd7d94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "042231aa-9b40-4f3b-b60c-f5273aa82b35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a9bca7f-47e9-49ba-8aba-9739e28e747e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "373149f0-8e67-46fb-b2fe-b4224f1a2bee",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a257f10e-1ae3-4e9d-ac32-36dc4e7a8011",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a07b4a9b-f920-4d9b-8dc0-7a5874fda546"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b184aca-6096-43e0-85a4-279c65e15ca7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f241446c-febd-4d72-bbc4-005f13b78b4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c8aef4a-d41b-4009-8c0c-bef56117eed7",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6178674-b30a-4849-a35c-22ab7b6b2909",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d75af699-9f62-43f3-b7e7-f7772fb74246"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e44f8689-7028-4183-ab4d-38bc74805d22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d51fd316-5854-442b-8d4a-820143f10386"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b782da5-4c78-4da0-a984-e4c80575e534",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "986838a0-9141-4124-be68-da3d08f860da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da246986-574f-4f5c-9e45-6035a6f44387"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33c07ce4-1657-416a-9efe-8c11fb182df2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "041420e4-91a4-40c1-969f-2b535da6366e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b851909a-7c51-49b6-9586-0103d152eb43",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b8d1a50-cd12-4a87-ab93-370894cc9143",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3263168-3422-4550-b4ab-111a6b1f6169"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e0984b7-7b50-488e-a880-0b7f6971fa18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ac4d334-f70b-442e-97ae-2bf79d0bab0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdcf9187-d6c7-41f5-8f30-45160c8dd5ac",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0d3c7da-4cd1-4a3a-9640-b5598530b84d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03dc8c70-892e-4b6e-bc21-c7d8262d4530"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70d9f1eb-6052-4e9b-adba-c6564076b99d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a302f512-9b5c-4b09-ae32-1412b4c86cc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c060c66-0672-4d73-8ad9-d51413dfbefa",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb88d7a5-c2ff-4023-a51b-1cb953ae0b37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91f3fe85-f33c-4be4-b245-546d9e6c2499"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e5e6ca9-735a-468a-a880-75a0458eeb25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a3c8f1f-a2e3-4040-a08b-d3156aa919e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af91dcaa-4c99-45bf-85d7-e518b23ad1bb",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f23704d0-7c17-443f-96a7-8a2179e783ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03188e1a-9dec-4be7-8d3e-a6e7c66d0cc3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8011634-c747-4992-86f0-22e9af3bf4c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "586987a3-c7be-42c3-b9ed-29dba3fb783a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88838af6-f60c-4eb1-96fa-3a938250c3c8",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af850148-8819-4a10-a1eb-9807f6484510",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7999ded8-5949-4b7c-8d12-a63cd6bab67d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a3eddfc-9fee-4bf1-add7-8d4c9f51b099",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8e5c380-4707-4f87-bd05-808b58f5cec3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20b43f5c-a4b6-48ef-be90-6ac39f0c2fb5",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06c2700b-7651-4290-891d-1e33c9d06b75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f824bdf1-72a2-4d4c-a318-ea4135fd8c93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86ab1751-1450-4cb4-b003-9725546f3070",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf110e92-6cd7-4e1e-8930-846da9aa7be9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f81cc34f-36f8-4575-b835-2bcb611202d8",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23acae27-a193-4a5e-88bc-3a7495330c88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e84a3d78-4489-47a0-a26f-aff0fa8b7c62"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a31050b1-e596-41e0-9f2e-8b3d853a21b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0937114e-f008-4701-8f9e-d8c1363d04b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41f3065d-19e2-48e2-8e98-a459c403d0f5",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fc91a95-fbc5-4aef-b575-28025ed1e552",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3657995-1e66-4d96-8e87-2fd9b18b7097"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38a66e94-471c-4daa-9321-ace16f0a5151",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ddc93eda-6207-4143-b208-e85dd0c6932f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53f210f7-d828-4f03-bf43-e983289aa739",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4962520-e782-4ea6-8f21-47e492962082",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9025c7d-2f32-48fe-9b34-0c3b70ed7eb5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc907eaa-4feb-4636-b9d8-f39fbe63e58d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f1af892-aa6c-4752-89e8-fca395d7826f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65dbeafa-1eb8-40a1-bc18-b87438da431e",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31600a7c-7b16-4d87-b10c-f20ab4335328",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a7ac3d2-4554-4e8b-a700-01115adfe743"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88d64add-06f0-4591-9fa8-8980d8a22574",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71aec254-e5ac-4fc4-8749-338bc2631389"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c24b3fc-c75a-4f7c-974a-fbb47770457d",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d7c267a-b292-4d0f-a1bf-f057188e0672",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0659f95e-e620-409c-b02f-d030fe9ccbcb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9edc7b7-39f2-46b2-a2ca-45be6ef2fd5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5642759d-09be-42a7-a45e-54af2235a10c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09105528-a0f5-4acd-aa8f-735c7e35c7fd",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88397598-6d59-47c5-8628-2da6ce150ae9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b9114c9-de90-4266-9d7a-3271cb805504"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d506ea66-49f6-46ed-880f-202cfcf58c3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed947d00-2b6f-486b-8471-9412d7189a0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66ac5e44-dcb9-4a41-9688-97367e401b4f",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11a6e11f-4603-47e9-a6cb-69bae252f21e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75fcf848-40f3-404e-9654-895f618f0f6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6385f349-c4f9-41b5-b920-787ae861981e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a5a4c44-1b8b-423a-a6aa-60dcd9876ffe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ed7846b-05fb-41fc-bf7a-879e97735688",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "266de537-bc37-4fbe-8949-d3f6b4aa72e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4a253cf-ed9e-4f5e-bbed-d3def02ef8f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6806ab99-33fd-4db0-828a-00afa4a3e094",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68124b36-d199-4e44-8fdd-a2039d49fee1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddd09de4-5f31-4464-9587-f79056bce5e0",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0c4faa2-6a0f-42d8-8649-e8640aae2599",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0f415ba-548d-4023-8ee6-df5c67a14ea9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c29c29e4-e920-46e1-9d73-fc39a15574d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ccf2bcf-395d-485c-b23b-2edd586b2797"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab2c2765-9e1b-4c9a-a48b-42a7844c3356",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ee9c995-104b-4854-9c6b-1396f50fe60b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef80663c-385c-4d26-8556-87a88759580f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c06572be-7f1e-4b38-85d4-23017312a549",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0fc32487-bdc5-48b8-b323-181387766c82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f03c6631-7048-4915-9de4-124e38dd2d7c",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa320823-077d-43a4-9c7d-08f3e9253729",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "881f271b-a709-46ab-bec3-c71f681fc1e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbd90983-c14c-4500-ad90-b0e97e11cb12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27dbe2e0-7f24-4c54-9884-3a276483fe3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4741bbc2-33a3-406f-8b65-aa93e4cbc162",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66530e43-b4bb-4a8c-9804-8716a688f304",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1f96f84f-da08-4205-a4e4-1edd5f5f549c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de720745-0984-45af-9adf-c55981fd587b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c7397cf-f0ea-434d-9833-8928f21a06aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "013be9b6-4eca-4a3b-9253-529790332a15",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34c86fae-0aa3-44fd-829c-f89e6e513a82",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d96e3ccf-f6cd-464a-9b2f-568a668154c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d0baf72-1b4c-4d82-a03a-629866e4beda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b356197-589e-4f3c-9465-936dd2af9895"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fac7693f-ee72-442b-808c-1d909da31283",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb9e7724-9809-4233-ad03-6d5948a3a7f3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b22bad70-3f5f-4080-bd75-4273395fc8c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a125fdfd-afe0-4843-9998-e2f75accef28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66f7fa53-a0dd-4597-8d93-0227e10533e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4aca94ae-a19f-4448-adf0-8095339d4b3c",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2d3cd79-d726-424d-b930-1bd711813bd8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7d3f5f58-e2d1-49bb-ad1a-c35b37361db2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "744ea9e0-a17e-4d13-a231-5f58cfe50409",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6eda20f9-f077-465d-9d2b-996d59648fc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70d47ba4-5a27-491a-82ec-6fad43b2e12f",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46bb23c4-0498-4fcd-b445-8c7d7bd81f0d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "74cffa39-5afd-4014-9a13-5bd7bcf2db3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49c462b3-a8d4-4984-a62e-4ab7644eb130",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48f55e51-69ec-4e6f-89e2-1b4984ad064e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c21c542-ea5a-41e6-823d-999deeb96053",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "425f4ddd-30b2-4e02-a781-4c3b4df94122",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7b84fd66-0f6e-47dc-9696-1f1396f0818a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfa64597-28a2-4166-90e3-a7a5b83a2af4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79d5af5b-4931-4b3b-947d-a8200120b47c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3b70c55-b940-40b4-af40-da063201d15f",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "735ff674-6b55-4a04-834b-0daddc388f53",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1191d570-9fcd-418b-8d83-a3f5cc76d747"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36024537-c873-464c-a386-8a7f5a796886",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af6b3324-9fca-4d12-931e-cb65980c1e42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba8f5974-b385-4ef3-9fe4-e9fdcba93a9b",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "341a97a6-1aac-4da3-a4f5-10efc253e662",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ebe28ba6-594b-4943-a3db-56494379e626"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88245a7a-aefa-40b4-83a3-2dae12d7f941",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "069faf21-ef40-464f-9fe5-d738f144a2b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffa34580-5a43-4cf6-9790-b3f94c2ff8c3",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80cce29d-d366-4e93-8c1c-261891ef110a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ba2b76d-ed17-410c-82a5-53d23a4f3511"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99b15c62-2e24-4834-9bd1-7bb9359da9ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29ceca9c-d0dd-4470-9adf-85534b4924c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "619fc434-9bd8-4ea1-951e-579dc1ffaf52",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79c4a3ec-3a9a-49a8-8804-2e301dec8941",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5890c3ea-d976-4935-8b6e-1a75560b25fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b96cf15-8abb-4993-a872-c67917fb68f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e163f61-d9ba-454e-9963-5345269a20fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "435b8bc6-afec-4946-aeae-f95e07def8fe",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a45bc405-0cb4-48cd-8112-6fa11ee7b397",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b11cca14-8060-4b21-b3ee-2240e8f8949a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fd2f7cd-7af3-4e01-8404-4f72440f0f2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01c0637d-5b7e-4208-ab22-5d046c17d3c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26aba1be-e6b9-4b25-a74f-fd917162fed1",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b433299-0cdf-49d8-bea3-b402c306dc69",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9d34616d-41e6-4fb9-a41f-42a41908c775"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dedc475-8aed-4f2c-9351-d2f9beb176c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aeef047d-d885-4a75-b609-71c5d4910e96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35c202b6-8a98-4162-a7bd-480c7e9056db",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4784158-4fa2-4c5c-899d-754890414135",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "71728e92-16a5-4a11-8a5e-dd885343c92f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a743bc2-eec0-4aa8-a1bf-f0ea3b63f535",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fb9344d-ce3b-4147-a2d2-36d76a0e2a5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2a7b86a-82cb-4c83-b9ea-ef95201d5584",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "019b6dab-125e-48d0-986c-ecb10babfa6f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "46a9bb41-71c2-481d-ad00-011d14e93925"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a91e8a7f-9e49-4bec-ba9e-f3bece7c9d8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b6f19ac-99d9-485d-b784-e42af91ec82c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ad7a1ed-06cf-48ef-9b40-d5415b0dc2b1",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34a406a5-01bb-4433-bddc-40d585af4016",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6af758c9-b88f-4bed-8ccb-4be572f0e979"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d7f2255-2937-4347-87f1-d9b41a485df2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb31fe8f-4b5c-4d86-b55e-3d976f642c74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6c93d43-21b0-4b0d-9837-52e69af3a3fd",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9a05be1-7e53-4c33-b22b-95d2d2683e0b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "52aea00d-c4c9-40c3-b2eb-a40bc2e9708b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5469a13-50be-4e23-99b9-7e2918e5fead",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41357e83-b8c8-461c-88a4-5d9d9d78cadc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f8dca06-8fb6-40bb-b149-718931123cef",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5126deb6-b5a1-485d-b258-c961fac0b9cd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "560aa832-f44a-4483-bfd7-b87b3723a7f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "858e9eff-7a0e-4230-b089-0e9d6e1d3082",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b0f4c55-29ea-4bd6-9e8c-b8f17172d7f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16c0084d-52de-48da-a4ac-70d11eb89e26",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "017ea431-225a-44e0-b66d-d7ba2db0f845",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2755732f-3072-432f-9046-bc1dd08327ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4659accd-4a67-4c30-9347-f7c68a22915d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c22e05f-d106-4ecf-9667-ad21c3803ece"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01695529-f795-4eee-b302-b4f3e55192b5",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd1ae1d9-370d-439f-ae40-da88fa938b65",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5dfdb78f-8371-4fa9-a4db-66efc45dfaab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bf40298-99d8-4014-8bf0-49d9f265ed8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6dce3e7-e108-45e9-940a-3ca4fee61a0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be590681-41b2-4f7a-9f2f-d4e9d3ab44d8",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebdca789-3161-47d7-b071-6089eb1cdf58",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "25fe20ae-2d3c-44df-972c-4cd8ece32c1a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4e0ccd8-54f7-4b07-bef5-795c4e19b425",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10ab9464-169f-42ab-a0bb-bb16d1cdf2eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e831014d-8bbc-4441-b274-eeefea12c695",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da37aeb5-deca-425d-aabf-552ee3ddd3d0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3e2191ac-bb0e-436c-9b79-b075d0e37beb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5d575f6-089a-4fd0-8ce5-805806b638ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90f306ff-c8f3-4c82-96ea-a542b18a4dc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfb754f0-bbb1-41ee-9d7a-623c62379c27",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c41c0f6-0f10-47d5-af11-b124703c1aa1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "32cff9bd-d9cb-4d27-86d5-e922dd8a341d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80b9aca9-3f88-493b-90f3-529291666869",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09a24522-9dd6-4be0-84db-a8b2f4e81cb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1b63733-5e59-49d7-b7af-b422f196ba23",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35bc2242-85e6-4307-9e8e-7b1462f100f9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "92dc5c81-3fde-4e1b-b2be-3457df0d94a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a92eb04-345f-49a6-b221-5b515b1ec680",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6842c585-cc32-4a79-935d-72a9a5cde4bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fca45af5-fd26-4c2d-8196-c00dc19005c1",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73126332-eba8-4f15-a8a8-d209295cd3fa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "91f5d6f0-f4f3-462c-9fbd-01ccc303407b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19c469bd-49d8-4549-bafa-f1633d15ed00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5816b20-7c3f-4270-9e75-ccb18b964119"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9152001b-82e4-4a52-8fa0-3a1273e2d962",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eff411b6-899b-402a-baf8-76dc4b76114a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e33fef78-4926-463b-8d66-1734ce31d036"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3979ef95-c375-447c-bf7d-a0f952f4fb61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ca085b8-95df-40df-a7fa-10fbf079c81b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95e6e4d1-0912-4645-bb70-d890b2e27d6e",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79a520a7-357a-451b-9802-a72346b7300b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "60740941-2411-42c0-ac69-2118fb463344"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea3f6ed2-f76c-4802-a894-3d894d76ca92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb13823a-1b5c-4e21-8915-e2238a33af90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87b21e76-92d7-4dac-9ee5-a620cfb6f9eb",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9407cc5e-ec98-4954-9d8b-efcf0ae8c5cd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "624f1bff-3e40-4557-ae29-f8d70da6b228"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5057e26f-d1cf-4441-8919-404d826e214c",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f14cee93-56f6-490d-acae-69c1cf75bcd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2812510c-49be-4399-9729-13086f1453ff",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c3f6c87-acaf-47ac-9aae-0d55d00a9c23",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d6ac216a-a02f-40ef-ab4b-aca1c31c4ba3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa2b4f96-8eb9-499c-8f30-0942a57cf8d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63c9686c-02e4-4eb7-a06a-c95d829ddd85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf33af29-522c-43da-b141-54703932fba2",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd89726e-a151-4c56-be71-cd20333ac645",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1a5d5a32-0f1d-497f-840c-3d95cab89f91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d7475f2-d795-4f3f-a98c-b421d3ab2629",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a75cf2e2-eb96-449e-ade8-83b1a013e088"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adc28ec2-f920-4fe5-84b7-7ee1380299da",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d99c8d50-4bbe-4e29-8c17-7e47415b16e4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cb536ac0-e6f1-45f9-82ed-c507bc082c08"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b4b9729-f7cf-4118-bee9-864751344258",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f12ca880-0f7e-4938-b10c-9ba838d584e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2eef18c1-5917-49f8-a318-d407ae11ce6b",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bed6b88e-b6f2-4ff2-98e5-da1534e4f7ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6f8d8d9e-ed83-4263-98ba-5de6a7712d85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9c2e201-3740-41e3-95c8-19b8c22e88fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f99b46f7-695e-4e24-8549-967db3fbd7c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e506697c-f76d-4fdb-86da-a0f06c293c68",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f566ce1-5652-4966-801a-6fb8fcf0c724",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8eeb3a91-c2eb-4ebe-bc8c-47c6d2a1254b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b945e16-87f8-4bec-a7ba-8cd941d45e9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b748633-1c46-43c6-8335-3b618b99d138"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8b2df96-d3ed-4411-9c9f-e0f49b12e8e8",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bc38b61-455f-4760-849b-8203349e371a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e9d260ea-f73d-4d4f-8773-fb7653718e7e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62b057ea-0020-491c-bb04-00205d862b12",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66c5f948-e913-4db5-9925-fe5449054fd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0241eeda-e0ab-4521-9857-7606be656690",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10834a79-ffda-49d5-b9e2-ca9acf4c613c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f88407c-7f99-44ca-b489-3860b3bdd863"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "746828dd-7ff7-4f11-8a65-3f9cfde08740",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f5fec1c-0a31-42cf-8492-ef7cdc978d6d"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1f0578a6-dfab-43d9-86cb-7e7449b14704",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f2543112-32bf-4fe5-86a4-cd6aa3bb1435"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "bbb9745f-8a97-4bb5-a03a-19d5f059be35",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "692e9dd5-cb9b-44d7-b8d3-8674d325bda5"
                    }
                  }
                ]
              },
              {
                "id": "def3b0e7-a122-480f-92d2-51ec0e852b04",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f177cd40-15ca-4452-9d65-bb75a58085e9",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0669affe-9352-43dc-9593-7046d55e3e3a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "3ce659c8-6662-44be-8614-b1eec2f1dda8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38516125-5713-4b09-850a-4a7ae6e1b4b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3bb237eb-588b-4e1d-87d1-ec88c30c5d6f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "652d8b3f-a092-4098-bcc4-262c2bb3d1ee",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2ac39742-b95e-474c-b102-ed2b5bc1350d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "14582bae-5d70-49d8-9a45-c34b530cf6f2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f41447f6-b534-4245-9238-b70e8047041f"
                    }
                  }
                ]
              },
              {
                "id": "624615e1-dcfb-49e9-b02a-f5e3d31db308",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "ca865168-faef-4653-8723-0f8f599917ed",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "107952c1-1264-41fc-b79c-d7b874aba9db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "8b98bc44-d694-437b-8793-70eed69d0dac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae6d73df-1d4d-41ea-bac6-f8d9743abe2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "348c092d-a6b8-4fce-9133-baed05dfaeeb"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "0eadf89e-7d54-4969-8aa4-95f7213a0022",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ebd34210-fe46-42d5-ac05-19bb44b8fcd6",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "59bb0798-a32e-4777-bee1-1b8fd74cfdf5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "d51cc194-10ab-440f-9845-01b592509c75"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9662d2ef-c454-4489-b10e-564257cd681c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "64028809-12e5-403a-b079-0a45e57e3422"
                    }
                  }
                ]
              },
              {
                "id": "88407807-9ebe-449e-9fde-30cc489f9991",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0f66d535-d806-4913-8527-c735207b1536",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "bca90c36-f056-40e7-96f8-54423323c592"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9eb4e192-11ca-4e93-b915-512933e697d3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c9d00684-1210-431e-95ce-f1c9aa94e110"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "351d571a-dc9c-4222-9200-2a3b1427b9f5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "b37634a4-e2af-4202-a261-2c33b649d96e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c950a3a2-53c4-429f-b20f-175246a6fee0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b4c03145-0ffd-4e47-bcd5-5a9ce1d88b25"
            }
          }
        ]
      },
      {
        "id": "d97c506b-db77-402d-b37d-0f1f06a8da12",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "94a91b61-c670-4a99-8cea-6c82823b7737",
            "name": "Negative Testing",
            "item": [
              {
                "id": "268d73ea-391a-4823-aa4b-ccd0adfdd519",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b54ac7fe-31f2-47a6-a9d1-82723aca608a",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1792c21-e15f-4629-b453-bd01e48a0bdd",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "ce1c7f69-beb2-48bc-a5fe-bd234722f2e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "112bbdf7-816d-42cc-bf15-f02d67c29d09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cf0f9524-f636-454d-ba54-7435d92bcfa8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "060729a1-b61b-4b70-9634-13170864350a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "504bccf4-447b-4f8d-bf91-ab36d0c00108"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9b8986c1-9c30-490a-b35f-095cdba5475d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "76129729-363f-4275-aeba-d7b6b86510cc"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cb66415d-f808-4ffc-977a-bf31c680d60f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "c6027114-9ef3-4908-b169-e09509401a08"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4f7d0fb2-1821-48fb-a97e-4da88cbca043",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b5cada94-16c4-48e5-8443-e426b2d77ac9"
            }
          }
        ]
      },
      {
        "id": "5ff36b40-680d-47d8-94e8-d5d27e45d7b4",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "674b5938-9d95-402f-aee4-5a27acb51a9e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "42c93657-5b52-4b40-9a65-ad8275597c18",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "612b5fcd-0386-46b6-aac5-905ebf9dd623",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "246b97e2-de56-4c38-9be2-12502f3e31f2",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dc91389f-f0f9-4707-838e-bdb04e73f18d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18ffe565-860d-4719-a822-db577f9567e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4015e54a-4fcb-4ce9-b71e-d8dd8f454e94"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4079d540-678c-4056-a3fd-25e368688475",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5eb5b909-703e-43ee-9263-2e40c5bd24d4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7b1c4d7d-e63c-427d-b15b-dedeaddee69d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "76e0b4b0-02a1-4fe1-989f-157c9c067617"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "03aab968-1746-49bf-8ccc-42f0adc1deef",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "a5246c83-0808-4ec6-9517-4c6cebd40930"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7a7815db-ce4d-468f-98f9-c590effb41ec",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8abf90f4-6324-4408-80d6-9c9d45b54b31"
            }
          }
        ]
      },
      {
        "id": "13f95aa8-d892-4345-9d65-601f128000b8",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "b8a6597e-c96a-4210-a153-59a69b876647",
            "name": "Negative Testing",
            "item": [
              {
                "id": "58c72a84-2539-4495-889c-8852ab97ced4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d90d7b33-e4e1-4e0f-bb7e-125ebb72591c",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83eff820-592b-4a56-89a1-5bcc1a11842f",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4571e5aa-5a03-455f-9a93-d222709b7ab1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a11f6e04-8ea5-4856-abe4-0dafc38407b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "302b2a2c-b056-41f9-8f26-074732845245"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b69b4dad-05ea-49aa-86e1-99189b05b0fc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "52b7e624-6867-4244-a761-20e635f13f20"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "40a9f4dc-52ec-4579-83c3-6096eb591996",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "29d0bbda-2aa8-4364-8170-d5cf469cc318"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "130f206f-5f6d-4b6f-9db0-beeb204adefc",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "879e8438-9df5-4b9c-86ee-31f8dc3cc87b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "105855a7-2455-45d5-911a-32eed51fbf4f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4a8900fd-3fde-4a58-aed1-fb9eb802b657"
            }
          }
        ]
      },
      {
        "id": "748d7f3c-5641-4b79-911f-d73a93ec9654",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9e124ccc-6398-42b4-8475-003e90b24947",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "92820d15-071b-4b8f-8334-f208556d353e",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "ccdf797a-da21-4394-a0da-9d243df5a773",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9aad7c37-0e73-4446-b12e-658a93ba1dc5",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9aa74ea2-adca-4193-b47f-c60d036777d8",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 71
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 65.63492063492066,
      "responseMin": 10,
      "responseMax": 713,
      "responseSd": 84.70467867876641,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1718411865395,
      "completed": 1718411890320
    },
    "executions": [
      {
        "id": "53090bee-9db6-4850-b89e-b3141b0a8eb5",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "aeed67d7-2382-455b-991c-27f9659bcbbe",
          "httpRequestId": "5c86bedc-b45d-4870-a6bc-709f2d271b1d"
        },
        "item": {
          "id": "53090bee-9db6-4850-b89e-b3141b0a8eb5",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "78e4ca0c-f38e-4b6a-aa63-9e971912b09c",
          "status": "OK",
          "code": 200,
          "responseTime": 55,
          "responseSize": 0
        }
      },
      {
        "id": "d5864db2-a87e-4bdf-9ba0-0e45ea3e9f3a",
        "cursor": {
          "ref": "1d485ea3-b08a-48ec-a1f1-d9816683fd78",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "9ce3f13f-c681-4be3-8903-9d6c1366cff4"
        },
        "item": {
          "id": "d5864db2-a87e-4bdf-9ba0-0e45ea3e9f3a",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "ef1e1777-551c-4483-8afb-8165fb7d56b8",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 0
        }
      },
      {
        "id": "82c198e5-88f0-4b04-a085-fccbea094820",
        "cursor": {
          "ref": "cd5c9bd7-e40a-4eeb-9d16-adc481557c37",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "b965b8dc-5437-4d99-8708-b646ef4e7e09"
        },
        "item": {
          "id": "82c198e5-88f0-4b04-a085-fccbea094820",
          "name": "did_json"
        },
        "response": {
          "id": "3a7071c8-1092-4c10-8285-0c85fb044cec",
          "status": "OK",
          "code": 200,
          "responseTime": 102,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f4a9ecb-e6c9-4233-8089-0c59321e80a9",
        "cursor": {
          "ref": "7fa74dcf-b040-41d4-b8ae-4d2e0f5da2f9",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "a2d2ad8e-ad91-4027-9676-bd534058f4cf"
        },
        "item": {
          "id": "9f4a9ecb-e6c9-4233-8089-0c59321e80a9",
          "name": "did:invalid"
        },
        "response": {
          "id": "819c13f8-fcc7-464f-8ef9-213024f66164",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 159,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f4a9ecb-e6c9-4233-8089-0c59321e80a9",
        "cursor": {
          "ref": "7fa74dcf-b040-41d4-b8ae-4d2e0f5da2f9",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "a2d2ad8e-ad91-4027-9676-bd534058f4cf"
        },
        "item": {
          "id": "9f4a9ecb-e6c9-4233-8089-0c59321e80a9",
          "name": "did:invalid"
        },
        "response": {
          "id": "819c13f8-fcc7-464f-8ef9-213024f66164",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 159,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "142994fa-f2f2-449b-9d6d-b0f4a2bb4428",
        "cursor": {
          "ref": "c5504ffc-d0ee-4f9a-b3d7-9bdf0b217705",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "0dbb0650-26c4-4423-bd40-d7abe21e44e0"
        },
        "item": {
          "id": "142994fa-f2f2-449b-9d6d-b0f4a2bb4428",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "7bff5209-e1b0-4a1f-bb54-9535fe69961d",
          "status": "Not Found",
          "code": 404,
          "responseTime": 317,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f249d3c0-b25b-4723-bd86-85d554624991",
        "cursor": {
          "ref": "d0351060-ae66-4bbb-8a2e-7a97ff7e6353",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "772eb005-8922-450a-9634-c7e82203a480"
        },
        "item": {
          "id": "f249d3c0-b25b-4723-bd86-85d554624991",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "55afbdbc-5090-4abe-93d7-dbf6accb9aec",
          "status": "Not Found",
          "code": 404,
          "responseTime": 39,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ff2e61a-f302-41e3-b2d2-347c0342a7e4",
        "cursor": {
          "ref": "0361edae-aafa-4407-874a-ea1c8126fd08",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "d94452b0-fb89-4e54-b397-f8baea0adfe7"
        },
        "item": {
          "id": "9ff2e61a-f302-41e3-b2d2-347c0342a7e4",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "d960c5b2-b901-45b3-b261-823e982ce7d1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25f40a8a-c971-4b9f-b037-dcd056366a0f",
        "cursor": {
          "ref": "2a9e2ffd-6f18-4b8a-8318-715a4109e14d",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "8ab754e8-c089-4de4-8035-dd3b1a828ee9"
        },
        "item": {
          "id": "25f40a8a-c971-4b9f-b037-dcd056366a0f",
          "name": "identifiers"
        },
        "response": {
          "id": "1599f464-05e2-433c-9a3c-3117acb5b1bc",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6b95c06-e285-49d7-a4d7-61dabee40ad5",
        "cursor": {
          "ref": "2c0e8795-7000-4442-87d6-a7adece00aa0",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "ffb649fe-0833-40d7-9959-47b7cae05822"
        },
        "item": {
          "id": "f6b95c06-e285-49d7-a4d7-61dabee40ad5",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "0f2d5a4e-a4bb-4022-a342-b24f7e003b2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02720834-e7be-4adf-8013-d1424fc63110",
        "cursor": {
          "ref": "1cbdbc9b-af93-4e54-ac38-6af6472ffbcd",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "80d11f1e-337d-46b9-9ede-89de3a159a21"
        },
        "item": {
          "id": "02720834-e7be-4adf-8013-d1424fc63110",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "2fb5fc18-6228-4cc2-8e62-b10eaa66c590",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4707b00-e44b-4c8c-be20-42cff511f2c5",
        "cursor": {
          "ref": "e0123ea8-2e45-4485-a7d1-a00bf971cd8a",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "60f9691d-d0ce-4196-8977-1258fec1f36e"
        },
        "item": {
          "id": "b4707b00-e44b-4c8c-be20-42cff511f2c5",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "191989d1-0548-431e-8ca4-3e23aa95f680",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5d1af6d-5254-4915-9045-908c6ca0a2f6",
        "cursor": {
          "ref": "435439fd-6c91-45a8-be2c-cf9cd2417601",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "581cf691-74fc-4cd0-95a4-fa0813ebc3cc"
        },
        "item": {
          "id": "a5d1af6d-5254-4915-9045-908c6ca0a2f6",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "92566873-e3fa-4ea0-bc9b-4b64fb6d70f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6024b211-95a3-4a8f-9935-8394d391b9e9",
        "cursor": {
          "ref": "48921db7-7405-4bf3-a261-85714e541e53",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "a5022aa2-bbad-4aad-bd28-6098579365d5"
        },
        "item": {
          "id": "6024b211-95a3-4a8f-9935-8394d391b9e9",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "0e140416-70ad-4124-b03b-f8413114683d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7656209-b9c5-41dc-ace8-efdb4e7d92e4",
        "cursor": {
          "ref": "21518104-4664-4ff4-bcf6-1190b62bd26a",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "b4cf00d9-e1ad-4a28-9a91-2a2b82e424c5"
        },
        "item": {
          "id": "a7656209-b9c5-41dc-ace8-efdb4e7d92e4",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "c8b60ae7-1e57-41f4-b126-fd0408a5e6d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57af4d22-9a60-4dde-939e-70a12880f4f8",
        "cursor": {
          "ref": "dffa8f1a-9ca2-47c6-9151-62adb25685df",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "d64b5422-2371-4166-aee7-a38bb1672fca"
        },
        "item": {
          "id": "57af4d22-9a60-4dde-939e-70a12880f4f8",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "4d91fa7a-6a21-4c43-9cf9-a983867f4588",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28651ff6-93d3-4d6b-91fa-b880e037d0ae",
        "cursor": {
          "ref": "d4e6278b-fca6-4365-be2c-d1231af8a3cd",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "f3b71a59-9e46-4701-981b-a5e743b07d99"
        },
        "item": {
          "id": "28651ff6-93d3-4d6b-91fa-b880e037d0ae",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "98fbf4c1-95ef-4607-ada4-a3ab5751401e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb528dd4-b1e3-4193-bc0e-a082d327e16d",
        "cursor": {
          "ref": "cd3e2e2b-a9d8-44ed-9696-0808f1163177",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "8c76a3ae-6f76-4e54-92c1-73cc606d918e"
        },
        "item": {
          "id": "eb528dd4-b1e3-4193-bc0e-a082d327e16d",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "87e02b79-6426-4d76-a38d-54745d989676",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "793a822a-2df6-4648-bcf4-a2df8279831b",
        "cursor": {
          "ref": "a865386c-f61e-4e2f-86ef-877a6be7086f",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "567df8b4-cee3-464e-a4bd-d1ae35daa286"
        },
        "item": {
          "id": "793a822a-2df6-4648-bcf4-a2df8279831b",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "492456f1-7187-424d-b02c-a9b51a743729",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00f4f87a-2f19-4d84-974f-b16da0a9026b",
        "cursor": {
          "ref": "3dc85726-2753-4c02-9066-9d6ca4072d6c",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "d33dfed1-d2ff-4c7b-b559-c31b59af9bba"
        },
        "item": {
          "id": "00f4f87a-2f19-4d84-974f-b16da0a9026b",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "0e63a1b5-6581-4a25-8ee5-18f06acaec72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "398691ab-2d01-46f9-a9bc-08fa9cbb9dd5",
        "cursor": {
          "ref": "e901882f-0fc5-4a58-8d20-b65105019bae",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "4f5a2cd3-ff29-4e89-8c52-5342cf99f0bc"
        },
        "item": {
          "id": "398691ab-2d01-46f9-a9bc-08fa9cbb9dd5",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "e815e08d-984c-45bb-9239-a2015d2568aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cabe11c-e0c8-454b-b92e-c6ea60e447e4",
        "cursor": {
          "ref": "5a3033ec-a9a7-46b2-84a1-2732fc4a30ce",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "d831b201-acf8-423b-9384-55395832ca40"
        },
        "item": {
          "id": "3cabe11c-e0c8-454b-b92e-c6ea60e447e4",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "4145cd1b-f641-4e3e-b66d-f109e5dd5427",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05002e8b-9c53-4872-8942-3160ccf8006f",
        "cursor": {
          "ref": "a3c0f7b1-ada1-46af-b6b6-19924f10dce6",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "a2689aa7-3416-47ac-a064-93ac33456dc5"
        },
        "item": {
          "id": "05002e8b-9c53-4872-8942-3160ccf8006f",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "1cd4005f-1cf9-4b4e-bf9e-8b991d5ef387",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07676399-f494-45d9-a99f-202df82ce127",
        "cursor": {
          "ref": "6e352b6f-e7c0-4558-928b-3b696075af89",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "6cbe821c-ce7b-42bb-8b30-538ae48841f9"
        },
        "item": {
          "id": "07676399-f494-45d9-a99f-202df82ce127",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "5699ecd3-d8e4-4369-b50b-8c516c82315d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "858cb35a-742d-4e6b-8c0a-4ae5a8aa2fd4",
        "cursor": {
          "ref": "22a8a1df-a16c-45b4-be30-99e331db1ce6",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "0bc41233-2fae-4c51-ac63-e25778752a01"
        },
        "item": {
          "id": "858cb35a-742d-4e6b-8c0a-4ae5a8aa2fd4",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "f833adab-4859-4d01-aab1-60a403f3076a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f6bc126-3054-4907-b5b2-e0ee3a237b7c",
        "cursor": {
          "ref": "afc40ede-c6ca-43d3-b5de-a033474a1eb8",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "1bc04520-7ded-454e-bd46-11e335bd1f37"
        },
        "item": {
          "id": "2f6bc126-3054-4907-b5b2-e0ee3a237b7c",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "8766d0e8-a27b-4bd1-b41a-a1eb1819edd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2921fb3f-e071-4491-817b-3fc4f18fd97a",
        "cursor": {
          "ref": "6b7daf99-7491-40a1-b1f5-fc0d618510c7",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "d83cd23d-4911-49a1-9844-cfab52057408"
        },
        "item": {
          "id": "2921fb3f-e071-4491-817b-3fc4f18fd97a",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "fc869054-b3ae-48b9-9738-9cc88e20c5e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac17b904-dbb4-4fe1-9a19-774830916104",
        "cursor": {
          "ref": "2c95736f-8e99-4578-a9ba-16116e692702",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "0316b919-1f28-4a15-be75-ae1ec6a8c42a"
        },
        "item": {
          "id": "ac17b904-dbb4-4fe1-9a19-774830916104",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "5bb887a2-0ce5-4665-91ec-cbcd2ae96e28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "170342e0-418f-4297-b9e5-9961abe48c4a",
        "cursor": {
          "ref": "e80a6550-946e-4add-98c2-27a1006cdccb",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "39048c79-5d76-478c-b233-d05b7b692948"
        },
        "item": {
          "id": "170342e0-418f-4297-b9e5-9961abe48c4a",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "4077bf34-6396-4ad2-a28a-3132ca1aebd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4450338d-807d-4d42-b6be-f33fba3bd477",
        "cursor": {
          "ref": "d2072f83-385b-4492-965c-b761ce93e96c",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "a401c022-d18d-45ec-91f4-40d26be138d8"
        },
        "item": {
          "id": "4450338d-807d-4d42-b6be-f33fba3bd477",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "6a0ce6ee-f028-47d3-919e-88448a699103",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90d01003-52be-49ec-8d7f-48222dec1888",
        "cursor": {
          "ref": "c37fc81f-d347-4398-b543-2f1bc4ac9093",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "c2e879ea-2bfc-4868-8807-68b7a0db2728"
        },
        "item": {
          "id": "90d01003-52be-49ec-8d7f-48222dec1888",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "98d91778-d1f7-4dd1-a824-c6e475b28d8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d0f1f2c-fa26-4bb5-aca2-2912f10b96d5",
        "cursor": {
          "ref": "7181b988-4dad-45f4-8239-065b7c5e3d9e",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "570b25bc-b019-46f8-877c-5fe0e2fcef3b"
        },
        "item": {
          "id": "3d0f1f2c-fa26-4bb5-aca2-2912f10b96d5",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "a4ef6091-8984-46d2-b3b6-f69f01c23cf9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56cc25d0-921b-4984-be6d-527ffee9ebaa",
        "cursor": {
          "ref": "d266ce4b-6639-4ba1-8094-febda24e6821",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "8d375a90-7039-46dd-bd60-7ab7f73eabfd"
        },
        "item": {
          "id": "56cc25d0-921b-4984-be6d-527ffee9ebaa",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "a0169c44-3903-406e-ac34-627a417328f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc79fdea-6f89-4683-8500-12865f12a026",
        "cursor": {
          "ref": "5a9f5d30-e375-48db-a773-514263158b0e",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "651d6b40-630b-4161-836e-398a40517ef0"
        },
        "item": {
          "id": "dc79fdea-6f89-4683-8500-12865f12a026",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "bf7655a5-ce41-4321-a4ff-f4216da4b573",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7725ef66-0059-4ece-b4e2-f762956e2e34",
        "cursor": {
          "ref": "a364c174-6912-4c97-bdca-02b51bd825e1",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "a5376af7-4db4-42f8-9feb-c121f7b3aaab"
        },
        "item": {
          "id": "7725ef66-0059-4ece-b4e2-f762956e2e34",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "4f0e394d-1bae-4daa-8863-4ab137d8e9b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1fd2664-fc02-451e-983f-82d052fc36b4",
        "cursor": {
          "ref": "872094b5-b3ec-42ff-a9f9-e2e7583b14d0",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "6fab69d9-ad1f-4631-9ca4-396c3ca3cb18"
        },
        "item": {
          "id": "e1fd2664-fc02-451e-983f-82d052fc36b4",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "2f7f1e37-7acd-43f6-8280-f86bc22c9916",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b83f1e00-ff49-40fd-9155-bf04c7331bec",
        "cursor": {
          "ref": "2d82294d-78bf-47df-ab5f-8aa0e7e90cb6",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "b990ee54-a0f6-476b-a1f9-a95987f2f7bd"
        },
        "item": {
          "id": "b83f1e00-ff49-40fd-9155-bf04c7331bec",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "53687f50-dab2-4c97-948a-249f98786463",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7b6132e-21d8-4eb1-9d5e-cdfc5a0cf000",
        "cursor": {
          "ref": "701c6953-5552-4764-9df8-b9500ca34ca5",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "8798ac90-23a0-4fe6-9c98-73354e7bdf19"
        },
        "item": {
          "id": "e7b6132e-21d8-4eb1-9d5e-cdfc5a0cf000",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "51c626e7-9acd-4890-9bd7-efd228231e33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1615c5c6-0178-4a70-976d-55b1c53782ca",
        "cursor": {
          "ref": "9f668b58-fd5b-4df2-ac34-80f94ec373b0",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "f76404a6-e4f2-437e-9b98-85ab0fc1c77f"
        },
        "item": {
          "id": "1615c5c6-0178-4a70-976d-55b1c53782ca",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "c43be641-2ed7-4cec-95f0-9fbd928846dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1576c16-0b9b-44fd-8e30-c630a86907cd",
        "cursor": {
          "ref": "78fb77a6-236c-4744-bf8b-171a9a411671",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "6f5d53b1-4eb2-4ade-8ebf-111855faac80"
        },
        "item": {
          "id": "f1576c16-0b9b-44fd-8e30-c630a86907cd",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "3c0310bc-5559-4739-9661-100cced83d22",
          "status": "Created",
          "code": 201,
          "responseTime": 713,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "f18fe06a-4d94-42fa-8a2e-f2eb08eac0f3",
        "cursor": {
          "ref": "01f6f38a-c828-4ee4-9c7b-45961b375fa6",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "5c68bd96-0ffd-4063-91d9-1d44291157eb"
        },
        "item": {
          "id": "f18fe06a-4d94-42fa-8a2e-f2eb08eac0f3",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "f002a4b7-3f2a-4218-865e-091fe7497e4c",
          "status": "Created",
          "code": 201,
          "responseTime": 291,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "ff06caa4-59e8-410c-8e42-821a62c89172",
        "cursor": {
          "ref": "54bbc4c6-3829-4867-ab8f-fb7dcbcfda4e",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "ce53fddb-4b3a-4bc4-8a81-9dd80b674dab"
        },
        "item": {
          "id": "ff06caa4-59e8-410c-8e42-821a62c89172",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "b0ad3a98-4807-4cb2-bd52-65932131891d",
          "status": "Created",
          "code": 201,
          "responseTime": 276,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "6aa656a6-281b-4539-9971-2a4077b07017",
        "cursor": {
          "ref": "fac591d0-1073-4b23-9755-2085679f85ae",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "d12a3f2b-320b-45f4-9b37-088d89edf40c"
        },
        "item": {
          "id": "6aa656a6-281b-4539-9971-2a4077b07017",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "88aa4bcd-4798-4fb5-948b-91e3d3e2d78e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c6a6db2-0480-4dd5-998f-b5555340bd32",
        "cursor": {
          "ref": "583410f8-b019-4ff7-98bb-356062b812fd",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "d8e1121d-0f49-491e-b275-7519241f5b46"
        },
        "item": {
          "id": "7c6a6db2-0480-4dd5-998f-b5555340bd32",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "cc68bb8d-ec5e-457e-a717-ccd8261bfa15",
          "status": "Created",
          "code": 201,
          "responseTime": 270,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "bcc10b99-e066-4a12-93b1-66557649a4ad",
        "cursor": {
          "ref": "29e6a537-3d83-4079-a2e4-a04ab81b621e",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "e970f3f7-283d-4f45-9e30-ce6d03ce458b"
        },
        "item": {
          "id": "bcc10b99-e066-4a12-93b1-66557649a4ad",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "9b011148-a1a6-4a80-8f50-0c5d7e4f4ce8",
          "status": "Created",
          "code": 201,
          "responseTime": 267,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "1bd2c8ef-5a82-4c1a-beb0-e106ebeddc4c",
        "cursor": {
          "ref": "b3ba6022-4999-4dca-89d1-e94e50714da2",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "4cf2ceed-903d-4582-9bd6-a1a502d9f66a"
        },
        "item": {
          "id": "1bd2c8ef-5a82-4c1a-beb0-e106ebeddc4c",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "07f8f173-535e-49ae-a4a7-0fb14f7b6ba6",
          "status": "Created",
          "code": 201,
          "responseTime": 318,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "69b0e793-029a-4f50-a616-2628a7f6cb5a",
        "cursor": {
          "ref": "9f7b6fc1-9b84-4d42-94af-4e3b18cd52e0",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "5f7c03c7-1db8-4aa1-b627-9b9693998b90"
        },
        "item": {
          "id": "69b0e793-029a-4f50-a616-2628a7f6cb5a",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "49ba4d80-a19d-4d67-bc5c-21a61c235df8",
          "status": "Created",
          "code": 201,
          "responseTime": 290,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "53af52aa-d703-49dc-8b09-ede568e2bce3",
        "cursor": {
          "ref": "ea9b01b4-29b5-44e9-a3d0-386a5fab2fc4",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "93b25c22-aba2-4e38-b3d8-58f30904d5fa"
        },
        "item": {
          "id": "53af52aa-d703-49dc-8b09-ede568e2bce3",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "92c77b06-584c-46a3-97dd-c94aa9d64e82",
          "status": "Created",
          "code": 201,
          "responseTime": 263,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "af8019f8-cf0c-4100-ba3e-8a0a766d5ba9",
        "cursor": {
          "ref": "29342d4f-9ef9-4a70-bac6-7ddec527bda5",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "38d016af-6dc2-431b-af23-2fd2f18e4c4c"
        },
        "item": {
          "id": "af8019f8-cf0c-4100-ba3e-8a0a766d5ba9",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "40a1411f-b4c5-4fcc-8be5-10aa3c4c441c",
          "status": "Created",
          "code": 201,
          "responseTime": 274,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "cfb638d5-541b-4bc1-988f-3ed464ef7779",
        "cursor": {
          "ref": "2cf0c1f0-9c0d-47e2-9b66-590ad151407c",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "eae16124-8bd1-4234-a248-90a07273fed4"
        },
        "item": {
          "id": "cfb638d5-541b-4bc1-988f-3ed464ef7779",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "bab0d7a9-a994-4681-919c-df28a9b47c48",
          "status": "Created",
          "code": 201,
          "responseTime": 258,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "1e5162d7-9ef3-41f3-acac-c9ca79fe475e",
        "cursor": {
          "ref": "5a645005-f4e9-44d7-9835-8e23b1d74ea4",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "e7d3c635-02c2-453d-a780-fa2acd43ffc0"
        },
        "item": {
          "id": "1e5162d7-9ef3-41f3-acac-c9ca79fe475e",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "202d3e89-120c-4c1d-a1ba-c8506620f27a",
          "status": "Created",
          "code": 201,
          "responseTime": 292,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "3bbf0f23-765d-4386-8af1-bcb75d4c295b",
        "cursor": {
          "ref": "99014b38-3719-4a0a-80c2-be716cf25d0e",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "5d88e426-ba57-4afe-9578-8804b41b03c2"
        },
        "item": {
          "id": "3bbf0f23-765d-4386-8af1-bcb75d4c295b",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "a1591302-fe51-4f88-b0fe-734ad073f4a7",
          "status": "Created",
          "code": 201,
          "responseTime": 265,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "74e1036f-4ff9-4806-8733-f4071d80f95d",
        "cursor": {
          "ref": "eb6e186a-0d84-45a8-871c-f0264172f2a6",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "b230454a-17eb-422f-b1a0-7cdfac173357"
        },
        "item": {
          "id": "74e1036f-4ff9-4806-8733-f4071d80f95d",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "57189362-6525-42d4-bd5c-89cd700c8675",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd283c1a-fe2d-4a63-a09a-c54c3262236e",
        "cursor": {
          "ref": "c954a47b-e0de-4480-9743-f2c115130609",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "a9c90847-09a9-436c-b65f-24c1d8b1ba2f"
        },
        "item": {
          "id": "cd283c1a-fe2d-4a63-a09a-c54c3262236e",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "732f38bc-e5bd-4e83-a02d-7b630abf52ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d827b843-aa41-42cf-9ce7-d89acde8ad07",
        "cursor": {
          "ref": "f5481291-a7ea-45be-8e69-53f0c888e48d",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "cda1afbb-f8b1-4923-94f3-6136b10ba8d6"
        },
        "item": {
          "id": "d827b843-aa41-42cf-9ce7-d89acde8ad07",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "a3db2c68-c4cc-4ca1-ab67-3bc6c1c31276",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bc9e338-f85b-4fc0-be4f-e67bccb11dcb",
        "cursor": {
          "ref": "8c9d6699-3683-419c-bc45-34125a6caa32",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "7a55d019-2762-4f7e-a644-25ab87069770"
        },
        "item": {
          "id": "3bc9e338-f85b-4fc0-be4f-e67bccb11dcb",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "ed1944dc-1a0e-4fe1-b19b-b7f4f095ad16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63de53ee-73f1-4ab5-add8-d66ae3feb161",
        "cursor": {
          "ref": "500c02ca-c88d-48e8-ae21-b5e2ae11efbe",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "9378ac81-74c9-471c-83c1-1436a3bcfe53"
        },
        "item": {
          "id": "63de53ee-73f1-4ab5-add8-d66ae3feb161",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "8f15125d-89e6-4408-bebd-903979074b6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d779911f-0dbd-4f38-b716-b9e85e4825ba",
        "cursor": {
          "ref": "1d2c9890-4305-46ee-88f1-c43e03433be2",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "1349c342-d9bf-4f06-9537-eb0f44b4f0ee"
        },
        "item": {
          "id": "d779911f-0dbd-4f38-b716-b9e85e4825ba",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "5eef34ca-a446-4340-bcc3-d8cbec7bae98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c714349-4b78-46ba-8bcb-57783bcfa127",
        "cursor": {
          "ref": "96ad8756-96bc-473e-b243-12cec3804780",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "e63a4d97-3f7f-4ab5-b15b-e8239e98143b"
        },
        "item": {
          "id": "4c714349-4b78-46ba-8bcb-57783bcfa127",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "21a8b7e9-165a-48a7-9795-cb8190d99d6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c5e0f51-66c0-4b8a-8e2e-0a2e09e1aa21",
        "cursor": {
          "ref": "4be2c772-3455-4e82-9e0e-5c780e65c55d",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "b82d3e15-da8b-4809-bb01-215be7ec83d6"
        },
        "item": {
          "id": "2c5e0f51-66c0-4b8a-8e2e-0a2e09e1aa21",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "67b9158f-c043-494e-80d9-3b6cba815446",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15819a94-3913-472d-b2e9-4b0591f0af1d",
        "cursor": {
          "ref": "db93ca70-2c5a-4580-9b9d-dd7c7f8ad6f7",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "deb62db4-123d-477a-9580-42d33f1b009c"
        },
        "item": {
          "id": "15819a94-3913-472d-b2e9-4b0591f0af1d",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "c34b6b92-9063-4459-a307-a9a41cf98b12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9ec824b-9cf3-4221-a164-78c5b1cf09b2",
        "cursor": {
          "ref": "14dbe1a2-a39f-4645-9f3d-94ba882f22eb",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "61bb5bb1-2811-45cb-8570-757515bbd18e"
        },
        "item": {
          "id": "f9ec824b-9cf3-4221-a164-78c5b1cf09b2",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "cb0a7171-5496-4812-b8b5-842010e5e5c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15d9ceed-9535-4d3b-b7ce-9e35cb3df332",
        "cursor": {
          "ref": "ded6e2e5-a97c-4aa2-a0a2-f2c4357ee65e",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "b2b4ea38-5210-49e1-8766-be56ca019091"
        },
        "item": {
          "id": "15d9ceed-9535-4d3b-b7ce-9e35cb3df332",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "c52f17dd-651c-4a02-a6ec-da56305a029e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcaf891d-cf0e-4f61-8e58-97f94eedfb93",
        "cursor": {
          "ref": "ae1c1600-b8d4-4fb5-b355-6d54c2cdfddd",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "6ce74e87-0327-4876-a4b7-4a254f4230cf"
        },
        "item": {
          "id": "dcaf891d-cf0e-4f61-8e58-97f94eedfb93",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "34c7c0de-cd7b-4451-9bf8-44a578b319bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "facf0264-c2c1-48b1-aa1e-870b1880d906",
        "cursor": {
          "ref": "01589a48-e84e-4039-a05e-311afedccb6a",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "9255d719-6144-461f-bbfc-9ed111ccdd54"
        },
        "item": {
          "id": "facf0264-c2c1-48b1-aa1e-870b1880d906",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "97cb7363-3109-4339-ab06-ad4548aab3c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60b3912d-a810-47c7-9ea6-7d833f4fc99b",
        "cursor": {
          "ref": "715a36a6-a857-48d3-b5b5-3cc63e7f854f",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "d47e76c9-ae22-4dca-a3f6-c6749f78fb92"
        },
        "item": {
          "id": "60b3912d-a810-47c7-9ea6-7d833f4fc99b",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "795546cf-3565-45d2-914e-73e4c5300df2",
          "status": "Created",
          "code": 201,
          "responseTime": 264,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "43a5e6f4-3170-4425-8fe2-dd8ee968dd3d",
        "cursor": {
          "ref": "4cc6ac7c-0585-4c3b-859d-f95455f4511c",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "5f1d5f57-637e-4034-b381-c1faa48d11f8"
        },
        "item": {
          "id": "43a5e6f4-3170-4425-8fe2-dd8ee968dd3d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "ead23c00-2810-4e90-86e7-af817c0734b4",
          "status": "Created",
          "code": 201,
          "responseTime": 275,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "fdf3cc02-2ca7-4398-8d88-a4bccdc4a0f8",
        "cursor": {
          "ref": "d54c8c95-c16d-4e99-be6f-b8207f0ee53e",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "05bdb7bf-7335-462c-b6b0-0a12a72ff670"
        },
        "item": {
          "id": "fdf3cc02-2ca7-4398-8d88-a4bccdc4a0f8",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "954a19dd-f767-4ad4-bed8-dac10a218926",
          "status": "Created",
          "code": 201,
          "responseTime": 271,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "f983eeb3-de45-4e09-a138-29a62028467c",
        "cursor": {
          "ref": "4b476f79-343f-4941-a40c-33c7453224eb",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "2939b751-6673-4def-8240-6a3094b08a12"
        },
        "item": {
          "id": "f983eeb3-de45-4e09-a138-29a62028467c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "d2d5fa8c-e19f-4869-af88-1d0617f9434a",
          "status": "Created",
          "code": 201,
          "responseTime": 269,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "a36fa5a3-cd88-4171-801a-ab998f914719",
        "cursor": {
          "ref": "6b01b862-8069-4134-b386-2fc7992521f2",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "07b3bc8c-1a0e-4953-87f6-a5d6eeadc188"
        },
        "item": {
          "id": "a36fa5a3-cd88-4171-801a-ab998f914719",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "b8091331-3f63-47af-8d9e-af7e71ea7b78",
          "status": "Created",
          "code": 201,
          "responseTime": 270,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "8b4a65a6-8e3f-4930-8dc6-293b19ff05a0",
        "cursor": {
          "ref": "37960520-31ca-4ef1-ae26-619e17af2189",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "83b25549-7f93-4fe4-812c-57a0f1714ee1"
        },
        "item": {
          "id": "8b4a65a6-8e3f-4930-8dc6-293b19ff05a0",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "e3a2dfac-aa9d-4ba5-9a8b-f2a1324561bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96a7d17c-7470-4f40-8478-32df2216c6ed",
        "cursor": {
          "ref": "180ef27d-2004-41a6-9fa1-19293b727743",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "8c604c67-3ebb-4697-8a4d-e4130fa4de6e"
        },
        "item": {
          "id": "96a7d17c-7470-4f40-8478-32df2216c6ed",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "80e591f4-51e8-4046-89f6-fffab4e2b663",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f8230d8-498d-402f-ad58-9a162bd6eab7",
        "cursor": {
          "ref": "31e8cace-0cd8-48d2-93f3-491fb8f7a7f6",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "94e1d51f-8830-4a53-b878-c18611a38c35"
        },
        "item": {
          "id": "7f8230d8-498d-402f-ad58-9a162bd6eab7",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "35cf80c8-cb8c-4d52-97e2-54100f5b5f60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39b6ff5c-be7c-4d82-bef7-4656e120d9e1",
        "cursor": {
          "ref": "afbda1f2-9b43-44f1-8493-2b820a6a4a3c",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "9116f41b-fc77-478e-9791-9bde9d9f3964"
        },
        "item": {
          "id": "39b6ff5c-be7c-4d82-bef7-4656e120d9e1",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "73988f9a-138d-4c27-aaa4-4e07ae42ce0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47ec07d2-4434-43c8-a04f-ac1429fbfb17",
        "cursor": {
          "ref": "62db9cce-c437-4ba6-9fd3-a824e31ae199",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "42e79303-2d7f-497c-a025-cd9c1dff6556"
        },
        "item": {
          "id": "47ec07d2-4434-43c8-a04f-ac1429fbfb17",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "ccad385d-8b77-4ca0-9995-3b23cd037ca1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "786f62ec-853c-4834-95ca-ff83c0de7bbf",
        "cursor": {
          "ref": "8a5373c7-cad9-4779-999a-829d47553997",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "9650c46c-84d7-4092-817e-f262d669a7f6"
        },
        "item": {
          "id": "786f62ec-853c-4834-95ca-ff83c0de7bbf",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "9422f967-2a17-489c-9d4a-d30d16c1d282",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42a74bbe-10d4-425f-9ac5-e4a501393b8b",
        "cursor": {
          "ref": "76553d78-c2c3-4ba4-a3c8-457bb462d9dc",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "bceb3b31-deb6-4d91-8aa3-59de58f7703f"
        },
        "item": {
          "id": "42a74bbe-10d4-425f-9ac5-e4a501393b8b",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "e5e38992-8473-475b-9be0-15fe4abcfd10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c92a4466-f7ec-4665-9b27-e3574f67e2b4",
        "cursor": {
          "ref": "9a88fa34-81ea-4b80-a234-4318ffc1a8af",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "5f62c38e-6a94-4bb9-8b00-64b5793e8cb2"
        },
        "item": {
          "id": "c92a4466-f7ec-4665-9b27-e3574f67e2b4",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "2fe8742d-4b62-4ec2-9fb1-fd8a7d2fc8a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4e94727-93b0-4e0b-a890-7769e3f0e7b9",
        "cursor": {
          "ref": "d111ee5b-bd24-4804-80f7-0c83b59e6a61",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "df606b68-c907-41b5-b4cc-cd80492cbf09"
        },
        "item": {
          "id": "b4e94727-93b0-4e0b-a890-7769e3f0e7b9",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "b1558e6a-b37e-4b39-8465-2c0c8c980a58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8973fadb-76bf-445d-aa59-4ef4a455acaf",
        "cursor": {
          "ref": "2d16175a-7c00-4a07-8395-afa2ad752246",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "55dbef7f-9143-46db-919e-8f85e726cb08"
        },
        "item": {
          "id": "8973fadb-76bf-445d-aa59-4ef4a455acaf",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "7e9ed3b1-5225-4605-a340-1aa0c375b2ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c689cf0-ec48-4505-b2c5-0bb62cc735cd",
        "cursor": {
          "ref": "5aa740a1-3069-4de3-bd2b-44ce9cb4129a",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "d6afe4e9-8a16-496a-b1fc-da0c20c9a431"
        },
        "item": {
          "id": "5c689cf0-ec48-4505-b2c5-0bb62cc735cd",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "3fceb220-182b-4d6a-b071-60e403e0f794",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98d29c03-348c-4f02-a3a0-1b993c0e24f0",
        "cursor": {
          "ref": "adfa5ba4-5857-45be-a943-a5462abd520b",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "ace8f356-e9df-41e3-9275-5176526d781d"
        },
        "item": {
          "id": "98d29c03-348c-4f02-a3a0-1b993c0e24f0",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "8311fa0d-da83-4c31-a97a-875bdfb57cad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f97ee15b-cb7e-434e-8816-cda638b5d87f",
        "cursor": {
          "ref": "04e026a7-f550-4615-b186-64491cf4de6e",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "7296fd78-1d94-42f6-bd5f-78e548a9458d"
        },
        "item": {
          "id": "f97ee15b-cb7e-434e-8816-cda638b5d87f",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "625c7f0a-d1df-4596-a0e0-2cd8766846de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f75610b-48da-4349-8555-89fd6be3eb9f",
        "cursor": {
          "ref": "e2f0a8a8-9d80-4458-a9c9-0f84a6735c54",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "8cc96d5a-85bd-458b-9b87-417a1da6eff1"
        },
        "item": {
          "id": "2f75610b-48da-4349-8555-89fd6be3eb9f",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "d0d9501a-18d0-4b72-bf49-bcf3146bb264",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e8c940f-c3e7-4e49-9928-ee79c0bcb126",
        "cursor": {
          "ref": "d448e826-4a53-4a24-9c45-1f53c9806452",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "409bfa07-f030-4348-a987-9966bd68c335"
        },
        "item": {
          "id": "3e8c940f-c3e7-4e49-9928-ee79c0bcb126",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "90958e00-49b5-4697-97eb-d94fb779b9e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32d48814-7f68-42e7-a512-e55664ef5278",
        "cursor": {
          "ref": "756ef95e-be48-4f49-83d4-e86430266d69",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "93838cc9-11a9-4f2d-98e1-6d28d10ed29c"
        },
        "item": {
          "id": "32d48814-7f68-42e7-a512-e55664ef5278",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "c7b4d177-4fe1-479a-9071-b73af8935863",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3700b7d-42bc-4dab-aaec-5220e9ba72f9",
        "cursor": {
          "ref": "7e3865df-fd05-402b-bea3-135c9c54b66d",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "438e79ff-de6a-4ae2-8f41-aacf0b85b6dc"
        },
        "item": {
          "id": "f3700b7d-42bc-4dab-aaec-5220e9ba72f9",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "58d8c261-73e5-4de7-bd62-5acde166bd0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9d6b5dc-a336-40c8-8522-c593631a91b7",
        "cursor": {
          "ref": "9db2814c-61cc-4ad8-a3db-8521df034d90",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "3f568def-8549-4a29-ac00-9abf187a8200"
        },
        "item": {
          "id": "a9d6b5dc-a336-40c8-8522-c593631a91b7",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "9c634adb-ddf1-4b58-9a2a-459815186c32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6adc23f4-9541-4778-8e60-fae308b89c14",
        "cursor": {
          "ref": "8816f4d5-82f3-4d70-bf77-71b59ceec309",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "ca55c4e3-de1b-4793-af97-d7134573960c"
        },
        "item": {
          "id": "6adc23f4-9541-4778-8e60-fae308b89c14",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "f8b0458c-9387-4dc3-80f7-c53c98ef25c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0901525d-5579-49f9-9ba7-b194a037c709",
        "cursor": {
          "ref": "c23ebd4e-ceef-46e2-a441-44e05bab9c55",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "5e7011bf-b467-4c20-bd84-d4b008f9e3c4"
        },
        "item": {
          "id": "0901525d-5579-49f9-9ba7-b194a037c709",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "3ca94fc8-da60-4993-a981-ec5a2051b636",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac2da174-ace4-4b52-905e-51ec3f1cff2e",
        "cursor": {
          "ref": "828d05a0-f083-42b7-8f96-1d06c9752c78",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "980c2e66-e0dd-4d09-b051-5647714521e3"
        },
        "item": {
          "id": "ac2da174-ace4-4b52-905e-51ec3f1cff2e",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "4118011e-66ca-4fcd-a885-b06d169e4701",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10f54a71-6657-441a-8290-187aa2c8132d",
        "cursor": {
          "ref": "04b82345-68d9-4a18-a8ab-7a38b7cb7c79",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "0e3e1cec-0e99-46d8-bb19-9df09eb1a1f9"
        },
        "item": {
          "id": "10f54a71-6657-441a-8290-187aa2c8132d",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "7b8f3d0d-0fb2-4a3b-9843-5494238bcfbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b41fd4a-667f-432c-adae-115b97abab8e",
        "cursor": {
          "ref": "aab145aa-445b-4533-9c6a-e107d289b2d9",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "0ab323a1-1f8f-4daa-b08a-ff36344e4d1a"
        },
        "item": {
          "id": "5b41fd4a-667f-432c-adae-115b97abab8e",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "656d16f3-b0da-456d-b4d9-47b327510fa8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d67db55-b592-49f5-9e68-3a763dfbf739",
        "cursor": {
          "ref": "430179cf-92b9-44d3-83d5-933b1c941fc4",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "88b1c50a-151f-4309-9882-2cd0113823c2"
        },
        "item": {
          "id": "0d67db55-b592-49f5-9e68-3a763dfbf739",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "b78cfa18-18bb-4de3-a52f-3d73272e55bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "718837ae-3659-4f04-8d78-2593ebe71894",
        "cursor": {
          "ref": "4fa98a55-1e85-439b-9a28-2a992e488ef0",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "38803fd6-6ee1-4b3e-8afc-39d403a24799"
        },
        "item": {
          "id": "718837ae-3659-4f04-8d78-2593ebe71894",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "56183230-bd2d-49e5-bdc7-4d65c1a61687",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "047e54a1-a3cc-4404-a02e-da1a87dea07d",
        "cursor": {
          "ref": "2413bebb-d1f2-4979-8016-3cc6608ac356",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "1abdd758-cb88-4fc6-a132-5e96a4bf0ad4"
        },
        "item": {
          "id": "047e54a1-a3cc-4404-a02e-da1a87dea07d",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "a3492295-7ea9-45c3-9bb1-a302749ee1d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f50b367c-df87-421f-a38c-88c62bd67a1e",
        "cursor": {
          "ref": "84f892e2-7180-44c2-b010-0883c15f6796",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "375f50db-d0c8-411b-97bd-c246f59c7f5c"
        },
        "item": {
          "id": "f50b367c-df87-421f-a38c-88c62bd67a1e",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "56e035df-024e-48a0-b36a-8ca786e882ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bd873d1-c1d2-4523-bf26-feeab026b31f",
        "cursor": {
          "ref": "2386b244-5e51-4c1d-b500-b3f26be64ff8",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "4312ebbf-882c-49c4-8c26-f89ff95466a4"
        },
        "item": {
          "id": "6bd873d1-c1d2-4523-bf26-feeab026b31f",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "4d1fe8aa-022a-493f-8331-f68ba26e522b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03643477-5c62-4999-a1aa-20a81f1ce459",
        "cursor": {
          "ref": "ab944a78-65e4-4469-92ef-12a59f707f5c",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "010b89d6-aff5-446b-86d9-e668af4a7a50"
        },
        "item": {
          "id": "03643477-5c62-4999-a1aa-20a81f1ce459",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "b7aa773f-eb66-440e-bf90-4cd915b2f251",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f28710dc-a09c-4805-89dc-5d3986dd9778",
        "cursor": {
          "ref": "819c6894-4c28-4562-bcea-e0b3aeca31f5",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "a65d4690-78d8-46c7-8493-b5b2214c06c4"
        },
        "item": {
          "id": "f28710dc-a09c-4805-89dc-5d3986dd9778",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "0029c9ec-068b-4862-bd3f-ab73695a77ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28612fda-2d4c-45cf-92d4-32993ab0c639",
        "cursor": {
          "ref": "4de38b15-f6dd-4e66-aaf5-f4a452c18c84",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "3e05bf98-35b3-4be3-909c-8d401203e771"
        },
        "item": {
          "id": "28612fda-2d4c-45cf-92d4-32993ab0c639",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "b5596cda-d534-49da-bbaa-57322ecf5a08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14e3e2b4-c5ff-4b00-8b77-d166165ff432",
        "cursor": {
          "ref": "76ae4737-eaac-40ce-b35a-b3b0a72d773c",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "768c8315-4e3a-4eae-96fb-411f335589c2"
        },
        "item": {
          "id": "14e3e2b4-c5ff-4b00-8b77-d166165ff432",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "2ded2e20-9913-476f-a5fe-f1b03b59bdb4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "401e50ff-5125-43b3-90cc-fa89bc09c5bc",
        "cursor": {
          "ref": "f219c362-2aa1-468a-ae7d-0667c730a863",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "3e036b89-4274-4f51-b278-b8f2a66bb6f2"
        },
        "item": {
          "id": "401e50ff-5125-43b3-90cc-fa89bc09c5bc",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "aea231d5-b0ef-434d-91d7-09b88bf17184",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "0f346a9e-5232-4884-9a3c-7c43484fc60e",
        "cursor": {
          "ref": "010fa625-bd6f-4065-88fd-28f3e3a8164e",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "42914bf2-244d-49e6-9840-9dd3c3c56019"
        },
        "item": {
          "id": "0f346a9e-5232-4884-9a3c-7c43484fc60e",
          "name": "credentials_issue"
        },
        "response": {
          "id": "a11de32f-486a-4c6a-960f-10a93da6e7b8",
          "status": "Created",
          "code": 201,
          "responseTime": 303,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "03802731-e298-441d-8a86-248be2fe16ce",
        "cursor": {
          "ref": "b87ab43e-7f30-475c-94e3-e177f93606f4",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "8f0844a9-34a2-4ce2-965a-568f9487ab30"
        },
        "item": {
          "id": "03802731-e298-441d-8a86-248be2fe16ce",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "aae1b5fc-72f3-45c6-aa2c-28fe9a4c9b75",
          "status": "Created",
          "code": 201,
          "responseTime": 263,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "52641214-cd3f-4696-acba-fee80b66de80",
        "cursor": {
          "ref": "69b4c09a-5fc1-4bd4-b5a2-31da9d356676",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "51795802-0fdb-4874-ad04-8ef0dc0fb0f3"
        },
        "item": {
          "id": "52641214-cd3f-4696-acba-fee80b66de80",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "3531787e-9df3-49a9-a9e4-8e19ce2409ee",
          "status": "Created",
          "code": 201,
          "responseTime": 275,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf84b438-d7e8-43a4-98f6-c011a5550512",
        "cursor": {
          "ref": "ecf770f0-cc8e-4adc-b78a-5b98e66f6f32",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "6578a9a9-19ee-4c6b-b0c6-d81f2998afc4"
        },
        "item": {
          "id": "bf84b438-d7e8-43a4-98f6-c011a5550512",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "db6573c0-cba1-4419-bd70-53d93ac122ff",
          "status": "Created",
          "code": 201,
          "responseTime": 342,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "d351d227-4cb8-400e-b031-c27fdb5f51de",
        "cursor": {
          "ref": "14dfecdf-cd81-4cfc-b477-2431cd57a217",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "4099c13b-1af3-47f8-b4d2-d46c95e75c40"
        },
        "item": {
          "id": "d351d227-4cb8-400e-b031-c27fdb5f51de",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "ee46967d-b9d3-49e2-8bc0-eaf2b7afcf16",
          "status": "Created",
          "code": 201,
          "responseTime": 298,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-06-15T00:37:59.425Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-06-15T00:37:59.425Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "6bf08b9f-a012-4fa5-a932-3a32ec9ed65d",
        "cursor": {
          "ref": "3b7ff59e-8879-4237-942b-9881f482bd57",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "ce61f670-9d3f-4ca7-ae1b-35ddd8395b05"
        },
        "item": {
          "id": "6bf08b9f-a012-4fa5-a932-3a32ec9ed65d",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "31701d21-358a-4261-b576-25d95a61f4a1",
          "status": "Created",
          "code": 201,
          "responseTime": 285,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26867f2d-3872-46f7-9f63-5264e8f776dd",
        "cursor": {
          "ref": "ac4c0cb8-ff7a-49f5-ac7b-2eee02ed81ad",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "9ed127db-4a22-420d-ad11-59518aa34408"
        },
        "item": {
          "id": "26867f2d-3872-46f7-9f63-5264e8f776dd",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "9a295bc0-2ad1-4f35-88d4-3a188f2aaebc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30b9c6f2-3a50-432d-a12a-9a8490781396",
        "cursor": {
          "ref": "d09b7d8e-64b8-4811-a9fe-3025ba61a7ce",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "51b28f94-638b-4263-b486-4eb9890c2de5"
        },
        "item": {
          "id": "30b9c6f2-3a50-432d-a12a-9a8490781396",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "2353102f-6545-4d42-98b3-e07e9622ae51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c57658a-7379-4725-9c0f-a33608edd4fd",
        "cursor": {
          "ref": "6d23322a-a45c-4b78-88a0-34f085001b34",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "b3c03d4d-df2f-4ddf-bd01-6403a016d3db"
        },
        "item": {
          "id": "8c57658a-7379-4725-9c0f-a33608edd4fd",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "28107db4-fa79-4770-acf4-4deee6581c7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec3473de-9a6d-46c0-900f-f8438387dd64",
        "cursor": {
          "ref": "025e76b0-5004-478b-9d2f-0509e843deb3",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "c7540b3c-02ff-4e1c-8d14-2bd0da6a6308"
        },
        "item": {
          "id": "ec3473de-9a6d-46c0-900f-f8438387dd64",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "595a37be-3835-49e7-b97a-d15785c70a46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a3b22de-5531-4991-8af6-a88102e55e73",
        "cursor": {
          "ref": "266c0fc5-0fed-4c4b-a26e-33118f008f34",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "1fd5c69a-946c-42a3-854c-3f2497a177d2"
        },
        "item": {
          "id": "3a3b22de-5531-4991-8af6-a88102e55e73",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "9304ef4d-cc12-4613-8700-ec6a5948f51d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aee5b15e-0d44-40f4-9b7e-26fb323a1d34",
        "cursor": {
          "ref": "074d9244-8eba-4aa6-9007-faf2d8970f4c",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "06599b09-545a-444d-8ec7-727a8ce972d2"
        },
        "item": {
          "id": "aee5b15e-0d44-40f4-9b7e-26fb323a1d34",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "076ff7d8-0f88-4139-aa31-d876ef8e9b2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "beb10ada-a2b9-4f4b-af49-abbcaeb75a8c",
        "cursor": {
          "ref": "a4a9ab6c-283c-4df1-ba2f-9930dc8763e6",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "a4c05d2e-9a3b-4626-b4f9-8b6af7eb26d7"
        },
        "item": {
          "id": "beb10ada-a2b9-4f4b-af49-abbcaeb75a8c",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "2411e730-ab55-4aa6-8c12-2c31ab66ded5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e267ac01-f987-4448-9bc0-c557673c7523",
        "cursor": {
          "ref": "3329d96a-069e-44bd-a5bb-ecaf2a96eb5d",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "23df7e9d-7f6a-4934-9ea8-49ed31d31241"
        },
        "item": {
          "id": "e267ac01-f987-4448-9bc0-c557673c7523",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "c1df18f4-c8ba-47b8-924d-026f0bc54b54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ec03bc1-5d14-4149-9d18-25deae3fa6c4",
        "cursor": {
          "ref": "7439f4ee-d426-4d07-bbfd-33dcb27e4e91",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "e2b5af06-c586-4097-8f0b-a6acd162f310"
        },
        "item": {
          "id": "9ec03bc1-5d14-4149-9d18-25deae3fa6c4",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "b6dc728f-7f64-4528-a281-cbd4d31e557b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d7a7a3d-6031-4336-83d1-8f4494e574ec",
        "cursor": {
          "ref": "5955093f-e2b6-4e92-ae62-ae003c6205d2",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "b4b991ad-7b01-4d55-a41f-a4eb94745ac3"
        },
        "item": {
          "id": "3d7a7a3d-6031-4336-83d1-8f4494e574ec",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "eb0ccbdf-db2a-4fde-98c2-56fcd72d4b8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80792fe0-0d90-48f2-ba73-f8cdc58f2595",
        "cursor": {
          "ref": "40187478-16af-426a-92d8-bc9b0b00b681",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "f567d74f-16a2-4309-bd98-c63190e51e30"
        },
        "item": {
          "id": "80792fe0-0d90-48f2-ba73-f8cdc58f2595",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "e70b6284-d877-4243-9c4c-7e83b3336eaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f005cbda-780c-4c6b-9f65-e40ca90970fa",
        "cursor": {
          "ref": "3a32af31-3c38-4e23-a976-fed864a2cfca",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "d298cbb7-8e21-40ed-a0b5-6a37583689a4"
        },
        "item": {
          "id": "f005cbda-780c-4c6b-9f65-e40ca90970fa",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "1aab5919-cbe9-4d3a-8d3a-3108a0629a5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb12578f-703c-4b1b-ba1b-3379f61f321e",
        "cursor": {
          "ref": "a36ceece-f51b-482d-b267-0340424c2144",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "65b76bbd-4aca-4ff9-b8b8-98bc874b495a"
        },
        "item": {
          "id": "fb12578f-703c-4b1b-ba1b-3379f61f321e",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "20248b3d-b2b6-4c00-a738-b6e424bd5d77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd809765-1c37-42ec-9a5c-e6a3ed34d09f",
        "cursor": {
          "ref": "a49eb1ca-7d33-4183-9429-9501f748f700",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "9c19c69f-b347-4775-bce3-31dee62adb91"
        },
        "item": {
          "id": "cd809765-1c37-42ec-9a5c-e6a3ed34d09f",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "6d97d0f9-06fe-4d37-8400-8b871b81b467",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "83d93e0b-ff96-42ae-9a2c-e27f24873f08",
        "cursor": {
          "ref": "c1cc8841-95bf-4a4b-98e8-12f7cf589f61",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "1667cad2-8de1-4e08-a3ba-9bc41b01bd10"
        },
        "item": {
          "id": "83d93e0b-ff96-42ae-9a2c-e27f24873f08",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "a563b389-46f6-41c3-98a4-794e003c8ce4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cde2a532-2940-4d6f-9015-e4094b1d1856",
        "cursor": {
          "ref": "a91d5730-da85-4b4d-ad8e-57bf968b3e22",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "68e79faf-1b16-4ad7-975b-d5ec26671832"
        },
        "item": {
          "id": "cde2a532-2940-4d6f-9015-e4094b1d1856",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "e6c3d2b8-cc07-4eca-b3e6-4e81fd679b7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26fb361b-af26-4f4d-ad1c-7bd632cae9c9",
        "cursor": {
          "ref": "8b90beac-a4eb-4cdb-8d5d-d4d26359784d",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "7d60e1d1-b132-489f-b126-1c00f4240058"
        },
        "item": {
          "id": "26fb361b-af26-4f4d-ad1c-7bd632cae9c9",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "93ea4d54-75be-4f3c-b70b-a09b52d41315",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de94d9b2-ba55-4682-984b-66ca809dc1be",
        "cursor": {
          "ref": "888665c9-ad5c-4a3c-ba4d-1bccd5af1dd4",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "503a921c-7de2-41f8-86df-ab50f5f4e6b8"
        },
        "item": {
          "id": "de94d9b2-ba55-4682-984b-66ca809dc1be",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "560f6501-fcd1-464a-9e1b-597334000217",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87ce38dc-4886-4eba-bf1e-bc411073adcb",
        "cursor": {
          "ref": "5a8105c0-e411-403e-bb87-2ad578d2a706",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "1651fe65-930a-4cf2-b55e-701d427e8d07"
        },
        "item": {
          "id": "87ce38dc-4886-4eba-bf1e-bc411073adcb",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "a9d44c8a-4809-4a0c-8874-9615e0ebe8c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b6c57dd-bbeb-4693-bcec-92c583494135",
        "cursor": {
          "ref": "3f7fd1c4-479f-43da-9d82-58c8c5d6a669",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "b9e2308e-5a76-49dd-beac-f63da28380b2"
        },
        "item": {
          "id": "3b6c57dd-bbeb-4693-bcec-92c583494135",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "6e948d36-2aaa-4f73-930d-6998c071d6d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74de49b2-6086-49b2-927f-d3c9bf9f3d54",
        "cursor": {
          "ref": "62652c7f-7b02-4ca6-87d4-0a0a8d373b53",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "95c3ff96-bb4e-43ee-8b7f-9033304b4261"
        },
        "item": {
          "id": "74de49b2-6086-49b2-927f-d3c9bf9f3d54",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "c7eeed55-2ae8-4bc0-9023-2d658e2f0b3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e365f498-d855-44a7-87c8-20c45e3a31e2",
        "cursor": {
          "ref": "9b0fcbdc-becb-4fb7-ad59-2dbe9af37581",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "8fa7daf9-8903-46d3-b655-f150617355f8"
        },
        "item": {
          "id": "e365f498-d855-44a7-87c8-20c45e3a31e2",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "fef2f30c-2827-4c67-8a5e-bcd8a75e3481",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2573dfdf-acee-4148-9029-350059c0cb26",
        "cursor": {
          "ref": "2aa24ccb-36b1-4bd2-996c-62ef5814d6ed",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "9e92e0c0-8792-4ac7-852d-75373cf8a0b6"
        },
        "item": {
          "id": "2573dfdf-acee-4148-9029-350059c0cb26",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "f13a7a5a-7eb4-4ee5-9934-87d0fac13d51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ac89a10-f549-49dc-b4fd-bf3f830be35c",
        "cursor": {
          "ref": "ac93f2f6-e8e7-4b56-a989-5549ef11a00e",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "d35a61d7-3526-45d4-a52b-1cb3611f580b"
        },
        "item": {
          "id": "7ac89a10-f549-49dc-b4fd-bf3f830be35c",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "23afc852-8813-4111-ae11-311b74ca22af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11a6e3bd-e1ff-4925-9c59-5a7404eb4604",
        "cursor": {
          "ref": "212d1330-7071-4bfa-b982-96d0d064d771",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "f150e427-ebbd-4210-b97e-db1e9b5edbc8"
        },
        "item": {
          "id": "11a6e3bd-e1ff-4925-9c59-5a7404eb4604",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "2044b0c1-cd58-4134-bfd7-283b983a7273",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d652ddc-3c8a-4068-9750-3bbe2695405b",
        "cursor": {
          "ref": "c58acb3c-d974-43e2-96b5-78c6478a0b7f",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "137ced58-0303-4abb-8292-300fb06f658c"
        },
        "item": {
          "id": "0d652ddc-3c8a-4068-9750-3bbe2695405b",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "e4110668-33e6-4992-92a0-17175a21efb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4be9e6a6-8f28-4993-8757-8de4ce4175b8",
        "cursor": {
          "ref": "cf8af856-a77f-433d-8c8a-9700519b1ba2",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "1a74e72d-474e-41ca-a7f0-8efe366a5b29"
        },
        "item": {
          "id": "4be9e6a6-8f28-4993-8757-8de4ce4175b8",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "3a8b35dd-da73-4f2f-bee0-75bafa7d935f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c162a40-74bd-4e03-94b9-825d39f02d02",
        "cursor": {
          "ref": "1cd3cbf2-fcc9-4e24-97ba-f5e09edb74f1",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "b1e1d623-6851-4104-bbe6-f3b864d41784"
        },
        "item": {
          "id": "5c162a40-74bd-4e03-94b9-825d39f02d02",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "b163cde7-418b-4168-a13d-e71f89369554",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f79cb48-16bd-4d44-b49e-863ac9045810",
        "cursor": {
          "ref": "032e19e3-a0bc-405e-b1fb-ab0e24ed6277",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "b452e68d-e1b2-437a-9196-b948edb26fb3"
        },
        "item": {
          "id": "8f79cb48-16bd-4d44-b49e-863ac9045810",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "06436068-164a-4797-99ac-d2b2274c5f63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7c81232-8fa7-4a64-805a-381bb4d6a595",
        "cursor": {
          "ref": "abed8e83-6c82-47b9-b02b-de7250690aa5",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "c7855fb5-7449-4d69-a12f-586b01c19005"
        },
        "item": {
          "id": "a7c81232-8fa7-4a64-805a-381bb4d6a595",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "23c8535d-726f-455f-bb98-69ff087e2c31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "970157f1-308e-4e56-9f57-bd67b24238e1",
        "cursor": {
          "ref": "79ffeeba-7b7a-4e80-bae5-99e2253a13ff",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "918bddf7-bfaf-4e67-94b5-fd67c0617b2d"
        },
        "item": {
          "id": "970157f1-308e-4e56-9f57-bd67b24238e1",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "2d8bf98d-a4a5-457d-a85f-c279734d4667",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e55ed8f0-ec15-4977-8aa0-ffebb943cd37",
        "cursor": {
          "ref": "e9434b4b-50f8-454d-9fcb-d86e06dd4854",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "e26a0a02-679f-4440-a770-6a0cff1ec56f"
        },
        "item": {
          "id": "e55ed8f0-ec15-4977-8aa0-ffebb943cd37",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "621aacb5-2b72-433f-969b-1dcdd2142119",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d3a59bd-ab91-46ae-9227-3baf15d0f37d",
        "cursor": {
          "ref": "a4abc146-eb29-4f3c-8553-c07de512db78",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "6121a7e8-7d10-4dc6-9bd2-e71c1faed020"
        },
        "item": {
          "id": "4d3a59bd-ab91-46ae-9227-3baf15d0f37d",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "e03768ca-f532-45a2-83dc-4d14223b68ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c15880ea-c7f0-45f6-b4b0-6e680f5b1b56",
        "cursor": {
          "ref": "ea85e2cd-80ea-45e3-948f-279e4b6ee6cf",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "4d86d039-afb8-4681-a9fe-57b7de828223"
        },
        "item": {
          "id": "c15880ea-c7f0-45f6-b4b0-6e680f5b1b56",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "3634f056-4211-463f-b4f1-8902c810109e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6609701c-f8bc-4615-866c-1423d900c93f",
        "cursor": {
          "ref": "f708a71b-e470-493a-b6aa-d6b45f848a56",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "237945fb-baf2-462e-8642-c831a1b8a614"
        },
        "item": {
          "id": "6609701c-f8bc-4615-866c-1423d900c93f",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "edadda3e-01b2-4dde-b748-3c28fc504acb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd7b6b0c-0fb2-4056-93a6-bf209b518f8d",
        "cursor": {
          "ref": "9448014e-c626-406e-a6f3-d831c5ed08ec",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "c88502c1-3dbf-4f50-8275-9818f3ff5c45"
        },
        "item": {
          "id": "bd7b6b0c-0fb2-4056-93a6-bf209b518f8d",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "bb0137ee-5591-491e-8aa8-aedf9eb80ea9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8777840d-d342-4983-994f-9bc193a43172",
        "cursor": {
          "ref": "a69dc9e0-9fc6-485b-8aa1-1d85fb961073",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "33de1770-da32-40dd-a57d-c369d317e361"
        },
        "item": {
          "id": "8777840d-d342-4983-994f-9bc193a43172",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "047c5f7f-88e5-4c88-b78a-b8ce3438f721",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d7b32cb-ed4c-4a41-8efc-4d3611d313cd",
        "cursor": {
          "ref": "31ecf381-7578-4e90-842d-7f231d6bca52",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "64391665-9577-4069-8f76-630db3c37df2"
        },
        "item": {
          "id": "8d7b32cb-ed4c-4a41-8efc-4d3611d313cd",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "375f4c63-bb90-4618-b48d-546ae386f6e7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "972d48dc-91f6-49ad-bbd6-c8e5f7fde0d9",
        "cursor": {
          "ref": "e2b94fd0-5836-4c8e-87c7-692fb5e45f0f",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "987b604a-7b1d-4892-9bdc-474ab7fb2580"
        },
        "item": {
          "id": "972d48dc-91f6-49ad-bbd6-c8e5f7fde0d9",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "1a699145-7cf8-4f69-b91b-c73fabf97ae0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8381d606-7852-4d15-bc71-43725de6da7b",
        "cursor": {
          "ref": "572506d6-b3d7-4728-a05d-d89ca1ad1d2f",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "49fe986a-41d4-4736-a01b-d5764f380a82"
        },
        "item": {
          "id": "8381d606-7852-4d15-bc71-43725de6da7b",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "b38632e4-3752-41be-a801-b0fe847a9946",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f071dec0-3222-48cc-b406-86c8421b2280",
        "cursor": {
          "ref": "f2ecd011-a12e-4a5e-be70-431b21cdb933",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "6835959d-f78a-48e3-b4e6-e511ad634757"
        },
        "item": {
          "id": "f071dec0-3222-48cc-b406-86c8421b2280",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "8e654022-2d86-4baa-8452-cac7140712d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d031b831-48a6-4073-b80e-a40128cd5ce1",
        "cursor": {
          "ref": "9043bb6f-1568-4265-80d4-a86f25b1bbbd",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "a8ed5331-cde8-4fbe-8d19-b603aaaad367"
        },
        "item": {
          "id": "d031b831-48a6-4073-b80e-a40128cd5ce1",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "0dc101f7-5484-49ff-b685-47d333a21123",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1ee88ce-b6bb-49e0-977d-202517026dd0",
        "cursor": {
          "ref": "24e27073-6b03-4fbf-8cf2-8f760c8b2986",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "0f644c0b-8038-48ee-ad7d-0e586082a567"
        },
        "item": {
          "id": "b1ee88ce-b6bb-49e0-977d-202517026dd0",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "7e51cc96-53ed-4355-a59b-8ee4552e935d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5e63e73-f600-4ca7-8338-fecbf59db42d",
        "cursor": {
          "ref": "f7cfd7b8-e6cf-4d5f-8101-c5a82ad9373f",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "b5f87d99-43d0-4040-8e6f-43285eee55e2"
        },
        "item": {
          "id": "b5e63e73-f600-4ca7-8338-fecbf59db42d",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "8017e854-e055-49a1-b845-101d9f1b90d2",
          "status": "OK",
          "code": 200,
          "responseTime": 185,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "bd9411ae-6f10-48ff-b59c-ccc90bde34b3",
        "cursor": {
          "ref": "6cb4b7eb-6394-4894-b2aa-b4bd04193e1b",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "558b4c39-9397-4774-ba1a-39d9b3de6654"
        },
        "item": {
          "id": "bd9411ae-6f10-48ff-b59c-ccc90bde34b3",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "199adf32-43ca-443e-86a4-7eae791c6ecf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ec345b8-2e20-4cb2-937f-f4619ce648c5",
        "cursor": {
          "ref": "f064fa33-5143-42d9-84c3-f6891a8c2857",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "1febc893-0ef1-4f2f-8e9c-0bf07df5f67e"
        },
        "item": {
          "id": "9ec345b8-2e20-4cb2-937f-f4619ce648c5",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "b14dcfde-d391-40e4-adde-e2f51596bbcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b201382-69cb-4830-aad2-8d0b63ff1d73",
        "cursor": {
          "ref": "858e1db9-4449-492d-b7ac-1f16c8add9aa",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "b76588ab-3366-4163-9247-e2989ec6c4a0"
        },
        "item": {
          "id": "7b201382-69cb-4830-aad2-8d0b63ff1d73",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "14cdc1a6-5f11-42a4-8c22-47310a726fde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d63ef8d-c9ca-40e9-a0f9-1b8dc06b8c3a",
        "cursor": {
          "ref": "7c0b1764-d2d7-4294-b35b-be50c0bdd67c",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "19055bc8-08b0-4790-81f0-c1e3f0d562f8"
        },
        "item": {
          "id": "2d63ef8d-c9ca-40e9-a0f9-1b8dc06b8c3a",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "8239f0e3-8513-4310-91ea-ec747afc74ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68419224-c3e2-459a-a3a9-1508f3c663a8",
        "cursor": {
          "ref": "3839532e-e37e-472c-8bb0-b8ae869e151d",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "f4968637-7205-4cb8-b6f1-3694821f6b9d"
        },
        "item": {
          "id": "68419224-c3e2-459a-a3a9-1508f3c663a8",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "11725c45-5f74-43d3-aa00-28497f86740b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e5790f8-b3af-4930-8a76-4e37352816bc",
        "cursor": {
          "ref": "78864073-f3b2-4e80-99d2-bcf5aaae3896",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "13ddd69f-fed8-4e58-8988-14417676520b"
        },
        "item": {
          "id": "8e5790f8-b3af-4930-8a76-4e37352816bc",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "5ce36b91-055a-4313-8f80-666232e3f4b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0d27306-db7e-42fb-a7e5-56f4b131129d",
        "cursor": {
          "ref": "6a60bb83-f9b5-4c04-9be2-e0dcba1f281c",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "765ff292-85fe-47fc-accd-aa1fdfd50fc5"
        },
        "item": {
          "id": "d0d27306-db7e-42fb-a7e5-56f4b131129d",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "cd310f07-26c9-475c-aeda-c3320eccc705",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27e700cd-e824-4178-91ec-1dc6cc2472fd",
        "cursor": {
          "ref": "c181b481-259d-4bd6-9338-deae615db6ef",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "ba1ec527-d7f8-4e6b-b8e1-d59e7e16fbf5"
        },
        "item": {
          "id": "27e700cd-e824-4178-91ec-1dc6cc2472fd",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "aa87a046-1e10-4ecf-81db-8c75bc448cfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d48d62c0-cfc3-4909-b779-55d1e8f81a54",
        "cursor": {
          "ref": "b4257f59-7c1a-485b-a0de-5adf33a52f59",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "e12ceb29-8635-48d8-8544-ba3eb0de40a7"
        },
        "item": {
          "id": "d48d62c0-cfc3-4909-b779-55d1e8f81a54",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "d95c3778-fdd9-4eb6-9ab5-48b202f0d478",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "485c3f71-a87b-4a93-928e-fc9897e499d0",
        "cursor": {
          "ref": "9a562701-09d3-4b0f-bbcf-9a1cb69d6166",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "f3816e9e-61b1-4472-b41f-119027f307ac"
        },
        "item": {
          "id": "485c3f71-a87b-4a93-928e-fc9897e499d0",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "e8f31443-2ab0-4087-9215-688807d11d91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab973444-a75b-4413-b14d-038709370204",
        "cursor": {
          "ref": "176c9685-4d51-4ee2-900d-25ffc8930758",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "6afc6849-3cf9-49c4-b69f-c87fafd38cca"
        },
        "item": {
          "id": "ab973444-a75b-4413-b14d-038709370204",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "e19bd1f9-67ff-438b-b8b6-ebed1a6deb9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3403be81-67b4-4f47-a41b-8070f289ddb5",
        "cursor": {
          "ref": "a908bf0f-0908-4397-9ae8-1cfa261bc2e3",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "11d21048-fc03-4378-a401-d69fef201b55"
        },
        "item": {
          "id": "3403be81-67b4-4f47-a41b-8070f289ddb5",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "40cbb06b-fa17-48aa-b378-574b5b8c772d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a97a2f72-e2d5-4f7a-9292-907d76659615",
        "cursor": {
          "ref": "67c9cf06-98ba-44dd-85d3-e31bdcaab4da",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "1b82b2f9-9b2b-4c57-a762-076737d53bf3"
        },
        "item": {
          "id": "a97a2f72-e2d5-4f7a-9292-907d76659615",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "320ad0eb-fe11-43ce-b2f1-10d588a016d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1f74801-36b0-4453-9951-b0315d4e7039",
        "cursor": {
          "ref": "4dee28cc-3f2d-498b-8778-925c26a51586",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "86756240-38c2-4a8c-87a3-c0c9a5f5e622"
        },
        "item": {
          "id": "f1f74801-36b0-4453-9951-b0315d4e7039",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "c08637a6-c278-47a1-a3e6-1d1c1cd8cfcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edb31351-096f-4a42-a741-8698ae8f346f",
        "cursor": {
          "ref": "11e03c3f-a215-4812-ae6f-b4c22915c5df",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "a8ebdac1-265e-4564-b7e7-6af1627e0bb3"
        },
        "item": {
          "id": "edb31351-096f-4a42-a741-8698ae8f346f",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "ebf150ad-25f6-4bd8-a614-9ec4d7495f9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36dc06ed-509a-49e2-95fc-91c4b2463f78",
        "cursor": {
          "ref": "26f0f5a9-903e-482e-becb-77785c3f81de",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "0994849f-b847-4c7e-97b7-12e52a92e52f"
        },
        "item": {
          "id": "36dc06ed-509a-49e2-95fc-91c4b2463f78",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "d89cb563-66c5-4019-aec7-9281b1f799de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cbc2be9-b55e-4920-a658-19dadd34e853",
        "cursor": {
          "ref": "9974fad6-6c8e-4864-a146-03383b5ef3dd",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "1a6e7b5c-8a90-4105-a1b5-3cc66f02d099"
        },
        "item": {
          "id": "9cbc2be9-b55e-4920-a658-19dadd34e853",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "a27fe492-f324-4244-af68-24a5c5a3abdc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0909b1d-b0a9-49df-be54-dbf6dfdd2c8d",
        "cursor": {
          "ref": "929f2294-966d-4c05-8071-e5d6162aedc0",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "f8fa7604-670e-4d7d-b55f-446b9a232c09"
        },
        "item": {
          "id": "e0909b1d-b0a9-49df-be54-dbf6dfdd2c8d",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "204019ca-e6e0-412a-8436-e72f0b52e0a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ab8ac57-a78b-4bf2-bb2e-4620b0bb1cb6",
        "cursor": {
          "ref": "f42a7e1d-1813-4ebb-98e2-a21e6fb306be",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "e6350875-65c9-4b1c-a8d1-09a05ac3c43b"
        },
        "item": {
          "id": "0ab8ac57-a78b-4bf2-bb2e-4620b0bb1cb6",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "232324ae-df5b-4eb2-bce4-c073cc9751e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07108852-3bdc-4cca-8f14-68c50ed4bc14",
        "cursor": {
          "ref": "8a4c9b9d-55ba-49e1-bb44-faf7cfcd4c81",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "ba067aa1-0870-409e-a920-16eb24964427"
        },
        "item": {
          "id": "07108852-3bdc-4cca-8f14-68c50ed4bc14",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "0bb7a0c4-d9e9-48f3-8f7a-5fbdf20aad6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fb21921-970a-4942-b057-ccfa7c376c67",
        "cursor": {
          "ref": "6d418236-baaf-4a66-8c2c-d045ef00c948",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "73a9be6e-ba58-4ad1-832f-56456000643c"
        },
        "item": {
          "id": "2fb21921-970a-4942-b057-ccfa7c376c67",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "ebcd055d-1cad-44b6-8c8c-8eed3df91ca0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac94c4b7-52f0-4d59-9132-0e1e30876d27",
        "cursor": {
          "ref": "b35e66b1-a592-497b-a0ee-528ff2cfc469",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "16b760a7-a0a7-4b06-8f98-a8e55e20efc7"
        },
        "item": {
          "id": "ac94c4b7-52f0-4d59-9132-0e1e30876d27",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "86e654da-50be-43f0-8dc1-fd6b696814f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11f5f9ec-3e6b-4fdc-b711-ce75e1797d28",
        "cursor": {
          "ref": "908d8374-866a-48f8-9813-084556bead68",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "703cf946-c5e6-47c4-ad45-ee574a5503c6"
        },
        "item": {
          "id": "11f5f9ec-3e6b-4fdc-b711-ce75e1797d28",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "e7bbdacb-905a-43cc-a35c-64f8d179f767",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02eaba0c-fc6a-4feb-b4cf-5b1dd0511e54",
        "cursor": {
          "ref": "825b3ee1-c208-4c7a-a979-35838c3150f2",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "e87ac5a0-71ad-4187-9c66-cea3334c8b57"
        },
        "item": {
          "id": "02eaba0c-fc6a-4feb-b4cf-5b1dd0511e54",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "48d436a4-6397-459b-a8ff-3e9a648251d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c10da60-df53-4f2d-938a-3537a3efcbe9",
        "cursor": {
          "ref": "9e1227b4-9a46-489f-90c7-4989084a6d2e",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "05669717-0938-4d38-94d7-a1f5649f6833"
        },
        "item": {
          "id": "0c10da60-df53-4f2d-938a-3537a3efcbe9",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "35c961a4-e230-4c09-9356-4039fba68002",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94c7b97f-05bb-4b3e-9144-1fa7c0b9787b",
        "cursor": {
          "ref": "e2003da0-d749-4123-b325-32859ef09731",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "82b18754-e90d-482b-b0bf-5a2edb3ca635"
        },
        "item": {
          "id": "94c7b97f-05bb-4b3e-9144-1fa7c0b9787b",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "1932cbe4-a9c5-41ef-a181-eaf93c33489d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a4093df-0a41-4019-ac4b-d8eea024a3ed",
        "cursor": {
          "ref": "4e88e797-15e0-4cff-ab07-e8afe5284cc6",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "79e4f532-b19c-4bc5-bb71-9c5e8866425c"
        },
        "item": {
          "id": "2a4093df-0a41-4019-ac4b-d8eea024a3ed",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "49c9d3ec-70f5-474f-90ff-adaf200c4115",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3908db39-495e-4b9b-8458-091d8c050bb6",
        "cursor": {
          "ref": "a2609a07-42cb-4de7-af25-79c58890b9fc",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "96cc6692-69c4-415a-8d41-9f17b62cf705"
        },
        "item": {
          "id": "3908db39-495e-4b9b-8458-091d8c050bb6",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "87cadc82-a43b-4f83-a9bd-6c0204f9f09c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "747b76a9-2462-4eb3-8d97-398507ac6e20",
        "cursor": {
          "ref": "95e4a1a4-3d78-409b-af10-4d633727e779",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "7c17bb33-8237-453e-95a9-9067760f1f6d"
        },
        "item": {
          "id": "747b76a9-2462-4eb3-8d97-398507ac6e20",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "249c47db-f1bc-49d0-a7af-f9cd89265653",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ee295b8-4cc2-4596-9b89-7c402054e1eb",
        "cursor": {
          "ref": "bf854569-b5ef-4ac6-bb3c-67ceaedfe937",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "8b79aa4c-139d-4582-9767-d3ad4a3a6888"
        },
        "item": {
          "id": "6ee295b8-4cc2-4596-9b89-7c402054e1eb",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "7a1a8c6f-df1c-4563-9775-4aa7b8be0ac3",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "91e58c47-68c4-42c2-a3c1-5a515ce8a7ef",
        "cursor": {
          "ref": "1f55e807-ac92-4e11-8425-2151a5400568",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "b623596d-e64c-4e4d-bd25-d5b581ece0cf"
        },
        "item": {
          "id": "91e58c47-68c4-42c2-a3c1-5a515ce8a7ef",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "633c1208-9816-4518-bdca-b2da922c4f31",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "fb490c19-9ed4-4d0c-8508-c3d9ad267686",
        "cursor": {
          "ref": "ff76f69a-6792-4b1e-98ae-2f0b17163346",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "72aea467-95c9-4d12-94db-0b961fd9b4aa"
        },
        "item": {
          "id": "fb490c19-9ed4-4d0c-8508-c3d9ad267686",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "860a44e1-58e0-4306-884b-6842d34655ba",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "f8c6149e-36cf-47cc-8c8c-c0362bdaf4f4",
        "cursor": {
          "ref": "c6bfa27a-ac86-464d-a41e-4c37c3d2f6d1",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "e95ac1c9-7c85-4cab-975a-f8bfbc3c4630"
        },
        "item": {
          "id": "f8c6149e-36cf-47cc-8c8c-c0362bdaf4f4",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "5ceffff6-619c-40c9-a4be-e01a4a187514",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abd42c8d-80c6-40b8-a6a6-69819e4121b2",
        "cursor": {
          "ref": "9f3ffefb-fae6-4f20-a5ea-7bec3215cc81",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "127309c0-0acf-4b30-b11e-7b89c60ccad8"
        },
        "item": {
          "id": "abd42c8d-80c6-40b8-a6a6-69819e4121b2",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "2dd2b508-dc9c-4315-94e9-e19064e93e79",
          "status": "OK",
          "code": 200,
          "responseTime": 75,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "019453d6-10cd-4cf5-81f0-77d77914ce29",
        "cursor": {
          "ref": "93ba609b-d66e-4b58-b522-fbad060b2251",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "4da7537a-dcaf-435e-bd44-239d1eb4e1df"
        },
        "item": {
          "id": "019453d6-10cd-4cf5-81f0-77d77914ce29",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "fc7cbdf2-e65d-4528-bb7f-4e82d74ca3c9",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "166dd77f-7e31-4e4e-81e8-aa79b4517160",
        "cursor": {
          "ref": "a574be8c-896c-427c-8877-c363a353130a",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "873c447e-6696-4705-8cdd-a45a0933cb47"
        },
        "item": {
          "id": "166dd77f-7e31-4e4e-81e8-aa79b4517160",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "cdab3a6e-2082-4c2c-abde-e981cf97c925",
          "status": "OK",
          "code": 200,
          "responseTime": 70,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "9903d63f-9e45-427b-97a7-6a2d6beb38de",
        "cursor": {
          "ref": "760f286f-6df2-4f17-bc85-84e794ff6981",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "901ae2c2-c9e2-485d-b2cc-d95c5d80ff58"
        },
        "item": {
          "id": "9903d63f-9e45-427b-97a7-6a2d6beb38de",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "4434727d-fdb1-4d12-99c3-05e5840e1980",
          "status": "OK",
          "code": 200,
          "responseTime": 77,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "373149f0-8e67-46fb-b2fe-b4224f1a2bee",
        "cursor": {
          "ref": "56bed259-4e13-498e-a52a-cd893742c72d",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "9ab93056-4c21-4665-9003-923b986ececf"
        },
        "item": {
          "id": "373149f0-8e67-46fb-b2fe-b4224f1a2bee",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "efd6edb2-1f42-425f-a8a8-d99d201b915e",
          "status": "OK",
          "code": 200,
          "responseTime": 72,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "7c8aef4a-d41b-4009-8c0c-bef56117eed7",
        "cursor": {
          "ref": "4340cbca-ba51-4452-895b-e1161716b6ac",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "ca28f2d3-d650-4406-86ad-9ce58caec20f"
        },
        "item": {
          "id": "7c8aef4a-d41b-4009-8c0c-bef56117eed7",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "84a67ddf-5ff6-4308-8749-ff021575aac9",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "0b782da5-4c78-4da0-a984-e4c80575e534",
        "cursor": {
          "ref": "20e86fa9-ed4b-4d8a-98bc-e26f81ce2277",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "2beb0733-ebd4-4f02-9984-5fc417a2f146"
        },
        "item": {
          "id": "0b782da5-4c78-4da0-a984-e4c80575e534",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "3141f1cf-38f6-4d7f-ba31-af4b4ad11ce1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b851909a-7c51-49b6-9586-0103d152eb43",
        "cursor": {
          "ref": "2767b335-cabb-410d-a0d3-504508a8ce3f",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "d63106c4-2f25-4fd2-9bc1-5900fbd66167"
        },
        "item": {
          "id": "b851909a-7c51-49b6-9586-0103d152eb43",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "f6ea32b9-3ba5-4e14-b806-01a2d6d3160d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdcf9187-d6c7-41f5-8f30-45160c8dd5ac",
        "cursor": {
          "ref": "618bfee0-6c9a-4049-a331-d8454516799f",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "7e3010fc-c26f-4ce7-9e40-007ddf6b4572"
        },
        "item": {
          "id": "cdcf9187-d6c7-41f5-8f30-45160c8dd5ac",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "170d4623-5e6a-4403-8ad5-ab7fb59e5dec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c060c66-0672-4d73-8ad9-d51413dfbefa",
        "cursor": {
          "ref": "d0537a22-148e-4cfc-bc1b-bd8a3c4d2b2e",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "bd9f4f00-d5cb-49df-852f-4925a4f5419b"
        },
        "item": {
          "id": "4c060c66-0672-4d73-8ad9-d51413dfbefa",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "223f78ac-9c42-408d-a413-030607815759",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af91dcaa-4c99-45bf-85d7-e518b23ad1bb",
        "cursor": {
          "ref": "3e39702f-fdb3-4af7-af80-0daae86b4a0d",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "83cff89b-1b09-4341-8d44-d2a8edbdf606"
        },
        "item": {
          "id": "af91dcaa-4c99-45bf-85d7-e518b23ad1bb",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "05bdf0e6-f594-4fdd-9f52-f965bfd795b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88838af6-f60c-4eb1-96fa-3a938250c3c8",
        "cursor": {
          "ref": "9225cbf5-d34f-4be1-a326-43d46ddba7f8",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "2392d0a8-4a15-4e76-88ad-ebad8ec6b17b"
        },
        "item": {
          "id": "88838af6-f60c-4eb1-96fa-3a938250c3c8",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "aae2069e-3009-499a-ae05-678107d7f8d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20b43f5c-a4b6-48ef-be90-6ac39f0c2fb5",
        "cursor": {
          "ref": "0c53f984-de8d-4329-aab5-90874123373a",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "da137b23-7193-4774-8175-a42e8e1c9776"
        },
        "item": {
          "id": "20b43f5c-a4b6-48ef-be90-6ac39f0c2fb5",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "9f00d45e-a1c8-4add-a80c-2d332e056c6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f81cc34f-36f8-4575-b835-2bcb611202d8",
        "cursor": {
          "ref": "7fd4fcd5-343c-49bf-ae53-eba0e3a0afd7",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "b054bb65-50d2-4b92-a8e7-0f6c0dc300cc"
        },
        "item": {
          "id": "f81cc34f-36f8-4575-b835-2bcb611202d8",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "23d3cc42-adde-4916-bf5d-8eecd890e97d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41f3065d-19e2-48e2-8e98-a459c403d0f5",
        "cursor": {
          "ref": "f0b35ae7-1fce-4f61-99a5-cbb789f4712e",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "5fa0aeb5-660b-400b-b781-61c621f27ebe"
        },
        "item": {
          "id": "41f3065d-19e2-48e2-8e98-a459c403d0f5",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "6a36243c-c0c6-452e-9fac-6161ff10ead0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53f210f7-d828-4f03-bf43-e983289aa739",
        "cursor": {
          "ref": "1f4f83cb-1a83-4a5d-9f93-eca30f6fbadd",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "bc7d2ce5-c6da-4e09-8a4d-4e7fc0d9f6c8"
        },
        "item": {
          "id": "53f210f7-d828-4f03-bf43-e983289aa739",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "5ff842a6-1d76-47bb-99b1-b156cdab5d91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65dbeafa-1eb8-40a1-bc18-b87438da431e",
        "cursor": {
          "ref": "9a11b44c-b667-4a24-91b9-2aed773535e9",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "55273453-e2f2-4720-9c1d-2b3653232508"
        },
        "item": {
          "id": "65dbeafa-1eb8-40a1-bc18-b87438da431e",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "115579e2-f53b-449f-9a56-c84719abb990",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c24b3fc-c75a-4f7c-974a-fbb47770457d",
        "cursor": {
          "ref": "88cdf2df-1331-446c-b820-745cf8697042",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "c789e9c3-8231-4636-9dbb-42a9a9e42af5"
        },
        "item": {
          "id": "3c24b3fc-c75a-4f7c-974a-fbb47770457d",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "2dfa4727-beb7-422e-bfc9-64a16ece588f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09105528-a0f5-4acd-aa8f-735c7e35c7fd",
        "cursor": {
          "ref": "7d83031d-72bc-41a7-8a15-746647361ae0",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "62f2a5aa-1d7c-48e1-ba48-756521b9eb1a"
        },
        "item": {
          "id": "09105528-a0f5-4acd-aa8f-735c7e35c7fd",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "6618daa7-3bf6-4830-803a-51107abe0c91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66ac5e44-dcb9-4a41-9688-97367e401b4f",
        "cursor": {
          "ref": "3d825cae-d7f2-40aa-a4d5-118a06d14754",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "4c3bc8e4-7297-45a3-9a13-f41b8a57c7ad"
        },
        "item": {
          "id": "66ac5e44-dcb9-4a41-9688-97367e401b4f",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "721ad6fb-8027-491f-b7d6-7420e50ab8f7",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "6ed7846b-05fb-41fc-bf7a-879e97735688",
        "cursor": {
          "ref": "c8586fb8-0f85-46c3-a53e-d28778c968bd",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "cacf1916-bfc3-4a8f-8183-2e1c9c90ef56"
        },
        "item": {
          "id": "6ed7846b-05fb-41fc-bf7a-879e97735688",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "42863ccd-d315-4432-a048-8e9f0f8ef436",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "ddd09de4-5f31-4464-9587-f79056bce5e0",
        "cursor": {
          "ref": "823af8f0-cd4c-43ef-961e-cc6ff8ed7f8e",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "48220471-bfb0-4bc9-9779-1b2b5b631ba8"
        },
        "item": {
          "id": "ddd09de4-5f31-4464-9587-f79056bce5e0",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "814a8273-b667-4948-8734-62c7cd45830f",
          "status": "OK",
          "code": 200,
          "responseTime": 75,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "ab2c2765-9e1b-4c9a-a48b-42a7844c3356",
        "cursor": {
          "ref": "87c086ff-1f38-4e82-9068-1e370ea8eae8",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "f44a5859-ef2a-4a03-8461-2b34f1ddceb2"
        },
        "item": {
          "id": "ab2c2765-9e1b-4c9a-a48b-42a7844c3356",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "9066af4e-d7d5-403f-99cf-76d2d9b84b45",
          "status": "OK",
          "code": 200,
          "responseTime": 68,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "f03c6631-7048-4915-9de4-124e38dd2d7c",
        "cursor": {
          "ref": "bd8b606a-9c6d-46c0-80ca-a8b6ad4fb5ba",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "bca93884-0270-4d9e-af07-b66aa0d692dc"
        },
        "item": {
          "id": "f03c6631-7048-4915-9de4-124e38dd2d7c",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "0222434a-a724-471e-bd22-b4e5b2d605ea",
          "status": "OK",
          "code": 200,
          "responseTime": 88,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "4741bbc2-33a3-406f-8b65-aa93e4cbc162",
        "cursor": {
          "ref": "2630b00f-b5fd-4c57-96d2-4545a38ca365",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "79e01555-d2e2-41a5-a281-624c8ae56792"
        },
        "item": {
          "id": "4741bbc2-33a3-406f-8b65-aa93e4cbc162",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "0e8e5e44-7654-4e50-a847-0ca9892e1acb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "013be9b6-4eca-4a3b-9253-529790332a15",
        "cursor": {
          "ref": "6458fa45-2c01-47ec-8deb-3cd020238a3e",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "93de995d-7cd8-4bb3-900d-753ab3ab41be"
        },
        "item": {
          "id": "013be9b6-4eca-4a3b-9253-529790332a15",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "9ff4a0e9-dd67-40d3-81b4-d55c9e1cd929",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fac7693f-ee72-442b-808c-1d909da31283",
        "cursor": {
          "ref": "e6ffa469-41c4-4f8c-9b82-cf07ad273988",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "025c5080-e72f-436b-bca3-6c7054c6b932"
        },
        "item": {
          "id": "fac7693f-ee72-442b-808c-1d909da31283",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "f1cd7645-9190-4db3-a170-64ff2209952c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4aca94ae-a19f-4448-adf0-8095339d4b3c",
        "cursor": {
          "ref": "3ff7168c-b16c-40e4-bd66-4b302962e24b",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "961595a7-72a9-457d-8a64-681c1bb05b24"
        },
        "item": {
          "id": "4aca94ae-a19f-4448-adf0-8095339d4b3c",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "2a057f23-6d9a-427d-95ab-adb6417c2d77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70d47ba4-5a27-491a-82ec-6fad43b2e12f",
        "cursor": {
          "ref": "60888407-630c-4a19-bcf3-8efdfb7fb816",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "5686f430-c56b-451d-aaef-7a20a346c33a"
        },
        "item": {
          "id": "70d47ba4-5a27-491a-82ec-6fad43b2e12f",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "42d96a58-cf04-4e5a-8f1d-f74d2d7b92b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c21c542-ea5a-41e6-823d-999deeb96053",
        "cursor": {
          "ref": "09af3f28-6b89-4b54-8964-b1260f3a7af6",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "8bb95462-0644-485c-9c16-b62041565514"
        },
        "item": {
          "id": "9c21c542-ea5a-41e6-823d-999deeb96053",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "1d15a854-256a-4a03-a6eb-dbfe5d3959dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3b70c55-b940-40b4-af40-da063201d15f",
        "cursor": {
          "ref": "9c5e4579-1224-427d-a245-846c096cf963",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "3509f509-69bb-4529-9c1e-58d1430935a7"
        },
        "item": {
          "id": "d3b70c55-b940-40b4-af40-da063201d15f",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "45038991-acee-4fa4-8527-7676ec6ff757",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba8f5974-b385-4ef3-9fe4-e9fdcba93a9b",
        "cursor": {
          "ref": "8a864daa-8ee4-4d48-9827-f27f7f11ceb0",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "ad901f5b-aa04-416f-a38f-e7d68a89b5ae"
        },
        "item": {
          "id": "ba8f5974-b385-4ef3-9fe4-e9fdcba93a9b",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "3f3cfff3-15d8-4f42-a1ca-16151a60d364",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffa34580-5a43-4cf6-9790-b3f94c2ff8c3",
        "cursor": {
          "ref": "65c1bb44-6095-405a-8adc-75f07e037757",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "bc7aa910-b078-4d67-a3bc-fe043b88e297"
        },
        "item": {
          "id": "ffa34580-5a43-4cf6-9790-b3f94c2ff8c3",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "cc166c2a-a918-4053-8eaa-057b73e7e6a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "619fc434-9bd8-4ea1-951e-579dc1ffaf52",
        "cursor": {
          "ref": "906c724a-c918-4b81-a62d-732542939d50",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "ebeceb5d-97b4-4ac7-b939-24d1df85697b"
        },
        "item": {
          "id": "619fc434-9bd8-4ea1-951e-579dc1ffaf52",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "4d987acd-2498-4c3f-a617-50a20e96ea09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "435b8bc6-afec-4946-aeae-f95e07def8fe",
        "cursor": {
          "ref": "cf6a7cc1-ed1c-468e-bba0-fa86f68d1489",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "cbd1b3c6-eadb-4da0-9f48-303da069a032"
        },
        "item": {
          "id": "435b8bc6-afec-4946-aeae-f95e07def8fe",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "27dd51bd-efdd-445a-aba0-f531e9b4a679",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26aba1be-e6b9-4b25-a74f-fd917162fed1",
        "cursor": {
          "ref": "f711b98f-ec34-4c60-841f-dc296a2d7428",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "8b5a7cd5-e76f-4b25-b264-0547e78494ee"
        },
        "item": {
          "id": "26aba1be-e6b9-4b25-a74f-fd917162fed1",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "435b6f55-2d7c-4e5e-8de8-346a9e508bda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35c202b6-8a98-4162-a7bd-480c7e9056db",
        "cursor": {
          "ref": "c8bdd554-83ba-4df1-93dd-02e2526e5679",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "b15c5fa6-0324-4b87-aa4a-e9c67440eb39"
        },
        "item": {
          "id": "35c202b6-8a98-4162-a7bd-480c7e9056db",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "3b58bd99-3ae4-42a5-bd74-bc4361476cd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2a7b86a-82cb-4c83-b9ea-ef95201d5584",
        "cursor": {
          "ref": "43480ee1-26b5-40bb-85db-f822973fd31b",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "1bccba30-6fed-4e83-80d8-8b11f1562f4e"
        },
        "item": {
          "id": "c2a7b86a-82cb-4c83-b9ea-ef95201d5584",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "a5caab40-e071-4caf-b214-eb991ea1f973",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ad7a1ed-06cf-48ef-9b40-d5415b0dc2b1",
        "cursor": {
          "ref": "704c7015-9204-4177-8eea-e1ecc28d028b",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "d8f16f15-6fa2-4101-a3ec-9888c5deef3c"
        },
        "item": {
          "id": "7ad7a1ed-06cf-48ef-9b40-d5415b0dc2b1",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "5f4f1ccc-7d6c-4b42-ad58-f2614dbe65cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6c93d43-21b0-4b0d-9837-52e69af3a3fd",
        "cursor": {
          "ref": "c1d6cdc2-6cef-4a91-bb6f-c21d3ac8d5d6",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "4f86d785-d367-43d4-b378-735f8075ffe9"
        },
        "item": {
          "id": "c6c93d43-21b0-4b0d-9837-52e69af3a3fd",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "e54d7819-c412-4d6b-9893-b8a772c12f75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f8dca06-8fb6-40bb-b149-718931123cef",
        "cursor": {
          "ref": "10adf9f6-82ce-446e-bb9b-e38ca1fed69b",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "801ce20a-ac4f-47e1-bf08-a6031629ba15"
        },
        "item": {
          "id": "8f8dca06-8fb6-40bb-b149-718931123cef",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "b052ff75-4c8f-43e4-b41f-19770ba101aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16c0084d-52de-48da-a4ac-70d11eb89e26",
        "cursor": {
          "ref": "8c466938-521e-4d46-80ca-a8ee82160ba0",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "6bc8c0cf-f260-4ce0-94f6-bb2953d2b5fb"
        },
        "item": {
          "id": "16c0084d-52de-48da-a4ac-70d11eb89e26",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "503b5895-3787-40aa-a6cc-d40915a02358",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01695529-f795-4eee-b302-b4f3e55192b5",
        "cursor": {
          "ref": "1fc51d71-7dba-4fe7-b94f-411400e4c0f0",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "db00fd19-95af-4279-bcbc-076e66d75f91"
        },
        "item": {
          "id": "01695529-f795-4eee-b302-b4f3e55192b5",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "25867aa7-d501-4278-9269-ca678640760f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be590681-41b2-4f7a-9f2f-d4e9d3ab44d8",
        "cursor": {
          "ref": "11eb16cf-bf56-4149-b73a-b9d708586695",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "5e3062b2-73ec-4e48-b43d-4ecf97aaa073"
        },
        "item": {
          "id": "be590681-41b2-4f7a-9f2f-d4e9d3ab44d8",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "702b5095-775e-4cf2-9ffc-4f9c12dddc95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e831014d-8bbc-4441-b274-eeefea12c695",
        "cursor": {
          "ref": "08ad87e6-b368-416a-8dc9-46fad9940a1a",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "3a88ea16-cf24-48b6-96ca-e2ba37462c03"
        },
        "item": {
          "id": "e831014d-8bbc-4441-b274-eeefea12c695",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "2e080e23-c46a-4d76-830d-7ebf8d999198",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfb754f0-bbb1-41ee-9d7a-623c62379c27",
        "cursor": {
          "ref": "f4d93a80-b0c7-4ac8-b10e-21fc9ac43b2e",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "7a4f6c42-72f5-4a44-8924-8bf001d9bf7d"
        },
        "item": {
          "id": "bfb754f0-bbb1-41ee-9d7a-623c62379c27",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "13ef55aa-0135-4b5f-b2e9-9b216edefcd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1b63733-5e59-49d7-b7af-b422f196ba23",
        "cursor": {
          "ref": "ef535d39-86c6-496b-a31e-38a59593b5d6",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "a3de216f-6a2b-4b18-b4ea-a0a80c912bed"
        },
        "item": {
          "id": "e1b63733-5e59-49d7-b7af-b422f196ba23",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "fab332d7-c1f7-4f9b-b9c3-93b9b06ee892",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fca45af5-fd26-4c2d-8196-c00dc19005c1",
        "cursor": {
          "ref": "a1b0a03b-f6d2-4cd8-b044-e577473219d3",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "0674c9cc-3aa7-4735-88f4-0734e7c31ec0"
        },
        "item": {
          "id": "fca45af5-fd26-4c2d-8196-c00dc19005c1",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "08920a99-c967-4984-94dc-aa3b264bc95c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9152001b-82e4-4a52-8fa0-3a1273e2d962",
        "cursor": {
          "ref": "2cff053c-11dc-4ba8-a0cb-cfa828b50c54",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "8fad30ee-4984-478a-9291-7eab71000648"
        },
        "item": {
          "id": "9152001b-82e4-4a52-8fa0-3a1273e2d962",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "f13e717f-7c1b-40ee-874f-fd1d7709b5bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95e6e4d1-0912-4645-bb70-d890b2e27d6e",
        "cursor": {
          "ref": "90b9aa41-3b99-466f-adde-3aa00fa10c02",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "eb59bce9-3a37-4e69-b55a-acc742706a81"
        },
        "item": {
          "id": "95e6e4d1-0912-4645-bb70-d890b2e27d6e",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "0769a612-1865-48eb-baaf-b8f8b0f966ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87b21e76-92d7-4dac-9ee5-a620cfb6f9eb",
        "cursor": {
          "ref": "22f78463-dbf0-4748-a77e-1386127bcf75",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "2110fffc-a5e9-4aeb-a607-f2d4a6510567"
        },
        "item": {
          "id": "87b21e76-92d7-4dac-9ee5-a620cfb6f9eb",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "76f59564-b18b-4d83-ac88-19db07ea3759",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2812510c-49be-4399-9729-13086f1453ff",
        "cursor": {
          "ref": "21c382c6-d65c-4ec1-883c-e2dccad482e4",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "57110596-dea1-4391-8535-476f391b6a5c"
        },
        "item": {
          "id": "2812510c-49be-4399-9729-13086f1453ff",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "e7f67013-6635-4572-bb7c-4aa86056d332",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf33af29-522c-43da-b141-54703932fba2",
        "cursor": {
          "ref": "d66f9aca-3fd6-408e-b783-5ae86691161b",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "4d596383-a74b-454f-8376-b908cc54e66b"
        },
        "item": {
          "id": "bf33af29-522c-43da-b141-54703932fba2",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "f2ea7304-9ffc-4e68-adf0-44b5a1115f05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adc28ec2-f920-4fe5-84b7-7ee1380299da",
        "cursor": {
          "ref": "cb17c4f5-76fe-46ce-acfc-a08d92ebd652",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "a887b21e-56dc-4478-b224-d7c6d17105f7"
        },
        "item": {
          "id": "adc28ec2-f920-4fe5-84b7-7ee1380299da",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "1a0951e3-5d45-49e1-8d32-7ec017300fe3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2eef18c1-5917-49f8-a318-d407ae11ce6b",
        "cursor": {
          "ref": "1854b61b-2d60-4d2e-88db-4c3af28279d9",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "cd01a9c6-031b-4bb2-938a-81464d7a2279"
        },
        "item": {
          "id": "2eef18c1-5917-49f8-a318-d407ae11ce6b",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "cfa68847-3dae-40ed-b3bd-bfdd5bbae7f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e506697c-f76d-4fdb-86da-a0f06c293c68",
        "cursor": {
          "ref": "f47f2af0-f802-40d7-b4df-a37d8b01bc6e",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "95c2a6f0-f137-413c-bab3-3f29dd8b39b0"
        },
        "item": {
          "id": "e506697c-f76d-4fdb-86da-a0f06c293c68",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "ba40af35-50b3-4f9a-a885-f5341203ec51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8b2df96-d3ed-4411-9c9f-e0f49b12e8e8",
        "cursor": {
          "ref": "de6c90c7-16c1-434c-a5bd-aa0b94f63def",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "089030d5-6d41-4207-b948-82f3d46aa450"
        },
        "item": {
          "id": "f8b2df96-d3ed-4411-9c9f-e0f49b12e8e8",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "bd05c977-79d1-453a-ae05-ee57010dc53c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0241eeda-e0ab-4521-9857-7606be656690",
        "cursor": {
          "ref": "d5bec139-0c1c-45a3-b7e1-4eeff0ef9581",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "1c5812de-bc13-4356-9e6c-c5d45b650eaa"
        },
        "item": {
          "id": "0241eeda-e0ab-4521-9857-7606be656690",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "822070e4-0f30-4b0a-a50a-364da26ae344",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f177cd40-15ca-4452-9d65-bb75a58085e9",
        "cursor": {
          "ref": "c164f4e1-0c50-44d1-a980-c45bf4c8c01d",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "2dee5cab-b33d-4e7e-9486-3a6457420d7c"
        },
        "item": {
          "id": "f177cd40-15ca-4452-9d65-bb75a58085e9",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "df4fff33-b89a-4f1d-80a2-13a8b756f6b1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca865168-faef-4653-8723-0f8f599917ed",
        "cursor": {
          "ref": "a3732fdb-5dc4-4a89-bd46-8f5298f3ef02",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "5a86b715-4854-404f-8de8-6c131585dcdc"
        },
        "item": {
          "id": "ca865168-faef-4653-8723-0f8f599917ed",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "22f5c4e9-bb88-4491-8318-80cb3f63c5ca",
          "status": "OK",
          "code": 200,
          "responseTime": 88,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "ebd34210-fe46-42d5-ac05-19bb44b8fcd6",
        "cursor": {
          "ref": "3324228b-549a-446f-91bb-97372af751d2",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "e4c51a84-c48c-440e-99d7-c3355c0afb0f"
        },
        "item": {
          "id": "ebd34210-fe46-42d5-ac05-19bb44b8fcd6",
          "name": "credentials_verify"
        },
        "response": {
          "id": "24279023-1644-45fa-9c49-5b6502f4fb9e",
          "status": "OK",
          "code": 200,
          "responseTime": 104,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "88407807-9ebe-449e-9fde-30cc489f9991",
        "cursor": {
          "ref": "59b0b374-7ae4-4c07-b6b0-3bd88c063a1d",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "359b80e8-dbba-49ce-97cf-632e967d4aff"
        },
        "item": {
          "id": "88407807-9ebe-449e-9fde-30cc489f9991",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "adab0c94-cfa5-43a3-900d-2428ba38bf41",
          "status": "OK",
          "code": 200,
          "responseTime": 145,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "b54ac7fe-31f2-47a6-a9d1-82723aca608a",
        "cursor": {
          "ref": "82c2fd44-e513-45d5-8387-f8bcb83db76c",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "fc776867-1e38-45f3-a646-d9743a59722a"
        },
        "item": {
          "id": "b54ac7fe-31f2-47a6-a9d1-82723aca608a",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "7c76b461-3549-4b24-9a0e-60aabe97effc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b54ac7fe-31f2-47a6-a9d1-82723aca608a",
        "cursor": {
          "ref": "82c2fd44-e513-45d5-8387-f8bcb83db76c",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "fc776867-1e38-45f3-a646-d9743a59722a"
        },
        "item": {
          "id": "b54ac7fe-31f2-47a6-a9d1-82723aca608a",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "7c76b461-3549-4b24-9a0e-60aabe97effc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "612b5fcd-0386-46b6-aac5-905ebf9dd623",
        "cursor": {
          "ref": "07dee9bb-8091-49c1-af46-bc8610ff9675",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "782c17db-106e-4c9f-bc51-c9f0d0ccefbd"
        },
        "item": {
          "id": "612b5fcd-0386-46b6-aac5-905ebf9dd623",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "7b56d8cc-0b83-4f02-ae64-eb70f585ca62",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d90d7b33-e4e1-4e0f-bb7e-125ebb72591c",
        "cursor": {
          "ref": "438ea01c-1f88-4615-9571-2c0acf432a25",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "f098776b-cb02-4c28-aae7-cb003089683e"
        },
        "item": {
          "id": "d90d7b33-e4e1-4e0f-bb7e-125ebb72591c",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "f45aa3b3-624d-44f7-ad4f-b755f94447d2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}