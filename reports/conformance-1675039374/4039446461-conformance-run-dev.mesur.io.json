{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "07c8542f-1306-47c1-9b5b-b0d340962d7a",
        "name": "Clear Cache",
        "item": [
          {
            "id": "6baa6da5-023d-451d-a6dc-1144cf24c46a",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0108dbb4-27b1-48d6-872b-f454b8012292",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "20ea4bbf-4f21-485f-a2f7-6dd7c62d39e5"
                }
              }
            ]
          },
          {
            "id": "50487143-e540-4cbb-8a2a-51af8802ebf2",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "55408df7-3e8a-4771-bd80-f2743a9845ba",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "bb1587d7-2c2b-4115-a656-2d05fb99235b"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "af98a7b3-f3ad-488b-b51a-1d2fb9bb8dca",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "522c0b03-b9a2-446d-8640-8b53c40b1693",
            "name": "Positive Testing",
            "item": [
              {
                "id": "aa76c8af-9717-4bd9-b2ee-aec8780e356a",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6114d1ee-6f83-40a6-97ee-bb9c6b30f396",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4cd7cdb7-1b08-4c1d-b589-a7899e158f66"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1d14de91-e1e0-419e-bbf4-b8374e782e4b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e4b1a246-508a-448f-b629-a0868668af76"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "6a1157c0-a1e8-451b-918d-9f168dfef537",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a8cc16cd-94a7-4892-89b6-a0599e02a604"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0d076c95-f53e-4f91-97f0-76ac5b252d96",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "e21ab6d2-c4af-4798-8c89-136d1a634d44"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a5bc25c6-4000-432f-91cd-d39754cb5d13",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3664b4c1-a0d4-4534-a776-d8abad233552"
            }
          }
        ]
      },
      {
        "id": "218af851-d297-4d9c-b93a-ce8cd0849d0c",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "89e119ba-95d2-4fb6-a010-92927ee76f9c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bb9220cb-3ecc-47a8-8951-58b5efcd9406",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "bdbe6d17-e33c-4cfe-a15a-55b334cef0da",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "142777d4-23b7-4227-a0d4-1c48ca67f7b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dfbf03c8-0a8b-4a92-a21c-4c95aa6d76d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b28b9e98-401f-4a45-8edd-a8bcf4d32d58",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36beb3a4-47cb-4284-8c5c-5d2ad34de144",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "958917f1-a36b-42f8-9b83-140208589ebb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5b46df4-d4af-4746-a2b2-42040cc5769c",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "542df557-e690-4e16-b51d-7da76f1ddcc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c6a947c1-ac84-4d0e-a856-0ff1edbba5cd"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "6feb90c7-915d-40a8-9edd-e5883048cf69",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "00a9b4d5-d67d-4861-a755-f41e70f79d1a",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c77aa60b-3623-4683-b225-8f5625db687b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "df4f88f0-d862-4b84-b838-d2862cbc4fbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b402c7a-98bb-4ae3-bd9f-ca156eedead7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d27df0b7-8d79-4f5a-9c9a-c76db28bccba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69a77d9c-44b2-4c72-bce5-a1a97cbd0845",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac1cb272-206c-498b-bebb-e17d2847d4b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "776b2809-8608-47d9-ab55-6c8155f9d7bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2333c5c6-4be6-4e90-9689-0c09a59fc90c",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "81346d01-6862-4041-a1b3-fbd3bf5604dd"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "8727905b-e355-4d79-b242-e70be94295af",
            "name": "Positive Testing",
            "item": [
              {
                "id": "168ab432-820f-4e9b-8aa4-c583c294b692",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "73b01088-1b26-4473-af1f-fc028e4270e5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "3232f1b4-771d-47ed-86b3-4dcbf04acf4d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a59ecbdf-df5e-4e7a-9b26-94a02ce926b8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "0e4f431a-bdc6-47ba-be76-8b961f28958a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e2952a06-8935-4441-81fc-fb41d6f3692d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d259141f-65a8-41a8-b58f-b27077525bf8"
            }
          }
        ]
      },
      {
        "id": "97496e73-3681-4dfd-93fb-deac6a6ec9fd",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "dd785ca1-1799-414c-8b8a-797d9932f346",
            "name": "Negative Testing",
            "item": [
              {
                "id": "af9f5dc4-5c78-4bab-9efc-11d882de00c8",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "bb70f8f8-0133-4579-b11d-124713e53f0b",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35e5d975-f411-4e74-bb10-56ee9300ccb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27d86423-fccd-4baf-a02d-acc1910d8499"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44d0d8fe-794f-4863-af6d-79ed92634900",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4bde3198-3f25-4523-bf1e-896bb889b2c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10d68196-59df-4b27-b979-809bab26f555",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db61a616-e7e7-4962-bd45-9f3f058fea40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61257061-fe5a-4fc9-85d7-f914446d7728"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9b8315c-7d06-4a99-8ecd-0498fa62955c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9369c7fd-6e26-473e-9eb6-c1df3db60721"
                        }
                      }
                    ]
                  },
                  {
                    "id": "736a5482-ecb9-4f55-a3bd-5137db95576d",
                    "name": "credentials_issue:credential.@context:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edd30641-6406-4d6c-9cbe-7b33ea270693",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4befdcfc-739c-40ca-bae2-afee71c60d44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8c533dd-5aa6-4bcd-b2db-23d0ca61f98e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must contain \"https://w3id.org/traceability/v1\"",
                            "    req.credential[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c26cef43-87e6-45eb-a971-131b91c2bb20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b6e21f6-2b7a-4c12-bdb3-418328c7d1a0",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "caa8cf71-62ea-46cb-91fc-f14d7e0fee18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f406d863-0b5f-45b9-9344-fb499f3ec95d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5771a37a-a531-4714-ba12-74c357082f01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6da3d6c4-be23-4477-9e66-49baa3f6768f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e07f278f-4ac0-4bce-8cdf-fea86283dfbe",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e434530-552a-43a4-8381-45601cdddeaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c22063a-e2f1-4de1-8763-9d4a8129034f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa4ebb79-7659-42a3-b1f3-88166aa085b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "42a6e6c7-cd43-41bf-81ea-7505ee00ff56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b0d080d-818e-4350-9920-22d70d238e78",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a28701c1-31ec-4201-88b2-d73a47316dd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb7afd04-bcd0-447e-b648-4b4460d38008"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "147e3e59-91cf-4e6a-9fa7-6cc5c618b77a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3f49f5f9-de58-4e99-8791-b9039f1a91fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85540df9-d8b1-4867-8410-86d4570d92e4",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4023419e-753f-4e31-9965-f4b33a62c0bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24838ca1-5304-45a1-951d-44d995e44cad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "900003d2-7f29-49d6-9fd4-e30bd702ef1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d1d89a02-c502-4b1b-ae9d-682fbd388f59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38146289-6031-4747-822c-7e4a4b12b2e6",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e269c77f-fd08-4053-b6dd-43f3f3029ef4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42dbe09c-0e8a-4775-8fe1-15d2e80c991f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "117309be-5df1-4c5e-9a8c-c1c6bc51c986",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "70317cab-81ef-4dd4-967e-2caf93596c6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d90e7e5-b232-4b81-831c-a2a64c0b1561",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e694bce-a4dd-45e7-bf57-34ef7584d2cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c988f18-203f-4a9b-b919-7310bdd5cf1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2d017e5-9a84-46f8-b134-3496609b4cf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4414773b-ca34-4bdb-9499-b5df7399fb11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9dd51e7-4c31-4364-a363-72b15d29597d",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5007270d-2f59-4940-825a-208767b27280",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64f02a7e-8e71-425e-ac9e-e8b13a057dd9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2ee1eca-3255-4349-8b4e-7213ddee0955",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7b286cab-28e7-4f31-836d-92b3fa7083c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2a5c495-cf85-407d-b8c1-ae17233755cc",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eebdbda3-2596-4c99-8e6e-54bbdd2dc676",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d955a6a-dad5-4265-8ca4-a479215f911f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "237e5fd0-2a72-46f1-b3b8-9893e23a17da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5532bd4c-f9e3-44de-834d-e15c73c1abc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afa4bd1e-76c0-4138-91e6-4b03159c4fcf",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "239d18c9-dad3-4a6d-a49b-f5478fc5e803",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56333280-43cc-4f98-9cc8-f7a74cf512aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4ee78e1-7af1-4f33-83db-5f69837ad040",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1c6c8db1-d122-4e58-ae0f-92fd4bf2bbd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3356e0d0-d21b-48ff-8b61-e5fa9dc07809",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7483a348-b5e7-48ef-99cd-5a495e2ca8dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f508ec53-080f-45e6-97b7-d6ab7ae6fd7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "535eefe4-d1cf-42a1-9728-2db0f3753e25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "69a4c916-4b2b-4693-bc5c-8f629b872fa5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "886a2c98-bfab-44cf-befc-5d0a783bb3f5",
                    "name": "credentials_issue:credential.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b8bfdb5-643f-4b8d-890b-eac481f595eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4929d79-23b2-4942-91c0-76dcafedd8c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e04809ef-0636-4502-82b0-53840b900de1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.id is a required property",
                            "    delete req.credential.id;",
                            "}));"
                          ],
                          "_lastExecutionId": "568c513e-5455-4eb1-9696-995db53a5cce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a95595b0-f938-41ef-b751-44b29e4b08bd",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64550a3d-3f9a-422d-98bb-5decafe8f6c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5aabf6c3-0ab5-4702-9ba2-39f81a31366a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7f65fb2-353e-4256-b04b-1d100252e9b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d239d165-e986-44d1-b946-af31547560ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ae46cc7-6579-4ea4-9e09-39b24731802b",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b292d8a1-7f70-449e-90a4-594b18e30075",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4cec6623-8a9b-4c61-a7c7-56439905d446"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96680a20-8564-4587-af48-749ea9c9e38d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "de09a2f9-7113-4331-ad8a-8088aceebdaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae70dd7f-83dd-445c-9221-862f8f6ca238",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eae73dd1-253f-4eda-80bc-4b2d1fa37351",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc6f53d5-5d17-4523-b031-eb4f1a9fe5ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0657796c-b147-4f8d-8e1f-8fd38a114754",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4f248d24-c8c2-429c-ad09-ab3538ad1d64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce8ea12a-78f0-41e4-ba95-641df1cdfb88",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02545e24-da51-41cc-b47c-1a8e5399fa36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9627e89d-6254-4863-9a45-caf5a0fcf530"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "422c6efe-e4bd-457d-9ada-1f4b343836d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a4ea3252-a489-4347-aaae-b3a509fe18b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "689134ee-dadb-492c-9eda-d7383035195a",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04220c5e-fde0-4b3d-bf08-fd00071ae2b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10858cf5-2aae-4247-a6df-c7620d21ec0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "572c2227-a4ff-4d23-9a0c-ce44161e1286",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d7d9db2f-c412-4dd4-8df4-0d68380269cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5243ae7-ddf5-4d59-961e-7a05158f462e",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7bb874f-419b-43a6-8028-089fc2e3e694",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65fab42d-34f7-4408-98b5-64a854753651"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f17b50d9-d945-4d79-8ee6-1f814687a92a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "151cec5c-8cfe-4157-b3c2-52b00a39a17b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bea6a13-9cf7-4bbd-87e2-bb56c2e7cd0f",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "949c35ab-471a-4d7e-bb10-a459d6825e65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c01d05f-cb92-4444-b64a-a036d22f1280"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d25a9ac7-6b80-47b8-8c16-d6c8acc35482",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8a62d917-a895-413d-b4b1-ae1211b1e026"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57f83d01-5c99-4188-a80a-b182fcbafbe9",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3eb77bdb-4905-40a1-a1f5-85e1c895d87b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "618a23a1-f859-4a0c-8f8b-8897297c4084"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e3135ac-b4db-4c81-a727-727b908d17d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e5395114-8bf2-4d4c-b7dc-ae52ba077bfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc6d4f4a-9ea1-4b77-b401-3dd9e768270e",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c3692c2-02ff-427c-b78d-9f74c03dfa36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd9d4613-a9b6-489f-a211-1ac31ce1ab98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32066c41-53ca-444e-8233-288eb84d9255",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9bb3c63e-1d77-402c-8552-a5ced4ab7f9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d226d9e-0e2b-4493-8d51-9372ac40b316",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73cab393-c763-41a9-ace0-32187ad36b2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb4b8129-59f3-4431-b314-6cd836836794"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d05a1c6f-ec5a-4bc9-8bf9-bb64b6a6604a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fa808e04-6b3f-4a3e-9455-86be1ce8773c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b3e3c1e-c486-4efe-9264-ffd00d7c7831",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e65d3311-12e2-4b17-a54d-d4c9080b7dda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d307039-5f98-4ca1-9785-fdfa2e02a2bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a23099ea-186d-4457-88d6-c5fea143a4cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "42e437e2-3148-43d3-bd92-3fa251cb9fd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac19f764-95ef-4fd8-9fda-55409637348b",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da734e42-6181-4ae5-8339-6b00e4106b35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "893bc52b-adca-4b4e-ba87-a05589d8d784"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff40f976-4509-4409-a709-3d5678cafdae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "a18c7495-efcd-49be-afc8-a0c7cee6ab6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4776681-9ee0-41fa-8ac1-ca4557b25b25",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fb94287-a21e-4f02-80a7-a0e2c3d68e14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8b592ce-110e-4e6c-9de8-43d9429e8284"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bd721e1-f5e5-4ca9-82a9-39eb2d4f1c7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7f67bf49-187e-414b-a602-f3357baaf906"
                        }
                      }
                    ]
                  },
                  {
                    "id": "451a7850-0063-46a9-9213-5da9521d28c9",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c32c709-c371-4220-8742-006ab71f6d9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c07c143-0610-48f4-99b5-c8d54aef3d65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "561f6732-f2ac-45a1-af96-53eba5b90d88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3c8867b5-e1f9-45f2-8f8f-3f41c0cdbbf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f9ae054-25c5-4a28-89d5-4801024aab49",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9860373-6a4d-42bc-b19a-3c0d5c86733c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38814afa-21e4-4d6f-9aec-97e5d701ad0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d42c84c4-5522-40ee-b582-0f1794e824a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4642f3d3-f14c-424b-887d-3d278bded742"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71475032-00d1-409f-ba08-03c299ce8205",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e47c29ce-0278-4bed-9096-f776b6fec917",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53dc5e3d-cce8-40ce-bc0e-0e4f5098d9f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "218e9465-ba4b-4678-bf38-909ec10f9b17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "aa96b492-b1fd-4f12-9c45-1641458482e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b06bf2b-9be3-47fa-b6ad-e2adff16ffe6",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3671fa58-356d-4fe7-b3f6-91918590c955",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79da407f-c3d8-4711-9493-ef86e7359f9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fad7c610-bdcd-4019-8557-b44adc9ed3ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ad0dc79c-e08e-4de7-aefb-cd5a61b4e1b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "491571ef-a5de-44bf-a6ff-0ab580b7c032",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea67c041-1036-49c8-a49e-ded274aacb6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f675fcc-dbe3-45f1-a563-518718f4ca35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b56745e-f04e-4be8-bedf-76fc1e10774d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "168609e0-fa40-443c-915a-c43576de39c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71a8248a-8c62-4a1a-8c8e-04a524406366",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "434fc2c5-4e84-4899-a215-5ef414aeaf5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2508f4f-a09a-4420-8bfa-33827ad71a50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf2ab691-8a01-4949-ba2a-999cde1bd4d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "947cd7f5-8277-4123-8628-535705890c8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ae052ef-8df2-4c81-8255-cbfdbc47c1e2",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0deff71-e95d-40a3-b40d-83495535c22d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8bd7b4d-b8fe-4450-ac57-0cb5a22f2990"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7db36b10-6232-4218-ad78-535f30b0c092",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c5f69869-dcd4-4545-81d5-d23225bffb3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2aeb95c6-8e73-45fe-9023-9aebd05362a9",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3856153b-4dee-4a6c-bf4e-23ba7190db29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46833033-a1fa-4081-b1cf-e10244c2bb1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65b163dd-fa78-45cc-a39b-fae6008e08f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a41d4d19-535f-4e85-aad6-858cee3e5a43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28107948-f2a0-4800-9772-bf00caebb637",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c357f994-5191-407c-a7d9-c05d7c8f5708",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f4d1b36-174f-430e-88c5-73e35cc7eaf5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bc77730-0ba6-4040-b795-18906c28e4a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a72fb807-678f-4e0d-a136-83be67da26cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "faa8b8cf-75f6-47c5-8f13-886ef9ea9d23",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8cf4a0b-74d8-4c75-bba8-0aaca749e8a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73947eec-5601-445d-96df-8474df36ecca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "faa39c9e-e34a-4e0c-9829-52981821a8b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "c7f97420-b557-47bc-8066-ff375c8a5e51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0bea5d6-9ac4-4f61-a11b-621c8a74ac3e",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b5f5560-9144-43ba-93eb-38dda8eea3af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bf78b003-7f9e-458f-b690-2a8eedf2ad89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6c54a79-0a92-4904-b932-d6704a3799e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6b5ea0be-5232-48ca-9c4b-ce8adb35e1a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "744c6c90-466f-4840-bcd5-f3c87ae413ee",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9472f3b-f28f-4edf-97ed-31ebe161738d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4b7490c-9a28-499e-aa88-b0844fe27f92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c666131-61cf-4507-9146-a0183e321d03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6e634b76-83a2-4b0b-b290-b0811ca65f40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dd5437d-2a18-4074-93ee-25c63b7c8fa5",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c49d52bb-0271-4b36-b8c5-f57a0cc0931d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8a3078a-4b4b-4085-a5c2-a5ef5ddc35c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0158df9f-a767-4125-ab72-a55b0868026f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "2f6f7ee1-1f72-492d-b015-61f4ae47a2fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "658f955b-c369-4e3a-b275-871078b5fa83",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39f83ad5-c5cb-4583-a918-04ccf323bb0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6edca88-2c89-41c4-9a0c-52416985cac6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15d0033a-cad7-4700-86f1-3cfe236797a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "fbcfc9af-166b-4ef2-9b87-24df54262f7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82e63d59-bca2-4f59-8124-942cde8cb4b8",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7b7b244-a03a-4e0b-86b2-a16cc05b93c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a05e648c-27d0-4ea1-84a4-408eef27902d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84ef706e-5b30-47d1-b06a-ef2b72697b0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "8a798844-3141-462f-bfa1-a99564e8a9e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9069612e-2b82-461b-b73a-62aa428881eb",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24b994d9-89a2-473d-9194-c46199adb5e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb268298-cd6b-4508-8539-bb0890eb1243"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b711354-4370-473d-af4b-581df8c399c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a649b05f-d0f9-43b3-8057-10a25e9d7697"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef7c1679-b24a-4173-abf5-788459ab31e3",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cfa5843-f62a-4708-8b70-ed5b32dea3e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edf22d0d-9eac-4c19-850c-0b81c6e3725b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee243fb6-dd3c-482c-a52d-13c0559fc1c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "260b1643-c8b8-4ff0-af98-81de365690a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9200c44a-40f8-45f4-83c2-3d5365536e44",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a21e5179-d0f6-4317-aaa5-c2e599ee54bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b39ea1e9-c0d7-4fbf-9274-8a3cc659546b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ff2672f-7f67-4b3e-af94-0fc1f83564ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "5dc0aeda-704b-4f42-8c87-4cd0640781d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20202897-0372-41e9-9fb1-2492b401eaf2",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8f21014-4860-44e4-be59-a33e2b55999d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "552eed8e-023f-4806-915b-a9dfef70edf9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d06f2451-6cd3-4269-a5ff-b5c3697c1cdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "627da29b-8dd2-4c70-850d-9aefead54349"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d59e851-ea32-44a5-8397-da7869f69d14",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4aecbc8-e747-4be1-a922-37dfd8361ce4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a22a8027-2594-4009-b1c4-3903465aa4d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db1017bf-d88a-4138-a631-fa2b9dfc96b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1c723e08-5a20-4f15-b0aa-5b00bcc919a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b64a652e-fa2f-4204-849a-e29c3fbcad17",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54999569-6507-4b93-acbc-674823d06612",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "975feace-dae5-4b8e-9bf5-8385e4406c4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cee2d0fd-5ed5-48e7-89b4-17c6b96e90d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2f1854b4-20db-4ff6-b88a-1d635500d3cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0582b78-67e5-4a96-9d12-a9916b14655d",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d8609d4-d2d3-49b8-96af-0544c62e58d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f92c8139-5672-4eca-ade9-f196b6be3ded"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dc40c16-005f-454a-8a3f-2fca8c7d957e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "074e3b52-2944-4666-a3e1-a966f9ddb622"
                        }
                      }
                    ]
                  },
                  {
                    "id": "684dda21-f93c-4fc1-91af-a2615ab45375",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8f9e376-3124-414c-98a0-cb987dde2c23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9079ce17-43af-4482-a507-f6bfde9867f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78b41b60-4e19-46e2-9852-286690f8082d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ffafa3bb-4bab-4e21-b9dd-8491ca146712"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0f61218-6cc6-4607-b340-57a8cea9d5ec",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87ab97ca-4660-440a-8f8d-b0ae12fb128c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78afe414-b7ba-4634-a9e2-076b1740b0d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a6b41a3-a878-40a6-8e8d-de63c8865b02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "42f28066-304b-40eb-8f37-70eb13f0f508"
                        }
                      }
                    ]
                  },
                  {
                    "id": "219b42e0-d99a-47dc-8926-c010c11a5cf9",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cd0751a-c0d5-4f1d-9cd3-beb6488eb2a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80463a7a-50a4-4e3c-9e67-829d5170f895"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96c2d977-790a-407b-8145-099a319396b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "90e9571e-5fc8-403b-88e5-f18c20097b2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26a2f407-682d-4898-8541-351d065997c5",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60426aae-9b91-463d-ab1a-ea3f2f8ae3e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3da3f10b-8318-4391-8135-2982fd9e405a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be3e54dd-a6c4-49d9-9f01-7d6865d58227",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "b76492da-e170-459f-a916-c2803899dd01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7d86763-9460-4fc2-bf45-afc3ce5c6115",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ab8fe26-f735-4f65-8e13-1ecb7af0caf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdc61985-0d4f-4b59-a0a9-79054296f09a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54438cf7-20db-42c7-96f1-97b7870655b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c98ca99c-75ff-4de6-859e-54aa52d5952d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d17319c-a6e0-43ca-98d1-73d0b7f35b3a",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85a6c69c-2ea0-4630-83ab-02857dc018b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c905d4fd-b6f2-456b-a28e-577396cd9f3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67d66562-3aed-484a-949f-d3584265b87f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "034433bd-15a6-4fd6-b725-022bb3d327fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb5bb507-b913-42cf-bcb7-eb58f7511f24",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe091ef5-3df4-46ac-aec9-9e636cec116d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3b320a3-b20a-4790-b357-90a84e289a23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de2e6ca5-f7ee-4ac3-b62c-e46b2d3c72dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "39528371-7d8e-492f-ab91-8d88e13bb0f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5663f959-b0c2-4698-a831-1ee182281178",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4fe328c-0bea-409d-8a3b-1fa2c15d4e60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69c7f20c-744e-4dd1-9fe0-4ce479232be2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5464f414-2735-43d5-90cf-8da93e3cf53b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "467bcd1a-9687-4fb9-89c3-954aeb3e1f18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "879785b0-3e38-4e48-949d-bb0df3ac02a5",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1ec4618-a28c-4f47-919f-4effb30ab8de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc8068c3-2f43-49c6-9e19-8cfd4b0607fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58229bb3-232e-47c2-8473-8ec086ab5f0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "13a67351-6267-4558-b650-cea418c24ac8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bad2dfc-0006-4465-884a-9d8c646aa58d",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "346dee03-a3d8-47c1-8625-1e843909c03a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12e77b5e-25c6-4cad-9cf3-8d1f855a0268"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e21d57ff-8b78-4604-8314-5f55aa4ebcb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "90f7e6d0-9053-49c6-aee9-4c4422ef67e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01356638-5477-46f1-a5f6-894c7c94cb9a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7028e70f-acd9-4759-8be2-ed67c3182a65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a086de4-9502-481d-ad27-7d5b5aeeec39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b0a1bda-0023-4037-8ea8-d963e019cd9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "b217e6d5-7048-42e7-bac2-fc71a210d21d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb24a5e9-ebc6-4508-bb8c-c454b19d7f4c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c294aec-a510-4300-bacc-37d628586bd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a88b85ba-f400-4291-92db-0fc36934668f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2675eea-b2b6-4640-9724-7d7814b48459",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "27769ea6-1a8d-4216-8546-f6f84f56d747"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb91b1f8-9745-4ffb-a12a-d82ae8b43b7a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3333cf45-e436-4c86-9990-d98498d91162",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db4c02a0-986d-4d79-84db-6885c5bffdc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e63e6694-05e5-4242-bcf8-138e66aa8436",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "c0932215-2a94-49a6-9e67-546d29cee7ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "432531d5-cc4e-4e4c-930b-07a78cc68b6b",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61ed492d-7843-4ced-8b4b-f678530d91e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c5dc0f8-03b6-4cff-8db6-f9879432b90c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf8276fc-1ab1-44b1-82a8-b61e58ad2612",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "95e0decd-b188-488f-a99d-1b0d1996e345"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92377e12-fe3b-44a9-b074-ea7c1cf6ce30",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06bb881d-1895-4e82-a2df-dc6af400f3d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e7d170c-e441-481b-9b14-eb5d34e43d36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9300ed23-a0fb-4d54-bf33-6edb9c0d8900",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "3f813357-cc8e-42a9-acec-f7d075437750"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cda3e08-5a65-493e-877c-0c7ee0ac0c80",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d649a35-6dcf-476a-b21b-3aa172c8cadb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "717bbc49-b349-4a54-a860-e8ed859bdd85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2482a6f-b063-4f73-a37b-847cb1337f47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "2aed1104-c0b1-407b-b9e3-16b62176bd5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "985cbc20-9352-4f40-8ed7-cbdfce69cff8",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abbffd8c-b50c-4aa8-8029-2e1849803281",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eef6d9d2-28f1-42e8-87a8-5c4ed39cdcb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "202934b5-0df8-4bb5-a50f-7492d0580c92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cc04ff28-3428-455b-a7ab-f5fb6f3356e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b92e9662-8cf6-4753-bc24-8b9e9f1a9fdd",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36ead2b5-d328-4637-9072-9a9612f627de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cce36f3-511b-4580-9a26-cb28f4645178"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec605208-3b21-4dfc-af31-6cc7b1ea5b4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d527ccb5-0812-46b7-a8b0-c4b914098736"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7371091a-e442-4e36-a0b8-e2d5ffb555bc",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e075962-498e-4222-9d14-27f55b802bdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ca79080-e8fc-48e1-8bd7-19d879bcec20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16bb12ff-0080-42f9-8b49-fa1938aabe4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b7c2ed31-df73-495c-aace-64826d5ba139"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2065de99-edf5-4c59-b8d3-c80c18acd396",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37264ec1-346a-4052-bcbe-ab34cd0de248",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c8c70fe-d107-40ec-919d-6fd2be8c6c07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d0695f5-9bde-4b20-a052-81e07ec79dde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "36fee70f-4768-4236-b1c1-8386c9753d50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e8e32e2-1033-4516-8b54-32f1de46e80a",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e56bd08a-64f7-44bd-8124-76840ff77e43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60e3f345-c712-43ba-b7c9-cb6d6c4e4fe1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "527df776-130e-4b90-a8ea-306dd818582a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "d5129417-7b7b-482d-a778-3711cc12baef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdbe9835-2135-4066-8749-8b6398e5be97",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a867c34-0190-47e8-b758-391d28101ebf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db133396-ecef-4913-bd3c-44fa185ba402"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2716808b-51c6-4c1c-9840-582ff7e09414",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "66740a0b-ccd8-4d90-80c7-abf4ac8bec9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18e20d0f-1db3-43c0-888c-2ce5e8ea0a12",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e307863-506c-418d-9890-39fa5592a442",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26d1d206-eb18-438a-bbfa-062623327308"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5e1e7bb-76a3-4fd2-adfe-a25e5814063e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5711a516-2e13-411a-b24b-fd5d14613922"
                        }
                      }
                    ]
                  },
                  {
                    "id": "296b87f3-478f-4d5b-b58f-a1cc0565c6ba",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88173f0b-82ce-4e8e-b95f-cf87c5cf66c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc847381-9ba9-47a8-b798-805efa28a2fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfa3a4ac-7e47-4927-891f-0c9405bff7e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f92b7f91-cdb3-4c8e-9252-c9f3eee72b6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0cbcb9b-c3ce-45cf-a7e2-383774a8ca91",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5fdd334-c744-4e68-9e1e-f0fb1d3977ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f8ac7a4-19d2-49da-b3cc-b8e187e4c1d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b248775d-7c7c-4acb-8579-ce4e1454c837",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "38a1fff0-1edb-4983-ae69-f0b5442fb5a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f64f74d-9784-4c78-afec-c251a33c929c",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab20731d-f9be-47ee-9ecc-d5043c992783",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe10ab81-6ee9-4625-ad3a-e61b1f3665e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bdf86df-d881-4e78-bb76-bf2d4822b2ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b257c94b-204c-4834-bb86-8c7771e2c934"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc20790e-8651-49e4-9beb-c37c708e4d1b",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcb2d121-f880-4b0c-989f-5d1a1bfe16bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d99fbced-c7fc-43bb-8d73-293abff9c43a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba8f117b-f989-43eb-9627-1c5c348101e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "71d75345-a150-4443-a484-0d28edaff68e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61bc0c28-9514-4efb-9337-38010f27283c",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a88deee-a212-486d-9f02-4ff7d0118943",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8137f56b-41ce-4165-9dfa-b6ae05302f51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7909cc04-52f1-4668-b015-fa3d1361f53a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0b9a57bc-cd13-4456-aa63-985eb6e02634"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b925e79-aa8f-4b6e-8315-a5e8699a08a7",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "568514dc-f04c-483a-994e-ab93a224edd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "059dac24-5b79-4087-857e-6d328e9f4f64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f34865a-2a1a-4ad3-8831-b912aee86799",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b14214a0-e27d-49d8-ba55-10c5d16aee71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8381df18-1e93-47a3-8b2c-dfb7338d8761",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aee4015e-f5e1-4e69-b09e-cd149c7f1a95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19d6e9ef-dbf4-408b-9b9e-530a6759c965"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdb236f1-32f3-4022-bf46-4864e4c964d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "25c86ea2-446e-40e4-92ba-27e8139e58c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c97300f9-339f-4bcb-b463-1386d930a908",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16d1e35c-26e5-4a59-b049-3c8a8700ec05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c8b7c50-57c4-4325-8f46-70fc41be5128"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "962830bb-8cf7-4e20-9390-9549c7d94d9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "76837487-0b1c-4552-a478-941f08f54dc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9af5dae4-1061-47bc-8355-06cdab6b19fc",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad53e36a-99f5-41bd-b0fd-ef7c8b697de3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b51f725-6a90-4c17-843e-cc14cc83a00e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5410955-598c-41e7-883c-791468e9afe9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "da97efd9-7e88-48c1-b6bd-a6d8713b2e95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b9ed6c1-d261-41ed-85f1-47777e3c2abb",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "785f570b-a3f6-46d3-84f7-08343ad4151b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a41a7588-fa6d-43ea-9daf-e8c23c739c8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7165fcc-065b-41e2-9260-93a4f78a8b60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c59cb145-5ad3-427f-a312-0f8748c944ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a694f1f1-7563-40a3-aba3-f6f92fca531d",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d7a7338-d5b1-4eed-affb-74247fe4b933",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "686af884-1392-47b3-bc4e-3928ba788f95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01761ce9-24ba-4048-bf02-b2ee097451b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "66c6728b-df46-474d-9dec-18dadbd7a449"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84ae5a17-43c1-4efe-951b-2ac367fa3c57",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ac254a3-a971-4149-abaa-8872a07b2196",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4556f299-0c9a-4ba2-b836-b4ee64f66afa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2202c5f-4980-4973-ba34-65e56fd399cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "78e55371-0b17-40a7-87b3-14595b5278fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fbd6dff-bd48-4e24-9d4d-46f3f4a597d8",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34bb34c6-0ab0-4b11-b185-b6deda46940b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c8a19e5-133e-4b0d-ac05-7cadc31c0ed3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f747851-c705-4f77-90fe-d48b4bdaf32b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "47da5ae9-3c19-4658-a6b7-47ff0fc60c29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed2ba5b7-f1c9-483a-8e91-87b18ea0e79a",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebabc144-7054-47c8-a1fa-049c5d59d7dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d117cfa4-e838-4e92-a072-ec7bf3f6bd0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45bd3cd4-87ec-4388-ad69-52b9db39ce31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d137b36a-9246-4e8c-8dea-09a1294e019e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20fabf0d-6e6b-4627-b0db-1800e4547b33",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47f4ad28-7323-45e1-9bae-48d4269da59c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fec51ac-0904-4f21-b159-808807ed97e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0be4e3c3-a5b0-4168-9acb-9b63e209594f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "01d6998e-5928-4c78-b7dc-8f9a91eadf79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfa6fbe6-204a-4e9d-8ddf-eec6c23cefdc",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "783356f2-f0e4-4e1a-bde0-3316e649901b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60645fac-d518-4619-a240-11a7dfaa3339"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6ac1b14-1953-448b-a0d5-aa43f97b06fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ce822915-ad82-4fb4-bb34-9f8d845448d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b81a74e-e756-43bd-9003-a04fb8b18b85",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f4ab726-55d9-45b4-a23e-fe2fbfe73932",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6728cd7a-2b6d-41fb-8681-1f7ee2301ef1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b41e55f-ad44-4e9a-b506-8ac22212273d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "b0fe5195-f4c1-4711-92fa-0ae00374a832"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8930ead6-d0b0-44d5-aafd-14d7131b12e1",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d85e6b2-cd58-4bb6-a14e-d6bf502810e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f2034bb-f368-486a-bfe7-81bdef399edd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc355f35-3a24-414a-820a-d236cc316d27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "4f4ad098-3dfe-4667-890e-f6f77af0c7cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed393412-cc63-4b75-88e7-3074dcc25618",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b109d32a-a92d-4e68-9ead-4e78b1d20696",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad22a746-4492-4100-a8b9-7888ca01ae53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "948a8fad-3222-4b3d-85fe-3eb3dd877385",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "bb531333-a002-498b-a608-724b4247aead"
                        }
                      }
                    ]
                  },
                  {
                    "id": "102709e1-0cd8-4973-beac-fb66a92b6367",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c7f0866-58d4-4812-a89a-455398dfde03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8bab5fd-d628-4411-9706-c1136a8e8151"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ec0a803-95b1-443a-8ccb-8b7bc5e636ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "b6eb744b-5db5-4785-bc06-71827eecb920"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dfc0248-5e34-4199-9a2a-4b6829a4e6e8",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a4f9cc6-caae-4032-9d2f-6ccf82faaf5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ad692f6-d978-4d34-86e4-359d20f7c313"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c11ec4c3-5ee9-4074-9772-853cd85210d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "6bfc9e19-c6d3-48ba-ab42-3d44f2405b33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2da67c2d-3632-4527-b88e-ebdf9ba9d9bb",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9396142f-10fd-4ce6-9459-973c1db1a76d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "e7d7ac46-21de-48d6-adaf-bde0f24a1681"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a46899f8-a45a-4c6b-87b0-e6ca9c5b8e24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "7c1962ef-61ef-4681-a775-8b175ee4d9be"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "deb1ef0d-4b68-4537-bdd6-1712dbb56e3c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9c8ebd4d-31d2-474d-83f8-d211ed554656",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6961299-798a-44c9-b1ec-9accf408f95f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e0e50ac8-fa2a-49f1-820c-2971a21bb0dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1760856-1c54-4e5a-8f41-7b4671b248b5",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "8734fab2-c380-4afc-9752-d4cb6f4029ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ca7a9af-9c2f-4224-b62d-0768bc67a3b1",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b2002ef-2ca7-409d-9629-ace6753067f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "eb31af7a-90b6-466c-a495-9c0600111009"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bf943c1-fd6a-47cb-a295-f3a0fbbd4af0",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "19922a27-94ac-436a-ab80-423d991ae8a2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "721de56e-0610-4868-8b4d-61ee3604f014",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "12f029d0-bb19-4da0-9a91-e269adec0e01"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e98e9e95-8a45-405d-b252-3feb67afa1c0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "26cef2f4-172c-4cab-bdd5-59a4ebb708b0"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "dc560611-7fc8-4e42-8756-26b6bd3228d3",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "afb1f253-bf36-4f29-b90e-074c97dbb89d"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c8d79a99-9b09-4422-817c-d0352c119eb7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c1e42eac-9649-4fcc-9b90-3745f3273f06"
                }
              }
            ]
          },
          {
            "id": "0f629a71-6f9d-47c2-9f1f-0cc20428c869",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ace1261c-0874-4afe-a20e-d4d2d245d375",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b2635a2e-a393-4a37-8a3e-66c52c146977",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "309f7d9d-73c2-4142-8a4d-800b525c5064"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "74abb8a0-1519-4eef-aa8b-64b0e2134e13",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "46acaf84-1c96-47af-9637-20e2613ee759"
                    }
                  }
                ]
              },
              {
                "id": "46d62245-cac7-4ee6-ab7b-e384638757ef",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "788a88fe-7518-4a44-9bcd-3c4355978e63",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3d708bdb-0661-4a9a-8814-b471338b6e3e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d6b5f689-b780-48e6-b031-238dccf4aa33",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "0e0b9316-5c66-48c7-a308-98339b02d845"
                    }
                  }
                ]
              },
              {
                "id": "2433aa37-620f-4c93-a63d-04832bdd2008",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f9e3891d-dfb4-446c-902f-43bc0bbf56b2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0371cfe0-1f5b-43af-b472-b0cbd46f682e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "364950e5-506f-4423-a57b-ae3804a277af",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "c1e5094e-69f6-417f-a9ee-474cad465a56"
                    }
                  }
                ]
              },
              {
                "id": "829ebf87-a7fa-4baf-b126-8169de53ca18",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a1b46de3-026a-44b4-bafc-fe8a962c40a0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b5d1b990-6c50-4c5f-8c24-ea8ee9b5df98"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8293ebcf-1768-47d4-a179-eb3574c71db9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "bf1f30c4-485d-4fc7-b050-476d7aef3657"
                    }
                  }
                ]
              },
              {
                "id": "fbec52e2-9f70-4117-95b6-051107f5d7ef",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9971aca9-1ad2-476f-a904-2b6ff4f597f5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4895b538-d5ee-49ef-994b-a4752ac881f4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b80caca2-de47-4078-96a4-f52bdb4368bf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "04340841-ecd9-42f6-a945-a9e164d18858"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "102b66f2-4ae8-4b77-b480-903b7dac5472",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f3b5b9da-7224-49a6-9720-a1945fd6cc5f"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d4f3db07-5996-4e48-984d-5a571282997e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "89c637f7-c7fa-4cc9-a23f-13c23707ef90"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3398d089-43ef-4ece-b363-1f155d4272e2",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "d542b7af-f636-4a8a-86f7-26485ecdeb4b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "dc6aad57-bc13-45bf-bbfb-fb92f7e387f0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d6ecf1d3-5033-4311-b23f-86e4b1999df3"
            }
          }
        ]
      },
      {
        "id": "175d03f0-2150-48f1-afa4-bf310bfddec2",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "568e1edc-6f5b-4d5b-8507-db27076dc882",
            "name": "Negative Testing",
            "item": [
              {
                "id": "be6fdb4d-4fb7-4d0f-87a6-d42b167fafa6",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "55fbd93e-f6df-4be7-93f7-a9a866bdf90a",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b290fb4-e70f-4184-95e0-e7576f293eed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b7469bc-0341-425b-8932-8dea12d72356"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38928d5b-c528-483d-ac4e-ce7c4960a3ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "c791b401-2cd8-4069-be39-9fe4d03b49ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcdf22c6-a69e-444a-bf04-04d2ca8619b4",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0277ecfb-c947-4344-8add-88d4bc419988",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0734faa6-c5d3-4547-bce5-6757b39529bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02683998-33d8-46c0-bc80-d00a8765b854",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0853e23f-ada7-403c-b0cf-99d2f32bdd64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90567d2f-37d5-4ef5-8774-694fae5feb1f",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5431cf2-8cfa-4c15-8c2e-5b7dd1052f10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "400fa9a1-d1c2-4880-807b-644785fbb3c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c71c1ed7-f25b-4fbf-bb3d-ed4cb6eda145",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5aed14d8-a38a-4dd5-ba94-818ed6ce0308"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9294b6e-430c-4b9a-b34a-1624b2bec084",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5146f02a-c41b-4eb8-8724-77ce54a0eef5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29997514-b22a-4b37-ba2b-10cef1996317"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b622e5b1-4429-49e1-9c1c-3a014a9916c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "71a474ed-e934-4ddd-99a7-c226f574affa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "059903ff-bb19-45fc-b727-d136f2ad1664",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cc17d4c-6cab-48a0-8a39-dc1277a7647f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f757664d-ade3-4f61-8811-563919fad49a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51146a5f-b5e5-4804-bb67-163782e56035",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0d0485b6-5733-4322-8c09-bf0dc4530d1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf5f6251-4f26-4854-8a3c-f5d0df5ddd69",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a36b0e7-059b-463a-905c-b01342bca43b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1664c63-2389-4584-8906-55cbb5d5a4ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be6a463f-bdd7-463a-9d90-4b6d0e4f6550",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3a921cab-cf5e-4793-abb8-2059539e9e8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce132ea7-652a-404d-a1c4-9caa7e09087b",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb004606-bbf0-4902-9da7-f2e26dcfc783",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df297a49-68c4-4dd7-96d1-6107825d550c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be040e16-e83a-4a45-beb9-055bf5989dfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "4688cefd-1c24-49e4-929c-cbe0ea59deb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d33b879-f779-459c-91a2-eba7ff253b53",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45e682e7-d8d6-41a8-8b47-6d5b2faad245",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "568582a3-01a3-40da-86b7-1be6547a16d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "283dd1c8-9c6f-4ff0-8ebd-98dfb848425c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "dd65f7c9-c248-49e6-9fd0-555ac0b53b5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afda76eb-f3be-47e4-ae9b-a51e8af52d99",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d47f8bbd-81a1-4c04-b1b2-9eb84aa5ffd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c82459c2-4985-427a-9924-eef0c4172ad3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1207657f-77f8-40e5-a67d-c1b2efcf3af3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "704c9479-1d38-41f9-b699-699e875e501f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "351696ed-62c4-42b0-98cc-8c67a91ab731",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66bcca6e-1f6f-4f54-9b31-ac9d223ff52c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "759d1930-10e0-4ca9-be3d-5e5602962c92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05bf5527-ede6-43ec-af40-3206a1b5eddc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8faa35d6-6e00-4ec6-ae2c-e2884fcc840b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fee7193c-0da6-4283-ae79-eab355b3dd99",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75d61173-a140-406f-98d6-dc510199df8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fd22f9c-2e7d-44d8-a3b2-8a927726de2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f5cbe22-201e-4698-b149-73bd3b385913",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "ae3cff3d-a500-47de-90bc-63b8d52e0f31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af0a75ab-a392-4f97-a1e2-ffb2287e6b4c",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dea41dda-7467-4836-b30b-9074ffe0aa49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4e51bc3-b241-4350-af7d-695b5d49b115"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d48f39b-792a-41fc-b6e1-54dd918e56fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cdd2c5cf-1cc4-4f51-b3a6-97f2805f62bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ca44e3e-cb68-48e2-995b-e1b15919326d",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f889a3d-767d-4e8e-8c51-88d2a58a95c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6523522-1596-45bf-85ec-d08c90872ca4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ea86de4-e48b-40c4-9587-9b42354dbd24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "70487829-3f38-4e85-a083-247a2b4c634f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b8d5bbe-de03-48ec-bee6-b24883f94503",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9c750de-fb64-4d1c-9791-cfd9cffe6094",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c8c9e9f-0754-4252-9b9d-e5c629acf80d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39c2767d-1b24-4990-a4c8-ccd184b4f6f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "fc37006d-5dcb-4eaf-9a36-84dd5a26998e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c47790b4-b822-415d-90dc-52335fc723ce",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b2c6e1c-20d4-406b-8ca4-a19e532213d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f295506a-47b3-450a-92a5-46ebb3bd33a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8171762-0f60-4e55-8524-a2c148007562",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "87bcb3f1-9ece-4c5b-82df-af178862d850"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae60f885-d812-473c-bb19-fd8f4264b08d",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5be6b12a-1808-41d8-b7d5-9444e4f6b2a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa941e47-fa8e-470f-afb4-39051d862aa7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1eb54077-ea48-4418-8d8f-1824ce54f2d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "ba9aa929-dc5f-4fdd-a5c4-57bd18066e6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abe1a63c-0aa1-405b-99db-ee6e15666854",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a0b7f85-2135-4c1d-ae6d-e89aff7cb431",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1790aaa8-f3d9-474a-b110-8d86e38cbc35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42754883-4525-4eec-b7a3-d785d55070ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "113d2a40-27c6-4ec7-a791-b72528e13266"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52d493ba-db89-40b8-8e25-e15ebfdaec01",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1cf657f-3df4-4fbf-9fb8-60aa812fb854",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14ab158a-7230-43b0-9e08-f17be0baf16e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fd3e535-41c8-4ae6-8fd5-6bee2f3c89bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e095baad-b314-461d-90f5-ffd8a715a67b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cc0e15b-62fb-42c7-8ac2-d46b9ff61a36",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c6daf46-703c-4861-9324-8d696a702558",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74a840f3-c6e3-4d29-8b85-45f9b2ff0e22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cf7198d-8e96-454a-8197-f83ec1d530f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ea301ff3-d885-4503-b375-f677c54c2931"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e486b7f-97a9-4068-9c55-3d7b2ec5bc65",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a76487f0-4467-4b3e-859d-98d2246de5e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab14ff97-394a-4ed2-8c39-849cd7f6e592"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53ade98c-fdb9-41da-b019-88d8ed885644",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6dd639bc-f9ff-4809-950c-084e6a81395a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20249d75-b400-4c3a-914a-bdfe9c178c27",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f449481a-5ce1-4af9-ab4a-2f125405b484",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61ed8a26-1907-4510-9b1d-920df1cf14b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76be33d1-ec02-4714-a6af-24f51991ff1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "23d0213c-12fe-4baf-b587-34cea73469cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ce96869-d081-48c4-9ded-db9222367a8c",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8b9916f-2c4f-4633-b5b0-3262d7cb9b63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3639d463-a0c5-49e4-befe-48329eec2c2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bfa98f1-37e1-48f3-bd28-ca89980f2418",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cf95432a-d924-4c33-9a52-961d0caff6f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "937cbd2c-55ed-4b28-9a62-0b170c4344b7",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b375ab99-8718-41bd-bbcf-92bc75bfc2c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f684c30-696a-49bf-9dbc-0070e13bd484"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eec1d878-01cc-4293-a4e2-a7f42db4192b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1f24cb67-b0a2-4138-a163-a60cde362116"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7357b721-3c6b-4f57-a724-941ba1610d11",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b60b052d-4ea5-4b4f-9115-db1743d02da4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7ecb2fd-3b37-403a-9639-663fcf94fdad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62e57cbd-3ebe-4f8d-96df-6bb41961731b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "46264a70-a7bd-4567-adef-9d101277a861"
                        }
                      }
                    ]
                  },
                  {
                    "id": "938390a1-4492-4639-92d7-034fc7f5e981",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c0ef0e1-8343-4ac5-b007-95d2d422058d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a40f890c-e6b8-48df-9313-bd2712d1daaf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f41f997d-bb20-4749-a290-61279c9a503d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "491f1f0c-5431-4a7c-940b-d49dd5a70f09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "068b0a81-1cad-407a-9988-12a4e593b622",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a1ab778-1160-41c0-a81f-039f77b8b9b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23a8b3c4-9d76-4ac3-a8d8-a7e28fa26b09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fb167a4-caae-4a27-a06f-0d052aa5a2d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0c865b61-012a-4ebd-871b-cecf1cecaf2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92e13dc3-c599-4daa-a290-3dc416f58d49",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78a191f2-0679-4b2c-ad62-419ce8e296eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8767427c-6ac3-4c43-bf50-dbbf1ff9183e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fe24f2f-73cc-4d1f-b590-7c525fe26aad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ff462612-3310-44b2-a1b4-3134d200af11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f827b13-18ff-4deb-bce6-67bf3e022623",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3b4c17f-fb04-4abe-9567-8fdc456ae1be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "955a7338-3681-49db-9008-cec5fb0b00de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd678ee9-09bc-4e0e-98cb-c1509d00671f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "848268ab-dcd0-4523-beb7-c61803988bd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dec9d37-eddc-4932-a20c-ed1aad0cdf8b",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a9c58d6-d748-459e-b50b-74044a5b0c74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d1c7639-c55d-45d4-bf79-f107a626f64e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9807ade1-ee28-4247-8f13-0887fd9e39a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2e056eff-e274-4369-980f-3d808e758efa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f673b9e3-f38a-4aa9-a1d8-83e474b31bdf",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc5662fe-0d19-4b78-8d8d-b408599cf67b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c2509e3-e773-4dd7-a158-2712f4149d99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "956ecebf-ab6e-47e4-bca3-6d6d0247a615",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "59f3e0b1-948d-4e72-b963-d1c7463dbb8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adf7ce03-22aa-4b64-8207-566583dcd0c4",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bae90ece-b274-4f56-ac94-5ef46037a5d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36cbc2ed-9a38-40bc-9c8f-1c083a44b073"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e33edf6-da9e-4de0-ae6b-32010bb3005d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1cc8aaa1-2f10-4aeb-a0f3-80f602ed4d03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc83318d-3c8f-43a7-b8be-7af01c15fb4b",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbd93852-fce8-4154-9be5-f5227b8cbb24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fc105af-ecab-40a1-9d7b-7a8e222dd1cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f7b419a-e824-4edf-88fc-7451cf22976c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3746a6d8-1a61-4414-9946-be4c35250809"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ac859ebe-26db-461d-9fa5-54e074a8efbf",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4ce75432-db6d-482e-a88c-473d3bbc1e49",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cae5833-96b3-40b9-a825-ee26921fbe71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec5dcefc-a52a-4a55-8ef5-d1fd4bc6ec1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e42fe1af-a094-48ee-8b88-af3492cfe2f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a6bff032-7567-4ea6-9219-97ff04223b4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0403f54f-b15d-4c1f-9ac3-9ec6668b5f7f",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ba89252-b244-47a5-a303-2adea269ee3b",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "8f643394-30ca-4fc7-b2d6-68a4e1f75a32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f129dd1-b397-40bd-9957-5f739c722245",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2b3a0537-510e-4ec7-be70-e98f3ddc06cb"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bf4cb57c-baf4-4667-b03d-c21d94fe033b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8ca390cd-ec41-43f4-b90a-0d08a1415de0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6e78b369-492a-41a5-adfb-19e7601c91f5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "165eeefb-e165-4321-a058-17dcfe40b698"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4b05f08b-71a9-40cf-bc54-96c50ca8c04d",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "1f18e68e-609c-407d-9123-43b63f000925"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "43049726-cdfa-4ea7-811f-79b8c6597d03",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "edf024dd-46fa-4545-92a5-fd88be4cb63e"
            }
          }
        ]
      },
      {
        "id": "6f45c88d-bcb6-4dbb-a01b-1bb1f9db7cae",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "9fcc0b9a-b2cb-484b-9a9e-542e7f643c28",
            "name": "Negative Testing",
            "item": [
              {
                "id": "56c87c69-44b4-42ea-b976-fbd0a7c0cc9c",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "c9fd726e-4abd-4284-890f-b5e3ab5c5f81",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1ab377f-50ff-44aa-9cce-a647e439d385",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5024ec21-fc5a-474e-b504-faa6204f9bdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dab7340d-48bd-4009-8915-693748d4f4dd",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b7fc886-b6e4-432d-9ca9-a8b2d0830e6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60207524-7169-45f1-8ede-f8b4ff3af149"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d411bb34-123d-42d2-b26e-c01fcbb5c2cc",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a283efa-6fad-46b6-9e79-7e75fb8d9a1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99c4356e-5be6-4e55-8ad3-1192e37cc70d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "357eadd6-d7c5-4156-a7a1-2092c86eeadc",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "827e2cca-4451-42ed-9ac5-81aace50fc9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b3999d6-d473-47b7-b8eb-7512156ff7ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bc8d4fb-de87-4284-b57f-d677395cd775",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3397bca1-f834-49b7-a7c1-204a03e36b2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0496b0b-d41a-4d22-b5bc-f82225a6b769"
                        }
                      }
                    ]
                  },
                  {
                    "id": "643639bd-e11c-43d6-89a0-86916199e9b6",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dabe557-e4a1-45f6-9d02-1bb04c132a45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7f4a226-39e1-4f78-8101-4f9193d211a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b737da2f-b2c6-4cad-b5aa-8e0633cf700a",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1fee994-941e-48fd-8360-006ff5d20cd7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4135dba4-a9a2-4857-b00a-a16be6dd2991"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4236486d-fccf-4e7b-b095-b111546ae990",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6221c954-5aa7-41b0-909a-f2eb338f6dec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0a4044b-497b-496c-965b-bb23c2f82656",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebde0c06-c8e2-473d-9c7b-57b5e5b445d8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "71dd9f4e-46a2-4872-a1e0-162ed539ceef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4fcb084-a2e8-4480-a050-42cb773187d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b0a6a28-4bb7-4ab4-b7f7-d8d7be523987"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0326c5f-1430-45c1-bf04-81bdf63a23fb",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a34be6d-c290-458f-8b1e-40c71ee325ab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c933c3b-e679-4a60-9d14-0215f6213ebb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca94c6fc-b9de-4f88-9245-57bff749baa9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "853dcc62-8b83-48dd-acd8-9d4fbb9ab946"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4b970f7-e2aa-469b-bb19-5d58acdbeb7c",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98d6b2e4-0e4e-43cf-9e17-6c23bfd8e3b5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d12404ca-57a0-4de4-9823-8d05122d41fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8eb42e2-3fb8-4473-b31c-4ef3d23e7244",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ca783ce-23e4-41ea-8224-ad95ea663673"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e4f1a55-2b17-4995-b19e-6e9b5da2df57",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5f26fdb-08ec-47c1-a7d3-2e2fe0583bba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1a935bf-deef-4df2-b308-80d8f821943a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3f8e1b9-93fa-47ca-9c80-946156a967a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "873163ca-d507-4357-92c9-0301f3aacfce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06ea1487-3aac-4182-b581-880f16c2faf0",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a46a085e-32af-4b51-abdb-15f6f97351c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e6e8329-539b-4010-a81e-ac816bb31c80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23167273-b9a9-43a8-88c3-0cddb0d9992a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48c5f063-039b-4443-bd66-706286d9f3a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "587699bd-3994-437a-aa72-716a2364e8a2",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "541b533a-6d30-47cd-a272-4b0b70c54c6d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "db5ca310-0bcb-4bb1-8168-7bb394bd227d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "468a3305-ba9f-43ba-921d-dd4478fc5871",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3530de89-a259-4975-9385-e9075ac7030b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "652a3cd4-62c3-45d5-af2b-bddb46a37106",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "865e350e-4535-47a1-b26a-78e08bae1cd4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "25b89a1d-8dbf-419d-bbac-a599b8095683"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5604b8a0-e00b-4d86-b708-30438e7e3b93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53881c2e-8d69-4cd6-8c63-96ae10bda626"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51aaa2fe-18df-49e8-a910-f15a4041aefe",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18dce195-9f35-4e12-8629-a8d125812758",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "792537ae-85a9-48cb-a4de-393251902962"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76633e6b-02d4-4eef-8e8c-5fb86da75a5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2c52265-e05d-4c28-b5cb-497332b1414c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "055a0f24-222a-4f7c-9fbb-f26bf43ba0f1",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a58827bd-af5f-42a3-94d1-159ffc185b8b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "78bec686-ef80-4166-896d-c75d877a0199"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "613bd6ff-7ff1-4f53-9f3f-a3dbfb9bcaab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b32810a-dcbb-4a44-a6a5-d2246c82c99c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9092dd45-3af7-4681-a9cd-e100ee94dc30",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03fa01e4-e177-447c-aa65-17504dc20359",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7866c66-53c3-41d6-8355-74788d277d67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7038c262-f75c-4a1f-add8-174f0d0d1413",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "182098e9-4e11-47e9-8552-64bae0f0e920"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b92a95b5-834a-438f-a265-0887c79019ba",
                    "name": "credentials_verify:vc:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8728d793-bab3-40d7-af06-9f4cf1c00035",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6ef604e-fa54-4d1e-9f36-20b71d283026"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c50f29a4-5835-41ec-b0fd-87aefc79a06c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9c616f0-dd8b-4a82-a24b-1c8af1fa1d09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be575fbe-8a25-4e6e-a7f3-607b8ad0403a",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a091b3d-58d3-46f7-b5a9-df5fd152a36f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c7622a5-2c52-49e2-a890-926ed8a356f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cee60a3-7518-48a3-869e-31e6f00add5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffc4b0f1-e873-4028-b957-4b1ae601d02b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0216bfe-77bf-4d67-93a6-bd0dc489be95",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e901db0f-2fbb-4bab-9ff3-21f703042b05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dffb03c8-fd7b-4f97-ac1a-80d38757485f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02e66138-e6ac-4234-b5ae-e0b64b4199e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "497b32ff-3152-494b-8563-37a746225600"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea022860-5d2d-4cf0-9382-6a38d8e7cab4",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdb8a89f-a416-4b02-a97d-5e9b356a82ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba38d9a5-7628-47f2-a181-5a7ee402b214"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30e551a0-903d-4cbd-9cb7-52905a514ebe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c22d65b8-6e77-48af-b571-f2bfac502945"
                        }
                      }
                    ]
                  },
                  {
                    "id": "675dfc2c-86fc-4074-b85a-22219e14d1b0",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6fb779b-aa40-406d-8cb3-d99d385778aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e514ed03-b0d6-400a-a851-6776e33c9f6e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6032d504-1c0b-42f5-8908-5bb13fc6eb88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ae916f7-50bb-4d3e-9e3c-883d693f4f54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7e502e9-6ea0-49ba-9bba-a5b39568f2f5",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "477fbd3a-40c4-45ee-b3f7-7a0b4970c8d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55df1819-9cb2-4468-8422-febfe6507f6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ca47744-f1f2-4d72-966f-44950b9ed9bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c95d3b6-c2e2-410b-8e6f-f0fb3ec6d465"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2148f999-02a3-46e2-83d0-6c163b8a2532",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd7c2e26-3e71-4314-82d5-1815bd86ff53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e5eaddb-78cd-4eaf-8119-73ffb50f9464"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b9db7c9-fc07-447c-b9c7-13ab0511c8d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d139bf94-7e30-4d3d-9559-e06255b2073c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cff2488-4b14-4e97-8daa-243e2a63a54d",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77742c12-f8fe-494f-84fd-d9707c150c28",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9e1a8487-6094-4201-8b32-4643845103c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f3bffbb-3313-45ef-9fda-d6a20f11e103",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0acf4b62-14b6-40ba-be41-7a59102b2eaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e818ed30-2019-45ee-8772-a2249f1f6b07",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf89fc89-25c1-432b-beb0-a3a4092a78f5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "813c01ea-f95b-4ce3-b460-7cc996d56d37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c2aa323-f960-40ef-8cd2-7468608e7d4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b82dc62d-00ca-4b88-9f1b-a53f12d6aad3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f84be74b-b930-4612-8a21-3901c6b58746",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44e3d3b4-f587-4af2-8dd4-9414021d809d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e0a8559c-479f-44f5-b331-1d07aee5729b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14263d80-d852-4b4a-abfd-c7f2b3146360",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7c093e8-7796-41f8-bf36-4213ded31695"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88bb8624-57d8-4f9e-8a38-912729246f67",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90d30b83-81dd-49db-8912-3663d22bb45f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6d72197c-d8ad-47af-ba2c-1eb3935c9761"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ef3e12d-6c2b-496c-8b50-e20fa35d2eb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46e33b17-102f-4eb3-961c-620f0d30c087"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db432158-1771-4da6-93ef-56dee42d92a9",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54fd3b70-c570-4878-9fbe-26b0df4484d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7958b92-e4ec-4bc4-a961-20ca50134e92"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca1e776c-62bc-4b19-80c5-6744b9a20cd1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e62d318-58f2-48ec-8446-7abdb8ce2afa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31a33ba9-e191-4c9e-80c4-9447e8a7f3d7",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dde5bc8-9893-4da6-b43f-07a2afe3a3b7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "91b9a99c-ff48-473d-9ef2-54238e78f917"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f804f85d-0be7-4aad-97a0-d30656484c65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f9febe8-74f2-4c0c-bfd7-e75e9fc17c1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c576f2f3-dd26-4508-b01f-c51a6572a35e",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23166fce-dffc-4a24-9c95-ec97376aabbf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e48671b7-aec0-45d3-a4bd-4f93904f82c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65308cde-f5b1-48cd-89f4-9e5e32a0a591",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54bcfb6c-beed-4ee4-bf58-03492251f571"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc2f1eb0-b304-4329-bb00-0ccf1bd25544",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e8e5a9c-70e0-45d3-b3ec-b7bace0eb207",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "39b7aa9f-df84-410f-9e16-76ca150760e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7052bab9-6f6d-46c5-96a3-2494789cca58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05945ce9-0b89-4163-851d-d9343ac7e22f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09f50959-1a8c-4d87-b3be-4c7bedc37baf",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0521a1c3-1608-4cbc-bc70-2623021d16ed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c1ed44e7-8338-44cf-be12-28b1b5671648"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cba1a673-569c-4fa3-afad-259ba6cfe41e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2d6dd98-dd24-4859-9257-44e67647add1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17d05cda-49f5-41d4-8264-3ef08dd16f5c",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba6ea4ef-2ea3-4159-ac85-30d1612d7562",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "36e9e6da-0c8a-42cf-b0b8-8c05acf794e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "776173b7-7d71-4d7a-8010-5ea3b755470f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecfcf71a-c64a-467c-813d-8c8a8ea92b72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80ee937c-34c8-40bc-ad60-5811c27c3548",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fc9527b-c30c-460f-a5de-473d5d6d30c0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d5684ad-4858-437c-b433-1fc1b6bd34fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4582a5b0-619a-4b09-9f3e-d3a0c3d51613",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe3ea9d7-41d6-42dc-8402-5b9a648eb161"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62ab3b18-ac8f-4acc-ac83-acd3756f41d0",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24e737e6-fe88-4f17-8cd4-5f65b9afa163",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae849dec-2e6a-40fb-be2d-941dc3f506a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc55098b-8877-4adb-916c-2e0c34f37f9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a78aa96-31e4-4099-94c2-0c11bfc64898"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b49b535e-6724-441a-addd-fde98856d418",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d627795-d6f8-4fc1-9935-5843257d4cbc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "010281c2-200c-46ca-b2c7-e9761d045b60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1a9e973-b658-4609-ad2a-0e729ece6456",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5839a265-76c2-49bd-a9c0-cbc33b8f5d1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2023f5a-b530-4418-b6d8-17b694264520",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2c08edf-e78d-4ad5-8aa4-4603bc5d9762",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51fc7f2d-a684-4f3b-86a9-ca5bc09b4c51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6690d1f2-52e9-4c1e-9a54-63b6392eea80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a82fd7f9-47e9-4c0f-940a-e8359a18916a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d808840-9109-4545-9090-39dde6989ae8",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7cbb6a1-3550-4e86-9f6b-fe1cdb1dd736",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96ff08b6-3607-46f9-862a-e962f2c8634e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4158bcc9-5999-4ce1-bd95-c33ff230112e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1bbac438-6eea-4859-b38b-0382693b242c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8636e98a-dce3-423b-977b-9ebbdf8d29cb",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d18544c-521f-4fb6-9f26-6c758a255c8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f4a724e-11e0-4542-b74a-243c1c0e763a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52cb58cc-7f9b-4a09-9ad3-68108ddf04a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40c61ea8-9469-448e-98c4-97ad473f730a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8de320b-bbca-45da-ac39-5d220daeda0c",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75991a7f-dec2-4f95-9254-48ae9998a89e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15a89242-174a-483c-93b6-d7abfaf38329"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b3a2c3d-ae26-4da9-bbd0-bf1465d9eac3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4403c922-db28-4798-9a6a-ac3d821bd866"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4167a73-62ef-46b9-8fa7-14a3e1237bb4",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61a455d8-7942-46cc-9d9d-2f1a7f09e0c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7574da9f-2ba6-40db-8207-64a99af97dc0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47af337e-4d76-4168-91c0-d7622164cf40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "206a18f0-c053-43d7-8864-2a8008521efb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8b4cb58-7992-455c-83d0-381c221fda19",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dafaa42-f9b7-4d87-8e07-bf8ec71f33dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35c55dff-ce7b-4012-8237-127530870c87"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bab0870-a604-4d70-8df2-9c4c970a5549",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd03dd81-f8e3-4e81-b326-3a970d84ba8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7124e413-53ff-494a-988a-909a85c9f297",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ddf6e5e-fe96-41dc-89bf-0f26651f5ea4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1bba62f9-9de3-4e97-b2ac-a6fe44c33038"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d066b962-1f89-4c3f-ba87-250500cb9138",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07cc1e76-52aa-4b50-b38e-851a8dfd5c7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef5e9271-8efe-4648-a219-ad32e500f258",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ea97fe1-a49d-4b5f-a024-97680e2684ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc8b2306-aea2-4ed3-9173-18691270798c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c890ac4-258e-46b6-a7f5-6aff37bcbb35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bd3c044-9c45-40c5-8495-a62edeb4a489"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3b4fb56-56c8-4c19-9db7-869a2cf85c75",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "761f6629-58b8-498f-a4ab-1e89db7dc188",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "244949cc-8864-4298-8df4-63fd5308c672"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ceeef98-5f24-4905-89d9-dba6fcf33123",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b7a1351-353c-4dfb-b9b2-27356fb2c06f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36734282-fde3-471c-a868-7890c1ca18d6",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0363a4d7-4c14-46ca-bec1-63250511c093",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb230eb8-bab6-4f71-aab6-1253fe354002"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be370790-0327-496a-a42b-4a2c39f77d7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1268fb5-228a-42ca-9bab-96f9b810ce07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1300559e-7cbd-43a8-885a-b8d413857953",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "947d535f-f422-49a8-8761-cc2bb01edafd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af9bb13f-a213-4f23-ac5e-f9b3a48571d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8695b727-6441-46d1-b015-aae06b2a7ebc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2270263-3e26-4dd8-bbea-f5a1a0d1dc98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5177f9ac-2ce2-4418-8fe7-d28617ac4ccd",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82a36182-5efe-4372-96e2-4dc092092e08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b7617ea-4fd0-4646-94b1-f7dafb550312"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d46e7c35-e9c8-452d-af79-5a9bb6b0a361",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2abd1e7c-0e99-4017-ae63-e89f8f270dd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08a30c0d-967e-4710-bdba-c1fae6abed53",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cdda78b-9e88-44c9-9496-10a577573ffb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "095dab07-beeb-4d80-b70c-67d4d023e0d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c00327d-c5c9-4f77-83e5-f3db8f52d12d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e956e977-7663-410c-ae5f-b435dfc61f54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c79dce31-6887-4577-9b4e-d2ca2fc266ea",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52ee6f77-8d83-48ec-a943-557e8a6ddfab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1216e2ae-0f11-4c75-8b87-d2505afe345c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a04e831b-3eec-445d-ba9b-7844c1afdaaf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f23b4d75-c94e-4e8a-9d70-253d0cac6bfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f31091be-0716-41c6-bf31-ed96219b7c36",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "037d1a95-570e-4eba-ba71-5599e44b6b82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0c0fd15-373f-4486-a8a9-b48722b49c09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b77e1451-a1c1-496b-abf2-300b9a93ce25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db9f2107-fff8-4ac2-a393-8fedd4744a88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa50f290-1ea7-4b5b-b283-9007aac6e910",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baa7a649-0979-4499-a722-d9c6ef5fb53d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b484fc9b-6bcb-425b-a924-baed8ae7fc49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "932d4971-623c-4629-81b7-0cc0516a1ec8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd52cb04-96a2-470c-8b4b-df51c731fd66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3176f4ed-b215-47f1-88e1-1844a7f374c5",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66afef23-686f-44a2-9653-de23e5239deb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bc6fb81-7597-4564-a41d-a65c429644be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2122600-3be9-4e0f-b26f-2e645db89a26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0589e789-6b48-482f-ab93-7dfa848228c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fbd7ba6-b512-43eb-8526-dd704b2bf769",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6af27d81-04b7-4087-a9b3-9e0d57f72c46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a044a84-d7c6-4b54-9a84-3c6567147520"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0333d1b8-670d-4cf8-97dc-20763e6cec09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70679237-add3-4730-b696-427afcdfab6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68776e4c-658e-40be-b093-ea6d2b9259d4",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c398550-3df1-4106-9ba3-81a5dd0d0c3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d20060ba-f65f-4f09-ab7a-690bec438496"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f8dc909-9fb6-4fb6-8431-a23090f99452",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "921a129d-88b1-4460-b4dc-4acf0c1fa9cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3eb73499-152b-4b13-aecc-4b1f08935c51",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be8969c2-36c1-42eb-96ff-2ba3cc4fc2bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01676e1d-7adf-4a4f-bb96-3088a3d498b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e431889-2011-49d5-a231-f932399054af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a0a2eb4-c795-4d78-ac4a-11180d803bd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d2ce9e1-e6ac-42f1-bc63-0fb1fbd4581d",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca62a1a2-601f-40c3-ad58-ad4d4c0ce6df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09346839-720c-4bc7-b2f6-bd1c4273c3a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc39c1fb-bfd6-497e-80ae-08bcf1919641",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "440181e5-0a16-4c32-b271-c8c1328917c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aaeaeecf-514f-44b5-9950-bd2d59bae66e",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94f49b92-df0f-4ada-84c8-0763959453a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3817b8e6-00c9-478d-86f0-463553a5613c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b701c30-c65a-4ebd-9457-98a8aabf4c1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2b728ee-3c42-4b0d-9a5d-daf4b60d72ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9ffb033-4f46-4bc2-8db2-3bcc30cefd49",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6f5ed88-f901-403d-a97a-6c471df7f804",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21504fbe-fdd7-4950-8ca2-50ec461c0847"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe04b0fe-18c0-40ba-aa77-f5f05733e6e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dde5b06a-2638-4690-8f73-2e1f54d80ace"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdb95330-5d8b-42ec-a04c-00dd95fb5970",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10f5d053-4617-4230-afda-647ad9a66a86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da9334fb-54ec-47c2-b801-4c5b2adf4009"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e2d268d-3db7-4dcf-9339-de09024555c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42f9c4bc-22b3-4ce9-8b06-f7431691b01d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a9f0180-133b-425f-be40-fcb2bdd0ea01",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2962427-c84e-4234-8337-672993a2f8d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32d48450-ff72-4ef4-9d19-38fc1da18116"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf1e13b0-5f8b-488c-a594-4710f0c8685d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68e62370-fff4-47c5-a51e-2971d14ede99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6fd5f1c-5b5d-4272-a9d9-823ecc096636",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d51a0325-e33b-491d-a294-5a72e63a4636",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d64e7b3a-3956-476d-b28f-2c1de46522b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80055b8f-db0b-494d-aaeb-6287b03df698",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "858aeaaa-ee4f-41a5-9f71-81215c1504f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de427f90-9d6b-4b0f-9f5c-5681fbab559b",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b3a89a2-e500-428b-9d66-e759067342bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c6e03fb-0dee-437d-813a-29e4857e19da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53374e5b-fd08-4922-bef3-60285b63498b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e0bab1f-5cbc-4fe7-8ad0-b34f8d6beefa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dba1b442-3ea3-41ff-b0f9-792654885d30",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be6ed571-b109-4afc-8427-bc7fdd55eba9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cac126e3-bb48-4ca9-a6df-ad3e39e839f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "174bbb84-6279-4cd2-86b3-d52861a9535e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd497d0f-bc01-453f-88fb-cf2d409fa88d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e2b1652-4e22-4eaf-bdd2-0021bd0444b0",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa5869f5-1141-4815-ba19-e63e68cd5ff6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ab89e559-4d47-41a4-a065-17a3acaae3b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eec18a0a-4a23-4a61-b6c2-4c16fd2dc8d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "733c7aeb-2dde-46a2-a59b-363d11713539"
                        }
                      }
                    ]
                  },
                  {
                    "id": "def5c706-a549-4bb5-b6ac-2219f01db7fb",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50a7b144-44b5-4a8e-a6c4-db4fbcf5afe2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a319a120-0329-4695-b97d-6ddecde73b49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "598d8ccf-530f-4ba4-b52e-9feb1304ef3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b98899f5-e080-4259-98ad-fd8c955b1f6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23a8eafa-974c-43f7-be2d-114b36fdcd35",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e98fceb7-7a7d-47c4-8e3d-6e1f9ad746d7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "861831e2-eb1e-401d-9b88-d21e314bfa5e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3ec58bc-b3e5-41c9-9e4b-70a3252cac27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c129a12d-2423-437b-8f39-5f02e8bce507"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c36b67d2-9167-4f78-8b8c-85a74236d338",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b95a04a-60e2-4005-af8f-ca04b5c54609",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "822c1276-d0aa-4289-abf8-d09d8d52e979"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87ab8401-bb6e-4955-b14a-d2cc677a3ad2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "794275e3-e932-479d-9aaa-7216931cb7f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92b0f20d-2b4a-4d13-903d-f9e56b3ca3dd",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "274e5ac8-5769-4ff8-95b5-edfaaae69260",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e76dce5e-afdd-467b-9ce3-d93cb218ad4a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cb253d8-f569-4660-99e9-0f786b19a721",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41d7bb11-cc94-44b1-854e-cc3bd9cec775"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88d3f9b0-1f03-477b-8c88-fb2251a69932",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87eff324-4958-433e-9382-1cb07fefbfdd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a68c4add-51f0-435b-bb8f-fedc708d121a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed2a048e-7411-477a-9c32-9e222149af97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "437e8c83-f3d7-410b-8564-a84899824e57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff85fe6d-7051-484e-9953-9bd15cab0f73",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e304805-df01-435f-ab78-5e091c186420",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "43c549d5-b8fe-435d-8d56-7cf1dd33b022"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8be9bfba-5a1b-4087-8ec6-63f1b9dd776e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebf5cc18-34ec-4c1a-a462-2ec0014e366c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a3be938-8a71-40f1-aea2-36719338833c",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7766f85-1f6f-4b57-979e-8cee226dbdb9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3f593b0d-0fa9-48e2-9482-e2aa7ef2acbc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc24469f-7196-4653-8ef9-9e38c89f0569",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbf3e262-1315-4d7f-ad0f-fc8572ef5ab4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9930f0a5-60e4-494e-813c-56b4c1518d29",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "556e193d-a70f-482e-b238-07dd5d6107aa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "622b3404-c336-42f7-acf6-ed636dc1375e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49689908-e2d8-439c-b0ee-48270157822d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2977a627-5ae7-4bf5-833a-084773e51e6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94c80a1e-73ad-414c-b3f7-294c9561e5eb",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b177907-777b-4c66-a016-f3a6eef67531",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b7acccc-c591-4a64-9ffc-6434323f850a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14cdc869-3a78-45c3-bf82-48aea05a814a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01723ba4-a1ce-40e3-b0cd-61a257a004b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb5f5053-d3f4-428b-bc8b-7cf74efb4f7a",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5666d4c-480e-4d3d-9c0b-60ae6d26e12b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4e8431e5-1ac7-4541-ac59-600eedbd23a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d833006-a469-4123-8b47-099e217df665",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a29f6dcf-ee70-46ed-98ab-807c043c5d5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb96b038-2b32-4ad8-bbd1-d7141d96d2de",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc2a03d2-e926-4a5c-9d8f-e9ad271c6edc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3c4d2994-9ad7-4685-a3ef-f8b74f47f655"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a25b3ded-49eb-42d1-99d8-99e50624dac2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bafb9bf-a0d2-4000-a8f1-d9ed58ab1dec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4faeb4d1-da08-4447-a136-bc8f03fc372b",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba7d363e-f192-4c43-9b48-6ba08ffddda5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5aeb27ab-16d0-4f04-8d86-6bbe32fac55e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30afb9dd-d72a-426c-a1f7-ddda0187baa2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0a76229-f0a3-4782-9ad1-e109ecfdfad6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57b7db69-dfa2-46aa-89cd-d255df96fd8f",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35136503-1138-40a4-ae33-5f8ce22319f4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8f17fd00-5fdd-4a8b-aaee-55b79a97305e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a52b942b-1204-4131-afcd-a87499bfe1d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2fa40cf-e4fe-43d3-9395-69232ba28067"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e696dcf-bc40-4df0-86d4-635cefe9666c",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "703a76c8-379d-47ec-bab3-373a007696ed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc6b8b63-14a4-43c3-8092-e76bbe60df03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f2a8884-37a6-4d68-b997-e42056d126fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90ef7770-3ae0-4992-9938-286e75f08ae9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8987dbd7-8634-408c-a644-ddec45389c36",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97ba18d4-6b5e-42b3-bc6b-3bf611fb01cf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8fc0c802-be06-4a2e-8051-cb0c170f925d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aef9bb11-163c-41a7-80e5-717506e1bb63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f576ebab-5e22-4287-8b64-51d3266f0d8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49a93551-2f4e-445a-8422-ff9d0be75b6e",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57e31cbd-8046-4448-a889-e38b407bd7ce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0bf8fb6a-1ddc-4b73-b470-cabb9ed06601"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba9e356f-2344-46ab-ac1f-471b07659a23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e7ef986-fc8c-491d-a218-da797fef4a1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9153f4ac-51d2-4b08-8f9d-92d82fff9ced",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "650696d6-2212-4a8f-8890-0d173f294ef9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bd0c8b01-27da-445a-97ab-d68b90489667"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62c1a65f-a78e-44ae-8d95-0552896e9078",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f25b696b-ab19-4ea4-884f-a22548b4095b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da73f3cd-fba9-476a-800c-47648854d14e",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79f29c6a-7c1a-47ac-a849-4bf2d5ea3947",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0cb4f488-d30d-4afa-ad83-7d91bc9a08c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0c33523-b6bd-4d3c-ab6c-9e3fc235c06e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61ba6667-ff60-442b-afec-6743c27ade25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfc7812e-1ee9-4ec1-a1ed-05290bfe064d",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2373ed7-3f9c-43c6-9283-60726a7697e4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ad47e439-ebe8-41c2-a9a9-a3f78dba7604"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fd9182c-1b1f-477d-bccb-9568c65c4275",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5ca1683-1c3f-42c3-80ac-314cdd380b9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33aceb29-cf56-4ab0-b3dd-d541feb851df",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5e70df2-37e9-459d-8ef0-b00ce98f234c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "89155506-7bdd-406b-a47c-38e44652e318"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5aaf20e9-c46d-47a6-8742-d9006b7d5bcb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11f0e153-d040-4350-88fe-1756bbd114eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ec5e09d-9c52-4607-a67e-974cc26e42bb",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "918454c9-3dc5-43cb-9629-1ccdf87d9dd6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "da12cc6c-d3ff-4119-b672-5263ee256bbf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d92f41f-26ba-4046-a9d3-d908c5b4be3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6cb29ab-7520-4584-b1fa-86e372846587"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3c5f4b7-97e6-46db-8ae4-54233b1c134d",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b01424c-4c23-4d91-af5e-6abc2ee74b75",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8fa53882-162f-4ed5-aa12-7c0f51ac5fd9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7721da6e-e747-47da-abbb-bb57ab2141eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef373e4c-085e-410c-ac92-dc07a0c1176c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f88e43be-f2aa-45d5-98c2-4c495f960561",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87b75a93-0200-4c16-9181-bc17f9cf38d3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "255ab392-f1d5-4af0-b47f-9c207b8dfb6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5cd3062-6fd6-405d-9d10-32aa0237aaf6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63e78fbc-09d9-43b5-99cd-0fd00d8fcc9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c85fadb-1f52-4ac3-8315-5bdda63ac220",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baddc340-726d-4ac3-b3cd-67ca2a4538e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1fb963f6-f840-49a0-af7e-0d756caf455e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1900e5f5-87c5-4835-b1bb-34ddf9b0cc8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "780766f9-cca4-42bf-98de-2e1cc23d113a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13a6261d-eab1-4851-bbfe-03c62236351e",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dce9f282-ce97-455b-9412-86b3720c15f5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "10835531-1883-4e42-9a57-42f33927bd3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32570818-cd05-42ca-ae03-2b9d10bba941",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17ea1314-7588-47c8-91b6-2fad73283652"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb0a78d1-09a2-4960-b6f2-9e5f509e67aa",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8d90b9f-0490-43ed-befa-de84c7ada35b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d0908515-ba98-4f32-be3f-dfbf63814260"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f952bfc-9295-44c8-a163-a51240af6b52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e126b83-e5a1-44a7-b704-8b99bbb4f747"
                        }
                      }
                    ]
                  },
                  {
                    "id": "285f7823-596c-45c1-a2d6-ce83b793d33f",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bec125e-d27c-4eb6-813a-1a4398233d97",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d7d9a4ce-a321-43b9-8edf-89835744ac60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "981ea832-3c93-4fef-b15c-2876e3176d5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "953c41ae-d29a-4e29-a755-59c907a6a9cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5887f6de-7eb0-488c-845e-04f61f3ae8d1",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8abeb3d9-7f4c-4b9c-b1a6-98fc037f6907",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f2e6ff0a-6e5a-4bf5-aaa1-5267f43ce3c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "225fc613-8a5e-47b0-8055-5182702e0b0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2e32fda-4cfb-4f7e-bfcc-0eaa14452b98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ca5d4e4-167e-4673-a110-354225ed1356",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fe798f2-18f2-4f20-ad23-a80b51a9cb41",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a3fb23a8-f8c0-4a44-981a-9847da3a51fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3645af4-ad5e-4525-82fc-72c916b9ac9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c9d8f4b-c11c-49fd-8eaf-6005504f2e1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1f1cc44-4d29-440b-837b-02b8a1585da4",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc397aec-27a1-4e7f-985b-5d5d7aac629e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "58f68265-5395-4496-85df-a73aa9f0fd6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2e88a97-1c41-46f1-97e6-fced39995631",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bbc0313-058f-4fd0-8e30-e86ba8192274"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71bee6e9-be54-48dd-9985-4fd982bd7b0b",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9030a27-d47a-416e-a2aa-d87738ee276f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ace1fc70-cc96-4dde-b242-8d90b1b4e366"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb218b46-62d4-4c58-b252-c6c12badbe39",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "565f8cb5-7641-42d1-a3fc-b23443b8415c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddeb21b9-f5ae-4742-b1f7-70c7b9aaaf4f",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d4e8495-b12a-4eda-914c-afa60d3f965f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0806f99a-a153-48a1-bfd9-f14fde422537"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65e37805-21f0-4cee-bd5c-72312b98975d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54d71095-5934-4bb9-819f-b1a1aafbca40"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f58da5a6-ca45-44f2-a77f-bd1ec26d7335",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c16f07d2-6632-41c5-b3e2-f2f07b0ec57c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6c302c58-9165-495e-a4f2-367e5f19c359",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "eae4a7f8-773e-42d6-b747-d7291ff46c0f"
                    }
                  }
                ]
              },
              {
                "id": "28ce9608-647b-4ce6-8460-1f53e6db9408",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "70ffa838-84f3-4007-a711-bfed459f1d12",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a187e917-d958-47c6-bf3e-fe1116438115",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "29889043-0e85-41b7-9ce7-e4455c181282"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e564e385-578f-4958-8c09-ab4f0a084215",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f818052c-fbd0-4917-aa8c-e02cfa62a728"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e3a1db7-b679-4e93-98bf-f6605c9fc7ac",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f85f15c-2cc8-4d38-a9ab-8ba6e47b24f9",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "cb981358-a581-494b-b983-4a03841bd8bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "228ee78b-ca6d-4aa2-a21d-38d9294ce876",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ac1ae358-24ec-4c7c-a33e-a81bd43512f2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "44533581-00fe-4307-b0c0-871c1993109c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a363cbd6-424a-4e52-8259-42b529cb4cd4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "374d60fa-d149-4e3b-a162-96e0cdf6c108",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a1a41734-f38d-4f36-8036-1a94e760a1ef"
                    }
                  }
                ]
              },
              {
                "id": "300dc2a8-985f-4484-86ef-ea2f81be2ced",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "852bc298-bdb5-4d44-90d6-1f1ccce55e1b",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a934a81d-0c15-418e-a71e-ce1f8763ac81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "fbcb3507-6dfc-4a53-9981-09eb79c78ee3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d891fde-6a31-4e6c-be50-72082bd795b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a67ea7b-514a-44c1-aad4-b7f89e65fb68"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "15bf16aa-609b-42ba-97fc-cdd1ebe8e74f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "4ef4c368-545f-4d14-82af-bbdb563ba453",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a3b4671d-bfa8-48d8-a7ef-05df4e870630",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "a3fc23af-70e1-4c54-a83f-5876f0f9d6d8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3d3694b5-7b12-45c4-9c9c-081acf5fd304",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "218785cf-d9c4-4096-97d9-85c9a602f604"
                    }
                  }
                ]
              },
              {
                "id": "b4e91fd7-a273-4866-921b-a0aaf018f28f",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b2e3b39c-a509-4ad9-9cb3-c41082ed06c6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "f9990f9a-ef18-45d3-a703-23f0e9353674"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d6c6cf4a-aac7-43e5-96eb-5b35d219d696",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a73d7717-1e79-434a-82b1-89a4f1e4fea6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "42e82aa9-17f1-469a-8f73-9512d0df82e0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "33001775-1d72-4143-ae54-833097ecd502"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5b845054-c2f6-4b18-aa03-81891994d41e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "90c71e2b-3138-4d65-b712-1214e3bf7c61"
            }
          }
        ]
      },
      {
        "id": "5caf0bd7-c984-4e5d-91ec-1e54f3d466a0",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "81d28fab-202c-4dc0-bb18-f2513557f214",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7c6a5a9d-62cd-4b83-b5dd-1fcb24d7e86f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a3348564-387b-429f-9268-1f9d4de132e3",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a145b0f-5a9c-4380-868d-93463f14ed4e",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "bede6070-9909-4a86-be53-69c924f6d941"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cd3aead-2ac9-4331-81ad-1fc4bbb51f0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d1b1257b-a538-4f47-8c88-da0c1d1b274b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b831e041-add4-4e6a-89c4-6a613e53dc88",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85800e66-2b2c-4052-9e69-7599d5e57241",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "b3dc51b3-d462-4dd0-bf16-7843965f5d6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d19abd5-0075-495e-9825-138280673030",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c1d18e3b-2cab-4b07-a4e0-1a0dd40037c5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1d119188-c124-4590-b394-0f2360869489",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "69cba337-b5bb-4657-ace2-a41cec9ab5ab"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "41e378b5-4b97-422e-9ef8-fa2b0f9878f4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "432e959e-772a-4eca-88fb-ae60420fafa1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "509d26b2-505d-4260-9968-db2caab26949",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "6ec8caf9-ce82-44c1-b19b-646a46e06508"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d3790c3a-6169-4621-886b-6910bed2f336",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "37c19d0f-5bb6-45b4-86c7-e447158908a3"
            }
          }
        ]
      },
      {
        "id": "1e0aa7ab-3e51-4db1-848e-1f59a6b48982",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "295a5b3e-8007-45a0-a3a7-f58988728a9b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "938b46a7-a30b-4346-974b-f430147c8152",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "83f23084-e10e-47a8-be22-554f9f846ba2",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e52e1279-793d-4e26-ada0-cde6f14585b9",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "b8a8761b-e3bd-490f-a23a-affcc9f52176"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "992aff58-3668-492a-ae9c-b9b8f9532c65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "388b3bca-cab6-417f-be31-75ae350a214a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "382738a1-2002-4024-bd27-b82755a4496a",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2705fc1-8b4f-49fa-81f1-d9cdcecd6fec",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "67dd3f2c-e6f8-4f20-905f-2f2bc37d9df8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90a79fb3-88f5-4a88-aca4-fa8433af5ed7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "462ea1f2-14a6-47d2-8745-ae71966dab63"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c89f9fc3-45e1-4bab-a52b-08ebd97186de",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2144e277-0681-45ea-a00e-0a4f30964ca5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d09f0055-5aef-4774-8561-015441d4cf0d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2aa11623-de1c-4d9e-9019-c97f6db36930"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "95330c22-9db4-4ac1-ac24-9367e9b65399",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "148ef30e-1a84-4ecc-b9d0-58285106ad69"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7782a7e3-4262-42c3-96f8-651424b8f04f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3326eaaa-b961-4a9b-8127-17fcfcbf4de4"
            }
          }
        ]
      },
      {
        "id": "8f7e43e9-bc46-4861-8a6d-6189c68b70da",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "cec9ae38-31fd-45ef-aaac-8d0ea5b9fe47",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8a116ada-9795-4f97-9cbd-e650ebae74cd",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f80804f1-66b7-4940-b0a3-9f4fabcf72bd",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bad2724-ec78-4e87-b100-2c3874d4caf2",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "8b07cdff-f571-449f-bbe8-0f771ace110b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53018a56-d884-44e8-b19f-3e8e26127dfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ccad4821-9bc1-4545-b4c0-13a8f8892e3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcd0748e-9088-4baa-8f63-5424e2730270",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f4cde77-d983-4771-91c6-6bf6836f57f0",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "f4da59f7-8a2e-4ed7-9a61-67478734421e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9de36c8b-150b-41c1-819b-910f59b51fc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cb8e8867-5148-417c-8808-106776119647"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0b2b2f53-b492-45e3-9c50-f676663d6a04",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "821fe384-dcef-4aab-8892-243c60529b88"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4d19e6c3-34ed-44dc-b02c-446f191187ea",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e91e88de-5c9c-42f1-bc88-352737dc7984"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "aa8a4b9f-d2ba-4c51-a668-687eacb3a6c7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "ae51f51a-0998-4777-bb6d-363990775959"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a8ab3bb8-eb98-4295-8632-11d3a05de4a2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d5ff6eca-5f54-416b-ada6-a9dcda9536ad"
            }
          }
        ]
      },
      {
        "id": "2b659d80-2b3f-4d3a-9f26-f8602e365821",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "73a8a681-efb1-4b73-8abd-f5a782bbe422",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "585cda79-1c68-4320-b434-93073995c3a1",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "78d3c6bd-0c6c-41af-a7a3-08b0ffe883ff",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fae3cbb6-be8a-4067-9c80-7ac91583004c",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "50cb66d9-05aa-45db-8554-654ea52186a4",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1925,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 262,
        "pending": 0,
        "failed": 6
      },
      "tests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 517,
        "pending": 0,
        "failed": 60
      },
      "testScripts": {
        "total": 967,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 958,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 37.348145917932094,
      "responseMin": 18,
      "responseMax": 382,
      "responseSd": 36.4735035359935,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1675039078217,
      "completed": 1675039098358
    },
    "executions": [
      {
        "id": "6baa6da5-023d-451d-a6dc-1144cf24c46a",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 253,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "49151228-56e5-4979-96d2-f8c0be28cee5",
          "httpRequestId": "7270ab83-5cb9-4e3c-b334-5e021481dfc5"
        },
        "item": {
          "id": "6baa6da5-023d-451d-a6dc-1144cf24c46a",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "f51ea47c-5699-43b3-b38f-ed6768b5e1d1",
          "status": "OK",
          "code": 200,
          "responseTime": 110,
          "responseSize": 0
        }
      },
      {
        "id": "50487143-e540-4cbb-8a2a-51af8802ebf2",
        "cursor": {
          "ref": "620daa18-2838-4669-b520-4562dd6b9c91",
          "length": 253,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "744eac14-ccf3-431c-8151-b2a9be423d71"
        },
        "item": {
          "id": "50487143-e540-4cbb-8a2a-51af8802ebf2",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "9a37c061-0535-4ed1-9576-388131e079be",
          "status": "OK",
          "code": 200,
          "responseTime": 18,
          "responseSize": 0
        }
      },
      {
        "id": "aa76c8af-9717-4bd9-b2ee-aec8780e356a",
        "cursor": {
          "ref": "22cb38e2-192d-404d-a97c-5d1268616baf",
          "length": 253,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "758f1f86-e2bd-47bf-8513-e1da2f1b8ee6"
        },
        "item": {
          "id": "aa76c8af-9717-4bd9-b2ee-aec8780e356a",
          "name": "did_json"
        },
        "response": {
          "id": "0bd9292c-7aa4-4680-8a4e-b641a276b265",
          "status": "OK",
          "code": 200,
          "responseTime": 284,
          "responseSize": 1211
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdbe6d17-e33c-4cfe-a15a-55b334cef0da",
        "cursor": {
          "ref": "50d5af2c-b159-49d5-bec3-675b61cc013f",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "02744b11-1259-45f8-95a4-8623cad5e7f7"
        },
        "item": {
          "id": "bdbe6d17-e33c-4cfe-a15a-55b334cef0da",
          "name": "did:invalid"
        },
        "response": {
          "id": "be41d636-169d-4888-a5e5-38015b87f435",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "bdbe6d17-e33c-4cfe-a15a-55b334cef0da",
        "cursor": {
          "ref": "50d5af2c-b159-49d5-bec3-675b61cc013f",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "02744b11-1259-45f8-95a4-8623cad5e7f7"
        },
        "item": {
          "id": "bdbe6d17-e33c-4cfe-a15a-55b334cef0da",
          "name": "did:invalid"
        },
        "response": {
          "id": "be41d636-169d-4888-a5e5-38015b87f435",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "b28b9e98-401f-4a45-8edd-a8bcf4d32d58",
        "cursor": {
          "ref": "485ec292-af40-496a-b290-501d2eaea887",
          "length": 253,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "673c0b10-ee8a-45b9-bb05-57add484a84e"
        },
        "item": {
          "id": "b28b9e98-401f-4a45-8edd-a8bcf4d32d58",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "a752088f-ae0f-4330-b99f-2f4f35b9eab9",
          "status": "Not Found",
          "code": 404,
          "responseTime": 68,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5b46df4-d4af-4746-a2b2-42040cc5769c",
        "cursor": {
          "ref": "acd71152-d93a-4b62-bf57-d9e863df35c9",
          "length": 253,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "921f7f1a-cecf-465d-95ed-7ecd5ce26f74"
        },
        "item": {
          "id": "e5b46df4-d4af-4746-a2b2-42040cc5769c",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "1a166d3b-32cf-42b8-984f-fdafcb81221a",
          "status": "Not Found",
          "code": 404,
          "responseTime": 30,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00a9b4d5-d67d-4861-a755-f41e70f79d1a",
        "cursor": {
          "ref": "bfc0fed3-3ca8-41b8-8514-6991492a3287",
          "length": 253,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "8f6ac472-9ac9-4702-9b07-5c3b1c072671"
        },
        "item": {
          "id": "00a9b4d5-d67d-4861-a755-f41e70f79d1a",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "955f8d6a-ec3f-4876-8e5b-56612551b26f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 31,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69a77d9c-44b2-4c72-bce5-a1a97cbd0845",
        "cursor": {
          "ref": "79a6ebd5-e2f3-4fbf-8199-c7dbddea9745",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "24aec2fe-f535-4d77-8ddb-4b277e7f43f7"
        },
        "item": {
          "id": "69a77d9c-44b2-4c72-bce5-a1a97cbd0845",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "4cdfe0cd-c025-45c5-8131-21865ec05e07",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 32,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69a77d9c-44b2-4c72-bce5-a1a97cbd0845",
        "cursor": {
          "ref": "79a6ebd5-e2f3-4fbf-8199-c7dbddea9745",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "24aec2fe-f535-4d77-8ddb-4b277e7f43f7"
        },
        "item": {
          "id": "69a77d9c-44b2-4c72-bce5-a1a97cbd0845",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "4cdfe0cd-c025-45c5-8131-21865ec05e07",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 32,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "168ab432-820f-4e9b-8aa4-c583c294b692",
        "cursor": {
          "ref": "06f1cfbc-ebc3-4b5d-aff0-52fa18afc6c6",
          "length": 253,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "a50fc0be-8bdb-4d8a-bb26-9010dc784590"
        },
        "item": {
          "id": "168ab432-820f-4e9b-8aa4-c583c294b692",
          "name": "identifiers"
        },
        "response": {
          "id": "932382f4-accc-4861-ba0d-9d741a90bcf6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 71,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "bb70f8f8-0133-4579-b11d-124713e53f0b",
        "cursor": {
          "ref": "d2855215-49e5-4405-b839-ef5d389259b6",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "b6257be7-13c5-48c1-8fe7-daa643d86b25"
        },
        "item": {
          "id": "bb70f8f8-0133-4579-b11d-124713e53f0b",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "8a365923-4aa1-4ec1-9e8f-b9787350e09f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb70f8f8-0133-4579-b11d-124713e53f0b",
        "cursor": {
          "ref": "d2855215-49e5-4405-b839-ef5d389259b6",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "b6257be7-13c5-48c1-8fe7-daa643d86b25"
        },
        "item": {
          "id": "bb70f8f8-0133-4579-b11d-124713e53f0b",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "8a365923-4aa1-4ec1-9e8f-b9787350e09f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10d68196-59df-4b27-b979-809bab26f555",
        "cursor": {
          "ref": "964c6758-42c4-4a27-b21c-ac7be4bc8c2a",
          "length": 253,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "1b11828c-7a78-4589-8d90-71ea50940516"
        },
        "item": {
          "id": "10d68196-59df-4b27-b979-809bab26f555",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "b992e6de-0b09-47eb-b552-462609eda5bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "736a5482-ecb9-4f55-a3bd-5137db95576d",
        "cursor": {
          "ref": "ec044158-2212-4598-9fc2-ff4d28082d94",
          "length": 253,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "e34c4260-e326-44e0-af3d-bdef04526ec4"
        },
        "item": {
          "id": "736a5482-ecb9-4f55-a3bd-5137db95576d",
          "name": "credentials_issue:credential.@context:invalid"
        },
        "response": {
          "id": "3a6ff127-fe50-4273-9e5a-cbfbd136ae61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 176
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b6e21f6-2b7a-4c12-bdb3-418328c7d1a0",
        "cursor": {
          "ref": "c59a1e39-997d-4e7b-9c17-00a3730e04e7",
          "length": 253,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "e7d62ec4-f9c7-4592-9301-158778653fb1"
        },
        "item": {
          "id": "1b6e21f6-2b7a-4c12-bdb3-418328c7d1a0",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "10c21f7f-a344-405b-a7da-6adff178d8c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e07f278f-4ac0-4bce-8cdf-fea86283dfbe",
        "cursor": {
          "ref": "28428c3a-c8b4-4a3f-b7d4-120de4e03fc2",
          "length": 253,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "ab9e4d0c-46f4-4f68-8560-6998787494fd"
        },
        "item": {
          "id": "e07f278f-4ac0-4bce-8cdf-fea86283dfbe",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "ced4dd37-615d-4a86-a9fc-a2eb66868eda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b0d080d-818e-4350-9920-22d70d238e78",
        "cursor": {
          "ref": "541a8722-6c90-452f-8711-f1d4a5d56bd4",
          "length": 253,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "a5e53773-bddd-4cf9-a13b-748f14b56ae7"
        },
        "item": {
          "id": "7b0d080d-818e-4350-9920-22d70d238e78",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "d3595de1-017f-487d-9f12-e604446b88da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85540df9-d8b1-4867-8410-86d4570d92e4",
        "cursor": {
          "ref": "02beb521-315a-4ed3-8d47-cd47ae5338d1",
          "length": 253,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "8fa029af-4d56-4758-a785-1cca4c9c4023"
        },
        "item": {
          "id": "85540df9-d8b1-4867-8410-86d4570d92e4",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "c9fc3eb6-c82e-47b1-835e-ed5ee2d3bff9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38146289-6031-4747-822c-7e4a4b12b2e6",
        "cursor": {
          "ref": "c8de96c3-769c-4be3-a4c0-d4b9019d7200",
          "length": 253,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "9a42b8cd-e4c8-44b8-a312-8804dbc2fab6"
        },
        "item": {
          "id": "38146289-6031-4747-822c-7e4a4b12b2e6",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "2304c805-75aa-4d13-94ae-dd2a562c72ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d90e7e5-b232-4b81-831c-a2a64c0b1561",
        "cursor": {
          "ref": "64d995c8-d500-4a2a-b127-243f81e0eac7",
          "length": 253,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "e7f52e2c-89a7-4ea8-9a24-eca3a81e9b94"
        },
        "item": {
          "id": "7d90e7e5-b232-4b81-831c-a2a64c0b1561",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "4f6f79ae-c897-49b1-8257-70910b9373cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9dd51e7-4c31-4364-a363-72b15d29597d",
        "cursor": {
          "ref": "4eb2732d-9b44-4e54-965e-acc9b1d01acc",
          "length": 253,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "9a8900f4-aa06-4d1c-8e14-6c985db2ac87"
        },
        "item": {
          "id": "a9dd51e7-4c31-4364-a363-72b15d29597d",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "927d0a27-3a42-4f9e-8c08-aa9a225380c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2a5c495-cf85-407d-b8c1-ae17233755cc",
        "cursor": {
          "ref": "6c80f0b3-d831-4ad3-afa4-7eadb97c0b7f",
          "length": 253,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "b86be70d-7fc1-4924-8bad-f555ef19318d"
        },
        "item": {
          "id": "f2a5c495-cf85-407d-b8c1-ae17233755cc",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "16eae946-0ed0-4d70-a564-c1e9cb625c0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afa4bd1e-76c0-4138-91e6-4b03159c4fcf",
        "cursor": {
          "ref": "def6d4eb-be1a-4a4b-a6ee-6d135ccb7263",
          "length": 253,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "8bfb9479-83f5-4e84-967f-cb4a15c17c2c"
        },
        "item": {
          "id": "afa4bd1e-76c0-4138-91e6-4b03159c4fcf",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "feded64f-cf73-4658-a7d0-a97d914ea00d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3356e0d0-d21b-48ff-8b61-e5fa9dc07809",
        "cursor": {
          "ref": "4a9baaea-aa15-4078-b309-d007b7c6dd2d",
          "length": 253,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "bb69a646-ff60-4c88-b421-b5c477c0a1d4"
        },
        "item": {
          "id": "3356e0d0-d21b-48ff-8b61-e5fa9dc07809",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "382e0e7d-8c7f-4148-94e5-0402a36fa673",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "886a2c98-bfab-44cf-befc-5d0a783bb3f5",
        "cursor": {
          "ref": "352b87e0-e57f-44e1-92fc-fd162a6e036d",
          "length": 253,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "f7418242-6a44-4770-8ee6-94e68738dc38"
        },
        "item": {
          "id": "886a2c98-bfab-44cf-befc-5d0a783bb3f5",
          "name": "credentials_issue:credential.id:missing"
        },
        "response": {
          "id": "85374c26-98f7-494b-82d7-5f7049ce9a11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a95595b0-f938-41ef-b751-44b29e4b08bd",
        "cursor": {
          "ref": "f513fa67-9f3e-46b2-b4ef-60defaf11e84",
          "length": 253,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "5c1e281c-c4a9-4b16-90c0-05798ef1c97c"
        },
        "item": {
          "id": "a95595b0-f938-41ef-b751-44b29e4b08bd",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "e8bc556f-71e1-46a2-9ee6-8227b6f712b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ae46cc7-6579-4ea4-9e09-39b24731802b",
        "cursor": {
          "ref": "cb292f3e-4105-4061-8ec6-7f7b55d0982b",
          "length": 253,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "af9ec5c6-6b7f-4d83-9cfa-40c019385160"
        },
        "item": {
          "id": "4ae46cc7-6579-4ea4-9e09-39b24731802b",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "6d82ce77-52ef-4f08-86e0-7d8163d56388",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae70dd7f-83dd-445c-9221-862f8f6ca238",
        "cursor": {
          "ref": "44a19b46-469f-4c76-9cd2-757cf995a1e4",
          "length": 253,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "f7e68cd5-1aa2-4d80-9294-f437b7b6836b"
        },
        "item": {
          "id": "ae70dd7f-83dd-445c-9221-862f8f6ca238",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "653d1dff-699b-4d30-b1be-382beb937325",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce8ea12a-78f0-41e4-ba95-641df1cdfb88",
        "cursor": {
          "ref": "d313c1bc-17e4-4759-a3a8-9f193b134c8e",
          "length": 253,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "c40c0d2f-f99a-47e3-b0fe-170ad257d19c"
        },
        "item": {
          "id": "ce8ea12a-78f0-41e4-ba95-641df1cdfb88",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "0c3dc404-3b8f-4d7e-bbd5-9524f2d30b6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "689134ee-dadb-492c-9eda-d7383035195a",
        "cursor": {
          "ref": "635699f2-c9cb-4131-a549-ef12b55b2fc5",
          "length": 253,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "2eed1dc9-831a-4fc6-acfb-9906894808c4"
        },
        "item": {
          "id": "689134ee-dadb-492c-9eda-d7383035195a",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "5e38a7cf-a39a-4e58-9fb0-c7f45711b54b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5243ae7-ddf5-4d59-961e-7a05158f462e",
        "cursor": {
          "ref": "cb0269ea-930c-4316-b952-b68bdbe5af41",
          "length": 253,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "4a8b4ca0-59d0-40f3-8979-199523b1cac1"
        },
        "item": {
          "id": "f5243ae7-ddf5-4d59-961e-7a05158f462e",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "5adabc4e-3c10-4875-8c90-0a885ab990ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bea6a13-9cf7-4bbd-87e2-bb56c2e7cd0f",
        "cursor": {
          "ref": "0c5f6ddd-b6bd-41c8-ae21-8a23bb317af5",
          "length": 253,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "15b83650-0fc2-4306-b095-d6ec9ccffaba"
        },
        "item": {
          "id": "4bea6a13-9cf7-4bbd-87e2-bb56c2e7cd0f",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "0d081407-1647-4b02-82d0-d1bf8f379db7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57f83d01-5c99-4188-a80a-b182fcbafbe9",
        "cursor": {
          "ref": "d26157a2-0401-486e-8fcf-6d7e6c30d7df",
          "length": 253,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "3b94cca4-ad1b-4576-8128-061541ad7446"
        },
        "item": {
          "id": "57f83d01-5c99-4188-a80a-b182fcbafbe9",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "f0257f42-9193-49c5-b029-ba9535a096f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc6d4f4a-9ea1-4b77-b401-3dd9e768270e",
        "cursor": {
          "ref": "178680a2-b3e4-4187-9210-95592fdda14f",
          "length": 253,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "8b9ce713-d96c-4b5e-8aa4-745257f2c90f"
        },
        "item": {
          "id": "fc6d4f4a-9ea1-4b77-b401-3dd9e768270e",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "e310130f-b4b0-4bac-876c-260566c3efc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d226d9e-0e2b-4493-8d51-9372ac40b316",
        "cursor": {
          "ref": "4ddd476d-b98b-4c91-9b2e-2abb81c4e9a7",
          "length": 253,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "03e6485c-39f7-4378-ac79-6b057792235b"
        },
        "item": {
          "id": "9d226d9e-0e2b-4493-8d51-9372ac40b316",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "7304b487-0b34-4266-a5c0-0dd870b7e272",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b3e3c1e-c486-4efe-9264-ffd00d7c7831",
        "cursor": {
          "ref": "8e1a066e-2656-4146-b250-2f4b324b7a7c",
          "length": 253,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "e174847b-7a20-43ae-9de6-06cf10eb1da9"
        },
        "item": {
          "id": "3b3e3c1e-c486-4efe-9264-ffd00d7c7831",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "7d68db78-e83f-4fe9-96d1-6444df690ffb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac19f764-95ef-4fd8-9fda-55409637348b",
        "cursor": {
          "ref": "2cf86ed2-51d2-4763-82a1-2b631a3dcde6",
          "length": 253,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "64936fc7-4712-439c-873f-aa63b53218e2"
        },
        "item": {
          "id": "ac19f764-95ef-4fd8-9fda-55409637348b",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "f0f543c2-2aa2-4040-b71a-4cbc6e403882",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4776681-9ee0-41fa-8ac1-ca4557b25b25",
        "cursor": {
          "ref": "b72effca-ebed-4be2-a602-94e6881d0f76",
          "length": 253,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "7f457356-81a3-452a-a630-93d82f3a75aa"
        },
        "item": {
          "id": "d4776681-9ee0-41fa-8ac1-ca4557b25b25",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "b6183065-1a39-476f-a0a0-5455cb516639",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "451a7850-0063-46a9-9213-5da9521d28c9",
        "cursor": {
          "ref": "c8af6c27-7454-403a-90e0-494e2131acbd",
          "length": 253,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "de2e4815-1383-4bf4-89ba-f6ce452dfa8f"
        },
        "item": {
          "id": "451a7850-0063-46a9-9213-5da9521d28c9",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "953bb8b2-f218-4b07-84fa-a3c78960f4c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f9ae054-25c5-4a28-89d5-4801024aab49",
        "cursor": {
          "ref": "76083f5e-fbeb-4a78-b52d-4d94d3b12213",
          "length": 253,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "06a3cc35-70f4-4968-9e74-378c24f5df51"
        },
        "item": {
          "id": "2f9ae054-25c5-4a28-89d5-4801024aab49",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "e8d2129b-df90-4276-95d3-e16ce9609052",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71475032-00d1-409f-ba08-03c299ce8205",
        "cursor": {
          "ref": "e2d79cc6-80ce-42c3-a741-ce4a2f225907",
          "length": 253,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "ac80c08d-4b6a-4557-a4e8-38ce31c86582"
        },
        "item": {
          "id": "71475032-00d1-409f-ba08-03c299ce8205",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "979491c4-f8f0-47e7-9d1f-d7443eb739af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b06bf2b-9be3-47fa-b6ad-e2adff16ffe6",
        "cursor": {
          "ref": "3ae37afc-7074-4aa8-83f0-3a57622b479c",
          "length": 253,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "e32ed584-9d61-492d-bfe6-539084303529"
        },
        "item": {
          "id": "3b06bf2b-9be3-47fa-b6ad-e2adff16ffe6",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "886996d5-5026-4873-8dd0-ffcf96b17bde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "491571ef-a5de-44bf-a6ff-0ab580b7c032",
        "cursor": {
          "ref": "8ca82875-a7af-45a3-80fa-fe9ade08926b",
          "length": 253,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "533a31e4-c94e-4713-a4e7-6d0c87566417"
        },
        "item": {
          "id": "491571ef-a5de-44bf-a6ff-0ab580b7c032",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "d0be81cf-7538-4bd6-b55c-3bedf7647239",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71a8248a-8c62-4a1a-8c8e-04a524406366",
        "cursor": {
          "ref": "9425e2e0-abeb-4c64-9ce3-8f3e2f02867e",
          "length": 253,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "d1e37e5b-2bd4-4efb-876e-d240b88880fd"
        },
        "item": {
          "id": "71a8248a-8c62-4a1a-8c8e-04a524406366",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "b3aec2f0-9705-4912-85fa-d1d18f4b6e3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ae052ef-8df2-4c81-8255-cbfdbc47c1e2",
        "cursor": {
          "ref": "4cf4c1fe-e9f9-40b4-bdea-e9edeb438d19",
          "length": 253,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "dea4b2b1-c529-4dae-8448-065381fe678c"
        },
        "item": {
          "id": "8ae052ef-8df2-4c81-8255-cbfdbc47c1e2",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "83b09b0e-db24-4116-84e8-19392157472d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2aeb95c6-8e73-45fe-9023-9aebd05362a9",
        "cursor": {
          "ref": "b7110c05-b4aa-484e-bcb8-16e0af667429",
          "length": 253,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "bef66142-fa68-4002-aa25-5e10413ff6dc"
        },
        "item": {
          "id": "2aeb95c6-8e73-45fe-9023-9aebd05362a9",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "e79b2496-c8ff-4f9c-86e0-cbf6ba497944",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28107948-f2a0-4800-9772-bf00caebb637",
        "cursor": {
          "ref": "47780c4a-b72e-4dcc-b7bb-aa9ce208804c",
          "length": 253,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "fc576a94-d0e3-4978-a030-3d36f4e57bf6"
        },
        "item": {
          "id": "28107948-f2a0-4800-9772-bf00caebb637",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "4ff44daa-221b-407c-8c2f-da945b89a8f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "faa8b8cf-75f6-47c5-8f13-886ef9ea9d23",
        "cursor": {
          "ref": "32f662e6-7924-4053-b952-f7eed88fe9de",
          "length": 253,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "525064ac-c8ae-424a-bdda-9b84697b19fa"
        },
        "item": {
          "id": "faa8b8cf-75f6-47c5-8f13-886ef9ea9d23",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "74671f18-df89-4574-9343-360b248f8b21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0bea5d6-9ac4-4f61-a11b-621c8a74ac3e",
        "cursor": {
          "ref": "cac8fbd9-3e52-4404-bdaa-37e70419c377",
          "length": 253,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "cef41116-825b-43c5-bc58-0a4c08b486d5"
        },
        "item": {
          "id": "d0bea5d6-9ac4-4f61-a11b-621c8a74ac3e",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "8e12a5ae-798b-4b92-aeb8-51061c1c67fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "744c6c90-466f-4840-bcd5-f3c87ae413ee",
        "cursor": {
          "ref": "aaee8af5-7dc9-49e0-a32a-d83371d7d653",
          "length": 253,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "39380a22-6772-479f-af0b-c842346f1f44"
        },
        "item": {
          "id": "744c6c90-466f-4840-bcd5-f3c87ae413ee",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "9210ceed-853b-46d8-8464-2a1ebf85a3b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dd5437d-2a18-4074-93ee-25c63b7c8fa5",
        "cursor": {
          "ref": "a3f57f37-0bff-472f-a5dd-edf29d5a69a3",
          "length": 253,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "99b2bd55-c758-4c1a-a0b2-e16b551d155a"
        },
        "item": {
          "id": "9dd5437d-2a18-4074-93ee-25c63b7c8fa5",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "842cb99f-e088-4b2c-8d31-6c6e7a649453",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "658f955b-c369-4e3a-b275-871078b5fa83",
        "cursor": {
          "ref": "77ce3c19-d066-4754-ba39-a223f51e11a9",
          "length": 253,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "b0fa1c8f-1523-492f-911b-61d42fa7c0bf"
        },
        "item": {
          "id": "658f955b-c369-4e3a-b275-871078b5fa83",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "65a70224-2988-47bc-b46b-a8fea2b169a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82e63d59-bca2-4f59-8124-942cde8cb4b8",
        "cursor": {
          "ref": "62242e10-79cc-4041-be48-f57830d0454a",
          "length": 253,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "cacc87a5-2df6-493e-8e7c-0de010a1ab9f"
        },
        "item": {
          "id": "82e63d59-bca2-4f59-8124-942cde8cb4b8",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "457c43a8-e458-4c1e-a696-7027e2f6a90b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9069612e-2b82-461b-b73a-62aa428881eb",
        "cursor": {
          "ref": "33f7be6c-1670-48a2-a0c0-4c9017897f26",
          "length": 253,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "59a0fba3-9002-498c-bdcb-6c612c04e1b0"
        },
        "item": {
          "id": "9069612e-2b82-461b-b73a-62aa428881eb",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "cfbdb5e9-745b-4860-a356-ee41ec5ec22b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef7c1679-b24a-4173-abf5-788459ab31e3",
        "cursor": {
          "ref": "a0ae9170-e076-4fb1-a0f1-7f471b2ec736",
          "length": 253,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "89146038-2934-4e8d-a67a-0729f6a4fa4c"
        },
        "item": {
          "id": "ef7c1679-b24a-4173-abf5-788459ab31e3",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "2d629cf6-1eb3-4fcf-8229-c9854003747e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9200c44a-40f8-45f4-83c2-3d5365536e44",
        "cursor": {
          "ref": "205d3acc-0107-476d-8cfe-bfae26268e0a",
          "length": 253,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "1afea9b7-31e1-4e6d-9507-87bc872d53f8"
        },
        "item": {
          "id": "9200c44a-40f8-45f4-83c2-3d5365536e44",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "bd4fca0a-38b5-44cf-ad64-a24371cdbba1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "20202897-0372-41e9-9fb1-2492b401eaf2",
        "cursor": {
          "ref": "060b1ff4-c02c-42b8-a34e-cfbce3a6e013",
          "length": 253,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "18c3eae3-252a-4514-a5f5-0223885d9999"
        },
        "item": {
          "id": "20202897-0372-41e9-9fb1-2492b401eaf2",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "1854b548-c71c-4a58-9c94-0ca7c387eced",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d59e851-ea32-44a5-8397-da7869f69d14",
        "cursor": {
          "ref": "b6f00fdb-3bc9-42de-96ba-fed390d2f1d8",
          "length": 253,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "ebcad2f1-c7a7-4e21-b16a-46dce70b7d69"
        },
        "item": {
          "id": "9d59e851-ea32-44a5-8397-da7869f69d14",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "33c6e9a8-98f4-4035-853c-9fc4a51d003b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b64a652e-fa2f-4204-849a-e29c3fbcad17",
        "cursor": {
          "ref": "e16c2c62-ac58-43c9-8674-9cbda435cec1",
          "length": 253,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "3727e3e0-5b8f-4488-b4dd-9acbb43be2e3"
        },
        "item": {
          "id": "b64a652e-fa2f-4204-849a-e29c3fbcad17",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "d8fb6af0-2dd4-49a6-b872-daa925105910",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0582b78-67e5-4a96-9d12-a9916b14655d",
        "cursor": {
          "ref": "42dec66b-342c-45e0-9cdd-673e06585082",
          "length": 253,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "90323677-04eb-40c0-a78b-17bc4dac358b"
        },
        "item": {
          "id": "c0582b78-67e5-4a96-9d12-a9916b14655d",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "ef1c1b71-09f0-4f7d-b24d-b6305f38ef26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "684dda21-f93c-4fc1-91af-a2615ab45375",
        "cursor": {
          "ref": "fc8f3e6d-02d0-4bc2-bc59-14116f167e52",
          "length": 253,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "cbcb62b5-ae3e-44a1-9f3c-339bbc248a02"
        },
        "item": {
          "id": "684dda21-f93c-4fc1-91af-a2615ab45375",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "923180f6-d849-4abe-855d-685106e249eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0f61218-6cc6-4607-b340-57a8cea9d5ec",
        "cursor": {
          "ref": "c9014b67-8d33-4c9b-ba34-2af4ba69cb6d",
          "length": 253,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "5caaa07d-e0eb-4ede-ba12-2d98747aaa72"
        },
        "item": {
          "id": "d0f61218-6cc6-4607-b340-57a8cea9d5ec",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "acab31cb-f0ef-4c97-b11e-a4b52061bd97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "219b42e0-d99a-47dc-8926-c010c11a5cf9",
        "cursor": {
          "ref": "6df9868e-0f64-4c20-9197-ab2c6f5bb14c",
          "length": 253,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "adf3fadd-38a2-482e-9fee-dc90cc8749dd"
        },
        "item": {
          "id": "219b42e0-d99a-47dc-8926-c010c11a5cf9",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "db5081be-71e4-4e66-ac2d-b3625d0ce5ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26a2f407-682d-4898-8541-351d065997c5",
        "cursor": {
          "ref": "e2f9d895-6d36-42e4-8635-92ffe0a8ea26",
          "length": 253,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "653f921c-a155-4af7-b40f-616b61879804"
        },
        "item": {
          "id": "26a2f407-682d-4898-8541-351d065997c5",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "2429d784-ac3e-4a50-b93e-a1d42025398c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7d86763-9460-4fc2-bf45-afc3ce5c6115",
        "cursor": {
          "ref": "291bc0ed-412a-4471-85c1-c59ded4c6253",
          "length": 253,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "a9e3d04d-0947-4e18-9de2-dad7d5cd3c75"
        },
        "item": {
          "id": "b7d86763-9460-4fc2-bf45-afc3ce5c6115",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "cd8a757f-b89e-45ea-b85b-feae19066e7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d17319c-a6e0-43ca-98d1-73d0b7f35b3a",
        "cursor": {
          "ref": "4216b70c-0635-4001-abc9-de1536c09f5f",
          "length": 253,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "49fb5bb1-fff0-4e60-85b4-86f4853f3a37"
        },
        "item": {
          "id": "8d17319c-a6e0-43ca-98d1-73d0b7f35b3a",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "0d9402bc-9572-480d-8d14-74e149b4c591",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb5bb507-b913-42cf-bcb7-eb58f7511f24",
        "cursor": {
          "ref": "7d1042dd-eac5-4116-9583-764310d61dbe",
          "length": 253,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "d93e9136-9d62-40ce-b5f8-382a7ed58288"
        },
        "item": {
          "id": "eb5bb507-b913-42cf-bcb7-eb58f7511f24",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "2e45bb91-834d-4e42-af8f-f66c9d0bc619",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5663f959-b0c2-4698-a831-1ee182281178",
        "cursor": {
          "ref": "2eaa0d5a-7ed4-4704-9dae-03490713e4a5",
          "length": 253,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "69dc6a34-fc43-4538-8986-2d3730feba5f"
        },
        "item": {
          "id": "5663f959-b0c2-4698-a831-1ee182281178",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "ecf0be3b-fa2a-4ee2-a063-ffb713795b49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "879785b0-3e38-4e48-949d-bb0df3ac02a5",
        "cursor": {
          "ref": "8de42c23-5b4d-4eff-8875-0ce217e37f88",
          "length": 253,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "4418df6b-f926-4015-819a-da08eb00faca"
        },
        "item": {
          "id": "879785b0-3e38-4e48-949d-bb0df3ac02a5",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "efea60c0-d9c6-43f0-b60e-3a6f23386f57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bad2dfc-0006-4465-884a-9d8c646aa58d",
        "cursor": {
          "ref": "e7ca6ee3-aed9-4219-bdc1-0b639b4f6f31",
          "length": 253,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "ce004bc7-11e8-40b8-8855-63c2a9c88e3e"
        },
        "item": {
          "id": "9bad2dfc-0006-4465-884a-9d8c646aa58d",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "d916bc27-3d03-4bf0-87ad-32c019b0c02c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01356638-5477-46f1-a5f6-894c7c94cb9a",
        "cursor": {
          "ref": "2db0be21-c8f9-446d-91b0-3d396cdbb7ab",
          "length": 253,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "3d068c01-a9d1-45d2-a5fa-39ef1213161c"
        },
        "item": {
          "id": "01356638-5477-46f1-a5f6-894c7c94cb9a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "39b70377-6d14-413a-8c03-c4ff9b70c783",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb24a5e9-ebc6-4508-bb8c-c454b19d7f4c",
        "cursor": {
          "ref": "e891e402-e1e3-45cd-b431-7637ea72c968",
          "length": 253,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "bb4c7839-6c27-4f10-b209-0633081455cd"
        },
        "item": {
          "id": "eb24a5e9-ebc6-4508-bb8c-c454b19d7f4c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "2bc50706-1148-45b0-9a45-c5f812c36218",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb91b1f8-9745-4ffb-a12a-d82ae8b43b7a",
        "cursor": {
          "ref": "6c740716-9e6b-4c62-b4b5-2d0397d704f8",
          "length": 253,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "7d6cb150-544c-4dbb-ba41-9542e5b846c4"
        },
        "item": {
          "id": "cb91b1f8-9745-4ffb-a12a-d82ae8b43b7a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "3b0ce31b-da37-4f54-8b68-084e28dceb2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "432531d5-cc4e-4e4c-930b-07a78cc68b6b",
        "cursor": {
          "ref": "5125b403-49ba-406e-ba4d-aae546cedb8e",
          "length": 253,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "8569ab85-678b-4acb-8041-d0ebfd9fd070"
        },
        "item": {
          "id": "432531d5-cc4e-4e4c-930b-07a78cc68b6b",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "ad92e2d5-e320-4adb-96d6-4c5335429fce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92377e12-fe3b-44a9-b074-ea7c1cf6ce30",
        "cursor": {
          "ref": "d33be546-4d32-4355-b3a4-b10660e3cb8b",
          "length": 253,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "e2c14a3a-9bd6-4c6b-a3aa-b54f90747888"
        },
        "item": {
          "id": "92377e12-fe3b-44a9-b074-ea7c1cf6ce30",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "403b42fe-6b11-4b51-8bd2-4dac9f3e64ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cda3e08-5a65-493e-877c-0c7ee0ac0c80",
        "cursor": {
          "ref": "b6932c1f-9e86-47ff-b53c-ae20666201c4",
          "length": 253,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "941b6431-8e1a-43fc-b2d9-00450bc39841"
        },
        "item": {
          "id": "4cda3e08-5a65-493e-877c-0c7ee0ac0c80",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "8111eb4f-15c7-47ee-8443-e01a4f99816e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 684
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "985cbc20-9352-4f40-8ed7-cbdfce69cff8",
        "cursor": {
          "ref": "dca12391-16d1-4db4-8c19-a950cdef40bb",
          "length": 253,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "5b69096e-3d35-4c9e-8627-b97d17352f83"
        },
        "item": {
          "id": "985cbc20-9352-4f40-8ed7-cbdfce69cff8",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "b9b20cf5-cc27-40fd-8582-7c15ec138ee5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 683
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b92e9662-8cf6-4753-bc24-8b9e9f1a9fdd",
        "cursor": {
          "ref": "c1170fad-9cf8-4c06-a289-598bfc82dfab",
          "length": 253,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "d1e6593b-b22b-4f0d-9400-dd697e71572a"
        },
        "item": {
          "id": "b92e9662-8cf6-4753-bc24-8b9e9f1a9fdd",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "29175bbd-8338-47b4-ba72-c930e0b9990d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7371091a-e442-4e36-a0b8-e2d5ffb555bc",
        "cursor": {
          "ref": "e55e8b0c-2c94-4cec-b22c-90e665b99d47",
          "length": 253,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "1ade3160-be3e-436c-b8e2-d3084794eaea"
        },
        "item": {
          "id": "7371091a-e442-4e36-a0b8-e2d5ffb555bc",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "fceb0986-a23a-4373-a15d-28761ca2d438",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2065de99-edf5-4c59-b8d3-c80c18acd396",
        "cursor": {
          "ref": "2c1706d8-d37a-4bba-b0ad-db42e62a8e48",
          "length": 253,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "159dc635-2e62-4b00-8b7d-c8c02cc0f4c2"
        },
        "item": {
          "id": "2065de99-edf5-4c59-b8d3-c80c18acd396",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "b7c77ad7-7a7d-4864-9e24-509a9829a9fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e8e32e2-1033-4516-8b54-32f1de46e80a",
        "cursor": {
          "ref": "45cf8b71-4d30-40f3-a43f-4247ed4f8646",
          "length": 253,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "051e77f9-96fc-4753-87cc-c8f3eccbddbe"
        },
        "item": {
          "id": "6e8e32e2-1033-4516-8b54-32f1de46e80a",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "2dbf30ce-05a5-4d3e-9410-8ed741c06655",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdbe9835-2135-4066-8749-8b6398e5be97",
        "cursor": {
          "ref": "61564efd-b1e9-4197-b6fe-fc4c2cda708a",
          "length": 253,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "ad9cedd6-9efa-4c4a-bb73-1204ae759849"
        },
        "item": {
          "id": "fdbe9835-2135-4066-8749-8b6398e5be97",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "c91218aa-e3f3-424a-bdeb-06b80b25da93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18e20d0f-1db3-43c0-888c-2ce5e8ea0a12",
        "cursor": {
          "ref": "d1062ee2-f19d-40cb-b45a-235cee025650",
          "length": 253,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "e17c3dec-0df4-4ab3-a9bb-7098dc109990"
        },
        "item": {
          "id": "18e20d0f-1db3-43c0-888c-2ce5e8ea0a12",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "3c5fd7ab-bb4f-47b5-848d-a3034b5facdd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "296b87f3-478f-4d5b-b58f-a1cc0565c6ba",
        "cursor": {
          "ref": "976cb9b6-0319-42c2-8ce0-f027d09c4b9d",
          "length": 253,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "882f460f-759e-4a4e-85a7-723a87253c73"
        },
        "item": {
          "id": "296b87f3-478f-4d5b-b58f-a1cc0565c6ba",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "f3414747-f1f6-40b1-a3ad-af5eb5db6b4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0cbcb9b-c3ce-45cf-a7e2-383774a8ca91",
        "cursor": {
          "ref": "fcbb22e5-ba74-41f4-8315-9cc703041c44",
          "length": 253,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "6c6de12d-5838-42d4-adfa-3e13b3c9d6ef"
        },
        "item": {
          "id": "f0cbcb9b-c3ce-45cf-a7e2-383774a8ca91",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "cdb9c160-11de-45db-9b9e-7833fddd46be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f64f74d-9784-4c78-afec-c251a33c929c",
        "cursor": {
          "ref": "b3ae9434-de81-4f7d-a53b-6f15c95ebca6",
          "length": 253,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "1c290542-b1bc-4b93-8400-2b8bb5d6ed88"
        },
        "item": {
          "id": "8f64f74d-9784-4c78-afec-c251a33c929c",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "d88bcdc4-22b2-4c56-bfa1-0f44cdaa74a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc20790e-8651-49e4-9beb-c37c708e4d1b",
        "cursor": {
          "ref": "b803bbe3-02fe-4b18-aaf0-eda1c651dd64",
          "length": 253,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "0fc5258e-b32d-4e0f-8ad8-c0ca433a5126"
        },
        "item": {
          "id": "fc20790e-8651-49e4-9beb-c37c708e4d1b",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "4888c460-e759-4f4f-99f6-1221449f14f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61bc0c28-9514-4efb-9337-38010f27283c",
        "cursor": {
          "ref": "c3af25f0-76e8-4af4-91fd-ddc69a792604",
          "length": 253,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "8d53228b-745c-484a-b138-fad08da2522f"
        },
        "item": {
          "id": "61bc0c28-9514-4efb-9337-38010f27283c",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "b39cae8c-02ce-40ba-8275-f91b0131dff6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b925e79-aa8f-4b6e-8315-a5e8699a08a7",
        "cursor": {
          "ref": "6884e15b-2967-4c26-834e-7659556abb39",
          "length": 253,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "0adb0e09-81f1-4caa-9699-e1fe2b09e595"
        },
        "item": {
          "id": "3b925e79-aa8f-4b6e-8315-a5e8699a08a7",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "9095fc8f-51b1-4498-873b-d6f460506446",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8381df18-1e93-47a3-8b2c-dfb7338d8761",
        "cursor": {
          "ref": "6b52d129-9049-409c-9f5f-7761632dd3c1",
          "length": 253,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "832bc2ad-5f3a-4255-8c80-b0074291d0eb"
        },
        "item": {
          "id": "8381df18-1e93-47a3-8b2c-dfb7338d8761",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "9596a873-68cb-4105-b665-a8d959e6c63c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c97300f9-339f-4bcb-b463-1386d930a908",
        "cursor": {
          "ref": "f29a24dc-1212-4687-93ed-06b92eb8b41a",
          "length": 253,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "0e761b0b-0b1a-4c68-9578-86fb07b39caa"
        },
        "item": {
          "id": "c97300f9-339f-4bcb-b463-1386d930a908",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "1976f6a6-4dd4-47ab-984e-7041f24601f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9af5dae4-1061-47bc-8355-06cdab6b19fc",
        "cursor": {
          "ref": "25f2e15e-3cad-4754-8e9a-5b9e99bcad29",
          "length": 253,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "79657ce1-23f4-422b-9446-a9ba5d1cc13e"
        },
        "item": {
          "id": "9af5dae4-1061-47bc-8355-06cdab6b19fc",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "641d14a4-80b7-478c-9840-d7d0de82ec5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b9ed6c1-d261-41ed-85f1-47777e3c2abb",
        "cursor": {
          "ref": "996a9f8b-f7cc-4f95-8b48-9718b36d3429",
          "length": 253,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "5878dcdb-474f-4897-8e0a-a6318005391b"
        },
        "item": {
          "id": "7b9ed6c1-d261-41ed-85f1-47777e3c2abb",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "b459c051-bd15-4387-842e-35b194f3e1f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a694f1f1-7563-40a3-aba3-f6f92fca531d",
        "cursor": {
          "ref": "9403423a-37a8-43db-80cf-aa25ed6edb14",
          "length": 253,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "fab77f7d-0d9c-48f9-bc40-23bf536a3040"
        },
        "item": {
          "id": "a694f1f1-7563-40a3-aba3-f6f92fca531d",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "c363c952-8f71-4c3c-be3e-721faceb4562",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 515
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84ae5a17-43c1-4efe-951b-2ac367fa3c57",
        "cursor": {
          "ref": "9f3a792b-9c13-4ac2-a566-008d9625ee6a",
          "length": 253,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "ada88d6e-f377-4ccd-befc-05fd970fd745"
        },
        "item": {
          "id": "84ae5a17-43c1-4efe-951b-2ac367fa3c57",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "c9ed78de-cb34-4928-b649-52999baea530",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 514
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fbd6dff-bd48-4e24-9d4d-46f3f4a597d8",
        "cursor": {
          "ref": "61854848-c8a8-4f9b-b32e-5c46df997ac4",
          "length": 253,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "73cc8458-34ec-4470-a3db-4c555e065b4c"
        },
        "item": {
          "id": "1fbd6dff-bd48-4e24-9d4d-46f3f4a597d8",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "ea338407-a7d8-4968-953c-69cc354f49b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 516
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed2ba5b7-f1c9-483a-8e91-87b18ea0e79a",
        "cursor": {
          "ref": "aeb4f8d0-15a1-4d58-add3-bf12150056c6",
          "length": 253,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "ef568f09-eac1-43a6-87aa-7f25bf079a58"
        },
        "item": {
          "id": "ed2ba5b7-f1c9-483a-8e91-87b18ea0e79a",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "7441fef4-57e8-4809-86b5-2a56b74570d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20fabf0d-6e6b-4627-b0db-1800e4547b33",
        "cursor": {
          "ref": "03923cb8-7807-41e2-835a-ea79453621f8",
          "length": 253,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "a212521e-e512-41bd-9fe5-126e7e7fddc6"
        },
        "item": {
          "id": "20fabf0d-6e6b-4627-b0db-1800e4547b33",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "0a2c8b6f-cae6-4605-aea0-111919a7247a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 516
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfa6fbe6-204a-4e9d-8ddf-eec6c23cefdc",
        "cursor": {
          "ref": "3d15f9d5-e3ec-4b73-b823-b778bc3ca1c7",
          "length": 253,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "8fdd537a-9968-4607-a417-3919a37294f5"
        },
        "item": {
          "id": "cfa6fbe6-204a-4e9d-8ddf-eec6c23cefdc",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "3c60bd79-babe-4e83-845c-f29e2895b817",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b81a74e-e756-43bd-9003-a04fb8b18b85",
        "cursor": {
          "ref": "81ef9eac-446c-4e00-ae70-4cf02d373eda",
          "length": 253,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "dca7fad1-bb16-48a2-9ff4-54fc9bf5b747"
        },
        "item": {
          "id": "8b81a74e-e756-43bd-9003-a04fb8b18b85",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "ba2612e1-9a00-4cf9-adaf-1811847d3296",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8930ead6-d0b0-44d5-aafd-14d7131b12e1",
        "cursor": {
          "ref": "047d723f-350a-49eb-86c1-78d8c6156347",
          "length": 253,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "280ee8cd-ff21-492a-8cf8-bf77bfdf6e49"
        },
        "item": {
          "id": "8930ead6-d0b0-44d5-aafd-14d7131b12e1",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "cc3bd24e-6c70-4f20-946c-7f37b766eaae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed393412-cc63-4b75-88e7-3074dcc25618",
        "cursor": {
          "ref": "cb272033-be3d-49aa-9b3e-dab7e8687636",
          "length": 253,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "95a9e96c-4e51-4986-a84e-5536d00bac7d"
        },
        "item": {
          "id": "ed393412-cc63-4b75-88e7-3074dcc25618",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "238a3f08-a5cd-4660-acee-cfb71c2cffff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "102709e1-0cd8-4973-beac-fb66a92b6367",
        "cursor": {
          "ref": "8eab16e1-63d9-4e62-8230-3aaa504c97ae",
          "length": 253,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "662fe5f2-d196-469a-bb26-fb4710ad8ffa"
        },
        "item": {
          "id": "102709e1-0cd8-4973-beac-fb66a92b6367",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "d7157ad8-76e6-4716-9dca-c4f32cd5e71d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dfc0248-5e34-4199-9a2a-4b6829a4e6e8",
        "cursor": {
          "ref": "4fccb875-b85b-4730-84d4-9c864b6d277a",
          "length": 253,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "771d1f0e-fe79-4f00-82c6-ed8a39db0226"
        },
        "item": {
          "id": "6dfc0248-5e34-4199-9a2a-4b6829a4e6e8",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "e5918247-4070-467b-a0a1-2085aa8b05e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2da67c2d-3632-4527-b88e-ebdf9ba9d9bb",
        "cursor": {
          "ref": "c0451c2c-2675-48a1-bea8-4d5e86b1ad54",
          "length": 253,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "b93875a8-c4f5-4f08-bc2f-9f1450609cc5"
        },
        "item": {
          "id": "2da67c2d-3632-4527-b88e-ebdf9ba9d9bb",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "67fd84da-e79e-4ccd-8273-2ac286c48f9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c8ebd4d-31d2-474d-83f8-d211ed554656",
        "cursor": {
          "ref": "b745c88b-4a68-4e0f-b3f9-7b5798acc41a",
          "length": 253,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "7076675d-4b95-4098-9d45-32742a7068ed"
        },
        "item": {
          "id": "9c8ebd4d-31d2-474d-83f8-d211ed554656",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "ecea3f1d-9388-48f5-a230-704cd6771b3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:104)"
            }
          }
        ]
      },
      {
        "id": "6ca7a9af-9c2f-4224-b62d-0768bc67a3b1",
        "cursor": {
          "ref": "462bd38c-f3d7-424c-9c34-ab2303351f66",
          "length": 253,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "2f607b32-edb7-4ab8-bef2-8e8f2c07a84b"
        },
        "item": {
          "id": "6ca7a9af-9c2f-4224-b62d-0768bc67a3b1",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "52741e2b-c6b3-4232-8228-de7b1c5a7201",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:105)"
            }
          }
        ]
      },
      {
        "id": "ace1261c-0874-4afe-a20e-d4d2d245d375",
        "cursor": {
          "ref": "e2947afd-4d83-421b-a9aa-0e1d1d3e222c",
          "length": 253,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "3ea9b628-c985-42b0-83b6-2d2771f5ee74"
        },
        "item": {
          "id": "ace1261c-0874-4afe-a20e-d4d2d245d375",
          "name": "credentials_issue"
        },
        "response": {
          "id": "4d19b0a0-46de-4834-838f-30f9c6e37b48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:106)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:106)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:106)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 5,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:6:106)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 6,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:7:106)"
            }
          }
        ]
      },
      {
        "id": "46d62245-cac7-4ee6-ab7b-e384638757ef",
        "cursor": {
          "ref": "b93db7be-1114-4d26-b7dd-b5fd243dee1a",
          "length": 253,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "59baf54e-6131-4529-9234-5e4989328204"
        },
        "item": {
          "id": "46d62245-cac7-4ee6-ab7b-e384638757ef",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "5aabaf34-e11c-4235-a23c-9245c5094d6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:107)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:107)"
            }
          }
        ]
      },
      {
        "id": "2433aa37-620f-4c93-a63d-04832bdd2008",
        "cursor": {
          "ref": "699bd6bd-0d23-40ff-8d77-76ee570bcc2a",
          "length": 253,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "61e52234-9d7a-4cf7-9ed6-bce220f03a40"
        },
        "item": {
          "id": "2433aa37-620f-4c93-a63d-04832bdd2008",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "ac87d54d-82f2-4130-a053-4e979032c315",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:108)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:108)"
            }
          }
        ]
      },
      {
        "id": "829ebf87-a7fa-4baf-b126-8169de53ca18",
        "cursor": {
          "ref": "7fdcef8b-5a12-4b1d-a964-0a877d3bfa13",
          "length": 253,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "5999a4f7-aef7-49e8-a934-a652d4c50264"
        },
        "item": {
          "id": "829ebf87-a7fa-4baf-b126-8169de53ca18",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "798034c4-295f-4ddb-8dc0-38854131d915",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:109)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:109)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:4:109)"
            }
          }
        ]
      },
      {
        "id": "fbec52e2-9f70-4117-95b6-051107f5d7ef",
        "cursor": {
          "ref": "f4539e70-3953-4518-802a-59a686769b28",
          "length": 253,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "5bd1b1f2-fa98-4e80-bb36-693ba85bf210"
        },
        "item": {
          "id": "fbec52e2-9f70-4117-95b6-051107f5d7ef",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "8e30959a-bc56-4f93-b626-9d8c8006f7f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:110)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:110)"
            }
          }
        ]
      },
      {
        "id": "55fbd93e-f6df-4be7-93f7-a9a866bdf90a",
        "cursor": {
          "ref": "2c0bc683-e1c3-4a1a-b5c7-9823754d1f67",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "8d8f5eee-d395-42a1-abc4-63973dedc19d"
        },
        "item": {
          "id": "55fbd93e-f6df-4be7-93f7-a9a866bdf90a",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "e24188dd-91b5-4279-b6da-76635c44c104",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55fbd93e-f6df-4be7-93f7-a9a866bdf90a",
        "cursor": {
          "ref": "2c0bc683-e1c3-4a1a-b5c7-9823754d1f67",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "8d8f5eee-d395-42a1-abc4-63973dedc19d"
        },
        "item": {
          "id": "55fbd93e-f6df-4be7-93f7-a9a866bdf90a",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "e24188dd-91b5-4279-b6da-76635c44c104",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcdf22c6-a69e-444a-bf04-04d2ca8619b4",
        "cursor": {
          "ref": "342b53a6-f704-4166-8903-5e64fe4bde3d",
          "length": 253,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "7e96cf74-a81d-4880-b8fd-aec9d22b990d"
        },
        "item": {
          "id": "fcdf22c6-a69e-444a-bf04-04d2ca8619b4",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "0b4ec0d4-57da-4786-a19c-3323fa6b6529",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 307
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90567d2f-37d5-4ef5-8774-694fae5feb1f",
        "cursor": {
          "ref": "d9d84b76-a1a1-47ba-a4f2-7edebd172a77",
          "length": 253,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "fb7553a2-84c2-41ca-84aa-371762935371"
        },
        "item": {
          "id": "90567d2f-37d5-4ef5-8774-694fae5feb1f",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "c830d0df-30e8-4492-90b1-da360ed1a6a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 306
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9294b6e-430c-4b9a-b34a-1624b2bec084",
        "cursor": {
          "ref": "bff02250-1ac5-4f6c-9184-812d364e77df",
          "length": 253,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "4b03a3ab-234f-4343-970b-fed96c810f57"
        },
        "item": {
          "id": "c9294b6e-430c-4b9a-b34a-1624b2bec084",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "4d8c02fa-1519-4246-96ac-114a4c55fc65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 308
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "059903ff-bb19-45fc-b727-d136f2ad1664",
        "cursor": {
          "ref": "ba0379aa-58ff-4069-99c2-0d7563f66785",
          "length": 253,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "6d6dc769-92be-4214-a742-99cf2cc60218"
        },
        "item": {
          "id": "059903ff-bb19-45fc-b727-d136f2ad1664",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "727be12f-6c38-4f0b-bb8d-bcebc27e3069",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf5f6251-4f26-4854-8a3c-f5d0df5ddd69",
        "cursor": {
          "ref": "5775c7bc-a4a6-4e52-bcd3-b9f88b9085e2",
          "length": 253,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "c9692238-3b45-4749-b10f-fb4358955566"
        },
        "item": {
          "id": "bf5f6251-4f26-4854-8a3c-f5d0df5ddd69",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "f6d9eaaf-0a54-4724-b3c6-90ee1696d22c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 308
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce132ea7-652a-404d-a1c4-9caa7e09087b",
        "cursor": {
          "ref": "d394444b-b28f-42fb-9e43-b982349b48e3",
          "length": 253,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "69daa5d9-e357-43bf-9fb8-40436edd8cda"
        },
        "item": {
          "id": "ce132ea7-652a-404d-a1c4-9caa7e09087b",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "0867e4f7-727a-4e95-b206-e2a5693e4b7e",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "5d33b879-f779-459c-91a2-eba7ff253b53",
        "cursor": {
          "ref": "80d2d9ae-d1e2-49cd-b6b4-c9da2dd4f88d",
          "length": 253,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "28008f2f-138a-47b6-897a-6ced844b7c12"
        },
        "item": {
          "id": "5d33b879-f779-459c-91a2-eba7ff253b53",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "e38bc0da-eac3-4c18-90e0-c7fb0fa350c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afda76eb-f3be-47e4-ae9b-a51e8af52d99",
        "cursor": {
          "ref": "d45bc9a0-c277-4d13-8e89-875d58f547c8",
          "length": 253,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "79ce8903-3271-4666-b21a-c916c0efcb1a"
        },
        "item": {
          "id": "afda76eb-f3be-47e4-ae9b-a51e8af52d99",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "5e98376f-efc4-4701-a9cf-b8160ca67a87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "351696ed-62c4-42b0-98cc-8c67a91ab731",
        "cursor": {
          "ref": "f67e697d-8256-43e2-aa85-5ebf552a824e",
          "length": 253,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "ac1a1091-21e6-4607-9c09-be3016fcfab1"
        },
        "item": {
          "id": "351696ed-62c4-42b0-98cc-8c67a91ab731",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "70d1c4ce-340e-41e1-bbf6-0a65360ff3ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fee7193c-0da6-4283-ae79-eab355b3dd99",
        "cursor": {
          "ref": "d1352382-618d-4448-9371-c1bc24476ab0",
          "length": 253,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "f24eafe9-9e0c-41a8-9701-ed89f346c49a"
        },
        "item": {
          "id": "fee7193c-0da6-4283-ae79-eab355b3dd99",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "2c455b36-8368-42e7-9c6a-7c21eb4cb85a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af0a75ab-a392-4f97-a1e2-ffb2287e6b4c",
        "cursor": {
          "ref": "3efda92f-d94f-485b-9c0e-9ee91a51b747",
          "length": 253,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "b33097d8-aea0-4bb5-9a6d-677904055237"
        },
        "item": {
          "id": "af0a75ab-a392-4f97-a1e2-ffb2287e6b4c",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "265397af-668c-46f3-8d4a-4bb0d7e83561",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ca44e3e-cb68-48e2-995b-e1b15919326d",
        "cursor": {
          "ref": "610fe215-5f63-4924-acbe-bd56ea860086",
          "length": 253,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "b6f08173-c27b-4688-bb12-787977bd956d"
        },
        "item": {
          "id": "3ca44e3e-cb68-48e2-995b-e1b15919326d",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "e443854c-b290-482a-b427-3da2924b464d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b8d5bbe-de03-48ec-bee6-b24883f94503",
        "cursor": {
          "ref": "0340bb25-a351-441b-a6fc-22923ed33421",
          "length": 253,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "69a476a8-e6ce-486e-aa36-b20fbad4daa8"
        },
        "item": {
          "id": "6b8d5bbe-de03-48ec-bee6-b24883f94503",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "14a5bda6-4bb5-456f-a24f-1ab88a3c4aa3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c47790b4-b822-415d-90dc-52335fc723ce",
        "cursor": {
          "ref": "cc98dd3d-0c8c-4f9d-95cb-435ff8ec68f9",
          "length": 253,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "ce64db7f-9f6b-4159-a816-6d96a5dab0a4"
        },
        "item": {
          "id": "c47790b4-b822-415d-90dc-52335fc723ce",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "c50e5f05-de4b-40a9-95e1-2dc75151e969",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae60f885-d812-473c-bb19-fd8f4264b08d",
        "cursor": {
          "ref": "2f3a79a5-f6d5-47f6-a12f-ec46c80bc136",
          "length": 253,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "58149d87-3fcb-4207-a325-a3c8a5cbef29"
        },
        "item": {
          "id": "ae60f885-d812-473c-bb19-fd8f4264b08d",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "0144afc0-00a1-4621-af7e-5fb1d4c9396e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abe1a63c-0aa1-405b-99db-ee6e15666854",
        "cursor": {
          "ref": "ca24a548-127e-4e51-8646-bcb7af1e34eb",
          "length": 253,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "06615dd1-5116-4652-b4c4-a88e874ed0f9"
        },
        "item": {
          "id": "abe1a63c-0aa1-405b-99db-ee6e15666854",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "d37805bb-a289-4067-8756-a7e49f2263c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52d493ba-db89-40b8-8e25-e15ebfdaec01",
        "cursor": {
          "ref": "604fd7fc-2e8b-410d-a02d-a068b193d370",
          "length": 253,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "38ea1a0c-65ac-45ee-8b89-176e2a6bbb4e"
        },
        "item": {
          "id": "52d493ba-db89-40b8-8e25-e15ebfdaec01",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "49c48002-ad20-453d-865c-4cd32fa4880c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cc0e15b-62fb-42c7-8ac2-d46b9ff61a36",
        "cursor": {
          "ref": "8df1768f-bf86-423f-a3ee-11eb6ee42b33",
          "length": 253,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "3f0b9394-0bfb-4fc1-a97d-285c4bce803c"
        },
        "item": {
          "id": "6cc0e15b-62fb-42c7-8ac2-d46b9ff61a36",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "39af3665-9d9b-4f90-b9b3-4fa672140ff1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e486b7f-97a9-4068-9c55-3d7b2ec5bc65",
        "cursor": {
          "ref": "5a3ddafa-b3c2-440d-a26c-f64994045690",
          "length": 253,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "c97a424a-d159-4e26-a0e7-a4e4818d06d8"
        },
        "item": {
          "id": "2e486b7f-97a9-4068-9c55-3d7b2ec5bc65",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "1c472bf5-010c-4df5-9bc1-1a09cc9d5a75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20249d75-b400-4c3a-914a-bdfe9c178c27",
        "cursor": {
          "ref": "356b7de4-1a31-426c-bb6c-1cd7f5a98985",
          "length": 253,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "961825b6-8dff-45cd-a3f6-214898195e12"
        },
        "item": {
          "id": "20249d75-b400-4c3a-914a-bdfe9c178c27",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "201d0365-a7cc-431f-893a-c0aee657fcc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ce96869-d081-48c4-9ded-db9222367a8c",
        "cursor": {
          "ref": "27d05bb7-029a-4926-a43e-62610a9b5247",
          "length": 253,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "56568d1a-7686-48a7-ad59-8b20009b07bf"
        },
        "item": {
          "id": "7ce96869-d081-48c4-9ded-db9222367a8c",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "7bca92dc-8f75-4ced-801f-a78b458eaa3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "937cbd2c-55ed-4b28-9a62-0b170c4344b7",
        "cursor": {
          "ref": "ea0cb382-dd12-4776-9074-6c25e7badddb",
          "length": 253,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "161b3fc0-f927-4088-981b-ef8a9984a239"
        },
        "item": {
          "id": "937cbd2c-55ed-4b28-9a62-0b170c4344b7",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "60e5eed0-20ef-458d-8b56-b332055bc81d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7357b721-3c6b-4f57-a724-941ba1610d11",
        "cursor": {
          "ref": "2a68d0c0-9be0-490a-a68c-a825bf2f0b1a",
          "length": 253,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "36155ff8-70ba-4b5b-bc5e-a4eaf90d35e6"
        },
        "item": {
          "id": "7357b721-3c6b-4f57-a724-941ba1610d11",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "5f905341-3486-451a-842d-e00458595fe7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "938390a1-4492-4639-92d7-034fc7f5e981",
        "cursor": {
          "ref": "22565e5d-1a70-435c-bcbe-f1a176e1b669",
          "length": 253,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "ed0bba81-4133-4ca4-9d3b-a776d566ba48"
        },
        "item": {
          "id": "938390a1-4492-4639-92d7-034fc7f5e981",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "b2d3c247-9aa9-4b87-b697-c0240aeaef1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "068b0a81-1cad-407a-9988-12a4e593b622",
        "cursor": {
          "ref": "aa49d6aa-62d2-4804-8af1-20ad41e8d0c3",
          "length": 253,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "7e21354b-41d3-4ea7-810e-b3d66d26445f"
        },
        "item": {
          "id": "068b0a81-1cad-407a-9988-12a4e593b622",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "9b83a87b-f419-4479-bf04-246238233107",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92e13dc3-c599-4daa-a290-3dc416f58d49",
        "cursor": {
          "ref": "93f15eb1-545a-4c2c-b398-fbec53e45a42",
          "length": 253,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "0af39786-8dde-4153-8153-e7c8603a9e9e"
        },
        "item": {
          "id": "92e13dc3-c599-4daa-a290-3dc416f58d49",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "11ce597c-7e90-4556-a4a8-866c176e8dc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f827b13-18ff-4deb-bce6-67bf3e022623",
        "cursor": {
          "ref": "7e493049-183c-4de5-9c4e-7aecd15e01fd",
          "length": 253,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "369fcf98-b9bb-4940-ab24-b97cf635f273"
        },
        "item": {
          "id": "4f827b13-18ff-4deb-bce6-67bf3e022623",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "74b1b0e1-7a00-457e-87a8-8deba6861dd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1dec9d37-eddc-4932-a20c-ed1aad0cdf8b",
        "cursor": {
          "ref": "0f9d9cf1-ee8a-45a1-ad2d-b088270462a6",
          "length": 253,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "a2437e4d-f028-4c05-8f67-87f61272c139"
        },
        "item": {
          "id": "1dec9d37-eddc-4932-a20c-ed1aad0cdf8b",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "58a6e264-f9b4-4c4d-be33-0eb57608610b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f673b9e3-f38a-4aa9-a1d8-83e474b31bdf",
        "cursor": {
          "ref": "d7b8996b-6371-41f3-9e00-cb99bd27b2e3",
          "length": 253,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "de04ab7a-e059-4368-b346-a68b352ed7b7"
        },
        "item": {
          "id": "f673b9e3-f38a-4aa9-a1d8-83e474b31bdf",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "3a88a57b-28bd-49b0-8081-b5287a3e17a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adf7ce03-22aa-4b64-8207-566583dcd0c4",
        "cursor": {
          "ref": "041b0031-8d85-42e5-bb98-214f3731ecb6",
          "length": 253,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "8e2d83dc-b99a-4317-a91e-53aadbc3b046"
        },
        "item": {
          "id": "adf7ce03-22aa-4b64-8207-566583dcd0c4",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "475d0ca3-c25e-496c-b696-a792a00be628",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc83318d-3c8f-43a7-b8be-7af01c15fb4b",
        "cursor": {
          "ref": "997305c9-76ad-4aed-924d-352b03d16fce",
          "length": 253,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "c672efd4-291d-4f49-94db-fe8432072945"
        },
        "item": {
          "id": "bc83318d-3c8f-43a7-b8be-7af01c15fb4b",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "98958b61-1ca3-4ca4-b247-fae6a58789e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ce75432-db6d-482e-a88c-473d3bbc1e49",
        "cursor": {
          "ref": "5d24ee8f-9cc2-4cbf-8405-881bd66b447d",
          "length": 253,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "d2303930-dcec-43eb-8b1c-6c59108d2308"
        },
        "item": {
          "id": "4ce75432-db6d-482e-a88c-473d3bbc1e49",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "b50b86bf-dc51-4928-beca-d8f358da2187",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "0403f54f-b15d-4c1f-9ac3-9ec6668b5f7f",
        "cursor": {
          "ref": "899a9aa1-3f7d-4510-b241-64ac8a1ce48f",
          "length": 253,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "13f1fc39-b9ad-4cf0-8130-4dbb516d0bae"
        },
        "item": {
          "id": "0403f54f-b15d-4c1f-9ac3-9ec6668b5f7f",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "7568af1d-4f75-4baa-ad74-62b95eae1fcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "c9fd726e-4abd-4284-890f-b5e3ab5c5f81",
        "cursor": {
          "ref": "c14772b0-09da-4435-915d-d0acb9f7743c",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "7e0c5862-83bb-40d0-943c-c61f84dfcd4c"
        },
        "item": {
          "id": "c9fd726e-4abd-4284-890f-b5e3ab5c5f81",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "04915938-1002-4451-a514-8e4cb17afac7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9fd726e-4abd-4284-890f-b5e3ab5c5f81",
        "cursor": {
          "ref": "c14772b0-09da-4435-915d-d0acb9f7743c",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "7e0c5862-83bb-40d0-943c-c61f84dfcd4c"
        },
        "item": {
          "id": "c9fd726e-4abd-4284-890f-b5e3ab5c5f81",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "04915938-1002-4451-a514-8e4cb17afac7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dab7340d-48bd-4009-8915-693748d4f4dd",
        "cursor": {
          "ref": "f4891087-d58b-4422-b79d-b348eaa965ee",
          "length": 253,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "2e6aae7c-30dd-4fa6-9235-d78fe9263214"
        },
        "item": {
          "id": "dab7340d-48bd-4009-8915-693748d4f4dd",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "62383025-c38b-420a-b320-324a8d541947",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d411bb34-123d-42d2-b26e-c01fcbb5c2cc",
        "cursor": {
          "ref": "b1108e89-6032-42d1-be0a-22475450392b",
          "length": 253,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "470a25a1-dd7d-47cf-a015-571e9da9a1ee"
        },
        "item": {
          "id": "d411bb34-123d-42d2-b26e-c01fcbb5c2cc",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "ac475782-47c2-4317-b90b-0c270d732ac8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "357eadd6-d7c5-4156-a7a1-2092c86eeadc",
        "cursor": {
          "ref": "941b3a66-fc0e-4bdb-b1a3-105da7d65b6e",
          "length": 253,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "901d4495-245e-4492-84a9-eaaba5de7ac5"
        },
        "item": {
          "id": "357eadd6-d7c5-4156-a7a1-2092c86eeadc",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "5e8851d7-fe85-4821-b567-7d3671d7354d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bc8d4fb-de87-4284-b57f-d677395cd775",
        "cursor": {
          "ref": "c1a2d82c-126f-4636-bb06-9effcd242220",
          "length": 253,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "a918b83c-47ae-488c-a2fe-ea105498af2e"
        },
        "item": {
          "id": "3bc8d4fb-de87-4284-b57f-d677395cd775",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "10d35890-5544-4a98-b3fa-1948a174db98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "643639bd-e11c-43d6-89a0-86916199e9b6",
        "cursor": {
          "ref": "4187b891-76f3-43a9-8d1d-24d245c8f347",
          "length": 253,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "ec9da770-8f5b-4aa9-b176-e05dd02bf786"
        },
        "item": {
          "id": "643639bd-e11c-43d6-89a0-86916199e9b6",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "fa8a2b3c-c963-4c74-ae88-820b1c58fded",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b737da2f-b2c6-4cad-b5aa-8e0633cf700a",
        "cursor": {
          "ref": "ae955ca6-5a31-4410-a8de-a85dd683193c",
          "length": 253,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "9b8c35a7-e84e-49ab-b0ee-dca61206c2b8"
        },
        "item": {
          "id": "b737da2f-b2c6-4cad-b5aa-8e0633cf700a",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "2e04eac5-7cda-4499-8292-6709410ca949",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0a4044b-497b-496c-965b-bb23c2f82656",
        "cursor": {
          "ref": "adbdb0c7-69ba-49ba-8897-2f3784c04585",
          "length": 253,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "be1059a4-1db2-44dc-bf9e-5034dfaac252"
        },
        "item": {
          "id": "f0a4044b-497b-496c-965b-bb23c2f82656",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "2d5206a8-c0a7-4809-a055-120b41a6a3cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0326c5f-1430-45c1-bf04-81bdf63a23fb",
        "cursor": {
          "ref": "8501c41d-8246-43d8-a970-48982aff89ee",
          "length": 253,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "6ae4a510-24e1-4da2-b477-85d926a34f6b"
        },
        "item": {
          "id": "a0326c5f-1430-45c1-bf04-81bdf63a23fb",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "befa235a-3c77-43b8-8339-723697c8081e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4b970f7-e2aa-469b-bb19-5d58acdbeb7c",
        "cursor": {
          "ref": "c9ea2635-4229-4958-8203-8ddbe652a15c",
          "length": 253,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "e69d09b2-2521-4287-9216-28b75cb864c3"
        },
        "item": {
          "id": "f4b970f7-e2aa-469b-bb19-5d58acdbeb7c",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "1532b3bd-0de6-4bff-be95-650fe7e13c24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e4f1a55-2b17-4995-b19e-6e9b5da2df57",
        "cursor": {
          "ref": "f74eeba3-3b83-4f69-8956-a17928e7980a",
          "length": 253,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "1a8500fb-530f-4808-9b51-e216f6dcd7c4"
        },
        "item": {
          "id": "0e4f1a55-2b17-4995-b19e-6e9b5da2df57",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "84885cd1-6c1f-4816-81c9-5c579b2681ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06ea1487-3aac-4182-b581-880f16c2faf0",
        "cursor": {
          "ref": "44ddc1c6-5895-44de-9123-f08d1200b826",
          "length": 253,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "e9e99a6a-88cf-457e-8b3e-c384ebd5b32e"
        },
        "item": {
          "id": "06ea1487-3aac-4182-b581-880f16c2faf0",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "7eef0f9e-cff7-43ec-b497-911f99d25279",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "587699bd-3994-437a-aa72-716a2364e8a2",
        "cursor": {
          "ref": "4acde83f-789d-443d-a188-15589eaf266c",
          "length": 253,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "2fc18726-2530-497a-8a36-2a35ac489ad5"
        },
        "item": {
          "id": "587699bd-3994-437a-aa72-716a2364e8a2",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "be09f4f5-9b50-4361-af5d-40e2775a38b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "652a3cd4-62c3-45d5-af2b-bddb46a37106",
        "cursor": {
          "ref": "4e83e22a-ba88-4747-8526-3fffd3a7e3a3",
          "length": 253,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "b4a2ec0a-768b-4e13-b3a7-c585913e2bbd"
        },
        "item": {
          "id": "652a3cd4-62c3-45d5-af2b-bddb46a37106",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "37bc6311-74b3-41d3-967f-ae39254dceec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51aaa2fe-18df-49e8-a910-f15a4041aefe",
        "cursor": {
          "ref": "ba52ad81-45b2-44b3-bbd4-cc5f39685f10",
          "length": 253,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "d71aaeb8-1009-4316-91a2-33b494014240"
        },
        "item": {
          "id": "51aaa2fe-18df-49e8-a910-f15a4041aefe",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "452fa682-1f6b-46c7-ba91-13fee1df8476",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "055a0f24-222a-4f7c-9fbb-f26bf43ba0f1",
        "cursor": {
          "ref": "b7efe4d7-b803-4ae7-9896-09a8f32529cd",
          "length": 253,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "1285f0ac-c6bd-4ca0-8a77-ebe8ed4cc99f"
        },
        "item": {
          "id": "055a0f24-222a-4f7c-9fbb-f26bf43ba0f1",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "1df3f421-3f4a-4530-8b09-a2ec3173afb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9092dd45-3af7-4681-a9cd-e100ee94dc30",
        "cursor": {
          "ref": "36a84935-6619-4123-8d4a-1489eea1c887",
          "length": 253,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "64da38b2-5ac0-41cb-863a-b597ecae926f"
        },
        "item": {
          "id": "9092dd45-3af7-4681-a9cd-e100ee94dc30",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "c73bc5ba-8a7e-43e2-a145-c03fd5775a39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b92a95b5-834a-438f-a265-0887c79019ba",
        "cursor": {
          "ref": "b5ebe268-42a5-402d-a9b5-04112d9f8a0d",
          "length": 253,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "0f084991-8d9c-4d65-8b46-ce4c91876dfa"
        },
        "item": {
          "id": "b92a95b5-834a-438f-a265-0887c79019ba",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "24dab2f9-7b8e-49f5-b09f-dc2443b9d1f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be575fbe-8a25-4e6e-a7f3-607b8ad0403a",
        "cursor": {
          "ref": "b358188c-7f7c-49ad-8f86-f9d5eb8fba93",
          "length": 253,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "5d77988e-35a7-4a6c-9cd5-2b84084d333c"
        },
        "item": {
          "id": "be575fbe-8a25-4e6e-a7f3-607b8ad0403a",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "2711268a-69af-4cf8-9dc3-cf6db5df91c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0216bfe-77bf-4d67-93a6-bd0dc489be95",
        "cursor": {
          "ref": "a2fd54e8-e797-457e-8657-f7385186552a",
          "length": 253,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "deae4431-86d6-4843-9d07-e1e7cbacd71d"
        },
        "item": {
          "id": "c0216bfe-77bf-4d67-93a6-bd0dc489be95",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "cabe90b7-9688-4541-be6a-72c09c7ae53b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea022860-5d2d-4cf0-9382-6a38d8e7cab4",
        "cursor": {
          "ref": "c8bded5e-c860-4601-93c3-a17f93ed702d",
          "length": 253,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "06b587e5-6647-46f4-a7c7-5ee20380efd6"
        },
        "item": {
          "id": "ea022860-5d2d-4cf0-9382-6a38d8e7cab4",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "78e14139-934a-4a41-9db7-eb77471a4da8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "675dfc2c-86fc-4074-b85a-22219e14d1b0",
        "cursor": {
          "ref": "0e482c01-86b2-4bf9-982d-beb22542ffcc",
          "length": 253,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "ac1e28bc-9b47-4eab-8296-894ff40a0eaf"
        },
        "item": {
          "id": "675dfc2c-86fc-4074-b85a-22219e14d1b0",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "09c4fb4f-0a0c-4971-a6f5-a3d8c76355be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7e502e9-6ea0-49ba-9bba-a5b39568f2f5",
        "cursor": {
          "ref": "c8258aca-35a0-4404-894f-3d9fc9105b5d",
          "length": 253,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "bee87083-eac6-4f8d-a07b-95fa32419518"
        },
        "item": {
          "id": "d7e502e9-6ea0-49ba-9bba-a5b39568f2f5",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "f187a133-c343-4291-b190-3bfe00c86573",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2148f999-02a3-46e2-83d0-6c163b8a2532",
        "cursor": {
          "ref": "b1960970-f3fd-4f56-b13a-3573bd494137",
          "length": 253,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "1b50897f-caf5-4b65-9206-4910c1e0fb7e"
        },
        "item": {
          "id": "2148f999-02a3-46e2-83d0-6c163b8a2532",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "47e96d55-87f5-4fbd-b7e7-e55a209205ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cff2488-4b14-4e97-8daa-243e2a63a54d",
        "cursor": {
          "ref": "4f2c1aff-976a-4cd9-ad59-748a6991e246",
          "length": 253,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "6463d750-8c9e-4fc0-b5c2-582d765252e4"
        },
        "item": {
          "id": "6cff2488-4b14-4e97-8daa-243e2a63a54d",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "0003448a-e25a-4b6f-9126-a0c35640d297",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e818ed30-2019-45ee-8772-a2249f1f6b07",
        "cursor": {
          "ref": "54f1d59a-140c-4cd4-9d77-d18e8590d5a4",
          "length": 253,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "a4d6e2eb-a413-472b-93e6-81f5ef7323e3"
        },
        "item": {
          "id": "e818ed30-2019-45ee-8772-a2249f1f6b07",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "5eea89c1-f924-4699-86ee-08f015d7d3bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f84be74b-b930-4612-8a21-3901c6b58746",
        "cursor": {
          "ref": "43f6a6e4-a650-4ca5-aab6-4c701ba09bc8",
          "length": 253,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "6bcb4273-6dfb-42d8-adc8-9499fbec518f"
        },
        "item": {
          "id": "f84be74b-b930-4612-8a21-3901c6b58746",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "b5e4dbad-5f5e-4a77-97c0-7e393ebb75b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88bb8624-57d8-4f9e-8a38-912729246f67",
        "cursor": {
          "ref": "d38dd5b8-34f4-40ca-a910-819ad6094a76",
          "length": 253,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "9f613121-6139-40b2-b776-c5d91f904736"
        },
        "item": {
          "id": "88bb8624-57d8-4f9e-8a38-912729246f67",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "dd173947-2030-4cde-ad43-f4713d0bb320",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db432158-1771-4da6-93ef-56dee42d92a9",
        "cursor": {
          "ref": "e7eb7c01-0085-441e-a2a5-abbc166e5a15",
          "length": 253,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "c6ac760a-1fd0-4713-b4c0-7e73a4e53b6c"
        },
        "item": {
          "id": "db432158-1771-4da6-93ef-56dee42d92a9",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "e255fab3-0b3f-4386-b257-caf4bd01492e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31a33ba9-e191-4c9e-80c4-9447e8a7f3d7",
        "cursor": {
          "ref": "03da4d44-cd74-4bb4-8e42-14a4b354321d",
          "length": 253,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "b30feba7-7491-491c-8f80-d52963fea792"
        },
        "item": {
          "id": "31a33ba9-e191-4c9e-80c4-9447e8a7f3d7",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "53ad299a-9776-42d9-9c75-a4344b592538",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c576f2f3-dd26-4508-b01f-c51a6572a35e",
        "cursor": {
          "ref": "f94c6a4d-1fae-48c2-a1cf-1b639b2b2f1d",
          "length": 253,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "3953c98b-db46-4967-aa05-371db4f9586f"
        },
        "item": {
          "id": "c576f2f3-dd26-4508-b01f-c51a6572a35e",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "5344b53d-c54d-4e38-b667-abc69bf7488c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc2f1eb0-b304-4329-bb00-0ccf1bd25544",
        "cursor": {
          "ref": "527d3fd7-0b85-4f53-baea-b4d244f0d162",
          "length": 253,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "44e4627c-99f1-4ec9-b8ca-91446426bd6c"
        },
        "item": {
          "id": "cc2f1eb0-b304-4329-bb00-0ccf1bd25544",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "b780542c-cb2b-4aeb-90fc-7db5f86bc19e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09f50959-1a8c-4d87-b3be-4c7bedc37baf",
        "cursor": {
          "ref": "070ac77f-02fd-4647-8674-81008c19aed7",
          "length": 253,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "a5788aed-2d30-4138-86c5-bc194e8b0618"
        },
        "item": {
          "id": "09f50959-1a8c-4d87-b3be-4c7bedc37baf",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "dc00c434-59b2-4786-8b6b-fe056f4b536f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17d05cda-49f5-41d4-8264-3ef08dd16f5c",
        "cursor": {
          "ref": "05a45e4f-a18a-4217-b2f6-2e5190e35134",
          "length": 253,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "324fc4fb-0005-4209-8f30-b8a989e8f178"
        },
        "item": {
          "id": "17d05cda-49f5-41d4-8264-3ef08dd16f5c",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "5b3efffa-953b-446b-a197-af8549a15da2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80ee937c-34c8-40bc-ad60-5811c27c3548",
        "cursor": {
          "ref": "6eb9b90c-b166-43fc-ba1f-574b5268fe36",
          "length": 253,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "c95bbdc3-73a4-41c6-b044-3d6acd241fb0"
        },
        "item": {
          "id": "80ee937c-34c8-40bc-ad60-5811c27c3548",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "34f2b2b6-c09b-4636-bbec-004d0b4064e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62ab3b18-ac8f-4acc-ac83-acd3756f41d0",
        "cursor": {
          "ref": "6c523732-cd27-4375-ace4-5d125849ce5a",
          "length": 253,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "89e73852-00a8-4dbd-b7a0-c83651a132cc"
        },
        "item": {
          "id": "62ab3b18-ac8f-4acc-ac83-acd3756f41d0",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "85491614-ab16-4c9b-85b7-b192bdc23e2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b49b535e-6724-441a-addd-fde98856d418",
        "cursor": {
          "ref": "cdc1d2e4-9e2c-44ab-af9f-6c553e4da2aa",
          "length": 253,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "fb47769e-0c2a-45f7-8a95-e65eedb52c46"
        },
        "item": {
          "id": "b49b535e-6724-441a-addd-fde98856d418",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "69fb6674-a07b-45d6-9dc0-b050680a0a4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2023f5a-b530-4418-b6d8-17b694264520",
        "cursor": {
          "ref": "2f6f29cc-6f59-4938-9323-b309fdb46a0b",
          "length": 253,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "a4bf4f61-1ac7-4173-a074-2362d3c70972"
        },
        "item": {
          "id": "b2023f5a-b530-4418-b6d8-17b694264520",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "0b8bb2cd-c047-48df-94fe-f1dc44e2f169",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d808840-9109-4545-9090-39dde6989ae8",
        "cursor": {
          "ref": "0c0ad056-b38a-4700-99ad-249713edf087",
          "length": 253,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "b3b5bc11-e28b-4076-99c3-69619f42c2ac"
        },
        "item": {
          "id": "0d808840-9109-4545-9090-39dde6989ae8",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "f478f263-544f-430e-867d-56d0bdded18c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8636e98a-dce3-423b-977b-9ebbdf8d29cb",
        "cursor": {
          "ref": "68ad72ff-5b2a-4ee8-bff1-59b5743e0e3d",
          "length": 253,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "c14457d6-596c-49a7-ab6b-65ec04fe8c68"
        },
        "item": {
          "id": "8636e98a-dce3-423b-977b-9ebbdf8d29cb",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "1391c91a-5a0d-439a-8637-7db04e785971",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8de320b-bbca-45da-ac39-5d220daeda0c",
        "cursor": {
          "ref": "5eff3e93-f9b5-48ce-a3c9-d70e0eb62fd2",
          "length": 253,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "b89db89c-5ce7-4997-b2ec-43fcd09a3f86"
        },
        "item": {
          "id": "f8de320b-bbca-45da-ac39-5d220daeda0c",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "69a12374-cbed-4450-b7cf-cc33326032af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4167a73-62ef-46b9-8fa7-14a3e1237bb4",
        "cursor": {
          "ref": "7ce795bb-71da-4257-9875-ee08c676c0d1",
          "length": 253,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "adfe9c75-9953-43d8-8beb-9ecff3e9a24d"
        },
        "item": {
          "id": "a4167a73-62ef-46b9-8fa7-14a3e1237bb4",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "f8b75a5b-5b67-4c71-8773-a6f3124a8d0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8b4cb58-7992-455c-83d0-381c221fda19",
        "cursor": {
          "ref": "1c8c32d2-78b7-48fe-93fa-8a59207360a7",
          "length": 253,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "adb1cb0a-93c0-4a4c-9a0a-e8f4b9cd2c2d"
        },
        "item": {
          "id": "a8b4cb58-7992-455c-83d0-381c221fda19",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "89cef8ae-e922-40c9-b13a-e2a67903911f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7124e413-53ff-494a-988a-909a85c9f297",
        "cursor": {
          "ref": "6f94605c-89fe-4480-9d66-e39089798819",
          "length": 253,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "1b1924ea-1cb5-40d1-b181-5a8e3e5cb9bc"
        },
        "item": {
          "id": "7124e413-53ff-494a-988a-909a85c9f297",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "40cb12d5-0a3d-4ca0-afc4-0ee031662f32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef5e9271-8efe-4648-a219-ad32e500f258",
        "cursor": {
          "ref": "1dbdbdad-3af5-4ecf-b309-10997898cbf3",
          "length": 253,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "6d125177-c184-4505-9a29-47a6069bd564"
        },
        "item": {
          "id": "ef5e9271-8efe-4648-a219-ad32e500f258",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "8f616288-d91d-416e-81e9-82f8304559e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3b4fb56-56c8-4c19-9db7-869a2cf85c75",
        "cursor": {
          "ref": "01ac87c1-697d-4c4e-abc4-931b4eea2f47",
          "length": 253,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "838d5e2b-ae46-4350-ae93-9cdfd092e6ef"
        },
        "item": {
          "id": "e3b4fb56-56c8-4c19-9db7-869a2cf85c75",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "6971fcb8-000c-4255-bf79-bee019fd87cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36734282-fde3-471c-a868-7890c1ca18d6",
        "cursor": {
          "ref": "a5d81034-fc6d-4fe4-a36a-b8d088014f2d",
          "length": 253,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "adcd4536-1d7a-49f7-9885-12f3e005b384"
        },
        "item": {
          "id": "36734282-fde3-471c-a868-7890c1ca18d6",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "c32111c9-6295-4229-ba9d-60587720d703",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1300559e-7cbd-43a8-885a-b8d413857953",
        "cursor": {
          "ref": "8d33d0cb-d914-4791-b8d5-2c2995e4e1e5",
          "length": 253,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "f661bd19-0aa5-4827-8a1f-7516d0e5f308"
        },
        "item": {
          "id": "1300559e-7cbd-43a8-885a-b8d413857953",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "d43ed2d8-ef34-4782-952c-73361719ac9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5177f9ac-2ce2-4418-8fe7-d28617ac4ccd",
        "cursor": {
          "ref": "05bef86a-9aa1-4dd2-9c6b-3c6a0ff076c5",
          "length": 253,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "f37679ed-dfc1-4b33-bf0a-6efc4fe8071b"
        },
        "item": {
          "id": "5177f9ac-2ce2-4418-8fe7-d28617ac4ccd",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "410e8311-f561-467a-b0a4-c0e403c69132",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08a30c0d-967e-4710-bdba-c1fae6abed53",
        "cursor": {
          "ref": "255a2096-bd46-47a7-ad2b-2be3a0d35c69",
          "length": 253,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "62d73b01-feaa-41fe-b1e8-4e865c4220f0"
        },
        "item": {
          "id": "08a30c0d-967e-4710-bdba-c1fae6abed53",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "5b1fae25-4c74-409c-9f4c-2979c9ffd13c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c79dce31-6887-4577-9b4e-d2ca2fc266ea",
        "cursor": {
          "ref": "ce46b8dd-69d1-43ee-a2d5-9029bd03fea4",
          "length": 253,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "42d7c3a7-53f3-47bc-94bf-e62570b55bdf"
        },
        "item": {
          "id": "c79dce31-6887-4577-9b4e-d2ca2fc266ea",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "c843387d-584c-4e14-99eb-c8f90061682a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f31091be-0716-41c6-bf31-ed96219b7c36",
        "cursor": {
          "ref": "2a6f558c-824f-43a1-9faf-715e579ef64f",
          "length": 253,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "b97e07b5-262d-49ea-989c-19d752c8832e"
        },
        "item": {
          "id": "f31091be-0716-41c6-bf31-ed96219b7c36",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "a8ed5b11-d877-43f7-9de8-af7b39b056ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa50f290-1ea7-4b5b-b283-9007aac6e910",
        "cursor": {
          "ref": "71d1eda8-ef9c-4a2c-b660-e20c14f7014c",
          "length": 253,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "2c963b53-ddf2-4555-9293-3e0a1eaddcaa"
        },
        "item": {
          "id": "fa50f290-1ea7-4b5b-b283-9007aac6e910",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "10284f28-e6a0-4f22-9956-95581ab60544",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3176f4ed-b215-47f1-88e1-1844a7f374c5",
        "cursor": {
          "ref": "4891d3e5-e5c9-43d9-8e69-b82ec37c7b47",
          "length": 253,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "bd3c148a-6ca8-4c6d-bc01-ed06c20db9ee"
        },
        "item": {
          "id": "3176f4ed-b215-47f1-88e1-1844a7f374c5",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "0bfc0e14-deeb-41c5-9457-588f598b9a6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fbd7ba6-b512-43eb-8526-dd704b2bf769",
        "cursor": {
          "ref": "1b5eb8fd-6eee-481f-ab12-d6c965e7afd1",
          "length": 253,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "179bcd63-b0be-4049-8eab-d74862479dae"
        },
        "item": {
          "id": "8fbd7ba6-b512-43eb-8526-dd704b2bf769",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "cbb35c33-fe82-423f-b601-0f2bbd2c4bc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68776e4c-658e-40be-b093-ea6d2b9259d4",
        "cursor": {
          "ref": "828173f8-85e8-4e1d-b5bb-8f60d36dfcf6",
          "length": 253,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "8e194633-f2df-42c3-9d63-51280b18c9dd"
        },
        "item": {
          "id": "68776e4c-658e-40be-b093-ea6d2b9259d4",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "1bb2571a-dca5-4a8c-8ba5-4833853a8f43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3eb73499-152b-4b13-aecc-4b1f08935c51",
        "cursor": {
          "ref": "10c40c7e-90e8-46ea-bbd0-39ac175449a7",
          "length": 253,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "4968b9c9-a092-4f60-9dad-0f3643ec7489"
        },
        "item": {
          "id": "3eb73499-152b-4b13-aecc-4b1f08935c51",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "5d8c3d53-0ea7-4348-b76a-fdc0bbde28cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d2ce9e1-e6ac-42f1-bc63-0fb1fbd4581d",
        "cursor": {
          "ref": "176f2796-7b77-485d-b26f-f69fcf13b1ef",
          "length": 253,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "ee887935-4ef5-4744-99d1-dfc2f7dce8ac"
        },
        "item": {
          "id": "5d2ce9e1-e6ac-42f1-bc63-0fb1fbd4581d",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "8ffc8fcd-eea7-44ba-943f-0cdbda730bdd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aaeaeecf-514f-44b5-9950-bd2d59bae66e",
        "cursor": {
          "ref": "dc30110a-272d-47b5-bc72-38b256e699f2",
          "length": 253,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "573f0174-b851-4a64-9a33-e92d1cef236c"
        },
        "item": {
          "id": "aaeaeecf-514f-44b5-9950-bd2d59bae66e",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "26d96583-5b0f-48b7-bbe6-afcc8ae58e6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 130,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9ffb033-4f46-4bc2-8db2-3bcc30cefd49",
        "cursor": {
          "ref": "124ac060-1aef-4252-a426-64e05e9ecd0c",
          "length": 253,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "c678cf67-166e-4c1f-b3a2-8b8324df10cf"
        },
        "item": {
          "id": "a9ffb033-4f46-4bc2-8db2-3bcc30cefd49",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "66b67e79-b7dd-480e-9f80-9338e29f024a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdb95330-5d8b-42ec-a04c-00dd95fb5970",
        "cursor": {
          "ref": "91f360d9-77d0-4081-b6fc-88991fd2744c",
          "length": 253,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "ed9818b9-848c-46fe-a7a8-a579acf2ccff"
        },
        "item": {
          "id": "fdb95330-5d8b-42ec-a04c-00dd95fb5970",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "18681466-743f-40bc-a06f-0e7dd7bc0d0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a9f0180-133b-425f-be40-fcb2bdd0ea01",
        "cursor": {
          "ref": "76ba0490-6184-458b-91ff-4bbc31b93d81",
          "length": 253,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "d6e0f293-0992-41f6-af1f-02f4bd6df24f"
        },
        "item": {
          "id": "7a9f0180-133b-425f-be40-fcb2bdd0ea01",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "e252efae-b22f-4f0a-b61a-b5a1fa8c56be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6fd5f1c-5b5d-4272-a9d9-823ecc096636",
        "cursor": {
          "ref": "a79e75a9-3c6d-4755-8341-8690f2633ffa",
          "length": 253,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "ac524c37-8770-46b7-afc8-a4206155038b"
        },
        "item": {
          "id": "a6fd5f1c-5b5d-4272-a9d9-823ecc096636",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "9d706cb5-f1ea-4a78-b331-99561de9d06c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de427f90-9d6b-4b0f-9f5c-5681fbab559b",
        "cursor": {
          "ref": "de47e460-32cc-48cd-adec-e116ae63bb6c",
          "length": 253,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "bc44ac63-c9ee-4df2-868e-01746abc28ac"
        },
        "item": {
          "id": "de427f90-9d6b-4b0f-9f5c-5681fbab559b",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "a9210740-206c-4b74-89b9-1dbea23abfe9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dba1b442-3ea3-41ff-b0f9-792654885d30",
        "cursor": {
          "ref": "99950778-9e84-49b8-96b8-9cfd937ebe91",
          "length": 253,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "a8a493de-5e30-425a-9764-d335a3b72566"
        },
        "item": {
          "id": "dba1b442-3ea3-41ff-b0f9-792654885d30",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "e557f63b-f04b-450b-bb79-655f73003164",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e2b1652-4e22-4eaf-bdd2-0021bd0444b0",
        "cursor": {
          "ref": "5ee60c46-dee8-4a90-9a6c-52c26a58533b",
          "length": 253,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "947e7bbd-1bf8-45f1-842f-93f0017e000b"
        },
        "item": {
          "id": "2e2b1652-4e22-4eaf-bdd2-0021bd0444b0",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "ffa2662b-8bb0-499b-a446-3709bd4635a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "def5c706-a549-4bb5-b6ac-2219f01db7fb",
        "cursor": {
          "ref": "636c0084-6bdf-4900-b93b-f36039b29707",
          "length": 253,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "7204df6c-7856-4249-8adf-f5bd49c5ee58"
        },
        "item": {
          "id": "def5c706-a549-4bb5-b6ac-2219f01db7fb",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "64de32d4-015d-4d4e-adcf-9d257b698154",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23a8eafa-974c-43f7-be2d-114b36fdcd35",
        "cursor": {
          "ref": "da041c74-4dff-44f1-aa27-be05131c0380",
          "length": 253,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "8c704257-1755-4719-b602-cd9085232f0e"
        },
        "item": {
          "id": "23a8eafa-974c-43f7-be2d-114b36fdcd35",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "037f4e7d-97a4-40a1-81b5-9380d80bfaeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c36b67d2-9167-4f78-8b8c-85a74236d338",
        "cursor": {
          "ref": "4d2065ab-9998-4c0e-bacf-30a7c1854765",
          "length": 253,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "ea29e037-e499-44bc-b8fd-daf2d4d505ae"
        },
        "item": {
          "id": "c36b67d2-9167-4f78-8b8c-85a74236d338",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "2b052d75-cc2f-448a-b965-1a39a03053e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92b0f20d-2b4a-4d13-903d-f9e56b3ca3dd",
        "cursor": {
          "ref": "ee06e04a-5d4c-46db-a878-d7b72998e0b7",
          "length": 253,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "f15633ea-ac01-444f-a58d-119389f42657"
        },
        "item": {
          "id": "92b0f20d-2b4a-4d13-903d-f9e56b3ca3dd",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "37c3928c-9d82-49d7-b778-f25318d2298b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88d3f9b0-1f03-477b-8c88-fb2251a69932",
        "cursor": {
          "ref": "f01ec9f2-48ee-4074-8f05-a3d219354939",
          "length": 253,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "56f4ea31-dc06-4f50-af28-f59450d98901"
        },
        "item": {
          "id": "88d3f9b0-1f03-477b-8c88-fb2251a69932",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "5e4371fc-1d9e-4b60-91a0-d4f5d101d14c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff85fe6d-7051-484e-9953-9bd15cab0f73",
        "cursor": {
          "ref": "6bac0cce-b02b-462a-a212-f0cc1da04dd4",
          "length": 253,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "5918995b-7a21-470d-a749-3f714064b9cc"
        },
        "item": {
          "id": "ff85fe6d-7051-484e-9953-9bd15cab0f73",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "2e31fa79-de38-493b-acd2-43a6fd6a3260",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a3be938-8a71-40f1-aea2-36719338833c",
        "cursor": {
          "ref": "7a0a26f2-dabf-4905-a2e8-0caa5582886b",
          "length": 253,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "96f431af-904b-4fc3-84fd-9d5ca55ef7cd"
        },
        "item": {
          "id": "5a3be938-8a71-40f1-aea2-36719338833c",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "61ccb4ac-5108-48c5-83d1-826666412851",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9930f0a5-60e4-494e-813c-56b4c1518d29",
        "cursor": {
          "ref": "2f611ec7-ef85-4b63-b0c0-ed4601b30a9b",
          "length": 253,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "e7e35a09-40b1-482a-8a5a-5ef712cd0847"
        },
        "item": {
          "id": "9930f0a5-60e4-494e-813c-56b4c1518d29",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "eb7326c6-0120-44df-a721-a63a9ec70a8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94c80a1e-73ad-414c-b3f7-294c9561e5eb",
        "cursor": {
          "ref": "b8620459-7150-4722-b24a-42d90c370d1a",
          "length": 253,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "e6b7efbf-943a-4f7d-9504-373a4ac0f5ed"
        },
        "item": {
          "id": "94c80a1e-73ad-414c-b3f7-294c9561e5eb",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "7012aee2-5254-4abc-82d4-11bb8fee5f11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb5f5053-d3f4-428b-bc8b-7cf74efb4f7a",
        "cursor": {
          "ref": "2ff69dcd-5955-4f51-80f5-ae2d1676b94d",
          "length": 253,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "9c9c7fc1-5908-4362-849b-382c97808878"
        },
        "item": {
          "id": "bb5f5053-d3f4-428b-bc8b-7cf74efb4f7a",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "ed22b221-a92b-4ee7-ba48-f9a78b8d58e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb96b038-2b32-4ad8-bbd1-d7141d96d2de",
        "cursor": {
          "ref": "a5f55656-03aa-4d23-802a-2188a31daea7",
          "length": 253,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "fb3d064e-bcfe-47cb-84f0-8533ae9cbecd"
        },
        "item": {
          "id": "cb96b038-2b32-4ad8-bbd1-d7141d96d2de",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "0e7dd7b0-6537-411f-918a-c7d5b507b220",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4faeb4d1-da08-4447-a136-bc8f03fc372b",
        "cursor": {
          "ref": "83379a0c-ef92-4caa-882a-07dc3a649444",
          "length": 253,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "0e736b1f-fd38-406c-bff3-648c4d0bb211"
        },
        "item": {
          "id": "4faeb4d1-da08-4447-a136-bc8f03fc372b",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "574755b4-9a87-4afe-b690-8fe016a45e64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57b7db69-dfa2-46aa-89cd-d255df96fd8f",
        "cursor": {
          "ref": "1e3b5870-0bf8-49d2-bc53-00caa9bd784f",
          "length": 253,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "fe1e82d4-67f8-4a95-9b81-24b946ecdfde"
        },
        "item": {
          "id": "57b7db69-dfa2-46aa-89cd-d255df96fd8f",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "5ade715f-1d26-4da6-aeec-aea801cafd2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e696dcf-bc40-4df0-86d4-635cefe9666c",
        "cursor": {
          "ref": "8702f244-e385-4126-b28a-ef2bd3fcbd36",
          "length": 253,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "c3f1a232-2965-4864-9fa3-5d7864c1cd14"
        },
        "item": {
          "id": "6e696dcf-bc40-4df0-86d4-635cefe9666c",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "d7785918-52c6-44d8-bef8-9da9bcb88436",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8987dbd7-8634-408c-a644-ddec45389c36",
        "cursor": {
          "ref": "c5462cb6-87be-4c37-87cb-776b34ac5b53",
          "length": 253,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "5e981da9-c41f-406e-9a0c-d704aeea0535"
        },
        "item": {
          "id": "8987dbd7-8634-408c-a644-ddec45389c36",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "ca689e87-cbf5-4fc7-bcd1-e53bf2a517ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49a93551-2f4e-445a-8422-ff9d0be75b6e",
        "cursor": {
          "ref": "b7fa21d8-dd30-4a71-8960-63ceb626be96",
          "length": 253,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "8abd249e-dd80-4bdc-a52e-b47cc3e8bb6d"
        },
        "item": {
          "id": "49a93551-2f4e-445a-8422-ff9d0be75b6e",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "cb45a23a-e6ef-4ce5-897f-55a49a75aafd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9153f4ac-51d2-4b08-8f9d-92d82fff9ced",
        "cursor": {
          "ref": "16034222-6660-4bba-ae5d-8367bbdf1419",
          "length": 253,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "f58cc671-7c4f-4f85-953e-c37b55c79587"
        },
        "item": {
          "id": "9153f4ac-51d2-4b08-8f9d-92d82fff9ced",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "874b955d-a17b-4d67-80a0-f085e446b4a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da73f3cd-fba9-476a-800c-47648854d14e",
        "cursor": {
          "ref": "9c415a76-76c5-46c6-93e2-b22cfa93add1",
          "length": 253,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "13672f9f-fd4f-45de-9d6c-f8f2972c2e69"
        },
        "item": {
          "id": "da73f3cd-fba9-476a-800c-47648854d14e",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "7050ced2-c585-4086-b8d9-548379f4d18d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfc7812e-1ee9-4ec1-a1ed-05290bfe064d",
        "cursor": {
          "ref": "348a1b76-337e-49d3-b26d-9f03b787be02",
          "length": 253,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "fe94ff67-1235-4a3d-b09b-f7943c554269"
        },
        "item": {
          "id": "bfc7812e-1ee9-4ec1-a1ed-05290bfe064d",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "8dbcdfbd-8943-43d4-9598-486049752269",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33aceb29-cf56-4ab0-b3dd-d541feb851df",
        "cursor": {
          "ref": "57b7a6a8-c1ae-4c1e-b454-e5f5fa3339cc",
          "length": 253,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "b0e9eaf2-b0f1-483d-aebe-d10d2638fffc"
        },
        "item": {
          "id": "33aceb29-cf56-4ab0-b3dd-d541feb851df",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "ae76cfa9-901a-4bd6-bb7b-33f60d79a280",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ec5e09d-9c52-4607-a67e-974cc26e42bb",
        "cursor": {
          "ref": "f2ee4d16-1c18-49c3-9352-74ff36c9d03f",
          "length": 253,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "dd2878ac-4bb3-45d2-97ea-425cceb5e883"
        },
        "item": {
          "id": "7ec5e09d-9c52-4607-a67e-974cc26e42bb",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "6b928a7f-c81a-4464-bb73-f6e03e8b2021",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3c5f4b7-97e6-46db-8ae4-54233b1c134d",
        "cursor": {
          "ref": "0f1bcd3e-7c23-4f00-9929-3b0c991227b0",
          "length": 253,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "5d0e73a5-3e05-4075-8f99-34e4789701c5"
        },
        "item": {
          "id": "e3c5f4b7-97e6-46db-8ae4-54233b1c134d",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "f72c29ae-92b0-480f-8bac-1f9eb355e83f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f88e43be-f2aa-45d5-98c2-4c495f960561",
        "cursor": {
          "ref": "83079067-a167-4824-a1a2-216551362195",
          "length": 253,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "c13e9be2-3c41-41e7-80f4-c2cc29301377"
        },
        "item": {
          "id": "f88e43be-f2aa-45d5-98c2-4c495f960561",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "fa4f80be-6cc2-45b4-a3d0-58f35c4696c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c85fadb-1f52-4ac3-8315-5bdda63ac220",
        "cursor": {
          "ref": "c5be09d9-7ad3-4308-b691-3dcddde42988",
          "length": 253,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "558e5989-3c2a-4691-8bfb-cf3ab8b10b09"
        },
        "item": {
          "id": "4c85fadb-1f52-4ac3-8315-5bdda63ac220",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "45da6f09-82c7-46b6-9671-26c91dc22b4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13a6261d-eab1-4851-bbfe-03c62236351e",
        "cursor": {
          "ref": "7238dabf-5c71-46a2-9425-37121fec0265",
          "length": 253,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "9ccf2097-e2a7-44ec-a7ed-9b0b34665947"
        },
        "item": {
          "id": "13a6261d-eab1-4851-bbfe-03c62236351e",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "f33c6b9d-737f-44b9-ba15-db42dab6ad80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb0a78d1-09a2-4960-b6f2-9e5f509e67aa",
        "cursor": {
          "ref": "e2d460d3-0022-4576-a978-a06e5f1b0327",
          "length": 253,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "c9db004f-9c9e-4a6d-ac02-8b3b6b8f133f"
        },
        "item": {
          "id": "fb0a78d1-09a2-4960-b6f2-9e5f509e67aa",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "2f4a3fdb-1987-4eb8-a16a-fa77ccabe145",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "285f7823-596c-45c1-a2d6-ce83b793d33f",
        "cursor": {
          "ref": "e747e809-bbe4-4278-9fbb-e385adebdf23",
          "length": 253,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "e67362f8-1bfa-4f4b-ae7b-86de61f7c2f8"
        },
        "item": {
          "id": "285f7823-596c-45c1-a2d6-ce83b793d33f",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "f2159a78-df00-4d94-bd7c-288ceead75b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5887f6de-7eb0-488c-845e-04f61f3ae8d1",
        "cursor": {
          "ref": "6b750e9b-b62c-4b2a-90fc-8dac4ff3d37f",
          "length": 253,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "32b57353-133d-48c4-951d-2765765ccd8e"
        },
        "item": {
          "id": "5887f6de-7eb0-488c-845e-04f61f3ae8d1",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "6a792ac4-184e-476d-bf94-c6461f04f629",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ca5d4e4-167e-4673-a110-354225ed1356",
        "cursor": {
          "ref": "fea7f866-5bd2-432a-adb9-ec1d42e430ec",
          "length": 253,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "ff50ead1-690a-4d02-bd52-b85c0a16117a"
        },
        "item": {
          "id": "6ca5d4e4-167e-4673-a110-354225ed1356",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "ca136d9f-3866-4423-8b73-9a4ad5b22924",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1f1cc44-4d29-440b-837b-02b8a1585da4",
        "cursor": {
          "ref": "9fb233ab-7080-4ce4-ac4b-a0c2dd598bbc",
          "length": 253,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "4f18717d-346a-436a-baaf-9e85feb4182f"
        },
        "item": {
          "id": "c1f1cc44-4d29-440b-837b-02b8a1585da4",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "02f4a5ca-5759-4e85-a482-6e15347fe34f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71bee6e9-be54-48dd-9985-4fd982bd7b0b",
        "cursor": {
          "ref": "81fd1fc9-0a81-4f28-8512-0e3efbbbac84",
          "length": 253,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "c29afd90-bcfe-47a0-89d2-692536a087f9"
        },
        "item": {
          "id": "71bee6e9-be54-48dd-9985-4fd982bd7b0b",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "25427f5c-32b5-4cd7-a4ed-cb3f7176d82e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddeb21b9-f5ae-4742-b1f7-70c7b9aaaf4f",
        "cursor": {
          "ref": "fa1d3d13-6ffd-4473-8f9b-98c250bba8fc",
          "length": 253,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "12e1e5f9-84e8-4b6e-8efe-4ac02655fe30"
        },
        "item": {
          "id": "ddeb21b9-f5ae-4742-b1f7-70c7b9aaaf4f",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "768ce596-ba93-4c72-b891-63246c7a8e35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70ffa838-84f3-4007-a711-bfed459f1d12",
        "cursor": {
          "ref": "53c27c86-d5cd-44b0-a96d-2c932d11c4b8",
          "length": 253,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "546bc76a-bd48-4b6a-8c66-dec53b5d804e"
        },
        "item": {
          "id": "70ffa838-84f3-4007-a711-bfed459f1d12",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "68ec3619-3990-4c84-9a37-bce0fd931b6a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 30,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e3a1db7-b679-4e93-98bf-f6605c9fc7ac",
        "cursor": {
          "ref": "535e7a46-8383-405a-a6c3-72643624f6ea",
          "length": 253,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "5cdc9ef0-7081-4721-b8f6-8ce09c4ba841"
        },
        "item": {
          "id": "7e3a1db7-b679-4e93-98bf-f6605c9fc7ac",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "7d38e933-3e5f-43e6-8877-e30dfca002a6",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 30,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "852bc298-bdb5-4d44-90d6-1f1ccce55e1b",
        "cursor": {
          "ref": "36c45406-d2a3-4f1b-a9ca-f6a0b1079ac7",
          "length": 253,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "83a81fab-c280-4915-834e-6be3ae25e3f6"
        },
        "item": {
          "id": "852bc298-bdb5-4d44-90d6-1f1ccce55e1b",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "10d705ca-7865-411f-b1e1-4f8c0336a936",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "4ef4c368-545f-4d14-82af-bbdb563ba453",
        "cursor": {
          "ref": "e77579e6-3bb4-4c24-b23a-3f9ebf0f55fe",
          "length": 253,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "4a8950a1-4d49-4a14-8b13-39a0cd3e85a9"
        },
        "item": {
          "id": "4ef4c368-545f-4d14-82af-bbdb563ba453",
          "name": "credentials_verify"
        },
        "response": {
          "id": "d3d4b356-35b6-40d5-a272-d6cce7920810",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:246)"
            }
          }
        ]
      },
      {
        "id": "b4e91fd7-a273-4866-921b-a0aaf018f28f",
        "cursor": {
          "ref": "48f1d50a-fbad-4c81-aa3f-ad618a088381",
          "length": 253,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "9ad7039a-dea7-4a43-b5c1-295aec0088c9"
        },
        "item": {
          "id": "b4e91fd7-a273-4866-921b-a0aaf018f28f",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "9b9134c3-3c12-4fa6-9a03-b6744c8137e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:247)"
            }
          }
        ]
      },
      {
        "id": "a3348564-387b-429f-9268-1f9d4de132e3",
        "cursor": {
          "ref": "8fdcdd62-8297-4d44-be78-5e3d377e29b8",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "b07d62e5-2833-4c7a-bcd5-14d0ff2c49fb"
        },
        "item": {
          "id": "a3348564-387b-429f-9268-1f9d4de132e3",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "a3348564-387b-429f-9268-1f9d4de132e3",
        "cursor": {
          "ref": "8fdcdd62-8297-4d44-be78-5e3d377e29b8",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "b07d62e5-2833-4c7a-bcd5-14d0ff2c49fb"
        },
        "item": {
          "id": "a3348564-387b-429f-9268-1f9d4de132e3",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "a3348564-387b-429f-9268-1f9d4de132e3",
        "cursor": {
          "ref": "8fdcdd62-8297-4d44-be78-5e3d377e29b8",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "b07d62e5-2833-4c7a-bcd5-14d0ff2c49fb"
        },
        "item": {
          "id": "a3348564-387b-429f-9268-1f9d4de132e3",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "b831e041-add4-4e6a-89c4-6a613e53dc88",
        "cursor": {
          "ref": "bdb501b3-1ffe-4a08-9bfd-736f8d4577b6",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "fddab8f9-1b9f-4f19-a814-4efee9a6d2ab"
        },
        "item": {
          "id": "b831e041-add4-4e6a-89c4-6a613e53dc88",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "83f23084-e10e-47a8-be22-554f9f846ba2",
        "cursor": {
          "ref": "b8e98d03-3ed1-4f3c-a565-4b41e2baac1e",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "243782be-2ede-4b8c-b5ee-32554027e519"
        },
        "item": {
          "id": "83f23084-e10e-47a8-be22-554f9f846ba2",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "83f23084-e10e-47a8-be22-554f9f846ba2",
        "cursor": {
          "ref": "b8e98d03-3ed1-4f3c-a565-4b41e2baac1e",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "243782be-2ede-4b8c-b5ee-32554027e519"
        },
        "item": {
          "id": "83f23084-e10e-47a8-be22-554f9f846ba2",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "382738a1-2002-4024-bd27-b82755a4496a",
        "cursor": {
          "ref": "b94bcbb4-f2fd-4cde-bf73-db7aadac569c",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "169d55a3-6cff-4225-abd6-f3d320a9230d"
        },
        "item": {
          "id": "382738a1-2002-4024-bd27-b82755a4496a",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "f80804f1-66b7-4940-b0a3-9f4fabcf72bd",
        "cursor": {
          "ref": "100b9eed-0498-4302-abb3-9a2213293020",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "8f56a5f8-f60e-4aee-9a9c-1ae3175354f5"
        },
        "item": {
          "id": "f80804f1-66b7-4940-b0a3-9f4fabcf72bd",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "f80804f1-66b7-4940-b0a3-9f4fabcf72bd",
        "cursor": {
          "ref": "100b9eed-0498-4302-abb3-9a2213293020",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "8f56a5f8-f60e-4aee-9a9c-1ae3175354f5"
        },
        "item": {
          "id": "f80804f1-66b7-4940-b0a3-9f4fabcf72bd",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "fcd0748e-9088-4baa-8f63-5424e2730270",
        "cursor": {
          "ref": "737f7733-fd64-42ef-ae42-cd97316d4ff8",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "cae8467d-3aa8-4073-85bf-ddb3511b7fce"
        },
        "item": {
          "id": "fcd0748e-9088-4baa-8f63-5424e2730270",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      }
    ]
  }
}