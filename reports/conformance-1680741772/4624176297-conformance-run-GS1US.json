{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "c6021a63-4646-4477-b8e0-b880021d1b8d",
        "name": "Clear Cache",
        "item": [
          {
            "id": "e7b24cf8-9c4b-447c-be0b-de49d928a7a2",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "35e0e856-0389-4d57-8986-135d511dac2b",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "937f7294-c073-4945-9edf-a494319aa722"
                }
              }
            ]
          },
          {
            "id": "4e4503e1-61e8-4701-b5ba-4c782408ed77",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "204955a7-97a8-49b2-8c3c-c7802cf1ba16",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "84558927-849e-4c51-954f-42d0eedc7d86"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "5ffc8486-fa5d-4bfd-89fd-f592fc76445a",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "d60d4335-a38e-4d44-a006-7b44a9fda892",
            "name": "Positive Testing",
            "item": [
              {
                "id": "69b4d2c0-39e4-4f4c-a27d-4c7ec050a88f",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3ab906e4-1b5b-4119-adea-980435c284e3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1e112973-bdfa-44c1-bacc-8368e8ee38fc"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "16fe1d12-3875-4a9f-a1f5-655d09ab22b5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2f520534-d50f-492b-91c2-00612996e887"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "44466aef-eb60-4ce0-8593-2c792b675795",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "cfe0694f-27ac-447d-95d7-c93c1daa4b73"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "03d1b4fe-b909-477a-b160-ba5ad813d1af",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "d0984929-4a09-4a11-a28b-042a07372d82"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3582e487-7b7e-4777-9ac5-85b49f2e533a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5381723a-ae6b-40dc-a5d0-ac04167b5ca4"
            }
          }
        ]
      },
      {
        "id": "aafc62ee-c640-47cf-b974-b209cb36654a",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "0ad60d5c-942b-4f2d-b8d2-34d7d20b2e6c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "dba3f87d-f706-4dfd-829e-e59e8ba6688e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "4164ef12-377b-4bac-beba-8584cf7041ec",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93401df8-ec8d-48b3-a44b-2e5fd50da0d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "099b3bca-c90c-4d17-b129-4545c660690f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5480fcf2-a1e2-4bf6-b925-c6b2002166b5",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "960802fd-c159-4222-aa96-69d0b958d79b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c3a574ae-52ab-4d49-8224-747b6b98a84e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f6be0d8-6a1c-4a76-8a65-a3c178df76b1",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39859be4-3a4a-410d-835d-8456253fcb31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c19e2681-7893-439e-bd10-43405b118d04"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "cbdca5b0-a636-48d8-a9a3-550983afca10",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8a3a7877-d197-4484-9f91-bd54b15d831b",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5452c926-0032-43a5-be1f-c856326da070",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0732802d-deb8-410f-95c9-b15908d6bb5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dc30465-c81a-4a95-85cf-777b5a201fd8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed417dc3-d4da-4de3-a48a-6315f126bbe9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18d28d63-5250-4a11-8bd8-57ad1a3b0fde",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36d806ca-2da0-461b-afd5-67391d480eb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "13a3abe7-25b1-4525-9d50-d9b835944281"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10ada864-52ab-4566-83fc-6e9891924a0f",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "05d4f3ad-f992-4454-a812-e268faacf7bc"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "228ed737-bcbc-48a8-95bf-b846bdb84466",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d31d3fd5-db89-4b9e-9580-a3d1f51cf539",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a257f009-628c-422c-8a9e-01955f763306",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "70773a79-ec5b-453e-bb22-7aac3e9e35b5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9cb47222-fa22-4413-940b-14241d10f03b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "5a35cb05-99df-4730-8976-4e031f4f3eb9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7b9a470d-9d7c-4dd4-a76f-acdf2540c594",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "dda2a9a5-7a34-4a8e-a145-d34d6eef5b41"
            }
          }
        ]
      },
      {
        "id": "4ef3f98c-474f-4788-8f17-086a7d4ecd90",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "07c8f42d-c1d6-4ab1-9486-17c3e618ec61",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8b51abf5-dec6-4bb0-98c0-10d8c6ceb126",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "fa83fe08-988c-4888-af2a-f2ca1b87b971",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dd523a5-eba8-4c73-990c-032a2b932089",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5f36a1c-273a-401f-a86e-5a0f77cdc805"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4a65e8c-fd5b-46f9-9574-efd649a0a178",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "338f053a-b2c0-438f-87d8-7e049e6c61e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74ddad74-4bb3-4416-9906-2bde27c3ad2f",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be40c693-88f5-4f08-b2ed-262e6fff9798",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5dbb2693-6108-417e-9aed-fe5d22e527de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6307d6dd-306e-42ee-a372-3fdb7d13a10d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b7cec9fb-daba-4fd5-bc23-4cdd005660c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2b985ff-d821-4c01-9433-01ae779b5fb2",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62a70788-8dd3-4f11-b0e1-f5061f724471",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17e7a014-1046-488c-8d62-d2ee68999a75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9be71594-90f5-4337-a160-28ef3ae5efcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7f6e9593-167c-43f3-b196-475d80348b95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2efb3f98-d8c2-4ee4-8613-1a74bb1edf73",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9e0fffe-40be-42bf-a4b9-59f0eeb62dce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed721e2f-f2f0-4529-9f3f-51bb42390753"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8035411-b3d0-4720-a872-1ea9b40a2da5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "100650f4-f6b0-41f1-85b4-9f3c99034fbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8428e7d8-d471-4ecf-902e-b72f04011f09",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a987253d-44ca-41e7-937a-eff12948ae79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "904633fc-32db-409a-89f8-2531e3a360c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34fa85dd-4224-47c8-b8db-febce42cb150",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "65b4a396-f195-4092-b6cc-204707dc767c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea6319ca-fa17-4edd-a76b-9df3d26415a8",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "795b42a1-60f5-44ef-abd1-7a6485689a55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "699725d6-bb4c-4993-ad9f-3af6cf30b2c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c1ce330-f035-45fa-aed1-97e2187133d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e6cf5b01-bfa9-4d00-85a2-3cd32a31ffc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bed1ffa-4208-470c-a169-02865688e71e",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f4154ed-e96a-4c7a-bb42-3ca29514710e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "003eec9e-3175-4529-825e-19a287d4873b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b307726-4fd1-4006-9465-185144020ea9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "51a02c03-703b-4d03-b692-046e8ab74f3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33e26887-dbe9-4c66-b55e-7ca3c82969fc",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61b4ac04-bcd9-4192-936b-92d0a95a3dc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d036e1f-c558-4d5c-8dd9-91ec2ed85deb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7af35991-d54c-4fc4-8238-1531e6311144",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c46677dc-1767-4858-92a5-336b34435f08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43b9cf4d-4dc3-4242-930d-c657e121fe26",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fd4dfc0-68d1-4d41-acf8-db7a1cf81dbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae906d8a-97e3-4015-b2e4-772ee6c2821d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "315a959b-319c-4f8f-845f-7a650979a979",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "faf64b3b-4200-4b0c-9f91-97f19d2c8525"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f693ed29-3450-47a9-89ff-1d9966c642b8",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26ad92fe-f2e1-4d67-af99-e5e51ec24d67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9dd73ff9-36f2-435b-9675-b5073c52e03f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "868b4715-dc48-4145-95df-ade047a758d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c31a085f-6a9b-4ce6-b88e-8e8b8f92755e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7343a82-0b62-42e4-aac0-ddf32025be3b",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "684228d8-3cc9-4f04-bbcd-1c6dd406156d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2490569-b997-4ae6-a67f-e4a9b31baf49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfd5924f-346b-4345-bc2d-541f827f20f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bbdb6bee-ae0b-4265-96f1-7de7689d1c30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80bd200c-8682-4219-93d8-54226eb1f472",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c8825b8-8687-419b-a2a6-5e5dac36fe58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d528c201-ad4b-44b8-b3ac-476c38c798dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfda58cc-6da6-4cf0-9d90-092ba7d2955f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "92026dcc-a289-42c5-ba5f-ae1044771650"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f2d49a1-aabd-48f9-ab39-4f5c62d3f40e",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40e2d745-ac01-4eb2-85af-b41931c6e5d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76789cf5-7134-433b-8ced-0eead976b208"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74df2eeb-48c9-40fa-aa8c-970d99834269",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d6132611-a3cc-405a-9b91-6df5edf39747"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c751b4c-f429-42b9-b120-ec8a1633efac",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f62e037d-dddc-4371-8b87-c994f181a7e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b3732e7-e6d9-4f73-ad50-dae1d8082eae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bff401bd-f7f1-4537-aa16-bf1fe61fef2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d4c85474-4fed-41c3-8671-9adaaa3a7408"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69a2651b-fb9b-4af2-b974-118586739926",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45aedfb6-8a65-49c5-813b-5572c92fde28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "103a6d3d-5676-4416-93d0-514cd894768e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d5ae702-f051-4ec0-9ebc-96a43543ebad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d597594b-62cc-49a3-8558-9b912e88e4fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9afa7361-e365-48f1-9e24-8d71dbb7fb78",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce6f252b-93e0-4a3b-9c63-11e542aa773a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0946da05-6424-4fe2-a134-2f4143be499f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca569651-1e57-49f0-b453-abaedae815a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "446c89a6-34d0-4406-af05-785e33215a32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e3e80d1-1550-43b9-a174-f4d9d6afe56a",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d23785e-c8e5-47f7-ac9c-b9ec8bae4cf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90acb8f8-4b67-4921-a49d-40dcec28a504"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d7950b3-ec57-4489-ac6f-83888d61e70a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2ac88c73-c2fe-40ee-bcd7-16f9c43358ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd66a11a-c9f4-4a23-b106-d2919cbad8bd",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "beed104f-5f8d-4e8c-b3ba-9e23006b3e19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38422111-4537-460a-8862-b48adf5311ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6116033-f8e5-4bbd-85a2-961602a38af6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "c2f1c768-4899-4037-b7f1-99d00d0d553e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d99e3ff-9510-4369-ac0e-3edc13a8ed09",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2fca45a-2d9d-484b-a3df-66e9b5d1c2bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac67ac05-3038-4fbf-8da9-bfa8085072af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e81b8a95-ac15-460d-b5ae-0efe4176d386",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "69f81b5f-21b0-4b73-9690-61c3a2f2579a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f39caf60-300b-4576-a919-f379fd65e8ca",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ec77714-dac3-4d9b-ba9d-9764c7b98230",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdb3289c-c499-43a9-9809-eab9ebb157e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a97f641d-c4ea-4619-bc7a-cde5b4c3af75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "267fcbd9-31a2-4b82-b262-16a9a79d51fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c88b3b4-edcf-4f2c-86a9-679d67ac0bf0",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0646a2b9-2f8d-45a9-8d55-dcb10b22a0b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "baccc986-a8ed-465d-b566-c7a4a381f89b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbb1ec54-7302-4a6a-9758-daf7d8f618cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c87e38d1-30d2-4e2b-b121-19060916f0a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93d9842c-0ae7-460b-b253-6814c6441bd1",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "185549bd-6d43-4a84-bd7a-7054348af77d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f94d2986-ce2c-45d7-bbf3-d16648f764f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff269862-0a02-4c8f-bcaa-0f2e6198b133",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d0a63ee3-7e0c-4990-8663-1cb7722fda85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1145ac2-4b82-4e07-98f1-416653c61cf3",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7322838-2d82-44b8-b74a-6c612da8ab11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eff75ce8-5373-44f8-88bd-b6a604fdb214"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28413aef-204b-479d-90f2-c7a6b8b6fa6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f34ebd25-f13c-4461-81ea-5698845985ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "184da9e1-586c-43ff-bc91-84f4bba078d1",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fa92c06-dbe1-4531-907a-5b1e2a43508d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1314e530-a5d6-4c76-b402-cd25ff577dc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c36828bd-f709-44fb-8549-5670df781906",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "7eed5650-bae4-4783-b76e-fea11ee5e3ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cac6307-ce2a-4adc-be08-a923cabf0492",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18142eb2-3b7e-491c-b39b-f15ebc8fd97a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e0b8a66-14e8-4863-ac18-1f5cda0d48f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5af8d542-7507-4722-a1e1-1f71249a7037",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "de0c949f-16ef-49a0-b671-4650c7762a03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de2e4a47-9dfd-404f-8c7c-ef43e0b66647",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "947370bd-49b3-44fe-a6da-1b9a77029416",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d795b0b-606e-4a4d-b552-1ce12e02b2e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "877ac39c-3483-40b8-aca8-050bf63ca935",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a6850206-04eb-4c09-882e-422aa18773af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35006b91-12b2-44ec-bc93-7f723d3565d4",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5409f15c-801c-4f22-8068-8b9d77e0f435",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af88dac1-38ca-4db5-882b-a72b384250c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "127f1c3a-772d-4c16-b2ce-648cad06c8de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0904deb6-e215-448e-8e1d-f56f4e0c2f6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51848192-3d73-40c3-ad72-a5c6d95492f6",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3cc286b-29f0-4b79-b0fc-153313bd1a2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0aefb8a2-fdc8-4ce5-99e9-b7d0628c5b58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "838282e6-1a21-4fef-8149-88a6e8543921",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "72d5426a-40e8-4616-b441-da10745a5e53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e05a8b28-78e7-4bbd-aaa3-7d6200120549",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b68cd86-d7ea-49d5-927c-b047b89be4e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "140ab2dc-cff7-4ed5-83fb-7b40d67a2ff8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe7b04cd-9b08-4b00-9796-e9af243d0f20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "748e79ad-cc28-4b2b-8b47-80764980703f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78935b2b-b6fe-4f41-bfa2-07c4b4fe1178",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0532126a-eb6d-48d9-b2b0-17f1faaeb8d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4d06056-f830-4449-8ca9-7106e829b501"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bef811f-3805-4c00-9d89-114e10e39b12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "840b0b7e-bf3e-4ce1-8a26-474f3fa15cb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e84bca7-835c-4310-827d-e22bad1f3547",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91468669-3dde-461a-81df-32fa1d78f409",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d8a37d4-ff73-4cb3-a52b-58f545b76103"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2da4916-c7d3-440e-8b1d-abd309e339a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b2f0d8c8-8308-4f6e-b35b-f02bb672e1b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2527fabd-6a6f-4d2f-b52d-06feda18a9f0",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "634c2a67-e845-4186-abaa-7db43e866e3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2476225-5f18-4547-b6ea-ebcd73ed11d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9290fe61-85ae-40c5-b51e-320650f45b54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0a48cb32-cd35-433b-a743-029b51a6321e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76cb97b3-86d0-4641-8579-ea8ab443f64a",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52d0f74b-d18a-4194-8325-3b612a83ed17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28685f67-4054-462c-8053-1b7802c43104"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3973c5f1-c308-4a0c-9e60-d73d71b3f09b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "011147ed-4e5b-46ae-b6a9-7ab3f32cf085"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e160487-9f2d-425a-aaaf-9abf3f9ab7c7",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3ec9e30-0336-4ea2-aee8-7da086283043",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c90431ac-e992-4092-a938-62a177c06b49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "966555aa-1128-43aa-a011-820bf693cd63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6a69c3e7-f2fa-4fb6-93a5-d8f8988f74e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90df6c13-7164-4a49-b3af-8e934248fbc7",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cbb2c28-5d88-4b7f-827c-6e1ed33063ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6cf5f71b-0995-4236-ba26-19d8977b8e93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5469a17-f974-41a3-b1b2-6be968a6b46b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "920540a8-bf74-4ecb-857d-56364704a79b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "183b61ac-f432-441f-816a-9ae73efe2fb7",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b57c296e-29d1-476a-9689-94c7f04224a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1db81759-a593-40d0-bb0d-57baa016ebdf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c77250bd-f251-403c-8544-51644b0c6ec5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ef0a5bc5-af4a-49cd-b7dd-afffef0ab8fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1752f49e-838f-48db-8106-bf7db11a5c92",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e827a0e-77b4-4370-9638-5b731f8a2a0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9b7469b-597e-429c-8578-5c1b73f70a3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bbc920c-ea2d-4b35-a62e-25ed2ab38504",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b2649f40-5480-42e3-b4d3-fdc540b081d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d03cb0e7-8fb5-4735-b413-108f192c41be",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a4b3f0a-e1ef-4020-9490-792a0ba57c98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c9a4e90-61e6-4c1b-9cf8-3d854b19d124"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1eda4ec6-ea9e-478e-ad2e-c09858d6606d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "9fea0209-8f85-4b9f-b877-d382e3437fc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8086426a-f64b-427b-aee8-c72cd08b1c44",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a84421a0-71b8-4dcc-a916-ea3ec9124ad8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a049f7c-0ebe-44c5-8c8c-89f2f2d894ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0c60b26-02cd-4c78-8815-53a3517cf934",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "9bd6bf19-4b00-4442-864d-9cbcc49d57ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9be6a13d-53e1-4c8f-852a-2b1fa90b476a",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45e658f1-4604-4e0b-920e-44332ff82615",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05274949-244c-432a-9259-873fa4ca588c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10716322-f983-497b-b85d-3c592b4ad0f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "56b1e0bd-facb-4ed2-92be-774b8cdb0f7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "447338bb-1807-4dd5-acd6-3e5ee84633c8",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c369f4dc-b788-4159-aec6-c0dbc32b497b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a90b4e14-1b8a-4cde-bcc5-32edfc4dadcf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc7f931b-6414-4835-89e3-2fb9e2fd1588",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "e841e40f-a3c7-4eaf-8fcb-55dfc324fcac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc4002f8-9298-4e3e-9706-53a83bf47949",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19e5d48e-f820-4d17-9307-c48e943086c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebf92d96-0735-45cf-9803-65105dc5b8da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "261dee2b-82f1-454d-af78-c4095982c40d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "23d266a7-a7ed-4506-b09b-9a19b8d9ec6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df7f07c9-1426-47d1-9301-3d1eeae21083",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fffca703-d769-40d4-a805-b62147a966bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de258372-b3cb-47b5-bbff-a4e8ce0f5c3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea555eef-2251-4dea-9dd1-1f9cc8886077",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "f3c837ab-7915-48b3-a917-d4af30a5a773"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd1cdb11-eebf-4abc-b08e-b49c44186947",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef8f7153-4231-481b-85ad-16d040913ed2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ffafd09-c59e-43ac-828f-3d891d87a1b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "843baa67-c125-4778-a9ec-d5fbe2962d85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "6520acfc-f9f3-4f1c-938f-6f9b46c95612"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d71321fb-505f-447b-8249-a013991cf328",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0ba5d57-5544-4ea3-a56a-c3ac5eb9132f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76284ade-d38e-463c-be21-2460e1af940a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4987a6b2-7acc-4d39-9844-ff98260e6535",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "69d2b90e-89fb-4c1a-8144-7c2ea21f8fc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a942545-a4b7-4edf-be93-efb4ba308ace",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f6732b9-a735-4960-a94f-b6b3961c4f28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1649f0e-0ce2-4090-8681-f95dc51d4566"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd0bc9c2-0d07-4bf5-a692-db1fe93502c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bd0db67d-0378-4e75-bd31-fe8c2b7bded9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb42f376-3434-4e52-a39d-bb77eb07f5ba",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ec054fc-b93d-4ff0-82e2-6a3c9f1a01a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "560ce972-c8b1-482b-b042-719c580a9866"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13777544-9b6e-4558-9d94-dc4c1fd8cbc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "51fd458a-755e-472e-b9aa-80ecb8bf8c35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ace106e5-7c83-414a-af9d-b22415f81e68",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67759079-3c0b-49e4-a8b5-507e56840026",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1781fc1d-b49f-463e-9de5-cb94e84d8f0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23bd2d1c-ed7d-409e-86ef-5b43a0f6e695",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "254bb2c2-9e27-4fa5-9967-83b52b6ed169"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53cf8ef9-0aa0-4ddb-8002-e96b08a9fc0a",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6fa3901-ea19-49f9-99e9-681853fdac78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28ecc647-4ae3-46b7-80be-cc0195546c41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6baf098a-18d3-4008-82c9-4d59c3eacdd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c1e78024-6922-4633-9596-8db2bc14e3b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef765ea7-8ff6-4d7c-8600-645cf813e1f1",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19017657-630e-4e57-9d52-19a8ad8e16cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f28d8f3-518f-4162-921c-6c1734481430"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cbf46d7-e9df-4b41-945d-8553de2498d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0fd064b5-28d8-436c-999c-2e5d92ecac1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "358f50e1-c4fa-4a6c-b0bf-76fdf9b4ddd1",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "baaf3132-ad6d-430e-8179-4cea95874fe2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a6e224b-e14c-4ea7-b203-e4f5d1cb84dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c19e8c6-6741-4f8b-b695-d93711f989ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "f9fbf450-0340-411e-aa0f-8d77d464b992"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8905048-d7dd-46c7-98d7-45f3dbe3d0d4",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03ffc182-356b-43d8-a05a-7c7c89daffaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "777617c4-21f9-4937-9d7c-383ce6df65ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "138aa850-4a6f-46a5-869a-b0946dc5e7b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3ef89972-5072-4c7a-a1ba-307c927c7288"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32f90a77-06e1-4264-9d2b-f96c34a05c1e",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1603b42-6bcd-4130-8339-295f9f960661",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0656b66-160a-46d9-8afa-4ab58f9f7af4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "630182a6-0bc6-4d6a-9570-89048a83e478",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c3d8047e-0216-42ea-a6aa-13e70f108123"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f7fe32e-3e0d-46cd-a327-2fd730576456",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a11a416-ca63-4ae2-af08-8adefe0eae07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1538c1a4-caa2-40b0-b7be-e0aaf3080131"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c63cd99-5ff2-4278-894e-8ff7d69a0513",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d3a364dc-57fb-4e49-9d52-5aa24ca0a23c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "248b4d07-59fa-47eb-98e9-988c09ef0e59",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ba70b0d-efa2-4e06-ab39-16d98895306f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "199a2cca-dc07-479e-8f2e-d1c8404de964"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "308e41af-4556-4126-8ed6-a8a937a300a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1231fce5-7a1d-4d4e-ae13-62e9be8a8f63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dd9d021-f6cf-476b-a7e7-48012b475fb0",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3db22ce3-2f8c-4cc0-aebc-1db28a15d9cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16598fa1-0a7f-42e2-90af-eb5b8e21bb8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a634d588-eec7-40ea-935a-dba392a64a8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "4b9846b8-591c-42b4-a672-4737d64fa90e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "078f2997-a910-4373-9efe-2439f4f73bc9",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "316797e9-539b-4217-8aa8-b4b80e156ae0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b3d1545-54e4-43d1-8bfc-e1ea4e14a25f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fb1aa48-2d91-4578-9d75-5161b2d4da40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "d9fe0e76-18c1-412d-87d7-3cfe5a97567d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccecd968-5f1c-421c-be4c-ed51ba335a95",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31b5a7e0-7ace-4a23-aefc-7191a3f15dc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "317a3601-0861-4474-a4fd-01b684575a8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce22fa66-9656-4c5d-994b-646c2905a10e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "56b9593b-ab98-419c-819d-03d959e9503d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15b5b894-6839-4ffa-8a4c-28945932cfd8",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96a23d52-9939-4390-b390-1d98fa68da9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a1cc0fd-3b65-43f8-8542-410380c1eb65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6e49811-a2a1-46ec-bb88-827b4ad56c7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "c2ec02e4-5cdf-4174-9a51-6c77ea042e62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "195e34cd-91b7-4f29-ade6-ab441c152435",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "709127fc-f4ea-46b9-ad85-c108b7033726",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b7a5d9d-6797-4525-9d05-2cf50383d134"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aacd99ad-c415-4f9a-ab73-a26cf84ad7a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "1ed71bd9-dedd-4d68-8abd-1e251871bef5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bb9c5fc-bd08-4933-9c15-f4eadaac02cf",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66b2ee48-ba8a-4217-9417-5ba2ecb5a0fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f5b9f75-4b0f-46e0-9833-85a4fc51f954"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cd54aec-199d-4022-9d33-efaba454aef3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "a8ac6864-e7dc-47e5-a681-a7ff322631b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de4c321d-95dc-4fbb-aea6-dbe4f1487cfd",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d84c70a4-c2a2-467e-a8cf-958f772a8a69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4238360a-365c-4ce6-beff-e90b6931d149"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1323ce96-5089-4085-8f6d-4ba904fb7791",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "b688e434-a88f-4223-9a76-5fbb0b0a5c2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1eb1810f-48db-40d9-a8e4-b02217e111aa",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c0e05bc-27e7-408c-8ce8-ec2fe48141cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9a10338-c5da-4d99-87ba-12b400440cde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93760db9-9f3b-4f4b-8a6f-877b76f85a5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "55dc6655-fec9-43d1-ba81-c7dbd4129b3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffa8a42a-c256-4b3d-975e-8bf9453535b7",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "144068b7-0dca-403b-b3e9-da1082b19b9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "011f1a46-9045-45e0-9587-2e9ce56b2700"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ee4a441-0fde-4118-8dac-9b47019479c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "790b4035-317f-4c89-9043-5ec53b958354"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c707f7f-1b8e-4343-abaf-942c31e9d609",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae2533b5-77b8-4221-93b3-d1cbe231fc36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "429a959c-7fb1-4e8f-8c16-d9aaca3728ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "220d1e76-bba2-4855-8634-73fcc10cf19c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "310fb0dc-24c9-4f25-b30c-9bf69d2d2059"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40ae6e70-6c01-4afc-893c-7fb0e7700c19",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "979f5cb5-6b83-4e87-a8e1-f79e961aa452",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "112c0e67-ae36-4640-9995-f93be95469ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7823015a-5dc2-46dd-b2cc-1232506f8cf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ac4f233d-f2bd-4de4-8de3-6f042c58957f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bbd68b0-a025-4665-9a20-a7f7aa0c5416",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c790c8f4-7e62-4388-b289-e64ab1276e9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7102f1ac-edd8-406e-a6e3-4fbb23e44998"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "888e8101-84af-4017-9d3c-a574c9afcdb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e926c535-74fe-427c-8534-c557b4394139"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51d53c00-fe71-49ca-8de6-03fbbf380dfe",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6eb21f0-8feb-47cd-a2a8-15753d7c6ca8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b20bae4f-b2ed-4f48-abf0-ef0ba2fa22bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "032357fe-7998-4d84-8028-82b60d95d6ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "a8cd1b95-b6a1-41f9-b1e4-0e21fc0ef15d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0307886a-349b-40b2-b569-3729b5b74255",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5746a527-eb84-4516-8f90-7dc7b15f55f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a66bd3d1-e152-42d4-8790-025754cb5be5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4711d35a-f830-41f2-9945-f507e4a2b163",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "b11dd9ff-690b-4c7f-8ec8-74daf4c02466"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3359e0a1-e6bf-4e4c-9d41-77b10eeb4e6f",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dda11243-9805-4e25-b19a-70d4307c56b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ade555af-0da8-46cc-9c5e-3f19fdb65764"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e982e1f5-7078-4cca-9b05-05186fec2c20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "84cc6e9a-24ef-41ad-b270-0c448d460193"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b66f10c5-04b3-4e7b-9d3e-ad17ea7f235b",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "556b49f1-7bc3-4a80-be07-516dbeab2568",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0542bfcb-f7cb-4031-b79f-7ee3e6bd8057"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a6d9e3a-6e80-428e-a1c5-9428043a658b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a464fde0-ee76-4a26-a3ee-eb2ebcabd221"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53856757-e0b3-49f6-8ea5-2e41a2d6863f",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f2985e7-b39b-4f47-aedf-7f0d9af5a73a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc87cd26-5e6a-427a-b611-4c1dea1de02a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2157bad-9acf-43f3-bb32-53f7df522b0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7df456e3-f35e-4913-8b0b-68301f95f5aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4f4d1b2-6250-4a5b-bd7f-359cda55fb42",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8f32ba1-5b18-4970-9964-8f645a4b6dcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b65e39c8-ee66-4bbb-8e63-4356b58f63ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b6d0a29-ae93-4e52-a847-87ce9a5bd940",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a6f90c4c-6fc6-44f7-8921-aeb7e4ccc571"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cc436e5-9ef5-4f50-9489-70b2a7c78769",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ceb4ad55-3bae-4cf1-a92c-e384b24a76a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d23ed435-473c-443c-8739-baa01b8ee69a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0be61a86-9cc4-4074-abf4-d1f8cdc57136",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1f6dceed-3146-4e76-ad51-bd264a3e5f5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63c7eed3-9721-4e06-b984-539a6de0f733",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65e00735-2c16-42f0-8a93-0e8b0244175c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e54a906a-4ef6-410a-a29e-85463b2864ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2868ed08-0458-4f60-b417-e9b1663c7220",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3936bab8-2255-4b6e-9f89-d72e52881bfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbc3be17-3266-45ef-8ba2-c15df14f1338",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6c1675a-8390-4cd0-841b-54ff04774ebc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "adcebd7e-6ba6-42c6-a6dd-7451a725d0b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fd42471-1b53-406f-9750-88a5c73cc825",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "eff0df0d-1542-4f3c-bae5-4ff931430376"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b79bf4c5-30a8-45ba-9043-b1dd15721493",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2dcc351-ed64-41e2-9e05-5e3088507b11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b65e390-0fc4-4634-9b24-54396d5e434c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4817f37-f9b6-4807-a168-ed6f51823ff4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "710e3fa7-4aae-4b19-aa5f-d98bd29ea8b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "673401cc-eea0-49b8-9915-21c47cfd906c",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14eb28a1-a4e7-48db-8676-79b001b09f97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00e7eee7-3107-437b-a9de-4c512e26099a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae74b4e6-757c-479d-abc2-ae43899897be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "05e96333-3cd7-42f3-bd56-a5e90d51b71c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "200014ba-f3d1-4395-8fe3-43e399ce7f92",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a10fd8f-d1d1-4532-81fb-ad312d092f7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c2415df-4f6b-4010-bd5a-14b04bbfae74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fde4aa59-7543-4583-9652-d9e080c2d5b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4d30dc4e-3706-4798-8441-bfdb5b37eeb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7ceef33-8cf4-4a86-a2a2-9c4d305d4d5f",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16d5b3d4-1844-4efb-9986-156ccdeb39c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "844ee3af-06db-41a7-bebd-7613aa792962"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93b4fb32-f1a4-468e-928f-a38ec0e828e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c0a8597e-488f-42d5-8130-bb04c86f1c26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9d404b1-1d64-4a65-bc13-6a9d6d203d73",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "140f63d5-3db7-4e69-a1c6-2c67f4a6c719",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe40d700-2529-427b-87d0-a33dc7aaf5b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82ca94f5-45a0-4643-8338-50953521aa6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "7972d254-d9a9-4109-a6c7-8cb28ab51e40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb4ae085-c0e9-4153-9520-aaa5a28c4343",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96a83827-afc6-48e1-9c89-40263281be3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c3efa66-8fbd-48a9-9538-36258dbda2d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ac5dbb7-6366-42fb-9a4c-e1d537139155",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "71b44ce0-ffae-494b-82ec-7ce98890b37a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e101390b-981f-4293-8752-2667e43de311",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5ea16a1-546a-4a1d-a643-1c51254ba07d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55fe9ad7-e3d8-4ad8-84f9-4fba15f37f55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70ec34cc-30a0-4fc7-9cbf-d34b9d695b3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f08cf17b-be07-4eac-9206-033479827d06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95442848-fc8c-4cde-8ec8-ed2491d029aa",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f41fac5d-3a9f-4541-a50c-390fa1cf9969",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5537b1f8-e8b4-48ba-b059-1e7cc852781d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba722b16-ea16-4938-ad5d-f2e391df14ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6d2d7619-6f09-4aa6-873c-96606dd32866"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bfb0db2-1da8-4e43-b006-3e4d6caef008",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f3bcf2b-9a68-4dca-9d0f-06dc291e8079",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c055f198-3477-4a43-b3d8-ef2ad480e25a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a058a1cd-16b1-4bd5-8153-66e5023bea4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4e12b290-37f7-49a1-953e-dd16790d4cd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fc8cf79-8c1f-46b9-9bbd-84dc8cff5a82",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa6a0a81-49c2-4228-8dce-6cb2b1f84a39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67d25943-bde0-4aed-a60c-19ed660c4ea0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80f89522-2829-420c-b91e-ebc1c5ae99f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0161002f-0d3c-4888-946b-480ebc9f8631"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e987efba-25fc-47fc-a8ab-6472b288d1de",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6b895b1-4996-4e4b-aebd-c025c39d582f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "052e7962-78c8-4027-a97d-23ea3cbefb27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54363bea-dee4-423e-9b50-084339e96a42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "7586fa01-43fe-400f-a190-bb3fb2cae994"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b055c4e9-8e0d-42bd-b37a-26d4ccec5344",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48a66986-846a-4b62-ac7c-02d14a403896",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "801c5909-5de0-40d3-9e9b-25ca3e062696"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3361eaec-feb7-413b-87f7-5e5d95a8c430",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "7722ac9e-be0b-4b63-ae5c-a495f42471c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04c08e00-70b4-404c-9584-a1c6005cfd5b",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eedde2d3-f9fe-44e9-8f07-e0827401b5fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4df0600f-99ad-43dc-9162-8b97c17b18b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ff04e77-df78-4011-9112-668257037359",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "1f7b963f-e6be-4b65-ae92-ecf02171c62c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64cea479-fda9-4ff6-aa77-8af2ec2e6c1e",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9932c05a-d569-4fc2-ad7a-64b77179c7e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "521a1e4c-245d-4476-9a07-73c9a1ced6d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fe48771-3b78-4ad2-8f7a-348c611821de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "cdaf259f-5068-447a-b3aa-477620c23f7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a2bb7c1-4b7b-4055-be4a-6edcb96fdc2f",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "725bba63-8956-4e36-8e1d-52b045ddcf25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6bf8b505-9cd8-4f11-ab3e-499d1a67a946"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ad5146f-ed4f-4a49-a735-c03820403aec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "5718f963-ce68-4120-badc-8f942cdb57d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2a7f766-3496-4710-975c-b95b8e39088a",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cda48a9e-219a-4caf-a9b4-399a9cdd7f90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "13b8af01-d60e-4ab3-8a7b-2be87111366f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8419b663-3832-4bd3-8774-effe2d5be863",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "bc3f3c88-9d84-4f46-9fe4-6fc1d53adf37"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "1dbaa1db-7a46-4b59-bfe1-053d88e1f569",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3e0858cd-7f00-4287-b169-fd4b31651160",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da31081c-2cf1-4f5d-b912-121d3be58a14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0a9be459-31a8-4217-b886-dbb8364047fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c368326b-3177-4bdb-bd46-d01998529616",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "26b806c0-d6ce-4efb-9eb7-7229360b0bbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b946ccb9-9f88-48d9-96fc-9ef84e861b09",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efbe2e2d-1c8c-4de7-a6f1-c85f0e9e519f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8d2b2c1d-cd1e-48bf-bebc-a08e92f2173d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "614908ef-6fdf-4bd3-bf75-457e9aa1696a",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "15d70bc1-03c7-49e7-b089-9e1cb9e52cad"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e11a1fac-0847-4c0a-b204-dc1a5274fc89",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "52ea31d5-0913-4fe2-a864-d65c76be59ce"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "96c131eb-fc8c-4206-834e-5fd7b8cfbe9a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e6761abd-8d11-48d6-88f9-8e609ded477b"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "580cf6a0-9ea0-47d6-a07b-a1f1a89a51fe",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "504af042-3e39-4918-8941-ee660a0d948b"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "955a594c-cc98-4847-811f-e3be7488b97b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "64015c8d-8a2f-49bc-9dc4-ddb903224d8b"
                }
              }
            ]
          },
          {
            "id": "8b992f25-dd10-4a59-8d4a-bc9d3c414957",
            "name": "Positive Testing",
            "item": [
              {
                "id": "789472c1-6ab8-4b49-82de-9bd41335529f",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fd8c87b9-05bb-4162-911d-2b4e095188f4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c78d498b-0f89-4e95-9687-8a96bd80545e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "725d1fa6-1357-44a1-a6bd-0d85060bbde2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "a9e1a3ff-4ca8-4ca2-a43a-2e49353453ae"
                    }
                  }
                ]
              },
              {
                "id": "cf2fe2bb-48bd-4705-ab4e-f9032b36e7a1",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "23082e8c-4f7d-414d-93c2-28bbb8e95fb6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "40b35d3f-9393-468b-8af8-d2ff003bf1c4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d734517d-5a6a-439b-9e1b-7c8a4c2de8c7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "c93a8d3b-df6e-4a3b-a9bc-2f272aa91da6"
                    }
                  }
                ]
              },
              {
                "id": "5a19d54e-5ce4-4e8c-a7da-9b13b0cd1f9c",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e2461cc6-b6e1-4f5b-8d7e-225514ac911b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ffb0ac01-20da-4802-98e5-d9e848f3ad06"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "df022b6d-3c3d-48b4-9007-061e3e40dfa4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e7f23c44-28d2-4a30-81fb-f5f857954019"
                    }
                  }
                ]
              },
              {
                "id": "71075769-bf25-4afa-81d0-632f65cde499",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "465bf841-8033-46b1-b367-68cc5f6970d9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "880177c2-2a39-493c-8d87-9dadbc3f37da"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bdc11ed3-2370-4af9-80cf-2bf1d96b143f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "60f68806-65bb-4b07-a5c5-c15a200b1590"
                    }
                  }
                ]
              },
              {
                "id": "bfecc2a6-e209-4185-bbc2-8d8fa6599711",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "094c91b2-57c8-49af-b612-c0f9727057ad",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "31f41908-f5db-4101-826c-f5ced19226d6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0ee1a90c-e2cb-4958-bcf1-1d44e29f3a50",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "df057174-b93f-4be3-aa11-4c79c40a6eae"
                    }
                  }
                ]
              },
              {
                "id": "312a4261-c63a-4fb5-90a3-8279829c1840",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ebb1ff06-d526-4d5b-871b-0e1f8591601c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b858bc14-de4c-4897-84d9-41352354a748"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a7b7df99-9787-4902-8899-aa79b59be1c8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "5b0e5b8b-1965-4d1a-bf51-3e14cdce25ea"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6165371e-5cb5-430d-a6fd-38d3ed763325",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b6ff9835-70c2-4116-9974-b698dd3d49d1"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "0515cb38-9839-44a5-9230-93636eeea28e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d329b5c0-78c4-4a4c-ae30-0b1370b89b8e"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "411afb09-20e1-4ad4-a36b-0bbd2b812a2f",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "83f2f807-2596-4964-9ece-707cdab11a5d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e4f15584-2493-4785-9077-da5fdd9598b7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "08150ef8-c3d5-43c2-b88d-ccbcc226a202"
            }
          }
        ]
      },
      {
        "id": "c3b36063-e060-4544-a205-82037655c327",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "ecc03514-5bd9-4402-b87f-719ed4db225d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "03e9280a-6598-47af-be86-2907477c09b7",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f5b0822f-87a5-4c3e-8210-62a16273216c",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf62c4e2-3c32-40e5-9201-d7d59cd6013d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "431a1795-d047-46c4-8c33-5d6cbb05745d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc5989b7-c29b-4101-acf0-313aa162ad34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "bbb74a7c-9f9f-429f-a1ec-8086f4d67463"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41ca5bf4-3e3c-4452-b90e-74fde1fcf14d",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bcd6d52-11aa-4eac-b1a8-b1a9e3022429",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e312000-52f7-4fec-86c7-f1cb93b82dd8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a93b593-664e-4374-9392-beabbe3164bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c35178e1-1844-4d5a-8089-cabf35fc2752"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80b17589-625f-45f4-a9db-fff65ad22ff7",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e696c18c-5f09-4632-867e-692edff2db9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "861c24e2-de37-4eba-930f-3f49c2c7273b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b98d34fb-2234-4bd9-affa-037ae6f827a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d00e3637-e074-47f7-a6f4-85a45d81f254"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1338e61-18fa-4ebb-bf61-efe1573eb49c",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86ea024f-7c82-46a8-b9a2-6fa8ac7fa1a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f6f8cfb-4a0f-4d79-9272-0618b478287a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71c3503e-594e-4158-971b-b52aaa19dc33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d65e0aa6-c415-431b-9f53-1f8a9c9e0108"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29a992a7-b618-4c7d-bc66-704210edfe3b",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80778d32-4ae4-4222-8f3c-8aa8022c7d09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12e167d4-4b31-4520-a108-9622dd10b1b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b21ff967-a2bd-42c2-842d-fa19406c079d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ca6a6ba5-e4e3-4cd1-8c22-6c329886bfbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3e37e27-ad9a-4513-b0a4-555bb8a95fd6",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be73bbd7-37bc-4b32-b1df-b870f7ee392b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b21290c-78d5-4662-89ec-aec866612f9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bb3cc9a-158c-4c67-8262-6bca9f98da91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f2535eb1-e6ec-4cfe-b153-59a8eedad594"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a287455a-80d3-4a21-9d05-e7c05ab89412",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28eda5cd-3c5f-4d3a-8fc8-f2ab9d3034f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73f649e2-7107-40d7-b487-e7e01b0a08fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b378482d-b805-4e25-8a64-68c956108021",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "a304ffd6-a66a-434a-b7a6-bbedd4b9fdbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf49f335-9d4a-48dd-a4d7-d16c0add3e15",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77d60f5d-7269-4eb3-87f6-381bfae1db12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f28f425-0895-4ea2-a9b9-6770cf7c2496"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4d57b6b-5502-4b51-b8fd-d3ee4d6ee11a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7b8c2e27-1ec7-41bd-a7f8-5883faa0dbf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab1b6c5f-ac1a-4c58-86ba-1e29f1e8d229",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa2eea43-7e8d-4e0c-8b88-0a076de3835a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43c94668-b6f8-418b-8e0d-6c48851e6594"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "565a53c8-c720-47fd-8c0b-635efa1188ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7b5b3cfb-1fa5-416f-bcb9-313ed8f93bf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91aa1955-93b7-46c6-bb3f-4c7ab4108e90",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9085bc45-1020-45da-928b-4473302ede0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6d3eae4-217a-41b6-8889-438da71437b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56945b68-e39c-48e7-a508-8064ca26a672",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "88fd860f-c5f1-463e-bc7e-0256950c13b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8034e4fd-dfa7-4026-94d7-3aedbceb169f",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "037b59e3-837d-449a-b7d9-34cca75f2516",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7dd32cc5-7444-4b35-9eab-081fd74405fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb463e2f-5d6c-4aa2-aaf6-3e243f5d0238",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "46054281-57f6-430e-8c11-c9e710c2e8ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "821debc6-a41f-4de0-acd1-48d9dcb069ce",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09048f02-8be8-446b-8946-4f4efa1c5111",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22222091-b195-4ca8-8998-441cb0519325"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41ed853e-3f04-481a-9166-a05987bbe99c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c0a80c30-66ee-43bc-8720-ec38f4af001c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "377389d8-28b3-420d-afdf-c9772b8a842b",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "844e93d8-058a-478b-a7bf-0b3b14253387",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8a7fac9-8b7e-4d17-a126-fdb6515aff4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c09e24ed-17a8-4222-b313-ebd32908f491",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9a14819a-b0aa-48a3-9906-82cc92bae8ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b420c57-3a09-4013-a9ef-ab2841ced058",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b290ac4-504d-497a-8d93-b1b5351576a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09228dfe-1968-4705-9edc-4687a33f3138"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ba3c5f5-50fc-4e32-87a2-80401a53d7f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "5ca9242a-d491-4a30-9cda-38121755b5c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73d55f12-c6f1-42e5-9b35-4ddae9e657b6",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b8845c2-4dd4-41aa-bb4c-56896d0ad272",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fd93676-1797-4a1b-a438-8d6796d295ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a17ff729-668f-44a9-b00e-2f223d0cc738",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "b2991568-b82b-4bf7-88d8-47dab8907457"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6d57296-a414-4dfa-9047-a9e365d0ece9",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8435e578-325c-4433-a2b7-64c16ce01a41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57ef486d-dc2a-420b-8dcf-887d0fdb9a01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed603f84-19e2-48de-9098-c5c03c382b3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "e0d1a59f-8be9-4b06-ae72-18f3d8f5b5eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f513f63f-3af5-451d-add7-0286d8aca4d3",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d04a20b5-4df3-4918-bf07-92fb1615492c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad98d104-d672-40dc-83d5-d53aef14e29f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dfd8160-ae4f-442d-9abe-1f3955842d7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "95c3c37b-acbc-4cf3-b5d0-c9a79275d5c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9ca96af-cea5-4e62-b77e-15e6a1ee9d74",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5b5c5a9-c1d1-4d4e-9e42-4e4219845f3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd063538-75d0-406b-ac42-db1c67026c17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e79b6ce-ce7a-4bd4-a6d6-1d7411ca40c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "cab6641f-2cf8-4f6d-ac4e-5b997a91781e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20f22203-e5ff-4c5d-a9c3-8a951613845b",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6673894-891a-4bbd-b291-bf8fb1df8623",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49f1c968-d7b0-48e9-9f46-5e6be5a385b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7fa2243-50a6-475c-8386-0fe5379849ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d37651c1-4703-4cba-8709-a9fe726f5798"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f2220cc-d5b1-4f25-b656-9eb954d1be27",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a49269a-fa65-45af-83b2-7a60d897f881",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "077427e1-3026-4c99-a319-e39ab3063a71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8899f0ba-ef60-45a4-8df1-04b3d3402aa1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "072d1496-2a52-4276-aa94-2d296f317d46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6104cc96-07d4-4a93-a7c5-c7f57751a7c3",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b1cb26f-9f82-4c41-8ed1-d62d64c8efdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f23fbdba-49b5-4803-bef4-335981850d58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c41b9e3-be28-47ad-a0c6-ae420283faa1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9085bfc4-9083-4674-aaef-f7f9e8434f08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc30d572-dae0-4edd-9eed-95ca60f4115c",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "304af739-95a9-4306-b503-37711bb36b74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fc41c99-130f-48ad-ab7c-b31b8a3169b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9593b65f-5f8c-4125-bf9e-68979bbcf958",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5c09f29b-e137-43db-a7df-47f34daee6ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89575fbc-7833-429e-8069-95265194dcd8",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09d97647-500d-4d09-98aa-1fb44557343c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67aa15d4-eb4f-4358-bf11-bb25901422ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bff581e2-87de-4753-824c-804bebeac3ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "11aa7a5d-7ca8-4566-bb49-b904a42607cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d349756a-c999-4f65-9e4c-3d73b0dfa1aa",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b375986-b312-4587-b047-0cba45220998",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f60d78e9-5fa6-442f-b9fe-e2bcbc6ee95e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dccc535-5a78-4210-9a5e-b97febf9a8c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "da516de6-ff6f-42b3-8a00-41ccc144ef5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e253ec2-1ff6-4379-a71c-9fb3e1f34dca",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc9895a6-f9f2-4eb0-a340-946306095e41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c54887b-02db-4189-82cb-0323fbf38888"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79c64684-a5d3-4665-b2ab-a4f0f1da423d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b2321a07-5ac8-4583-a45a-b681e0ebae2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7eea6906-df3f-4b71-9fa7-aad935565ffb",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b390bc25-29dc-43ba-a720-9f8abca5abe8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdda22df-d9b6-4d7e-825a-7474374a9a7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2bb3aa8-5aa5-44df-9821-537cb80ae3a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6fdfd124-bb47-4381-a014-030584c0e0a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0ec4b8e-e43a-46da-b6dd-47660fc949f2",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb37348d-0c07-4cff-8f3d-49dd9aaa14d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b41988f-9a02-4d4d-a788-0506b16cb0e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41ea714a-ba57-402b-8669-829547f064ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d3db1fba-374f-4c71-9ad1-2824f02aa593"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcf53fd3-7468-4629-a263-6101292ce782",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65ed3927-6984-4443-b853-f121475f76ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3215f36-6a4f-4faa-97b7-327bd69a89ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a40167f-016e-4750-9697-7ba62e4f5e62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b4231e51-0a43-495f-9df9-6af7053b5270"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f8d0c6d-5952-4fec-bfbf-04db392d1f96",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe0385c4-e6b4-4354-a512-da7e687daa86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65504ef2-fdb5-4dc4-9076-8e1c7ed9a014"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "306ec083-59be-4219-852c-8d3e60eacf6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d711d012-398e-453a-8e08-ac91f1d1ebe1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1248d370-7621-4c80-8f39-cf1bfb40dfe8",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ccd87a3-c34e-47a8-9430-92d0ed4c0591",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45c6f2c2-788d-4d34-bc2f-98033db70e16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23d5f5ad-7d2c-4d40-934c-1d7b92cc24be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f28b46cd-79a6-451c-b96f-16c8dd6984c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e7f82f3-9917-4ecc-8fed-af99dc771c04",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "208ed1c7-7899-491a-9973-06a27ffc0128",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3a15f9b-625e-47cb-8d6c-026d35266409"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b945d6c0-5f4b-4353-b7d2-d2d5e98f7339",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fe1ecf1c-5a56-4fc6-8b00-d47c5e394269"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8de083f8-5f0e-4fb8-9bdd-549c80fe1d91",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c7a7e25-3dec-43d2-817c-8205f4c75d29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d40b698f-5d2e-4f49-aaea-0f1ee8c543c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be3ff503-1aa0-4f9a-b4a4-1071992ff4ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d47c25b3-d518-409e-bc84-d92e12b2b4e2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "19df7b8f-f9af-465d-a65f-5d535723fccd",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ef01caca-a4b7-47cc-a434-7ed96815b66a",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1fef069-63dc-401c-8a4a-1c3c46c14abc",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "e264e65f-34dc-4279-8393-4a4134c7b60a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "adfe391b-a9cb-4d32-8f2d-8c5b14031581",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0b2fbfb5-29e5-4126-afbb-eff4684e672c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7f44d0d-6a39-4498-8c0c-74cdbd7b69e9",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dcd9840-9dac-4e0a-ac56-589c0a67ba76",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "03a1746b-1e86-42a4-833b-eee664ebeafa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6251effe-bb4f-44e0-8ae3-0787c2fa2fb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d7618050-7c9f-4f7d-9ac0-586302fd0153"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bdcb5959-7710-4323-8645-583dd4b2fb29",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5590c0ef-0f7e-4a56-8000-d347c2ab5800"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "662cb8a3-6ef9-4398-bf3b-e337117a9ad7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b55e5bcc-35d6-4d85-b453-36a7c92fc8ff"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a8ced1b3-3862-465c-9521-c9f94d7aa66b",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "0dbadc77-142f-41bc-b6b1-82d257093f03"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "67bde3d0-789c-4912-bfd9-d59869f85194",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e7cabd8d-1f25-4497-9bc4-8615686cabb4"
            }
          }
        ]
      },
      {
        "id": "f10ad5ff-2d7c-4ade-8949-be162af66bab",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "d5cec68a-fafb-4510-9141-cd786b68a652",
            "name": "Negative Testing",
            "item": [
              {
                "id": "77ce4653-3997-49b5-8f1e-30a0aa24167a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "eda9c6a7-93a5-4c43-8014-b20162fff123",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0a5e47f-1ffe-4314-97c9-0de6b3f6965e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65545c65-0270-4021-aedc-afdeec472bc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "765efa2c-a609-4856-88ca-fc66eb1491fb",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d8335bb-e687-4bd3-90f1-78114ac30846",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f9fa1f4-3290-4e30-b5f5-7354b5a0084f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c761097d-fc19-4bd8-a91c-6be5fb4677d3",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8b67146-5fc1-492a-a57a-ccd1c0330231",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2c7c513-b35c-43f6-9f50-60f1dfd7eda6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b8a249a-ef4e-496b-b31a-ca7d8dffc672",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44da83af-7e2d-4972-b40a-7012632c645c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76095d3f-c7ad-4017-a6b3-6a6042c95d54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "617a6c32-3f44-4c2e-981a-253eb5fdefae",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a198af8-37f6-40fd-a6ef-714a9f052081",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3c8897e-b49c-48d0-8812-e281d52109f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "433b91c7-b83b-45b7-a190-d9eb51355050",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41762b70-e5f5-450c-ba21-9db7bfdd06f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "401dcc61-90fb-40a2-830f-57b79838d4e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cd668b3-8338-476b-9cec-99af4a64a4ea",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02e7623d-4276-43da-a144-9e121dee198e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f1ffcba-7f81-491b-9ed8-263ec7e1a48f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a296d4c7-7db5-4ecd-916c-955ee9947cde",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f7992dd-0657-4891-964f-68d501d128cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6b7204d-bdb5-4185-b2d8-72a2cae04fdc",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98bedd9e-32ed-48cb-911c-c3d8b569ffbe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e150f11c-befe-4d27-9e3b-22c31052dc26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e8334b3-9e23-4d7d-aae3-582d2d3acf4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28803031-c73c-4b4a-8e6d-ae60f5aae7f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "698f302a-04d1-40e8-91ab-848dccc6d165",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a3bca28-f966-494b-a99d-0d296aef6c50",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b7158cf7-ea6b-46c4-a7dc-3aa4d9afe40e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "889754a3-b391-4b92-af8e-a2ece99abee6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98e57365-77a8-471f-91f3-4b713bf3a072"
                        }
                      }
                    ]
                  },
                  {
                    "id": "238511c3-772c-452c-a826-4ce87dbb8cda",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f129c34-9115-41de-b0db-652d671b2b36",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "772bb349-b2c3-482f-a9db-a55bc9d7c96f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d242df5a-220a-4fa7-ae3c-14394405e305",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18bcf9cf-4198-49f9-a72c-49e5c417e449"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2510078a-c329-4bf4-9753-aef4fb87b223",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cc3fbe5-1a1c-40cb-bc48-f88ad33e8ac0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92073ae3-1c00-4e9b-9546-a56f4456d05f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7970d80-ba06-4bfe-8b9d-5e478e84968e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37f7fc54-1d71-46a8-b56e-998d649826a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "058cd6dc-14cb-47aa-95be-44659b979ebe",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "808d3096-8d30-4fe8-97db-c94fdd5e8eba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a41ab148-f82c-46e0-9a04-d57ec63a2565"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a1c11cc-4fe9-426b-a088-c06237892d0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b04068b-7732-4fe3-be33-2dc165e04d8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1056c64d-aea2-4964-ab69-4834992b5932",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e7ac797-f31c-4de7-adf5-d4ef55a8bfea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5de6c93b-5658-450a-a438-6460a9ada3ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "591b80e9-c3a8-49b8-b1c1-e363c205773d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bae8185-d41d-4ffc-9b99-9913d94dc1e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15492a74-c9f0-41e6-bd58-c4753395faeb",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a40863ac-945a-4256-a6f2-532ad6cc5f76",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c35dbc78-9c2e-4739-a232-847f6f2355a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9722e518-c137-48d8-b459-22789563da15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6f37e20-dfb0-41f3-9f56-bb66369f40eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e96fdba7-4389-4cde-a819-01a3ce04ab07",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8bff231-1d54-4863-8008-993625a7d07b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "17d9d2cf-82db-4e09-8051-3293f14b4d25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4f80be0-4d03-417d-a138-f060dbbf01be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6c9a375-3b58-4719-8e1d-bb58c1b894da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad38b60c-93ef-4ed9-8502-0d276d0c5ccf",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d55c841-ca19-484e-9d08-dd9fdab2a6ca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "096a07b3-b28d-4544-b4c1-b3073665523a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95f800b7-adf1-4e5f-bd30-31ee1caba85d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d7bdfb6-78b7-4ec8-b185-b80ce27be18c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58556ac7-1229-448c-81ea-0c87a45a3178",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3609b255-b87d-4703-9a09-31181a6e9303",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "752e1be4-2275-4ab4-aa68-c10b719f7940"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e5d84e2-4997-4752-8c25-b2705d3cba74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a8c1feb-5c46-49ef-89ac-afc4a0a02597"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49462536-0db1-4ea2-a4ef-27fb5ce027b9",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23a6a88f-a2c0-4fbc-a19a-d4597f71047e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a468a2fc-03d0-4077-8974-97373d973534"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d714dd2-169d-40a1-8385-9cea9c9a10c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5cd33118-3704-40f9-a650-ed1dc8b8eeb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa1862de-9ee5-4208-a4ab-4ae4956632ba",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c12cbeec-40f5-434a-b45a-07379b5aa3a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efa92063-3291-4248-bcec-51afc9d721c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0611ad8-5757-40d3-8049-da7e5f9127a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a89053d0-aed3-475e-a369-1ab009ce1563"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90635355-2b06-49a6-8ce5-6d5544ad78e6",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51e52faf-0355-4bed-a8f5-d69f61415363",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3949b3d2-2701-4512-8026-362a50992938"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c051baa-50d5-4e54-9491-a2447d3737cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4731ef83-0c05-4355-8c6d-3107710f3b0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbdc90f4-ff71-49ac-be81-6ebffddd46f5",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "344b6a76-0768-42fb-9a88-935fb4cef189",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccd5015f-03df-4a28-a0b9-f3132e752bf6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcb6f362-ac7b-4f9a-85d1-e432c1bf575f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccb308c6-be82-4c88-a507-55e7f29e4182"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acf03c81-ad63-41b0-a8af-fd6ed9cf7799",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79b472a9-6d7b-447d-b3eb-a880fa8ddd26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f3cbef5-0bc1-4edd-b232-4a66e9a800fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00aee7da-9e5c-402d-8f3e-ee18ea22cc84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aaf929ca-136d-4d17-82e1-baa140e9c368"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d06ea0a-833c-459a-8b13-910b4d803c0f",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f9bc0c9-3210-4a29-b9b7-99d67e7815a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a14ddc6-7c17-4f63-82f8-c8d6c49447cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b3c17a8-781c-41d2-85ef-d24fa07a5363",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16b2e65a-4a7b-49ae-9f1c-09ed02df53be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6f6838c-df15-4d8d-b617-7a7430ea5b05",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eafddf90-bcf3-43eb-8f93-c48b966861ae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "10c55746-2ce8-41b9-bf25-39e5bdc869f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43658461-f597-41f0-9b81-0f6a36a63a69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9464e22a-d5dc-419b-a367-d1025c0b26f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d3443be-7f75-4398-9710-cbfab0f10436",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bfa3b6f-13bc-4dfc-b12a-db12ad46e115",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6f1abfa9-48da-4ab8-b509-40595f17350c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebd12a72-2b68-4af6-9e00-3b33cc9caf29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52b36f25-2c8e-42d2-beaa-258ef0cea34d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8952f0f-689c-411e-9e1b-4011b1903ffc",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fcaa3b5-4aa2-46a5-a8a3-be473cdf6232",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e0b97735-ff08-4be1-8541-18367ea2ad79"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d87adf56-0b47-47dd-9fe9-0d2c43bbbbd8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e53ca664-4782-4e9b-8c42-3af474b08196"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f218984e-98c4-4d1c-825c-5ac6de430ba8",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23283b12-2708-489a-8888-14039bb36d39",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "44301d7c-9ee9-4bb9-8a8e-7650a858b823"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05e6bd26-ac3c-45d8-82ac-d369737cbea5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e0484de-3dfa-4405-8183-761a9ba3f7f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d794ecba-85b7-423b-a206-9f619e2bce75",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76a7500d-88ee-46e0-b08f-551e316ede75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3c4fefc-8fec-41eb-a504-ba8114f4487e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00a4c94d-ff76-4d6a-8049-b8f8849f6f78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03d42082-32ff-411e-b2e8-5d521506f3f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16a21e5a-e914-43cb-93a2-287194d730bd",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51985bcf-8c82-4fd8-acbd-ac73a88be7ba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c2a96199-b4a1-44ac-9d41-668f09da36b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a8d67ff-5f4e-44c4-baac-7a43dc8552e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "402031c3-19cc-40b3-934f-94d36b4e9459"
                        }
                      }
                    ]
                  },
                  {
                    "id": "285db768-4ae5-4999-9b38-a3c118b41d80",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d5e8454-c705-42cc-a9dc-3ee5bcaad912",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3e2ccba1-e977-41ea-92ef-8d0675c332ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4722105d-7f17-4c15-9f5f-c65f716ce1ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e62cedff-1745-4ff5-bba5-c06d749a5938"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29ea6a94-6e5d-4f4c-8a5d-0e222bfdb3e1",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cbfdd18-094c-4b78-91e3-1dc29e30a89b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fbf94c6f-7f64-4358-b825-b2dea80acc0b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a61c280-7c2e-4b0c-b257-b14110e88444",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d3cdabe-d86a-43bc-8b41-b3cb33318142"
                        }
                      }
                    ]
                  },
                  {
                    "id": "740b4830-ed61-4bb7-bacb-fffaed410f03",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd883990-e4d1-4cb4-ab6f-61b768b78fe8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e647ccc6-88d2-457b-9547-166fad8ba495"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "959db37c-ce8a-4d5e-b2f4-5bc5e230565d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "201b4979-363b-487e-9077-5c07094d381c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11d3d1eb-a534-47bf-bf39-5b4e3c737cad",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4a135f3-cf41-4c24-b86d-a7c37fab4a2b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7f799a02-3623-4ceb-8ef0-c86f8cf9b4a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "844679bd-594a-48f6-bb60-b7b221a6ffd1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c8e0b50-7d7b-4f04-9930-d11829d332b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64c58490-cebe-4830-9903-e3acaa24331a",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebfa2a6c-341d-452e-8f12-831e531a3856",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bf49e100-4925-40aa-85b8-f8373596c104"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80916cfc-e2ce-4225-bfcc-48837e4b91dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a49ae577-2b68-4f01-a8d5-93f3f486059a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9fc6da2-500c-492c-a305-44cd478616fa",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d4c23d3-78a5-4e0b-882e-a6f9ab17810f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd2fd353-4e1f-47b2-8a78-0a9b71249dd2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5dc6823-3b10-4f90-a350-258d6ba27dba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2714e003-6119-4b68-af86-77d0237f1c07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46ac2817-dbf6-4ec4-bea1-c364972df9b8",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29c0e26c-36de-4dfb-9ac9-ad485557e30a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e06341bf-0da3-4165-b59a-4351ac5eddbb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb7fdebb-e093-40b1-a830-122eedee7a5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41b11b5e-15ff-4daa-b73f-192a9f1301b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33b582c3-240a-41e6-8487-2176ee773b79",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f30884c3-d3ef-4681-a089-11e61a90a293",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed3bbe3a-a12c-4ea5-a169-c9bc0ad5099a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bccb283-2535-4915-bc74-c907fbcc83cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1178887c-2975-43e3-a6b0-38a30b17eede"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73e6d597-9a43-4698-ac1b-58c0dec15d61",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87e0f9ea-ab86-48b0-aeb1-dd8f3df0b66d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "652b9951-2f68-4abe-a045-ff3fecab3904"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9023c89c-aa59-45f6-a176-0c7e3ac9285d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2964586-5d1f-4afd-a68d-100a50f4def1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5a0dcb3-d725-485f-967c-5708f48b7f59",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39b1e621-d382-4e64-9227-36be91c6ddb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d328d6e7-32cf-483f-b4c8-550fa66bd6cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88dfc698-50d1-4dd7-8f25-deabbcd6145b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef053476-bd16-4ea5-9ce5-5d16b5006f6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72a94263-988d-45d7-978e-90eedc220fe0",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd6c4c0d-45ac-46c7-b5ac-d110804da008",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e7b2535-e53f-4a42-b657-e6346ae3bfaf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3beba808-eb16-429a-af97-eb8e792900f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f571f8a-0e22-456e-859b-add0b32d1b3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74e5ad75-c388-46ad-a910-f03c3c836020",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b37dfb58-79ad-46c6-a304-546d5ea55b89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2594cee1-b063-4051-9964-0ada4798c350"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "386b20e2-281f-40b3-8f9a-6b27e61d06f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d512e56-b2fa-412f-be42-a5697ad185b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30e202c1-7aea-47e6-82c6-5679e74bfdae",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3debcf6-49b3-4193-a6cb-a095ff4b4197",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c698d30-ce8f-42a2-b4bd-79d05bd11e1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2066f60e-da72-43e8-80b3-ac8167086a05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d88ade8-1678-47cb-bf49-0407767e58ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f1bdd13-2a78-4a7d-a924-6a843d9ed228",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0d1a463-5200-4578-95b1-63f48061e572",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99b54b61-3979-4050-8a60-34a4168c4927"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "006f5f8c-741c-4256-832d-2fda1455f737",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6422076-ab4e-44eb-bf95-7f176c5a26cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23369eea-88fb-452d-a82c-96463dee8be8",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04ddb279-8895-476b-a47c-73bda54a2d40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b72477e1-791f-4289-878e-22399d09b239"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "144440b3-370a-437b-a974-38f1fb982d70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5f44c89-3a15-46c3-bee5-8ae9c12ec5dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e0d17d1-fbaa-4655-bfdf-c255ec2ff572",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f7756a0-f14f-411e-9388-a74460925cb2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb65cdf4-cbb7-4762-9d78-04a20e3b6155"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0df49417-bbf1-4b57-91bb-f03dae4b209a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17cccd8d-8c81-4960-8c01-038048b7ca39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9eac56df-5d6e-4311-b03d-fffe9bd0eeff",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac3d2d8c-7b21-4521-8720-6d281548663f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f92058a-969a-4191-b3e3-630724788fc3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54f15d3e-ea44-4bb3-8001-0654bf97a889",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4283d13f-cd61-4c80-8e3e-f7097424b372"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d8fe669-9fb5-46da-bf17-c58a53c859f5",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c482b268-e708-4c88-b686-264911a87d59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40ac3594-17d7-4746-8ad5-c2804150e3df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23460fd9-2659-463e-b5e5-bcb60248ef84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32e0bb93-714c-4904-a869-bcc9d393e34a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "017c7573-0f0e-4c2f-be8f-335db7ee4909",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66fe1da6-51f5-4fc0-92ee-5137f3a77e63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7506526-0838-4f69-97d5-2ba560b13c0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f583aaa-2ffb-46f4-a712-a04df3660502",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "defc85a7-3381-40ef-9e66-e80f02c19d53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bc4cb17-0dd4-42c4-81da-45f064363277",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef01718b-c3ae-44a0-a9ae-d4229ccc24c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0eb106d-07bc-4730-978d-3942ab254507"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfc0fb4a-69f8-4567-8382-4aa8874320da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4b60326-95c5-4fb1-b5ec-89aa891b4217"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7de0c98f-1487-4512-bdee-5d5ffe53cc24",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d531363e-8f56-4134-a7e9-d0271ff0d5a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d23d5634-1d70-45d3-af36-34754aa75cb7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ba27873-e3b9-4d9b-b11a-0683178822e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "536c96f4-afad-48f8-aa69-5349e7f2aefd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ddf46a2-2e3a-4f5a-a7f6-3127edf14929",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c60dd0fa-aa80-4d67-bd36-2b5198d68848",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a3219cb-4a9d-4b53-a082-6d6e9e02c870"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aafdd717-0c0d-44c4-867f-173df366b818",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6136d054-0948-4e1a-8b07-e295ebb61228"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25f98d64-78e2-4f00-aca3-76be66822b3e",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4ce06d4-3400-435a-97c2-92fee1a3fc80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb96fd43-6ff6-4b8d-874d-49a74f02fcb1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d4cf47a-717e-4066-af98-ed9f798ad81f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4dafd2d2-7d51-4627-a8e6-9164613b0a7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34191c4d-5532-4f58-93c3-d80e0aee1299",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e66a307-1969-4670-a59d-54e946c00a94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68d9f51c-1c84-449f-b643-0d1727f3a177"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41859d38-d045-441d-962d-f05c2af7c9f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1dff5bc7-df23-49db-86e0-c2bb0cec0165"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa0f8d4a-e148-42c9-b982-b2528b4a929a",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99ddbea3-9103-4a08-9fd7-9ee592edbe21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36b3edf0-e5c5-4c04-9134-786fd1ef217c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce5ef5cb-3d0c-4e8e-9394-b7c6b1e1e2bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f6e56fb-45d4-46a4-9609-f4c8aed0ea88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "468286f1-0cfc-4358-8457-e96e61e4caac",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af5977f4-3a0a-47ff-a8fd-cf741db51448",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aae6ef11-e861-4390-a543-c901f18e4bac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5394e85e-2957-4ab6-ba8a-9940c421ddc0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a6ba03f-52f1-4a40-baac-3dce2c2e107c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44530a72-9242-4a92-b209-4b63809b088c",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a105e01-d7b1-422d-86de-54747e247109",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46e05786-6672-4012-9504-fefa215a1577"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ba0a0e4-318c-4cd6-8fa6-fff71128946b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69dd97c1-59ef-47e3-b740-b3b6a3d6babf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d18b346-fed4-467f-9257-a476659ab009",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "031f04c0-223f-474e-ac4e-14bb8e609340",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6fc6788-a8a7-44cd-a6a1-f2626961d943"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91555370-993b-47bc-8bc4-107fceb3a18d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "822f7591-2228-4d7b-ad2d-d36d5d87fa0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5454cdb-0d39-4bcd-9169-b68384221dcb",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7adffa3-bafe-4993-9733-1d0688117e1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca3f2c98-c419-4569-aeed-d01b270a9b26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cd80ff4-b07f-457f-aed5-9f769930f5f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c006952-b823-4ef1-856f-81ce8760cb8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "010b0027-098d-4945-ae43-8e09c84ac144",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09bfcf30-d138-4408-8acd-ba0978d7f472",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc3930d9-9e45-49e8-998c-4debed7d6241"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8dd5b26-fffe-436c-8960-3f7d86370535",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca5ac8f9-5603-4c45-aa07-a39443bba740"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03f2b8b0-150b-4176-8085-1ac28c0df883",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "816b5d1a-cb13-468d-8c49-7d809e333999",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63cf07bb-60be-4020-9521-248b46d4993c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dea013ec-8f76-43e5-839d-422f7c041e61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b28af1a-0917-46a1-a1bf-b9261fa139d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6c6de2c-3ba3-4abc-a242-7564001ad21d",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a15a9499-8d5d-49d7-b0d6-b0ca4f837e2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b225a0cb-67d9-487b-85ad-4c08dd916b63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "128bf36c-a2d5-488b-a1ec-62312d8cbb75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dafaa628-5a5d-4453-a2ec-4138b80d6f22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5e2876c-5acf-4b4a-9c64-b479713ec384",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "360b5b7a-6356-49e1-95d1-c61dd3131b15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24f5941c-6934-4308-b8a7-c4b31ffe64bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a0a4998-dbe2-451d-b1b8-e69cecd5a328",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39af31b2-4734-4f42-9ff6-625e69226e96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b768b5d0-120a-486b-9051-18ea4cf33a10",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f446f18d-956a-431f-a36a-66311f88be93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "167839b8-daf0-496a-8063-ee123bc1fbea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ed74ef1-e4d8-4206-8d5c-bb11a2c02517",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66a3d51d-6acb-43c6-96cc-05b7ade022cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d64065a6-6449-474b-bc76-d0c64316b01c",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88de5f09-5173-4cdf-bf0b-5bceda75ccc1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aa8aea00-4a75-4a7c-b87b-3b699cbacf50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d98bbe2-bfb3-425d-9690-d951922bcdd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8aa127ac-e274-4b40-b039-b1e63617552a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "009c3875-3dc9-4382-ab83-c44ca1d9a253",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "132c75a1-c0d5-4516-8cee-aa12d4cf3633",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8942786e-8281-4fd6-beb7-b216069697ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cf65c57-a919-49fc-baf8-112c1fdb7376",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd20d965-e25d-4a63-a419-b91086ccdc97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9176a406-28b4-4eb1-b3c7-8b93ed1c4d28",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3913f048-e096-4abc-8edc-4346acabc604",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6dd6a8eb-9e0f-442e-8b1a-e6b2c498ac68"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "028bb76e-43c1-4f3b-aae8-c0c84f935971",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1bc212f5-c9db-4607-b74e-186aa528e4fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a254ec63-5a16-4d2e-a55c-f43527718476",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23dc240e-f9d8-44b2-8d32-ad34b3d06670",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1807dea4-92c7-48de-b861-cba59cf123c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9003c61-c152-446d-bc59-b33164e2092d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96765f26-26bf-4460-936c-2c114df0814b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c024106-20e1-4a1d-b2ce-d778971fc5aa",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4b32300-13c0-4672-af1f-3e9ada3a9121",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b8c3140b-5181-4de6-bdef-e99b6b904ce9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e02065d-9351-4194-8fdb-299f82f14cba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3d90bfd-f3ff-46d9-89dd-c376989810c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8d89213-a819-4b35-8e64-5ffd6956e211",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37539f07-302f-4801-a271-7a58332bc96b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "02ab7c11-880c-4652-b0c9-5fcc331702f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75d2f24c-96e2-4f53-8204-908f60fb3c9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c446d7f-5155-4d93-b238-e45647fd90bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3afb6963-4508-47e4-9b49-440a93a0d4cd",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb53534e-4157-4edf-9d81-26a1b139a3e6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ec16c4f7-3b91-4983-ac0e-1dd195e1821d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f09b307d-e5c0-40da-b33c-a1efbae436cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "938243ca-7c5c-497b-80e9-0cf721183aea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84957364-2e2f-4d06-a687-b3aad5fb2403",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "730eeb66-60c9-4e10-a1e0-eba544d6c875",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fdc86ec5-8cb4-43b5-94bd-4c5b221d5bf7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "817d3c0c-c9e7-49a7-bf1b-84e1d83c3525",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a363c9b-09b6-4fd6-b174-5ecae9b866fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7fcc1d8-d216-4004-adfb-079fa877ce45",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5566565-92e3-4f52-adda-94cd469f8c50",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e22325d0-18a7-47ff-b55f-1d8988db247d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b90d6cb6-b636-4014-819a-ec69fe6fbf64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7222c3f5-9ccc-4edc-91e5-9fcec8faff03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6994cdbf-feca-4503-adca-6347cabc4d5d",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "301b4b3c-bc64-4620-b729-2e51736a45e1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "75342653-5c18-4b18-bec2-f433aca9d450"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bddeb3b6-1392-4106-a2cc-1c2814f5477b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3952f19-6096-4072-91a3-9991662d4417"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9869fc8a-54fb-46a9-b256-24294b59648d",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85d4e2bd-84a2-4715-a185-bde4d5958771",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "634adf75-839b-49db-8fab-ccfb08e2d2ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "426ff91f-e6cc-411b-bdda-fd7d68cab9d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "586ef9b7-2f2e-446f-83a7-051003fd7490"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2703840-e32e-41fe-aef6-30c3522c1496",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "061ab0e1-3259-4a83-85cb-545d43a67905",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0195e3c1-3dee-473d-bd37-23412cf99572"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41f62256-e471-47be-8c37-436ff4f289ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "861eecae-32e3-4906-90d8-6609d8aded84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7551807-1357-44a6-a0bf-e21f0dd2dcd5",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f48d254-a2c1-4ebc-9669-9e2b25c8c5c0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fbed2b18-456c-4427-b06b-d5df27526bd6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84b8dca2-7037-4f5b-92c3-9400dc0bcc61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4a74bff-765b-4eff-b2f8-74fc3b55ed55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e985642-9afa-432e-ad05-0429d8f3bf3b",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a47b4f4-7f6b-45f9-b16c-bddef517bd6a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eadfb526-4f04-4ce9-a0d9-15d778246f35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3631ac95-2961-4ca8-8efa-bdc3fc6b0516",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad9f9cb7-5090-4cac-917f-ffd93e58a7b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "044153db-4a30-4766-b9dd-90cb136a329c",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af81e840-d882-4c66-b2db-895fe239dd5a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1aad8124-0be0-4c6d-ad53-1188d8de24de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad1088b8-d8d6-4cba-8632-e6800f0f077a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83b41dae-6cde-4249-8458-334905e71185"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18aded72-0930-4463-b09e-6546e45e7ac4",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da3fe1a9-c037-4cdd-a671-55ee589e6056",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ea6c0299-9be0-4655-bb34-f834db9fb260"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec83e72b-7dcd-4227-be2a-fd4680f17f90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e0d884f-13b4-4622-9c1a-c27a847ad741"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c3978c4-675d-431d-a6bc-366898a7e96e",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24a68acb-875c-41e1-bd72-cbe795c8f8ae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9b6b710-5ef4-45b2-b476-4ad17b1f02bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bcbe002-4b4d-4220-8764-30d6f8c4021c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53ae3654-de84-4c77-b92e-64e09175fbbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "070bb693-a435-4675-92d4-4e27c1599c20",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b036172-395c-4b90-8a06-f20f7d885f7d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "79d954a0-286e-4fbe-9b50-74647fa64aa7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f766998e-f7c4-4db3-a4c4-66c11961f51c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31e262b4-842e-4d46-9bb4-3eae5ef9f6c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a98fffa-7aa6-4fbd-a5c6-04b931b7f8f9",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9e4911f-a037-4646-a757-dfa3b71ba805",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c15d1c70-8024-4a6c-95fb-7c5eaecc8a54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04ccf188-3c8a-4619-be88-e11824feda20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df5a31d4-6b10-404e-af01-5cae46e32913"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6536272e-9159-4470-b42b-8612514c509f",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fcc5acc-94d8-498f-888e-d3247c3164f3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0fecea1f-04a4-4159-af26-bbf948958b52"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "617df401-e3fc-4bec-9a38-ce69fd5deeba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89c693ac-0a48-4dd1-81a4-75ac8c9b8a9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30b339e9-995a-4e5f-aa3b-602225c4ff4a",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2157b377-996a-4d9f-a38f-645b2ec20971",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "92ceddb1-58c2-4138-ab94-41940b0ba19b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5ac52a2-6876-42e9-9f98-68076e2e055f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b8c817d-0e28-40da-a7de-8360d072f0f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8b69013-6a15-497f-9b13-b3a3d8aec8e9",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f1deec7-2303-4576-831e-095ea90836c2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "109d4275-84dc-4b12-9a48-5dafe9a6eb1a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f49413bb-97a8-436e-b3a7-bb82685b1195",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e64acca1-3022-45b8-83b7-6efd6fe8d32e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "348cf8bc-8970-4a16-b401-93d34720cf6f",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb575930-6dd5-4cf8-acee-12023f1e4b4c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b3804165-91c6-4d55-975b-8f26f1c5960f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f26cd9e-a17a-4fac-8a02-a295544e9bb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27fdb475-6f6c-420e-a04b-cff0eab4803d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "472486ee-63e3-4fdb-957b-6c02ccda84de",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c6124f2-322a-48f5-8d53-b87a8e9e51ca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2b55ea49-e24c-43d6-8347-3b74f403535f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24c49cec-a9be-4fba-a5c1-628791b8609d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "368f5948-a15b-4ca7-9623-0bc39be1c86a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acd50055-1cc9-4b6d-baf8-fce6478c5b0a",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b21fcbc8-93e6-4b42-8235-a13777f7d79d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "85de861c-3b70-422b-a46e-86693e059825"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed24e456-d30f-49d6-b79b-e8b40518697b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bd98d59-0f70-486e-bae9-9008c764b682"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4194e81d-53f1-4927-b31e-23f015ad10b7",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a934eb42-9443-43de-bdc1-9523dba9d5c9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0fbdd746-0584-4ebc-af04-b584caad1198"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a783773d-c547-4c7a-a676-e0675857a095",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8dbaaec-733e-4968-b88d-f9e1ded1c0f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a61e90b-047a-49c3-8370-bbac84996ef5",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fa21e88-71c9-4725-890d-b2661ee1e338",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "031ff69d-dd7e-4504-9f57-bc609806c0cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc224eda-01c9-437b-ba73-6eb870cbd24c",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f24f57f-5770-436d-bb18-563e0f2f26d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7ab3bee-64ce-4b79-bb30-340e289874c6",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d88e281b-a64f-48d5-a8a7-7628c2096a4b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "95371ac9-7af5-4bda-9491-bd53abab0170"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16ee33a6-ece8-4836-8149-e54fe1bd6c89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d733dc3b-4048-4c50-8fdc-14354493f882"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c906ae8c-9b48-4aa2-9a80-ea28996e7d91",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be8e9a77-f96d-44e1-a753-9cea7809819a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e0dd1d54-774a-4464-bd21-5f538a5b1b1c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6aa88cb9-55f3-45a6-b35f-6881516c8d65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88fe4883-6f63-434c-a0ba-49d3e4edcfd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "876f543b-63fb-4705-bd0d-987408c2f2c0",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "845880ff-b7a8-4bb5-9a40-c12ff55f9b6a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1875087a-a411-427c-9943-6bdd6d5032f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4359b03e-aed8-4993-ae4d-30746626df9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f73016dd-e41f-4cd6-a473-d98d06826cb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c98694be-92e7-471e-8b9f-dd53b8f72725",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37487bed-88cc-48f1-a939-02db11d5aecb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6aa87399-ca55-4b82-aff4-a6ffb949d241"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "628eb336-0fde-40cf-a3fb-23ca216e916f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a889bf7c-d101-444c-ab91-af90a0e6fd49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b299831-7751-4421-be10-84df495a72c2",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e636f1a-f57f-48fd-88be-13d74216beba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "90bb8dac-af78-4b6b-adbd-fbb9593c480c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "158a3186-682b-49cd-9836-715003ac2be7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9a1a844-7ee5-46cc-a96a-1daf154eec8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0aa39aee-4c22-4b02-b63e-97170043b881",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fa87e5a-d959-4247-96cb-83d095a0f3ac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f919db4-d0f5-4d32-8e3b-84e655657057"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a45c96e-2dc2-4db5-b834-48cb76829d49",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd8e5c65-029b-43dd-b7ef-0528fd6161e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f487c99f-4d01-4337-bc62-98b4951a13e1",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f78183b-d705-4360-85bc-0551f1a2b7a4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6beb5fe7-d409-431f-bfa8-01edcb2e20fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e629da22-d67f-45c1-950f-f9def5ef17cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f171d3b5-b80a-46f0-b322-abec25038729"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d50cae63-8045-4a44-a573-43182d337c24",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ababcd8f-78ac-48b6-9b93-767cf1a53bc1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6105083b-b056-47e3-a806-0a39b5926f3e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "faa7e83b-9d39-4430-b4a2-dface206430a"
                    }
                  }
                ]
              },
              {
                "id": "a1bdadf0-e03b-4d70-a1a4-5a5a2bdb8d66",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e0745e26-7815-4d6b-98c1-5ac013c7f23a",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9070695c-f52d-4cc5-a63d-e331ef833fe9",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "8b9a783a-4d86-427a-a813-2eaef9bc6ee7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf86ded0-1b83-45ee-827e-885285e89919",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ee07cf10-7bd6-4bb3-b6f7-84a8dc70028d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dc3a75f-7988-4fe9-9296-9ec2dea0510a",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "064c58e6-2a4e-44df-a8ab-0cdd1ce540b0",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "59664c24-c21b-48b9-9d07-f7a108cc2e54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "042785e2-1cc6-46fe-ae49-6b64997421d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9000de9f-1d8b-4dc0-a286-b56d0227f125"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b5b07ac9-c254-45ae-ba4d-1c5b8fe6deef",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1b763c8e-92b7-478a-85e1-75fb42af0e96"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e3c962a8-0a28-4b99-9d51-10d62f918a40",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7697ba5b-7911-4782-852e-89b3669d31de"
                    }
                  }
                ]
              },
              {
                "id": "23226b16-a080-4c3f-ad68-24d6f70f9e7e",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "79f3f593-8d9c-405f-b46d-1916a7d6de88",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61a5fbdd-c7eb-48cd-b652-4e874bf296bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "e7db7d8d-d015-47a0-b8d8-7dfb503502a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c0478c4-0486-4414-846f-aeaf6a7ec43b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "119c2ca2-e8e1-4564-8c4a-549f92d71d01"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "eb16780b-e359-4a31-897b-0c4a8f26123e",
            "name": "Positive Testing",
            "item": [
              {
                "id": "faac2ffb-16ad-4ac2-8083-88690ecfe2b2",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6fe70c9d-426b-4270-af5c-cc7fb2c755fa",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "f1232f04-f440-4ac1-8234-9fca42723025"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2b19aaab-8058-4a4a-9ba3-47fdf18dc1b8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "184e84b5-6175-431d-9f0f-645ebfa50f21"
                    }
                  }
                ]
              },
              {
                "id": "faeeb7f4-a28e-49bc-8191-beee24b7d44a",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "121543ec-eaba-4e5b-b8f4-7a66f8cf9455",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "f6e82724-e2e4-4fbf-9d29-caf5dae86fe2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ce3ef6e3-61eb-4d4c-b67a-8a338352a25f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d707ff6f-f1e0-4023-bec9-08aac6f2fa6e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "946a647b-8538-426b-8df9-07407c1b032e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "1c5e6574-46c2-49e4-b83c-5a4abcf11e32"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "19311180-d82c-43a3-87fb-6bc4d5daae8e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4477d476-d51a-48b2-89ab-0c51d4a984c2"
            }
          }
        ]
      },
      {
        "id": "5b50729b-b9f3-47c7-bcaf-8340a555c19d",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "18a9038a-8285-4ce2-93bf-784dc5509c2e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "239666ac-54e3-4633-8885-217dba16d26e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1bb13e6b-4ca5-44b3-9732-829268cb314f",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81d0af2e-f08e-43c0-86d2-dda7faa34618",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "12297490-e300-4075-8c04-dac71eb97f39"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "014f72d7-a775-4dcc-9f9a-cbb43d6e34c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f07ba6a9-fc57-456d-b67f-f65c261d49d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e06ec25-bf40-4658-a185-d4f7b98a46a9",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e78fd50-d49d-4b58-ad97-71709884fff5",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "633e1c28-b252-41ea-a47c-b3c059bda4dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebb8f01d-5c35-4dec-8d82-07f54dd7c887",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dd4f419c-23f0-4749-96ba-63e690201ec9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f1a2ad53-4496-4bfa-b045-b0a800a0f430",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b4b710d4-63bc-4c47-9279-95d351e478ef"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "63856f08-3e60-460c-aaf2-1be5494faf09",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8c1008c4-b168-4de0-8708-ba44e7a4692b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "60374cf4-c209-4363-b1bf-96a40436f1e0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "f28ccac4-0e86-40f0-ad3e-0f932eaa1890"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d8a8bb76-b1dc-4a0a-8b07-184fc423a65b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8640e0da-4f40-4e0c-8d97-5e6a9b12db53"
            }
          }
        ]
      },
      {
        "id": "e13b4a44-a447-475d-bd93-e8d9c9c05c9d",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "4e25841d-3a08-4f7c-8bfe-e60e89c05704",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ce866b92-e167-4230-94f1-825fdbe4624a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e6fb9968-ac0c-494a-af08-727d49e98f83",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c0c6ba4-925f-4d05-9bf6-3bd42fe1cbb2",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f6ee6942-1e7e-47c6-8d54-28654aa6d914"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ff6f36e-6c9a-40e7-9d2c-09535e45c281",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3dc109d7-ddb7-4db9-be78-3e3a88f6af31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bc486c4-60c7-41f3-ad50-d9a0a2947d8f",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31c8ef7d-43be-45cd-8078-3e9463575e02",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "75f4f1bb-818c-4793-b793-d08dd43dd60b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e68d439-33d3-45a4-9b45-9d777f922c24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7cf5968e-2c0b-41cf-bee4-d73627d658bc"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b22bf8f8-ec80-4c52-92fe-5adf6ad0c155",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2cbc52f4-414c-48ba-8be3-20f386b3bd21"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ec4ba9b2-1b56-4b0f-8897-51b64e6969ce",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0ea81fdc-a13a-403c-ae96-fac7fb172b7b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e0901657-acf5-420c-83ac-812b1e8cc3a5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "38cf0a2d-2aa9-4929-839c-7449ea199717"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9025f5f0-dfa8-4e14-8e0c-24289659298c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f7d88f7b-40d5-4356-964e-26cf7fe31998"
            }
          }
        ]
      },
      {
        "id": "37be1c15-9a32-4174-9a19-866d31b6916e",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "1e7c21f8-c862-42b7-86c9-5d6015a62f9f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "dea5a9b9-b9a2-437e-9693-0954a2fa18c2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "67d3e450-b404-4d0a-b32c-ea4c414d7f04",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38341703-06ef-445b-af43-8303c1c5a5fe",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fe370953-84e1-48bc-af5a-7846fd54eb04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef7a64fd-003e-4683-917f-bef95a8a185e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4eaf921a-e8a8-442a-b811-d200620410a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6ce4e95-8aa6-423d-a606-7e8a93dc6fb3",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dce8ba99-10e0-41fd-9aec-68db07839b96",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "57c8eb53-6b6e-48c4-a921-d7f4d9bd03d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d75dffb3-3c3c-4a4a-9554-8e337fdb7454",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "77d7540b-d2a6-4f20-9d74-4d642f434ba9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "680c66da-2103-415e-a454-d2ee1c13b49f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ec7303f1-4563-489c-a9f5-5ba1be7de2c8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c5d3d43a-b38f-4a87-ba1c-1cca8655c549",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6d0f479e-24ff-41b6-9201-73a3bf08bbd6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a20f587c-7548-4a99-8572-1cc0f1b89fef",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "de642cfd-fc10-4a56-a079-6f18f3c1e0de"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "58fd160b-be60-46e2-b14b-d4e1541b6512",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6bd1f1e1-23da-4d72-8bcd-b7b7933fdb02"
            }
          }
        ]
      },
      {
        "id": "43ae4475-9f2a-4a53-a1a1-07778cf94f12",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4b66163f-cb3f-4f3c-a06d-59b0bf6d8ae5",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d4a7c781-8d04-4126-bae8-eca7b59438cd",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "f0691960-6e59-4aad-971e-2f9b00afe15b",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8c66e901-6b0d-4f13-b0cb-bb7a550904cd",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "471f4414-da83-432d-8756-918cecdb1476",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 509,
        "pending": 0,
        "failed": 44
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 381.40769230769246,
      "responseMin": 29,
      "responseMax": 11650,
      "responseSd": 1223.4391984273352,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1680741344168,
      "completed": 1680741457462
    },
    "executions": [
      {
        "id": "e7b24cf8-9c4b-447c-be0b-de49d928a7a2",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "33e0d50c-0ed6-48ff-97ae-b310bdbfa8bb",
          "httpRequestId": "f465d20c-884a-4157-b95b-ac6792419c73"
        },
        "item": {
          "id": "e7b24cf8-9c4b-447c-be0b-de49d928a7a2",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "c61a9c94-f354-489c-90fd-decc8c14bf13",
          "status": "OK",
          "code": 200,
          "responseTime": 102,
          "responseSize": 0
        }
      },
      {
        "id": "4e4503e1-61e8-4701-b5ba-4c782408ed77",
        "cursor": {
          "ref": "9617e40d-a2f7-42f1-a3f8-016673d483be",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "ada4ebb1-2b3b-459c-94e2-6c7d90cf66af"
        },
        "item": {
          "id": "4e4503e1-61e8-4701-b5ba-4c782408ed77",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "feaee9ea-3343-41f9-94f6-4528cf1807f2",
          "status": "OK",
          "code": 200,
          "responseTime": 29,
          "responseSize": 0
        }
      },
      {
        "id": "69b4d2c0-39e4-4f4c-a27d-4c7ec050a88f",
        "cursor": {
          "ref": "f6add2bc-5448-4616-901d-71de84f27eec",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "a944c01e-bab0-41a1-bb5a-d6b091a7f4be"
        },
        "item": {
          "id": "69b4d2c0-39e4-4f4c-a27d-4c7ec050a88f",
          "name": "did_json"
        },
        "response": {
          "id": "b999183f-797c-424a-a6a0-90a921263b5b",
          "status": "OK",
          "code": 200,
          "responseTime": 541,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4164ef12-377b-4bac-beba-8584cf7041ec",
        "cursor": {
          "ref": "df4be76a-f3e1-42f2-8887-6725b0a3c19c",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "90005c71-73cd-494a-b997-06befd494b79"
        },
        "item": {
          "id": "4164ef12-377b-4bac-beba-8584cf7041ec",
          "name": "did:invalid"
        },
        "response": {
          "id": "82ac6f5e-d691-4ffb-b433-12305b1d8be3",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1860,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "4164ef12-377b-4bac-beba-8584cf7041ec",
        "cursor": {
          "ref": "df4be76a-f3e1-42f2-8887-6725b0a3c19c",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "90005c71-73cd-494a-b997-06befd494b79"
        },
        "item": {
          "id": "4164ef12-377b-4bac-beba-8584cf7041ec",
          "name": "did:invalid"
        },
        "response": {
          "id": "82ac6f5e-d691-4ffb-b433-12305b1d8be3",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1860,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "5480fcf2-a1e2-4bf6-b925-c6b2002166b5",
        "cursor": {
          "ref": "a5e16b61-d15c-4ccc-bbc1-a6d92420e4c3",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "0508ee03-5923-4475-9b73-83635db4697e"
        },
        "item": {
          "id": "5480fcf2-a1e2-4bf6-b925-c6b2002166b5",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "91c4a930-7180-4000-b1dc-f9be3bf1068c",
          "status": "Not Found",
          "code": 404,
          "responseTime": 67,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f6be0d8-6a1c-4a76-8a65-a3c178df76b1",
        "cursor": {
          "ref": "72aeeecb-5db7-40d0-90ec-d13f06fd38d3",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "fdaf7f87-4a0e-435c-868f-665c6b581045"
        },
        "item": {
          "id": "7f6be0d8-6a1c-4a76-8a65-a3c178df76b1",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "3dd9e1f8-5c5e-4497-9663-4bf9a2e5eb1a",
          "status": "Not Found",
          "code": 404,
          "responseTime": 76,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a3a7877-d197-4484-9f91-bd54b15d831b",
        "cursor": {
          "ref": "bfec8e16-4334-4dc4-b437-e34297e918e5",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "330eb575-768e-4b68-87a2-1c9dcad39c36"
        },
        "item": {
          "id": "8a3a7877-d197-4484-9f91-bd54b15d831b",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "8fdef13f-e141-46ab-9e72-2f454ca2a6b3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "18d28d63-5250-4a11-8bd8-57ad1a3b0fde",
        "cursor": {
          "ref": "f1a32b88-ece6-4843-bc97-603f9b568bef",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "14da985a-d4b5-480d-9e15-215a039917f8"
        },
        "item": {
          "id": "18d28d63-5250-4a11-8bd8-57ad1a3b0fde",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "78bbe51b-6132-408b-9046-dd526769f7e6",
          "status": "OK",
          "code": 200,
          "responseTime": 67,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "18d28d63-5250-4a11-8bd8-57ad1a3b0fde",
        "cursor": {
          "ref": "f1a32b88-ece6-4843-bc97-603f9b568bef",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "14da985a-d4b5-480d-9e15-215a039917f8"
        },
        "item": {
          "id": "18d28d63-5250-4a11-8bd8-57ad1a3b0fde",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "78bbe51b-6132-408b-9046-dd526769f7e6",
          "status": "OK",
          "code": 200,
          "responseTime": 67,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "d31d3fd5-db89-4b9e-9580-a3d1f51cf539",
        "cursor": {
          "ref": "a929efba-fedc-42cc-be6f-597c6154108e",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "e1318a95-62ea-4281-9cf3-2da38c5a6af2"
        },
        "item": {
          "id": "d31d3fd5-db89-4b9e-9580-a3d1f51cf539",
          "name": "identifiers"
        },
        "response": {
          "id": "477f9c20-06a9-4bba-a96d-e04c90118abf",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa83fe08-988c-4888-af2a-f2ca1b87b971",
        "cursor": {
          "ref": "54acbe05-cfb8-442a-895c-f8af5ed0dd63",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "f2251e57-8b99-4763-9b56-dd3c0be7c4a0"
        },
        "item": {
          "id": "fa83fe08-988c-4888-af2a-f2ca1b87b971",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "b4ba914f-d21e-4554-976e-d4212256dd02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 2294,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa83fe08-988c-4888-af2a-f2ca1b87b971",
        "cursor": {
          "ref": "54acbe05-cfb8-442a-895c-f8af5ed0dd63",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "f2251e57-8b99-4763-9b56-dd3c0be7c4a0"
        },
        "item": {
          "id": "fa83fe08-988c-4888-af2a-f2ca1b87b971",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "b4ba914f-d21e-4554-976e-d4212256dd02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 2294,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74ddad74-4bb3-4416-9906-2bde27c3ad2f",
        "cursor": {
          "ref": "2fa3bb0f-2576-4355-aa6c-f59b0f333bb1",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "835ed288-f921-4073-9f67-f0d0d51ddc15"
        },
        "item": {
          "id": "74ddad74-4bb3-4416-9906-2bde27c3ad2f",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "854c6a24-0048-41c6-97a9-a98e4b6129e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2b985ff-d821-4c01-9433-01ae779b5fb2",
        "cursor": {
          "ref": "816bda5f-bb2c-4697-b704-60f322137b62",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "cfdc423a-c247-4e59-998a-be617c7c651b"
        },
        "item": {
          "id": "d2b985ff-d821-4c01-9433-01ae779b5fb2",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "254bdab5-216f-4be4-ba9f-ee1964ac0b16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2efb3f98-d8c2-4ee4-8613-1a74bb1edf73",
        "cursor": {
          "ref": "f38d50dd-5955-4f0f-9563-a10a587f1bff",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "03be2a20-ffb8-4a31-aa1d-fbd9cdfa1e34"
        },
        "item": {
          "id": "2efb3f98-d8c2-4ee4-8613-1a74bb1edf73",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "4195922e-b15f-4f9c-bf9c-65c64e9a36a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8428e7d8-d471-4ecf-902e-b72f04011f09",
        "cursor": {
          "ref": "5993fefd-1193-40b2-9725-b9fd1736de90",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "5e3af502-f2c7-4221-813b-b536c3c73860"
        },
        "item": {
          "id": "8428e7d8-d471-4ecf-902e-b72f04011f09",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "98461822-356d-495f-96bd-1c74a4d1af4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea6319ca-fa17-4edd-a76b-9df3d26415a8",
        "cursor": {
          "ref": "5ff00fde-554d-40a0-ad73-3e31715c173f",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "afff518d-f0a0-4083-bd3a-1790897849e8"
        },
        "item": {
          "id": "ea6319ca-fa17-4edd-a76b-9df3d26415a8",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "819af41c-5111-4719-a0a4-fad87b45c63b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bed1ffa-4208-470c-a169-02865688e71e",
        "cursor": {
          "ref": "ed552c61-64f0-40c0-9d53-19a97e77b545",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "5fddec4b-1cc3-499f-956a-e962436059f6"
        },
        "item": {
          "id": "5bed1ffa-4208-470c-a169-02865688e71e",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "9d26c167-5f7d-4eca-ad87-46b092778982",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33e26887-dbe9-4c66-b55e-7ca3c82969fc",
        "cursor": {
          "ref": "834b539d-7d89-4f0c-afeb-0d1d262306a9",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "4a144707-ad1e-4559-a27d-24a2a3e0457e"
        },
        "item": {
          "id": "33e26887-dbe9-4c66-b55e-7ca3c82969fc",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "400bf7f9-7325-4c60-942d-9a709b24ad63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 116,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43b9cf4d-4dc3-4242-930d-c657e121fe26",
        "cursor": {
          "ref": "ad89dc04-1458-4761-be89-7bf4f2d7538d",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "b669959c-f64b-4f04-bcac-564aefa4c101"
        },
        "item": {
          "id": "43b9cf4d-4dc3-4242-930d-c657e121fe26",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "de134d16-44f5-4a0a-8fd4-7cb1d4509e55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f693ed29-3450-47a9-89ff-1d9966c642b8",
        "cursor": {
          "ref": "ebe8843d-8d0e-422d-b56c-b8c9e52ed622",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "aa803b75-60ca-487d-96d6-4278af4376b6"
        },
        "item": {
          "id": "f693ed29-3450-47a9-89ff-1d9966c642b8",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "b9ae2a0a-fc61-449a-b2df-2d23c56b0122",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7343a82-0b62-42e4-aac0-ddf32025be3b",
        "cursor": {
          "ref": "fb18b5d9-6b80-4744-8d96-654538903103",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "eaf219c4-86db-4e4a-974b-0698be69411f"
        },
        "item": {
          "id": "c7343a82-0b62-42e4-aac0-ddf32025be3b",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "680c1290-d6de-45a5-bc91-5c30bdde6613",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80bd200c-8682-4219-93d8-54226eb1f472",
        "cursor": {
          "ref": "c5724721-e377-4200-a911-8c3068e6403b",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "46b8cdbe-2402-4538-aace-00cc8f9b8c6e"
        },
        "item": {
          "id": "80bd200c-8682-4219-93d8-54226eb1f472",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "a23d647a-eefd-4125-b70c-feadc0e93411",
          "status": "Created",
          "code": 201,
          "responseTime": 7305,
          "responseSize": 982
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "8f2d49a1-aabd-48f9-ab39-4f5c62d3f40e",
        "cursor": {
          "ref": "6b521e7e-a867-41ac-bc41-6e6a1400f1ea",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "6c99e67a-f7b9-4f19-a116-22fd9fffbfdd"
        },
        "item": {
          "id": "8f2d49a1-aabd-48f9-ab39-4f5c62d3f40e",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "af5fd0ba-ca8a-48e3-8bb7-24b28a36cb24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c751b4c-f429-42b9-b120-ec8a1633efac",
        "cursor": {
          "ref": "9d2c2339-6e18-40e9-84af-15c8ec627067",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "9913e3a8-8e08-4027-a967-a35a158a990f"
        },
        "item": {
          "id": "2c751b4c-f429-42b9-b120-ec8a1633efac",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "db0d3ba4-f821-475e-b40b-1f7f750a8ae8",
          "status": "Created",
          "code": 201,
          "responseTime": 4778,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "69a2651b-fb9b-4af2-b974-118586739926",
        "cursor": {
          "ref": "22d3061e-5012-4a30-8722-d8eb266d9c64",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "32113c2c-7d48-4737-865e-911fd6fbd1a3"
        },
        "item": {
          "id": "69a2651b-fb9b-4af2-b974-118586739926",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "82d8507a-685c-4aad-a878-206b68f706e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 137,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9afa7361-e365-48f1-9e24-8d71dbb7fb78",
        "cursor": {
          "ref": "d23adbde-1915-4414-912d-31e727a352c1",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "715aa4a1-6871-4ce0-9e71-9ba9316bfaf7"
        },
        "item": {
          "id": "9afa7361-e365-48f1-9e24-8d71dbb7fb78",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "43fa8317-a4ef-41ad-82f1-1e0664d771ab",
          "status": "Created",
          "code": 201,
          "responseTime": 2592,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "8e3e80d1-1550-43b9-a174-f4d9d6afe56a",
        "cursor": {
          "ref": "6b1cd57f-52a5-4aab-a8bb-557c138ecc11",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "e563e40c-1cf6-4a8f-8a12-4af68ad518b2"
        },
        "item": {
          "id": "8e3e80d1-1550-43b9-a174-f4d9d6afe56a",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "06dd5ad4-1a18-487b-b3bc-e28657193240",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 110,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd66a11a-c9f4-4a23-b106-d2919cbad8bd",
        "cursor": {
          "ref": "388f77ae-10ca-4f9c-a2aa-75fec7e7fdfc",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "83e75053-ba8b-4805-ba8d-f7b73208def3"
        },
        "item": {
          "id": "cd66a11a-c9f4-4a23-b106-d2919cbad8bd",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "65f4d806-dc20-438f-8838-aba970f526c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 178,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d99e3ff-9510-4369-ac0e-3edc13a8ed09",
        "cursor": {
          "ref": "de6b2a16-7c73-4fea-8a02-d4247bff99c6",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "3780aa70-90b1-4e50-87da-ed8ba4be9594"
        },
        "item": {
          "id": "6d99e3ff-9510-4369-ac0e-3edc13a8ed09",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "abed02c4-c596-4310-9e66-447699eb5df3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 130,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f39caf60-300b-4576-a919-f379fd65e8ca",
        "cursor": {
          "ref": "d7a43e32-349d-4211-8d21-731db5217359",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "47b58358-8442-4066-ac37-d328991c9aec"
        },
        "item": {
          "id": "f39caf60-300b-4576-a919-f379fd65e8ca",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "80d5bb07-4c2c-42af-8dcf-3d05adb1b0b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c88b3b4-edcf-4f2c-86a9-679d67ac0bf0",
        "cursor": {
          "ref": "dc130503-1586-4baf-ab1b-fd7be17b5988",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "340f69ae-6ce6-4990-bb6a-28425fcc33ec"
        },
        "item": {
          "id": "6c88b3b4-edcf-4f2c-86a9-679d67ac0bf0",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "e178e982-b1c0-455a-9c87-bfce01f1517d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93d9842c-0ae7-460b-b253-6814c6441bd1",
        "cursor": {
          "ref": "3aa01e12-ee92-47a6-9033-2e13ea5f3033",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "cc9f2562-9fc4-4293-bbed-204a4b2edafc"
        },
        "item": {
          "id": "93d9842c-0ae7-460b-b253-6814c6441bd1",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "f8130b9c-576e-4f12-9b9b-696a00206cb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1145ac2-4b82-4e07-98f1-416653c61cf3",
        "cursor": {
          "ref": "0e1ff19b-26be-435e-a856-9f5c069bbb59",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "e31126ae-3086-4461-9bec-d3ace8a6d70b"
        },
        "item": {
          "id": "a1145ac2-4b82-4e07-98f1-416653c61cf3",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "325957ec-00b0-4e4c-b93d-74433d53ee33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "184da9e1-586c-43ff-bc91-84f4bba078d1",
        "cursor": {
          "ref": "84e8dd00-f54f-48de-ba86-e79c1fb633a1",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "959feece-a857-4e0c-b64f-83c19c8815e3"
        },
        "item": {
          "id": "184da9e1-586c-43ff-bc91-84f4bba078d1",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "7033ef2a-bb18-44a6-9a9b-24d092ed11ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cac6307-ce2a-4adc-be08-a923cabf0492",
        "cursor": {
          "ref": "0006768d-3ca6-497f-abac-e5ab36e7d5be",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "8fdc6f29-4e66-4449-b236-c9f8b16d99a3"
        },
        "item": {
          "id": "5cac6307-ce2a-4adc-be08-a923cabf0492",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "2c8334f8-0396-4bf8-8bb8-b6c695acbef8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de2e4a47-9dfd-404f-8c7c-ef43e0b66647",
        "cursor": {
          "ref": "b29f0eac-d757-4141-a2b6-666807975a39",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "87ca060c-bd6f-42b5-9781-c5cb844571ae"
        },
        "item": {
          "id": "de2e4a47-9dfd-404f-8c7c-ef43e0b66647",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "14e5f64b-c343-4c8e-9b79-add3ffe2117b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35006b91-12b2-44ec-bc93-7f723d3565d4",
        "cursor": {
          "ref": "8d8e557c-860d-44f5-b5b3-9924264540aa",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "67137762-b3b1-48c8-ad3a-32cc78d7408d"
        },
        "item": {
          "id": "35006b91-12b2-44ec-bc93-7f723d3565d4",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "98d416e5-4e7a-47e4-b42d-4f82b0038e28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51848192-3d73-40c3-ad72-a5c6d95492f6",
        "cursor": {
          "ref": "652a8a5f-c1c4-4566-9360-463bce090061",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "8df35152-941f-4217-b2b4-8757e7f01281"
        },
        "item": {
          "id": "51848192-3d73-40c3-ad72-a5c6d95492f6",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "fdb984f8-7672-4b25-995e-82a74bdeb564",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e05a8b28-78e7-4bbd-aaa3-7d6200120549",
        "cursor": {
          "ref": "cd8d35fa-1be0-4a31-9f96-5c4691880b58",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "82dac86f-e339-422e-8412-f07d1757cb63"
        },
        "item": {
          "id": "e05a8b28-78e7-4bbd-aaa3-7d6200120549",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "c8f069a5-2896-42b5-b602-aed32d3c9989",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78935b2b-b6fe-4f41-bfa2-07c4b4fe1178",
        "cursor": {
          "ref": "9d011d71-b35b-46aa-bd49-76eddb2bbaf3",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "a529711f-3fc9-41ce-81ed-e91f01a68afb"
        },
        "item": {
          "id": "78935b2b-b6fe-4f41-bfa2-07c4b4fe1178",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "0a94d30d-6906-4942-9108-f006415b1dde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e84bca7-835c-4310-827d-e22bad1f3547",
        "cursor": {
          "ref": "d57ac233-cc99-476f-93f9-353f6fe3be65",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "ae5f6b7f-a3a7-4d7d-952f-f3998da3a9f8"
        },
        "item": {
          "id": "7e84bca7-835c-4310-827d-e22bad1f3547",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "f0797dfc-6e75-410e-9b57-4eca6285e7e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2527fabd-6a6f-4d2f-b52d-06feda18a9f0",
        "cursor": {
          "ref": "f66e1178-76e1-4221-bd65-fd9773af15ac",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "99982fcb-dd5b-4d0d-8c52-8b594e32c406"
        },
        "item": {
          "id": "2527fabd-6a6f-4d2f-b52d-06feda18a9f0",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "efbe0bf3-b7a7-4ffc-a09e-a5394171cd5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76cb97b3-86d0-4641-8579-ea8ab443f64a",
        "cursor": {
          "ref": "78565532-f7b6-4b30-a7d5-917c549e0aa1",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "632a718e-f0df-4b27-8d68-d7a632fb05c5"
        },
        "item": {
          "id": "76cb97b3-86d0-4641-8579-ea8ab443f64a",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "70c7b657-d7b7-474c-b89c-77819d421674",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e160487-9f2d-425a-aaaf-9abf3f9ab7c7",
        "cursor": {
          "ref": "f26b89ea-f6e9-4db8-a169-8336e85ae142",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "ec381076-84e9-4502-a24e-1e758c165a91"
        },
        "item": {
          "id": "2e160487-9f2d-425a-aaaf-9abf3f9ab7c7",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "99e57665-2788-4cb0-8c08-28d0115edad4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90df6c13-7164-4a49-b3af-8e934248fbc7",
        "cursor": {
          "ref": "4090a2fc-2bd3-4207-bffa-eb52bdc16dcf",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "b2029421-efc7-4347-b580-418387713405"
        },
        "item": {
          "id": "90df6c13-7164-4a49-b3af-8e934248fbc7",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "bc2255ec-2066-465b-9f87-d6ca38065b85",
          "status": "Created",
          "code": 201,
          "responseTime": 2270,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "183b61ac-f432-441f-816a-9ae73efe2fb7",
        "cursor": {
          "ref": "bf147277-b73a-4a3a-8087-2b7293682229",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "083e6a28-5ba1-469b-b248-93d59dc1e00f"
        },
        "item": {
          "id": "183b61ac-f432-441f-816a-9ae73efe2fb7",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "2996c05c-a9e4-4d94-8dae-231999dc3596",
          "status": "Created",
          "code": 201,
          "responseTime": 2571,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "1752f49e-838f-48db-8106-bf7db11a5c92",
        "cursor": {
          "ref": "076ca71e-bc15-45aa-9a18-9dfc0c4e30c3",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "24dfea03-7ede-4dd9-af83-cfc034a60835"
        },
        "item": {
          "id": "1752f49e-838f-48db-8106-bf7db11a5c92",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "3f025337-d63c-4c5d-a028-181c7747c261",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d03cb0e7-8fb5-4735-b413-108f192c41be",
        "cursor": {
          "ref": "a4f2720c-ece9-40d3-9fac-11e4708aa7e8",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "c5a6ac9a-02a7-4f1c-862c-cb9caf3624e3"
        },
        "item": {
          "id": "d03cb0e7-8fb5-4735-b413-108f192c41be",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "2b8ab10e-f300-4293-a069-ef5c5f4bf515",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 152,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8086426a-f64b-427b-aee8-c72cd08b1c44",
        "cursor": {
          "ref": "462f3eab-f785-4f3e-9989-7c6c2f57fe52",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "512a5eaa-4ff4-45b9-acf7-111ab1d5f4f5"
        },
        "item": {
          "id": "8086426a-f64b-427b-aee8-c72cd08b1c44",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "325cc96f-a63b-487d-ac15-9c65a1af8917",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9be6a13d-53e1-4c8f-852a-2b1fa90b476a",
        "cursor": {
          "ref": "3702cb1a-a135-46f5-9880-ed712002d03a",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "70fce4b9-17c6-4050-92af-0c8daef0ecd5"
        },
        "item": {
          "id": "9be6a13d-53e1-4c8f-852a-2b1fa90b476a",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "2d9a33c8-1eab-4ea3-b46e-98537d0c6ede",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "447338bb-1807-4dd5-acd6-3e5ee84633c8",
        "cursor": {
          "ref": "a50ae3cd-8ebc-4266-b41a-78a9e17fe1de",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "d83da57a-e3e5-4f95-b094-1ed73de9e2d8"
        },
        "item": {
          "id": "447338bb-1807-4dd5-acd6-3e5ee84633c8",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "b3107664-3287-4ae4-949e-ab660305bf6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc4002f8-9298-4e3e-9706-53a83bf47949",
        "cursor": {
          "ref": "bebba74d-5a02-4ffa-b00b-593d0a09d338",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "9b5b7cbd-c32d-4291-8cec-393322e0dbcf"
        },
        "item": {
          "id": "bc4002f8-9298-4e3e-9706-53a83bf47949",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "d3266554-9bb6-4e42-a18f-411fb27187e5",
          "status": "Created",
          "code": 201,
          "responseTime": 2265,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "df7f07c9-1426-47d1-9301-3d1eeae21083",
        "cursor": {
          "ref": "1819cc19-845a-4900-b689-7e158fee6fcc",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "1f1ec4da-f606-4d64-9816-be0ecfbba33d"
        },
        "item": {
          "id": "df7f07c9-1426-47d1-9301-3d1eeae21083",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "585553e6-40af-457c-a7a7-16086a244417",
          "status": "Created",
          "code": 201,
          "responseTime": 2357,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "bd1cdb11-eebf-4abc-b08e-b49c44186947",
        "cursor": {
          "ref": "a1e060f0-a114-410b-915e-31bc7fc2bde4",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "23b1cbc3-7621-474a-a72a-eb215cdac2ec"
        },
        "item": {
          "id": "bd1cdb11-eebf-4abc-b08e-b49c44186947",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "e0602e6e-b9a0-4962-909c-caee737fa1fb",
          "status": "Created",
          "code": 201,
          "responseTime": 2669,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "d71321fb-505f-447b-8249-a013991cf328",
        "cursor": {
          "ref": "799c120d-67c6-4314-b025-226782dc0137",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "057f2e24-0c25-49d3-bcdb-bcb77bfb54a7"
        },
        "item": {
          "id": "d71321fb-505f-447b-8249-a013991cf328",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "77fda09b-3151-4e86-bf10-5b20b7b1f1d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 117,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a942545-a4b7-4edf-be93-efb4ba308ace",
        "cursor": {
          "ref": "405f8509-d5d2-488d-813e-489b1d5ec3c9",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "5e21b12d-3915-4e7b-9bb0-39c139bd281c"
        },
        "item": {
          "id": "3a942545-a4b7-4edf-be93-efb4ba308ace",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "fff47a6c-c840-4e74-a9b9-c3c0345e63a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 114,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb42f376-3434-4e52-a39d-bb77eb07f5ba",
        "cursor": {
          "ref": "d787beb4-2297-4465-a014-c5484eba5f11",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "f74c3cff-721e-41e0-9588-1ab2666b6084"
        },
        "item": {
          "id": "eb42f376-3434-4e52-a39d-bb77eb07f5ba",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "fa06336e-a154-4e81-9db6-b735dfb6ceb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ace106e5-7c83-414a-af9d-b22415f81e68",
        "cursor": {
          "ref": "4994d818-f42c-4257-a8f8-25429ebd7ec9",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "803ffe21-0b80-4ad8-aaa8-88be6254ad6b"
        },
        "item": {
          "id": "ace106e5-7c83-414a-af9d-b22415f81e68",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "b6e27616-c718-44d1-b1a2-6818b5e0696d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53cf8ef9-0aa0-4ddb-8002-e96b08a9fc0a",
        "cursor": {
          "ref": "8d3a9938-506e-4dce-a120-422beb48337a",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "0f5d2d45-07fc-4e1d-86cf-ccae3be7c049"
        },
        "item": {
          "id": "53cf8ef9-0aa0-4ddb-8002-e96b08a9fc0a",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "7a9da755-3659-46ae-a852-bd16218f32b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef765ea7-8ff6-4d7c-8600-645cf813e1f1",
        "cursor": {
          "ref": "eb0694a3-a2ae-4d6e-b0ef-129d5a90bff4",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "ef333fdd-053e-4533-b597-d595467b4bf3"
        },
        "item": {
          "id": "ef765ea7-8ff6-4d7c-8600-645cf813e1f1",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "2445bff6-a919-4dbc-9295-d145dd2f748f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "358f50e1-c4fa-4a6c-b0bf-76fdf9b4ddd1",
        "cursor": {
          "ref": "95f9674d-0b5a-4867-8a61-46c2db7a5dfa",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "de3e7ad7-e4de-46b1-b6b8-4366ba88ea47"
        },
        "item": {
          "id": "358f50e1-c4fa-4a6c-b0bf-76fdf9b4ddd1",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "6b11f038-8af1-4664-9af4-79d7e57f0b64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8905048-d7dd-46c7-98d7-45f3dbe3d0d4",
        "cursor": {
          "ref": "6f86e58c-360c-4761-9c5d-02e229bea0d9",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "a41801c3-ec08-48c6-9bf6-2d81e9061429"
        },
        "item": {
          "id": "b8905048-d7dd-46c7-98d7-45f3dbe3d0d4",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "09cc757d-99ab-42ad-8f9b-a4db8c64885f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32f90a77-06e1-4264-9d2b-f96c34a05c1e",
        "cursor": {
          "ref": "c90ba664-d845-4774-8ee1-1674ec00e802",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "1f147bcb-7627-4f47-a1d4-f34fd9275d9a"
        },
        "item": {
          "id": "32f90a77-06e1-4264-9d2b-f96c34a05c1e",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "52f43fb7-739f-49aa-974e-5c1c2a1f35f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f7fe32e-3e0d-46cd-a327-2fd730576456",
        "cursor": {
          "ref": "4873d2dd-fe89-452d-b569-778e8517cf0a",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "93d7d249-ba5e-4ea3-a178-4fd19da89a10"
        },
        "item": {
          "id": "0f7fe32e-3e0d-46cd-a327-2fd730576456",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "0f9190f9-1834-463d-8d3e-41f126bf124b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 150,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "248b4d07-59fa-47eb-98e9-988c09ef0e59",
        "cursor": {
          "ref": "da1d6fe0-b490-4693-a746-d4b687089d3a",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "dd16f3e7-a6c1-45b6-bec7-40c53c5ae984"
        },
        "item": {
          "id": "248b4d07-59fa-47eb-98e9-988c09ef0e59",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "41a5b86a-29fb-4726-8c0d-de55a6d1371f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8dd9d021-f6cf-476b-a7e7-48012b475fb0",
        "cursor": {
          "ref": "03b6d0f0-b4dc-43f4-b483-1bc08303e50f",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "6c25c439-0d59-44df-9dea-89b580590d94"
        },
        "item": {
          "id": "8dd9d021-f6cf-476b-a7e7-48012b475fb0",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "3f9983b4-4646-49ea-bf00-65d07ddcf61d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "078f2997-a910-4373-9efe-2439f4f73bc9",
        "cursor": {
          "ref": "e4e3bfcc-a933-4e88-9478-81896107456a",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "a147fc29-da96-4f1b-a5c9-34284a228380"
        },
        "item": {
          "id": "078f2997-a910-4373-9efe-2439f4f73bc9",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "2abff978-4d3d-431c-a1d1-d860835cdcc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccecd968-5f1c-421c-be4c-ed51ba335a95",
        "cursor": {
          "ref": "816d5697-abff-4b03-96a1-1711cd718122",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "568334e5-9571-4e14-8400-80264e5950f0"
        },
        "item": {
          "id": "ccecd968-5f1c-421c-be4c-ed51ba335a95",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "98a96529-1326-4186-89bc-64bde276e3a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15b5b894-6839-4ffa-8a4c-28945932cfd8",
        "cursor": {
          "ref": "0bc519a5-2176-4685-9548-e9048f9f7a09",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "034918a8-d7d5-45db-b6ca-4aa655e7f7dc"
        },
        "item": {
          "id": "15b5b894-6839-4ffa-8a4c-28945932cfd8",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "fb32d6ae-a08b-4b9a-ac02-334ccd6f5bf9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "195e34cd-91b7-4f29-ade6-ab441c152435",
        "cursor": {
          "ref": "4edd3ea8-a927-4728-aa9b-985c1121a95d",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "592aac25-460e-47ed-88b1-98ab34727a46"
        },
        "item": {
          "id": "195e34cd-91b7-4f29-ade6-ab441c152435",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "3ef9a059-0670-4904-80d3-a905ed74a1f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bb9c5fc-bd08-4933-9c15-f4eadaac02cf",
        "cursor": {
          "ref": "52432ad7-bfd9-4e2c-af18-2b703ba7fb1c",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "2348d226-3d8b-4732-a691-71fa411f6af4"
        },
        "item": {
          "id": "4bb9c5fc-bd08-4933-9c15-f4eadaac02cf",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "6e0f6c17-2182-47cd-9f3f-d0a51fc89939",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de4c321d-95dc-4fbb-aea6-dbe4f1487cfd",
        "cursor": {
          "ref": "6aa57d2b-b1fd-40c1-8d29-e8ebd13a528b",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "d6ea7321-dd1f-432b-afda-291cdb8d3c77"
        },
        "item": {
          "id": "de4c321d-95dc-4fbb-aea6-dbe4f1487cfd",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "a62d47e9-8884-4dcf-a1c3-5fea56c4436f",
          "status": "Created",
          "code": 201,
          "responseTime": 10384,
          "responseSize": 978
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "1eb1810f-48db-40d9-a8e4-b02217e111aa",
        "cursor": {
          "ref": "c3d0a010-aa61-4b34-a4b8-f4cb8f266764",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "4a9a6fb3-93d6-4e12-b221-4fb9a2c7b661"
        },
        "item": {
          "id": "1eb1810f-48db-40d9-a8e4-b02217e111aa",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "900a6d53-28a0-4695-ae9a-95a194ace6b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffa8a42a-c256-4b3d-975e-8bf9453535b7",
        "cursor": {
          "ref": "1cddcf63-394f-42dc-b006-9bafea97155e",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "a989a8cf-bd4b-417c-b00b-441bfc4ded2a"
        },
        "item": {
          "id": "ffa8a42a-c256-4b3d-975e-8bf9453535b7",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "626dced3-7c2a-4e3b-b38f-37ae2ffbfbca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c707f7f-1b8e-4343-abaf-942c31e9d609",
        "cursor": {
          "ref": "029ef030-9584-49ee-a53f-f1f7c9ab9d24",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "cfda6a0c-6f37-47cd-9f6e-78ae1642b874"
        },
        "item": {
          "id": "7c707f7f-1b8e-4343-abaf-942c31e9d609",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "1573a8fb-0466-4f53-91b3-88fc4873a246",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40ae6e70-6c01-4afc-893c-7fb0e7700c19",
        "cursor": {
          "ref": "a4eef215-b1f0-479e-be83-21a46700d515",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "e11d25c4-a448-4d37-be5c-7e0a7a543739"
        },
        "item": {
          "id": "40ae6e70-6c01-4afc-893c-7fb0e7700c19",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "bd116480-ec6c-4e78-9703-b0dfc7ce2581",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bbd68b0-a025-4665-9a20-a7f7aa0c5416",
        "cursor": {
          "ref": "6fbb055a-cf78-4931-818a-80f22ba3f8d6",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "4fa7f6da-bcf0-47bf-a9c7-96484c379794"
        },
        "item": {
          "id": "3bbd68b0-a025-4665-9a20-a7f7aa0c5416",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "546e93b1-0b2f-48e8-a04b-39fb02c88d5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51d53c00-fe71-49ca-8de6-03fbbf380dfe",
        "cursor": {
          "ref": "dae8014c-561b-4fb2-84d7-5d769ac03d1b",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "bfdebd65-7cab-4b0f-b3ab-2fb24c184485"
        },
        "item": {
          "id": "51d53c00-fe71-49ca-8de6-03fbbf380dfe",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "261a668f-8bef-410c-9371-89a17fc15e50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0307886a-349b-40b2-b569-3729b5b74255",
        "cursor": {
          "ref": "85819b41-1423-4e7e-ad89-407e3be10e90",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "be9db4f7-8292-437f-af6e-44d0e666fc5f"
        },
        "item": {
          "id": "0307886a-349b-40b2-b569-3729b5b74255",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "3e9bb140-993d-4c99-a0ef-5fa949294e1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3359e0a1-e6bf-4e4c-9d41-77b10eeb4e6f",
        "cursor": {
          "ref": "e4d1602e-935e-4bfb-ae6a-f2dc4e507937",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "ce707a3f-8d23-4b05-9f33-3a05c6de6d2e"
        },
        "item": {
          "id": "3359e0a1-e6bf-4e4c-9d41-77b10eeb4e6f",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "f8c09085-4d02-4e45-98e4-a7e6555e869c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b66f10c5-04b3-4e7b-9d3e-ad17ea7f235b",
        "cursor": {
          "ref": "06a30670-86f5-4732-847a-19a9fb34e955",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "cb83a496-1301-4fa0-9a39-6a5cdbf621ce"
        },
        "item": {
          "id": "b66f10c5-04b3-4e7b-9d3e-ad17ea7f235b",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "3895935a-9369-4067-b41f-5f3b7ad4edd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53856757-e0b3-49f6-8ea5-2e41a2d6863f",
        "cursor": {
          "ref": "8ea09fb4-dcad-4bdc-a3f7-e21b87787c8d",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "b6893b46-c365-4545-b3f3-27772b343f21"
        },
        "item": {
          "id": "53856757-e0b3-49f6-8ea5-2e41a2d6863f",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "4092cab0-e336-4a83-8290-3e3db1b276cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4f4d1b2-6250-4a5b-bd7f-359cda55fb42",
        "cursor": {
          "ref": "e318e9ee-b2b4-41bb-9d2d-7090a4ef4a36",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "f400538c-2320-4717-b575-d586e8c069e8"
        },
        "item": {
          "id": "f4f4d1b2-6250-4a5b-bd7f-359cda55fb42",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "50c0df5d-1f8c-4fd7-ac50-1859f3303dd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cc436e5-9ef5-4f50-9489-70b2a7c78769",
        "cursor": {
          "ref": "fe1acaf6-c02d-4a85-becb-e50cfabe78eb",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "b2906677-6182-4e24-9b3e-827e8e61488f"
        },
        "item": {
          "id": "5cc436e5-9ef5-4f50-9489-70b2a7c78769",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "7f157906-64af-4749-8148-901f17b0d3ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63c7eed3-9721-4e06-b984-539a6de0f733",
        "cursor": {
          "ref": "fc19d04d-1f94-416e-9eb6-b590f554b39f",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "adf114e9-fc49-4e7d-8ec1-bd40a7471f7a"
        },
        "item": {
          "id": "63c7eed3-9721-4e06-b984-539a6de0f733",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "84551349-98e7-4415-8627-86e1ce8c758a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbc3be17-3266-45ef-8ba2-c15df14f1338",
        "cursor": {
          "ref": "a406653f-6eac-4c36-a674-97b19911e24e",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "3e980a02-5fa2-4cf0-8872-02eb52372c48"
        },
        "item": {
          "id": "bbc3be17-3266-45ef-8ba2-c15df14f1338",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "e830cbb5-2afb-40c8-b0ed-78ed3d2d2033",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b79bf4c5-30a8-45ba-9043-b1dd15721493",
        "cursor": {
          "ref": "867ab4a3-6899-4f43-a82b-c15017836050",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "68f0acb4-8615-4119-9823-892d403e7fee"
        },
        "item": {
          "id": "b79bf4c5-30a8-45ba-9043-b1dd15721493",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "e4d6091c-99f1-4ea4-87ef-df95d7c6b048",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "673401cc-eea0-49b8-9915-21c47cfd906c",
        "cursor": {
          "ref": "c93fd9c6-3dc9-4782-9c2e-ba8526a0f728",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "1c556b59-3760-47cd-94d3-d6c76cc5a30e"
        },
        "item": {
          "id": "673401cc-eea0-49b8-9915-21c47cfd906c",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "9fda8a66-7a48-4236-8dd0-92dcbff74a9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "200014ba-f3d1-4395-8fe3-43e399ce7f92",
        "cursor": {
          "ref": "a30fc803-84b2-4a40-a04e-8e7eb48cc1e3",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "c0c0858f-5a60-4898-aea9-ee2516cb2eaa"
        },
        "item": {
          "id": "200014ba-f3d1-4395-8fe3-43e399ce7f92",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "df5905e0-5376-472c-97a0-cfbca3919165",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7ceef33-8cf4-4a86-a2a2-9c4d305d4d5f",
        "cursor": {
          "ref": "4a572fb5-ead2-435d-a166-b60ba5632d72",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "461f75bc-37d7-4ee4-a719-e3b21620c38a"
        },
        "item": {
          "id": "e7ceef33-8cf4-4a86-a2a2-9c4d305d4d5f",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "0ab9cad2-a862-413a-b3c0-169e7f33d56b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9d404b1-1d64-4a65-bc13-6a9d6d203d73",
        "cursor": {
          "ref": "63a14881-b64e-4785-a8f1-d7029b3ed6b3",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "c065b85f-d4dd-4a60-a60a-5fabe7d09fcd"
        },
        "item": {
          "id": "e9d404b1-1d64-4a65-bc13-6a9d6d203d73",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "9f158eed-b512-4b99-8a2f-56cbfc6bcaf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb4ae085-c0e9-4153-9520-aaa5a28c4343",
        "cursor": {
          "ref": "2c15b514-64ad-45d0-b5c0-0fc627d558fe",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "74413c72-3ef3-4754-984e-67bdc4acd840"
        },
        "item": {
          "id": "cb4ae085-c0e9-4153-9520-aaa5a28c4343",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "274c998d-400b-4498-8f2e-6464dc527a1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e101390b-981f-4293-8752-2667e43de311",
        "cursor": {
          "ref": "8f1654b1-5085-4e5d-8969-b9b68e58fd12",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "bb799b17-0073-49d1-abc2-302163423cae"
        },
        "item": {
          "id": "e101390b-981f-4293-8752-2667e43de311",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "fa49c5bc-c245-496f-9733-f92fb22369b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95442848-fc8c-4cde-8ec8-ed2491d029aa",
        "cursor": {
          "ref": "333918a3-eb1a-4fe9-bf0d-c010c6adea2d",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "fcf43d2a-81f3-4538-b234-da05b20eafae"
        },
        "item": {
          "id": "95442848-fc8c-4cde-8ec8-ed2491d029aa",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "4dd46d26-1bc8-4ca8-b7e5-222e6b3bc383",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bfb0db2-1da8-4e43-b006-3e4d6caef008",
        "cursor": {
          "ref": "6188c997-8be6-4ddd-bfbd-88a2a60fe859",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "20a16f5c-33bf-42a4-a5ee-19c34f62bdac"
        },
        "item": {
          "id": "5bfb0db2-1da8-4e43-b006-3e4d6caef008",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "67550c53-9569-4cbb-bfbf-4de1f947e3b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fc8cf79-8c1f-46b9-9bbd-84dc8cff5a82",
        "cursor": {
          "ref": "c94586c3-00fd-436f-a170-8133c75a7d3d",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "11653e77-f2b1-4e03-be6e-7a84379dbac2"
        },
        "item": {
          "id": "9fc8cf79-8c1f-46b9-9bbd-84dc8cff5a82",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "95df5615-b124-4b00-a6c0-c678456fe74e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e987efba-25fc-47fc-a8ab-6472b288d1de",
        "cursor": {
          "ref": "9edfecf0-602c-463e-9f92-270892ba1178",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "c6097440-6250-461c-b9df-82a10cf04ad9"
        },
        "item": {
          "id": "e987efba-25fc-47fc-a8ab-6472b288d1de",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "1d1ba300-690c-4375-bb56-77e967b33a60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b055c4e9-8e0d-42bd-b37a-26d4ccec5344",
        "cursor": {
          "ref": "ef1d546d-3dd9-422a-aa01-3c89e7be40c0",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "0c35eb77-e74b-4107-b061-2333e8cc3095"
        },
        "item": {
          "id": "b055c4e9-8e0d-42bd-b37a-26d4ccec5344",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "4d34eed6-62cd-48cc-add9-c36059348b6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04c08e00-70b4-404c-9584-a1c6005cfd5b",
        "cursor": {
          "ref": "22161e3e-042a-4fa6-9e52-56ce14c5fb61",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "e88daf51-0bf6-45bf-8e7b-a8cd51b3917d"
        },
        "item": {
          "id": "04c08e00-70b4-404c-9584-a1c6005cfd5b",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "79211ed7-e582-4b03-b2d6-b00d3ab46b90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64cea479-fda9-4ff6-aa77-8af2ec2e6c1e",
        "cursor": {
          "ref": "796a6d40-4c66-441f-8a7a-a40c29c1ab0a",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "0b8bf425-c9ec-454a-93c2-fcd0c8e76a2e"
        },
        "item": {
          "id": "64cea479-fda9-4ff6-aa77-8af2ec2e6c1e",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "7bad7f10-88bf-4bd9-8d84-9a7ef8f04d18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a2bb7c1-4b7b-4055-be4a-6edcb96fdc2f",
        "cursor": {
          "ref": "28c147a5-bd1b-4a75-b550-4a8cffa4e973",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "b8c74718-9dea-4367-87e6-dd0f23f148a3"
        },
        "item": {
          "id": "4a2bb7c1-4b7b-4055-be4a-6edcb96fdc2f",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "1c6a84fe-1fa6-4267-956c-933f50d59893",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2a7f766-3496-4710-975c-b95b8e39088a",
        "cursor": {
          "ref": "7bc57a6b-3ad5-4b84-bede-88521bcd17f8",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "de568207-289c-4c7c-bbc1-1cc73011ae42"
        },
        "item": {
          "id": "d2a7f766-3496-4710-975c-b95b8e39088a",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "89bdfc16-9bcb-4787-a5a6-11fd27cffa7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e0858cd-7f00-4287-b169-fd4b31651160",
        "cursor": {
          "ref": "022bfedf-a930-4221-a69d-d9edb394fe38",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "f18cc18d-5cfd-48bc-ba02-485d60730b79"
        },
        "item": {
          "id": "3e0858cd-7f00-4287-b169-fd4b31651160",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "316a13cc-ced1-4cec-9e53-bfabefeb9c48",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "b946ccb9-9f88-48d9-96fc-9ef84e861b09",
        "cursor": {
          "ref": "11f19666-bb2e-4132-bbb8-825516ac0afd",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "d700a81e-8c06-4c76-83bb-32c308225dd7"
        },
        "item": {
          "id": "b946ccb9-9f88-48d9-96fc-9ef84e861b09",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "cd49ba45-fbe4-4d63-a802-83ac1f2372b5",
          "status": "Created",
          "code": 201,
          "responseTime": 1981,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "789472c1-6ab8-4b49-82de-9bd41335529f",
        "cursor": {
          "ref": "65a8b99f-3026-4f94-be61-24a546b2d627",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "be221652-44cb-459e-a92d-f1146f92fd62"
        },
        "item": {
          "id": "789472c1-6ab8-4b49-82de-9bd41335529f",
          "name": "credentials_issue"
        },
        "response": {
          "id": "48a86da4-25dd-4176-b259-5fe6619ac112",
          "status": "Created",
          "code": 201,
          "responseTime": 2375,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf2fe2bb-48bd-4705-ab4e-f9032b36e7a1",
        "cursor": {
          "ref": "5d71f766-9441-417b-9d8d-eb522bfa26f0",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "d1b9446e-b35e-44b4-bfe8-69415ffa7ceb"
        },
        "item": {
          "id": "cf2fe2bb-48bd-4705-ab4e-f9032b36e7a1",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "8ef5e4c8-76ad-4493-8559-6c2604e2359c",
          "status": "Created",
          "code": 201,
          "responseTime": 2236,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a19d54e-5ce4-4e8c-a7da-9b13b0cd1f9c",
        "cursor": {
          "ref": "d0782d3c-785b-4e31-a8ad-59a86e0aa691",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "89ed5bee-ab87-40c1-a189-7069a2a9ceae"
        },
        "item": {
          "id": "5a19d54e-5ce4-4e8c-a7da-9b13b0cd1f9c",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "eaf753c6-d2fe-41de-a115-de7f49cd5369",
          "status": "Created",
          "code": 201,
          "responseTime": 2419,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "71075769-bf25-4afa-81d0-632f65cde499",
        "cursor": {
          "ref": "6df27ea6-46ad-4e73-85b7-c6c814ef7850",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "0d83117c-a865-4290-a49a-590724148ee8"
        },
        "item": {
          "id": "71075769-bf25-4afa-81d0-632f65cde499",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "d27317de-dd27-446c-893a-b6e3161807bc",
          "status": "Created",
          "code": 201,
          "responseTime": 3352,
          "responseSize": 993
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfecc2a6-e209-4185-bbc2-8d8fa6599711",
        "cursor": {
          "ref": "574d4165-6506-4bb7-8464-26ee743a1f47",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "fbcaa6ab-8004-4f0b-b183-889b7c4183b4"
        },
        "item": {
          "id": "bfecc2a6-e209-4185-bbc2-8d8fa6599711",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "cc9aa0d2-93c8-4d58-a508-b24499cbc14a",
          "status": "Created",
          "code": 201,
          "responseTime": 2714,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-04-06T00:37:04Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-04-06T00:37:04Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:108)"
            }
          }
        ]
      },
      {
        "id": "312a4261-c63a-4fb5-90a3-8279829c1840",
        "cursor": {
          "ref": "eda8dac1-424f-4700-9dbc-a2697bb399d3",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "e56b9b52-7523-4cdb-a667-af52f9c543c8"
        },
        "item": {
          "id": "312a4261-c63a-4fb5-90a3-8279829c1840",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "f6009362-b74c-49c8-b676-c09e64853ce0",
          "status": "Created",
          "code": 201,
          "responseTime": 2878,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5b0822f-87a5-4c3e-8210-62a16273216c",
        "cursor": {
          "ref": "0626871c-ee6f-4b39-9622-37b4405ce545",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "502451d7-112f-4dbf-8f82-274d8813a04f"
        },
        "item": {
          "id": "f5b0822f-87a5-4c3e-8210-62a16273216c",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "abd029f5-daab-4f55-9dd4-0fe993f8c8b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5b0822f-87a5-4c3e-8210-62a16273216c",
        "cursor": {
          "ref": "0626871c-ee6f-4b39-9622-37b4405ce545",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "502451d7-112f-4dbf-8f82-274d8813a04f"
        },
        "item": {
          "id": "f5b0822f-87a5-4c3e-8210-62a16273216c",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "abd029f5-daab-4f55-9dd4-0fe993f8c8b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41ca5bf4-3e3c-4452-b90e-74fde1fcf14d",
        "cursor": {
          "ref": "9f5ab073-0f4f-412a-869e-b79b5a91e3da",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "aaa6ef7a-6543-4e37-bde3-fe275d1f2890"
        },
        "item": {
          "id": "41ca5bf4-3e3c-4452-b90e-74fde1fcf14d",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "268ca857-099d-4b19-a1f6-1b620b051d39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80b17589-625f-45f4-a9db-fff65ad22ff7",
        "cursor": {
          "ref": "f05e5b5b-fa50-428a-91a4-0b8ca4611c8a",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "de5aa509-4587-4178-a16e-2f1e8acbd1bf"
        },
        "item": {
          "id": "80b17589-625f-45f4-a9db-fff65ad22ff7",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "b626653a-b7c0-4613-9f1c-cbdb8ee76731",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1338e61-18fa-4ebb-bf61-efe1573eb49c",
        "cursor": {
          "ref": "a4f61673-2a2a-4980-839a-a255a566fefa",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "df985775-53bb-4762-87af-85f936f96a63"
        },
        "item": {
          "id": "c1338e61-18fa-4ebb-bf61-efe1573eb49c",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "542d66f0-469d-4384-af64-0ac39504ce71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29a992a7-b618-4c7d-bc66-704210edfe3b",
        "cursor": {
          "ref": "88720cdc-b213-499e-92a9-b8c335997fef",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "14fc99fa-f703-4941-bccf-1521099db544"
        },
        "item": {
          "id": "29a992a7-b618-4c7d-bc66-704210edfe3b",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "01d89c81-f9bf-480a-81de-8ace86dedca7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3e37e27-ad9a-4513-b0a4-555bb8a95fd6",
        "cursor": {
          "ref": "f731e1f6-2eec-41ec-9c5c-0514e80934a3",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "dd12ebce-d80c-4e09-b074-d9f96e624527"
        },
        "item": {
          "id": "d3e37e27-ad9a-4513-b0a4-555bb8a95fd6",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "daf6ec89-8159-49ac-a6f8-964fd3ca16ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a287455a-80d3-4a21-9d05-e7c05ab89412",
        "cursor": {
          "ref": "312f8887-e409-4858-a0d9-a00572c69380",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "20ccd169-d452-4c6d-920a-e4b33ed79489"
        },
        "item": {
          "id": "a287455a-80d3-4a21-9d05-e7c05ab89412",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "1c6fc65b-4511-4fb9-8337-4713eeaf2a7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf49f335-9d4a-48dd-a4d7-d16c0add3e15",
        "cursor": {
          "ref": "96b431c7-aac0-42a4-bdeb-cceb38e77538",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "abf371f3-975c-43ff-b86c-a0c2897cc45f"
        },
        "item": {
          "id": "cf49f335-9d4a-48dd-a4d7-d16c0add3e15",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "0c738b31-953a-48a8-b4a6-48ecfb9280d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab1b6c5f-ac1a-4c58-86ba-1e29f1e8d229",
        "cursor": {
          "ref": "055b47f0-c50f-43ae-a589-53c56ea9c80b",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "8c4dc227-726b-4c82-8249-cf8873676e42"
        },
        "item": {
          "id": "ab1b6c5f-ac1a-4c58-86ba-1e29f1e8d229",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "941ad46e-3967-47c7-b10d-cd393af341a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91aa1955-93b7-46c6-bb3f-4c7ab4108e90",
        "cursor": {
          "ref": "0d0ef39a-e88d-478c-982c-512fbb6812df",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "f50f46f3-a2bb-4e26-89d1-9738d16f2c8e"
        },
        "item": {
          "id": "91aa1955-93b7-46c6-bb3f-4c7ab4108e90",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "f856b840-9ab3-4732-a77c-2bd64185cb72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8034e4fd-dfa7-4026-94d7-3aedbceb169f",
        "cursor": {
          "ref": "790f98b0-48c2-4124-bf80-120237e6d934",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "1ff802a1-b4f9-4e22-b8fb-6f1232535f07"
        },
        "item": {
          "id": "8034e4fd-dfa7-4026-94d7-3aedbceb169f",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "eb6cec76-59b1-435a-8a8c-186b71686dd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "821debc6-a41f-4de0-acd1-48d9dcb069ce",
        "cursor": {
          "ref": "9b72bb65-5e5c-48d9-a7c5-0c99f08157d8",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "0b5eb4ae-8833-4b41-ae6e-ecfb499af34d"
        },
        "item": {
          "id": "821debc6-a41f-4de0-acd1-48d9dcb069ce",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "e53757fc-efc7-41cb-9f38-8a789da1c1b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "377389d8-28b3-420d-afdf-c9772b8a842b",
        "cursor": {
          "ref": "a9a8c3a2-480a-4ec8-bf18-43194e0fa154",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "ebf22461-e21c-4650-9771-ac83f7d21647"
        },
        "item": {
          "id": "377389d8-28b3-420d-afdf-c9772b8a842b",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "493ec4a1-aee7-435d-9631-1771a47dee70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b420c57-3a09-4013-a9ef-ab2841ced058",
        "cursor": {
          "ref": "3c00fbfe-a51b-41d9-a751-febafaaabea9",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "b9da98a3-cb6b-44f9-a59f-e26c8d160d85"
        },
        "item": {
          "id": "4b420c57-3a09-4013-a9ef-ab2841ced058",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "fde39cc8-e583-4cc2-a7c9-5aaf3c5acedd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73d55f12-c6f1-42e5-9b35-4ddae9e657b6",
        "cursor": {
          "ref": "cbe44b4e-461e-4038-87b6-3c045b304d41",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "89198ca2-6aab-4b15-ac53-f813aca4fbdc"
        },
        "item": {
          "id": "73d55f12-c6f1-42e5-9b35-4ddae9e657b6",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "685931ab-0aa0-478a-b3b7-f9adea2fb540",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6d57296-a414-4dfa-9047-a9e365d0ece9",
        "cursor": {
          "ref": "256d7558-c3b6-45e5-b245-525f5cebb499",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "279a8281-f2fa-4b33-a3a8-2f8a19995c75"
        },
        "item": {
          "id": "f6d57296-a414-4dfa-9047-a9e365d0ece9",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "b54cc20b-12b3-466d-910f-cbb4aeed5ae5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f513f63f-3af5-451d-add7-0286d8aca4d3",
        "cursor": {
          "ref": "4866e861-2ef9-4455-a276-f7bc12f8d4be",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "96b02999-1749-4a41-9e55-8220ac51f2f3"
        },
        "item": {
          "id": "f513f63f-3af5-451d-add7-0286d8aca4d3",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "802e770a-d212-4634-bc98-4a3893437df5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9ca96af-cea5-4e62-b77e-15e6a1ee9d74",
        "cursor": {
          "ref": "e7ce041b-0925-4afb-932e-e09606e0d592",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "743773fc-0325-4939-abe7-703ed5b309f1"
        },
        "item": {
          "id": "b9ca96af-cea5-4e62-b77e-15e6a1ee9d74",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "37121591-66cc-44a4-a374-8de55919df6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20f22203-e5ff-4c5d-a9c3-8a951613845b",
        "cursor": {
          "ref": "9ab9b5ff-55b8-41df-8d31-e13039ae760b",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "88aa1475-8e44-4c9d-a080-895c7032d7f9"
        },
        "item": {
          "id": "20f22203-e5ff-4c5d-a9c3-8a951613845b",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "3ae59b53-be0c-4fd3-8435-ac68a9e359c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f2220cc-d5b1-4f25-b656-9eb954d1be27",
        "cursor": {
          "ref": "f1a4f34d-b4ac-4711-a102-5d10f7807154",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "0050f8fd-ba08-4249-aee5-de89c5b00f59"
        },
        "item": {
          "id": "7f2220cc-d5b1-4f25-b656-9eb954d1be27",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "6480e0ce-015f-4b3d-a266-6e2dee849ddd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6104cc96-07d4-4a93-a7c5-c7f57751a7c3",
        "cursor": {
          "ref": "294e946a-03f2-41fd-92fd-3917c7d219b1",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "9f97980e-812d-4fe1-909b-3b9dd3967bff"
        },
        "item": {
          "id": "6104cc96-07d4-4a93-a7c5-c7f57751a7c3",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "4836a144-2969-4d4f-b0c8-ba8ae097b79c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc30d572-dae0-4edd-9eed-95ca60f4115c",
        "cursor": {
          "ref": "d29ea4a1-d911-430e-8189-00d073ceff8d",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "233114b3-4f1b-4aa9-ab0b-ac30e1d33289"
        },
        "item": {
          "id": "cc30d572-dae0-4edd-9eed-95ca60f4115c",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "4c5f0ccf-193e-4d4d-a893-c9782f2da061",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89575fbc-7833-429e-8069-95265194dcd8",
        "cursor": {
          "ref": "99413a74-65d0-463c-a7a8-6d7c17ef741a",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "30f6ae76-a4f9-4a1d-a818-8762c833e75a"
        },
        "item": {
          "id": "89575fbc-7833-429e-8069-95265194dcd8",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "78ef03c8-1910-4947-b5ce-9b14e62cec1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d349756a-c999-4f65-9e4c-3d73b0dfa1aa",
        "cursor": {
          "ref": "f045509e-27db-44c3-a032-45a9a4e7af7c",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "f9cf1ee0-6a48-4bfb-9b25-f33eaeb68a52"
        },
        "item": {
          "id": "d349756a-c999-4f65-9e4c-3d73b0dfa1aa",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "bd0ac57e-e53d-4604-94ef-07dbcff3511b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e253ec2-1ff6-4379-a71c-9fb3e1f34dca",
        "cursor": {
          "ref": "091caa30-a8f0-4287-854e-8997eb6d61d4",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "eeeffaba-f140-4189-ad6c-0cd6aaad36c4"
        },
        "item": {
          "id": "2e253ec2-1ff6-4379-a71c-9fb3e1f34dca",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "2a9ef675-c3b3-418b-b468-dbd6c548f636",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7eea6906-df3f-4b71-9fa7-aad935565ffb",
        "cursor": {
          "ref": "2538d41f-f081-448c-845e-0af4c6dded79",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "ae434b6b-a700-4921-ae3b-d8053089c37c"
        },
        "item": {
          "id": "7eea6906-df3f-4b71-9fa7-aad935565ffb",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "031612b6-fc1e-403a-a437-73bdcbadaeb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0ec4b8e-e43a-46da-b6dd-47660fc949f2",
        "cursor": {
          "ref": "69918e39-45bd-4ace-b975-db3df3487a34",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "fd2f0c6f-292a-46e3-a700-5bfce5c03e67"
        },
        "item": {
          "id": "a0ec4b8e-e43a-46da-b6dd-47660fc949f2",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "767ce9f3-3a5b-43e1-9990-0e4f4c250e8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcf53fd3-7468-4629-a263-6101292ce782",
        "cursor": {
          "ref": "b2a6318b-ac10-446f-bbfe-36e461ebb600",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "9d769499-202b-4438-93ca-326859d6faaf"
        },
        "item": {
          "id": "fcf53fd3-7468-4629-a263-6101292ce782",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "65de19bd-b35a-49a4-adac-76c96d7e6014",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f8d0c6d-5952-4fec-bfbf-04db392d1f96",
        "cursor": {
          "ref": "4ad37c78-d78d-41b9-9afc-1516de5f5097",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "f5c21cd1-ca7b-4e63-a782-b1988233905c"
        },
        "item": {
          "id": "6f8d0c6d-5952-4fec-bfbf-04db392d1f96",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "b54e04ac-fb7a-4e86-830e-2c563019fefa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1248d370-7621-4c80-8f39-cf1bfb40dfe8",
        "cursor": {
          "ref": "6634b1ac-dc33-4637-9fbc-4731ca6ad3c5",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "c8ad9339-6c16-481b-b6ba-8d30f06f4924"
        },
        "item": {
          "id": "1248d370-7621-4c80-8f39-cf1bfb40dfe8",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "e8b67989-6705-47c7-aa2e-331e614894d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e7f82f3-9917-4ecc-8fed-af99dc771c04",
        "cursor": {
          "ref": "be64a874-457f-4b9b-a2ef-a7a0d24d44db",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "e2dbf484-3724-407e-bd05-5b7b6422039e"
        },
        "item": {
          "id": "8e7f82f3-9917-4ecc-8fed-af99dc771c04",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "98c316a0-39f7-4772-9e84-b616bdc1184b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8de083f8-5f0e-4fb8-9bdd-549c80fe1d91",
        "cursor": {
          "ref": "39176f02-896b-4203-b3a3-128ee615a19a",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "4bd18ad9-7e9b-46a8-abcd-8ec178755a2a"
        },
        "item": {
          "id": "8de083f8-5f0e-4fb8-9bdd-549c80fe1d91",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "5e27de2c-5304-41fe-8f3a-c3044a98ecd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef01caca-a4b7-47cc-a434-7ed96815b66a",
        "cursor": {
          "ref": "664f6c1c-b509-4ceb-b415-97cbb5acfe84",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "97a43aa6-c0f5-4285-b19a-95e3a543115d"
        },
        "item": {
          "id": "ef01caca-a4b7-47cc-a434-7ed96815b66a",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "f6dfa96d-bc1d-4bba-a704-6949b3736b9f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "c7f44d0d-6a39-4498-8c0c-74cdbd7b69e9",
        "cursor": {
          "ref": "45091160-ab8a-4850-8b1e-17aa43c35d44",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "af8801eb-ccae-458e-a2b7-d638c68d782f"
        },
        "item": {
          "id": "c7f44d0d-6a39-4498-8c0c-74cdbd7b69e9",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "97cc71fa-b2be-4290-95ea-90f4e9c1896c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "eda9c6a7-93a5-4c43-8014-b20162fff123",
        "cursor": {
          "ref": "20a3b365-72c8-45b4-b95e-955097f41dec",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "ce11f88f-a83d-43df-9988-f6c158a7587d"
        },
        "item": {
          "id": "eda9c6a7-93a5-4c43-8014-b20162fff123",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "2369c13b-552a-4e17-82a5-534b2fd155ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eda9c6a7-93a5-4c43-8014-b20162fff123",
        "cursor": {
          "ref": "20a3b365-72c8-45b4-b95e-955097f41dec",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "ce11f88f-a83d-43df-9988-f6c158a7587d"
        },
        "item": {
          "id": "eda9c6a7-93a5-4c43-8014-b20162fff123",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "2369c13b-552a-4e17-82a5-534b2fd155ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "765efa2c-a609-4856-88ca-fc66eb1491fb",
        "cursor": {
          "ref": "a0d5c351-c8c7-41a5-af47-1360387cf21c",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "22a6bdf8-1723-466d-b2ab-0155e554bcc8"
        },
        "item": {
          "id": "765efa2c-a609-4856-88ca-fc66eb1491fb",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "31411689-1954-44e3-8e1e-41b313221f6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c761097d-fc19-4bd8-a91c-6be5fb4677d3",
        "cursor": {
          "ref": "484e8255-2429-493f-8222-1c70222341af",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "3a3b6a6a-0c8d-44c8-9de9-6f2affdc976e"
        },
        "item": {
          "id": "c761097d-fc19-4bd8-a91c-6be5fb4677d3",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "bf1cdcb0-26f5-4195-a8bd-b0e3d11e8c11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b8a249a-ef4e-496b-b31a-ca7d8dffc672",
        "cursor": {
          "ref": "74f546b3-3a86-48f0-9baa-7063a333bda4",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "2b3a2f7b-604f-4638-82d4-c5e8a5605a7f"
        },
        "item": {
          "id": "8b8a249a-ef4e-496b-b31a-ca7d8dffc672",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "4ef4f6e6-9d45-41b2-9a0d-4c22006a2a83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 809,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "617a6c32-3f44-4c2e-981a-253eb5fdefae",
        "cursor": {
          "ref": "c210b9f4-2be8-48a0-8018-74250a16d34d",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "7ea0e30d-ec46-4fab-a6e8-e1a9552d4f8d"
        },
        "item": {
          "id": "617a6c32-3f44-4c2e-981a-253eb5fdefae",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "e61c10d4-92a7-48b4-a0f9-c8a7066ac790",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "433b91c7-b83b-45b7-a190-d9eb51355050",
        "cursor": {
          "ref": "7ffb688e-8886-41d5-bdd4-a6af4f032861",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "2a8b32f7-64fe-400b-86e9-bef0c66ca271"
        },
        "item": {
          "id": "433b91c7-b83b-45b7-a190-d9eb51355050",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "56bff336-bb0c-4a87-a351-f6996e4cb502",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cd668b3-8338-476b-9cec-99af4a64a4ea",
        "cursor": {
          "ref": "9788acca-87d5-4892-a106-721dd6365bf7",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "d2a6df4d-2710-43ae-a0ba-2c301b135edc"
        },
        "item": {
          "id": "4cd668b3-8338-476b-9cec-99af4a64a4ea",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "c9a51597-0c61-47c8-82cb-e7b392432cfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6b7204d-bdb5-4185-b2d8-72a2cae04fdc",
        "cursor": {
          "ref": "08fa975c-0c90-4846-bf64-cb1c8d9af1b1",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "e6adf258-1219-4b77-a771-324f0bd160da"
        },
        "item": {
          "id": "a6b7204d-bdb5-4185-b2d8-72a2cae04fdc",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "940e33b1-c85c-44d0-9d6f-15171c5ee7a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "698f302a-04d1-40e8-91ab-848dccc6d165",
        "cursor": {
          "ref": "dc25036d-8c32-4f3c-9c7e-0cfb72251d60",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "0f05aa84-68f1-42ec-b085-9ac0fb00b90e"
        },
        "item": {
          "id": "698f302a-04d1-40e8-91ab-848dccc6d165",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "029748b3-6680-4b1c-b964-f1e432dadbf2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "238511c3-772c-452c-a826-4ce87dbb8cda",
        "cursor": {
          "ref": "6a3759af-e970-4566-84d1-0eb9a995d9ea",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "4682841f-11dd-43a5-ba54-51f94c7aff32"
        },
        "item": {
          "id": "238511c3-772c-452c-a826-4ce87dbb8cda",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "2a0e4d00-dd84-4345-ae3f-5319999a6d6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2510078a-c329-4bf4-9753-aef4fb87b223",
        "cursor": {
          "ref": "3f7f71c1-b831-4f2c-b078-1c7a2998fa95",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "045e48cc-fe81-4fd8-b807-0ca0a1d0c32c"
        },
        "item": {
          "id": "2510078a-c329-4bf4-9753-aef4fb87b223",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "79c30967-34d8-4758-b133-8f1fa758df84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "058cd6dc-14cb-47aa-95be-44659b979ebe",
        "cursor": {
          "ref": "3c565a77-8d78-4927-bb87-ed7d1418c063",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "7a86b4f2-2a25-4e9b-9e91-d98c79eacdc6"
        },
        "item": {
          "id": "058cd6dc-14cb-47aa-95be-44659b979ebe",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "0a5cfd16-c4ce-4037-abed-1af289c16803",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1056c64d-aea2-4964-ab69-4834992b5932",
        "cursor": {
          "ref": "46dea589-2f04-420a-8b38-0246687e56dc",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "6135302d-be19-4fdc-b318-5d7dfb1e9503"
        },
        "item": {
          "id": "1056c64d-aea2-4964-ab69-4834992b5932",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "002bea1f-29c7-4d18-bd96-8d476d4cc390",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 134,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15492a74-c9f0-41e6-bd58-c4753395faeb",
        "cursor": {
          "ref": "04db0ea7-22a0-4898-8335-0085baa492c0",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "96f3ab0a-0345-4b26-b284-7bac3409214a"
        },
        "item": {
          "id": "15492a74-c9f0-41e6-bd58-c4753395faeb",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "ce1359ac-8ae8-4d83-bdf4-ff4aa5dc481e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e96fdba7-4389-4cde-a819-01a3ce04ab07",
        "cursor": {
          "ref": "2093a95f-e8ba-4fb5-a0f2-276fd61d97b6",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "2346e427-8732-46c4-9a9b-d3fe589ef9e8"
        },
        "item": {
          "id": "e96fdba7-4389-4cde-a819-01a3ce04ab07",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "eca95b9c-8852-48ff-bea3-f3204c3f316e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad38b60c-93ef-4ed9-8502-0d276d0c5ccf",
        "cursor": {
          "ref": "5501f213-785e-4200-96c2-12a9a4cb2a3f",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "b3ef85b1-4824-4d71-aa03-1573705aa569"
        },
        "item": {
          "id": "ad38b60c-93ef-4ed9-8502-0d276d0c5ccf",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "ee9b9145-179c-4cbe-bb84-b977280c3716",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58556ac7-1229-448c-81ea-0c87a45a3178",
        "cursor": {
          "ref": "523da611-1660-4f12-8791-cd3b7f89aefd",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "898376b0-b230-4ab3-8bcd-a4c6685792d8"
        },
        "item": {
          "id": "58556ac7-1229-448c-81ea-0c87a45a3178",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "f70a4236-04ee-4e17-bb7c-d9e8b0a42a36",
          "status": "OK",
          "code": 200,
          "responseTime": 553,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "49462536-0db1-4ea2-a4ef-27fb5ce027b9",
        "cursor": {
          "ref": "f7dded3f-ced5-4caa-bb3c-11dd2ccb381a",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "2c2050e2-d2b1-4282-853d-4d1c73ef0af2"
        },
        "item": {
          "id": "49462536-0db1-4ea2-a4ef-27fb5ce027b9",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "da996df5-d072-4a63-bd1e-a6d23d4c2be3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa1862de-9ee5-4208-a4ab-4ae4956632ba",
        "cursor": {
          "ref": "55a7c6b5-d60d-4e05-8d33-27e09cc79e2e",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "dc5969e3-d289-44f8-81aa-a3ccf3154d62"
        },
        "item": {
          "id": "fa1862de-9ee5-4208-a4ab-4ae4956632ba",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "61ab4387-6f7b-4ce5-bf13-774ebbe9ade6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90635355-2b06-49a6-8ce5-6d5544ad78e6",
        "cursor": {
          "ref": "35fb7a55-1095-41da-8be6-a06c801f5d19",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "e24c2b0d-0683-408f-bde8-cb9c6b056e65"
        },
        "item": {
          "id": "90635355-2b06-49a6-8ce5-6d5544ad78e6",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "067476f9-aced-45ce-8bc3-9da33e16575b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbdc90f4-ff71-49ac-be81-6ebffddd46f5",
        "cursor": {
          "ref": "1d7f284f-3d30-4452-b1b7-6f437a50d436",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "131d86bb-9b5b-466b-8dd5-ce3337c8920d"
        },
        "item": {
          "id": "cbdc90f4-ff71-49ac-be81-6ebffddd46f5",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "0d882265-6614-45e6-8517-8d23e43b86c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acf03c81-ad63-41b0-a8af-fd6ed9cf7799",
        "cursor": {
          "ref": "cf1efa5d-5355-4693-9041-9bf202bd9b72",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "5558a963-f158-4605-9479-3e91690fbd53"
        },
        "item": {
          "id": "acf03c81-ad63-41b0-a8af-fd6ed9cf7799",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "b4221fbb-44ff-4b1f-b2c0-754700caac76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 701,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d06ea0a-833c-459a-8b13-910b4d803c0f",
        "cursor": {
          "ref": "99eeeb63-8943-43bc-bd32-2d8195611287",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "b074d138-dc2d-4565-9047-1c23a2b641a8"
        },
        "item": {
          "id": "7d06ea0a-833c-459a-8b13-910b4d803c0f",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "29a1aa0f-9fed-40c8-9c5f-2de35d9bda1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6f6838c-df15-4d8d-b617-7a7430ea5b05",
        "cursor": {
          "ref": "ae7f445a-aec8-4f75-b430-d7a09cda8930",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "5679967a-3a7e-4aa2-9329-71c887d72f5e"
        },
        "item": {
          "id": "b6f6838c-df15-4d8d-b617-7a7430ea5b05",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "a4d6150e-b10d-4e0d-ae1e-e7f58ca6fbcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d3443be-7f75-4398-9710-cbfab0f10436",
        "cursor": {
          "ref": "2192d993-16fe-4cf5-b5f8-0f0bf68a8d0e",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "101726c4-9ad7-40c4-9378-e521f6b3c04a"
        },
        "item": {
          "id": "0d3443be-7f75-4398-9710-cbfab0f10436",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "4e95ee56-3794-44a2-8eb0-d921101ab660",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8952f0f-689c-411e-9e1b-4011b1903ffc",
        "cursor": {
          "ref": "3dfe3076-5587-4fd6-b9bf-a23ad9869049",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "f64c4c0a-4a68-487c-a699-56ec6cee6d30"
        },
        "item": {
          "id": "d8952f0f-689c-411e-9e1b-4011b1903ffc",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "aabe4397-8453-4088-a064-5b127f539d35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f218984e-98c4-4d1c-825c-5ac6de430ba8",
        "cursor": {
          "ref": "e2493c04-0f35-4e9a-bf8f-d18241d5adc3",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "309f791e-5ea8-40b5-b03a-48eb634e544a"
        },
        "item": {
          "id": "f218984e-98c4-4d1c-825c-5ac6de430ba8",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "28cdc728-973b-4c55-a0fa-24434a034eeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d794ecba-85b7-423b-a206-9f619e2bce75",
        "cursor": {
          "ref": "91007b4a-eab7-491b-a958-802e656f6784",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "7e8b6895-23b4-41ed-a2f4-57be0309a059"
        },
        "item": {
          "id": "d794ecba-85b7-423b-a206-9f619e2bce75",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "02c4370d-1cac-44d8-8b76-f43003d19851",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16a21e5a-e914-43cb-93a2-287194d730bd",
        "cursor": {
          "ref": "2cd068d1-b45f-4f0c-8e6c-c3cc6ca791e7",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "1d5debab-17ea-4710-8646-1cda141ed0fb"
        },
        "item": {
          "id": "16a21e5a-e914-43cb-93a2-287194d730bd",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "865178cc-f6a4-4e4d-8f87-1d1460c3880d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "285db768-4ae5-4999-9b38-a3c118b41d80",
        "cursor": {
          "ref": "d8be2792-b03a-4007-bca4-8ef94a21f82c",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "cd391765-8b44-4aa5-9335-d7801d624c4c"
        },
        "item": {
          "id": "285db768-4ae5-4999-9b38-a3c118b41d80",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "7b148125-4dbc-433a-b931-199fbece95a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29ea6a94-6e5d-4f4c-8a5d-0e222bfdb3e1",
        "cursor": {
          "ref": "d1eb5856-f88f-49db-a84f-e4940978d823",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "37208b50-b6e6-4c6e-ac4d-3d6d510be1e0"
        },
        "item": {
          "id": "29ea6a94-6e5d-4f4c-8a5d-0e222bfdb3e1",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "8e8e11e2-e906-4bb0-8941-3fa7f0ab2a98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 113,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "740b4830-ed61-4bb7-bacb-fffaed410f03",
        "cursor": {
          "ref": "3005958f-139c-4c28-8597-46bd51a862d6",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "ea141c8c-8225-4195-a324-15efc320f1f1"
        },
        "item": {
          "id": "740b4830-ed61-4bb7-bacb-fffaed410f03",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "f5334962-acda-4473-a6f5-2b589cd28c32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11d3d1eb-a534-47bf-bf39-5b4e3c737cad",
        "cursor": {
          "ref": "7d6d5914-bd44-4afc-8e9a-2ebc79fca6d5",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "b3aa0e67-ff0c-4d9a-b083-ae77f7f6d883"
        },
        "item": {
          "id": "11d3d1eb-a534-47bf-bf39-5b4e3c737cad",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "1cc0fcfe-0f23-4637-8e27-837d74336c99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64c58490-cebe-4830-9903-e3acaa24331a",
        "cursor": {
          "ref": "e3c9316b-3021-42f2-a8ec-58674c424680",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "644e9e07-84fe-4ec1-9743-bf95e93e5847"
        },
        "item": {
          "id": "64c58490-cebe-4830-9903-e3acaa24331a",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "6debc86a-d573-401d-a100-7f1de60b1786",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9fc6da2-500c-492c-a305-44cd478616fa",
        "cursor": {
          "ref": "ee73e4f6-f7cf-4ee9-b22e-e9a653d961d0",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "f9ef8896-249b-48c8-9e54-7b315951750d"
        },
        "item": {
          "id": "e9fc6da2-500c-492c-a305-44cd478616fa",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "130a5da4-a191-40e3-a585-9b483caabac7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46ac2817-dbf6-4ec4-bea1-c364972df9b8",
        "cursor": {
          "ref": "7b866f4a-c3b0-4c3a-b487-1492467d9917",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "74d26121-06b1-4742-b7d7-41c48f285593"
        },
        "item": {
          "id": "46ac2817-dbf6-4ec4-bea1-c364972df9b8",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "1a1ecaa7-3691-4889-a60a-71611521ed2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33b582c3-240a-41e6-8487-2176ee773b79",
        "cursor": {
          "ref": "a04dfa88-168a-4255-851c-6d627a8b2399",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "47ae8645-bfcb-4f7c-93b5-8eaf7aa62fdd"
        },
        "item": {
          "id": "33b582c3-240a-41e6-8487-2176ee773b79",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "d943a585-ac19-4ecc-9afe-54038797e96f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73e6d597-9a43-4698-ac1b-58c0dec15d61",
        "cursor": {
          "ref": "b2e7a161-8db6-411b-91b8-55ddbaf82aec",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "1b63228a-c4b3-4b71-ab51-8513ad001967"
        },
        "item": {
          "id": "73e6d597-9a43-4698-ac1b-58c0dec15d61",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "69c0ca90-a900-47a0-a92e-c82abd7bebf6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 111,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5a0dcb3-d725-485f-967c-5708f48b7f59",
        "cursor": {
          "ref": "d039eeee-d90a-4eb2-9c7b-5a5f770a190d",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "93926572-1fe5-4974-9a2e-11fa720b7934"
        },
        "item": {
          "id": "d5a0dcb3-d725-485f-967c-5708f48b7f59",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "edd2d0b5-cb99-4146-aaf9-902ea22d9f66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72a94263-988d-45d7-978e-90eedc220fe0",
        "cursor": {
          "ref": "13b93e8e-a6c0-41c2-8a4b-3700a11b2ca2",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "affdc902-7a28-46b7-9de6-e18d978353fa"
        },
        "item": {
          "id": "72a94263-988d-45d7-978e-90eedc220fe0",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "99529197-14f4-4fde-b866-6636f8c31a4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74e5ad75-c388-46ad-a910-f03c3c836020",
        "cursor": {
          "ref": "13a7b9e6-d001-4eac-ac31-dafc3b8d7410",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "fc98b245-2f24-4525-bc34-2c87ed06345e"
        },
        "item": {
          "id": "74e5ad75-c388-46ad-a910-f03c3c836020",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "10179d70-3a2a-4802-84a7-408f1a45b87c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30e202c1-7aea-47e6-82c6-5679e74bfdae",
        "cursor": {
          "ref": "5cf3ba53-0fbf-47ee-964d-b9491cd0e529",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "fe3155e2-79a3-43dd-9775-8741bc2eed68"
        },
        "item": {
          "id": "30e202c1-7aea-47e6-82c6-5679e74bfdae",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "cf54e6b6-6296-42f0-92e4-f549866bd103",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 126,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f1bdd13-2a78-4a7d-a924-6a843d9ed228",
        "cursor": {
          "ref": "7265133d-552d-4653-bc03-3cd01d68d01e",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "46561014-b4b3-44f4-9e22-a4da2e332c04"
        },
        "item": {
          "id": "2f1bdd13-2a78-4a7d-a924-6a843d9ed228",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "c1aed3c7-cf8a-4111-89cf-a757090d57c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23369eea-88fb-452d-a82c-96463dee8be8",
        "cursor": {
          "ref": "229da987-19d7-4236-88bc-d0f400cf1847",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "ff23a709-7e59-42e9-9491-5c7999099b67"
        },
        "item": {
          "id": "23369eea-88fb-452d-a82c-96463dee8be8",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "0b1c39bd-da44-42e4-9545-23c03dcbff10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 111,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e0d17d1-fbaa-4655-bfdf-c255ec2ff572",
        "cursor": {
          "ref": "5a3489dd-849b-4c2b-85b5-2e98bf87d168",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "d65c5e78-2f14-4cf7-ae13-9ee180d83713"
        },
        "item": {
          "id": "5e0d17d1-fbaa-4655-bfdf-c255ec2ff572",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "c64495af-38f6-4775-9ce8-84998f0c5c71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9eac56df-5d6e-4311-b03d-fffe9bd0eeff",
        "cursor": {
          "ref": "d7f4ff5a-700a-4bd4-a290-f2dbb688f529",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "9967a8d7-9e91-4bbe-9b4e-abc4d1071a76"
        },
        "item": {
          "id": "9eac56df-5d6e-4311-b03d-fffe9bd0eeff",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "fc69aeab-e5f7-4bc6-92b4-1c7a98c6c79b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d8fe669-9fb5-46da-bf17-c58a53c859f5",
        "cursor": {
          "ref": "dc801726-24d4-4f87-8db0-f5f71364fcc5",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "aeef9f58-9822-4c05-b718-01d07a11fbc4"
        },
        "item": {
          "id": "1d8fe669-9fb5-46da-bf17-c58a53c859f5",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "42bfb34b-1601-4df8-ae82-65a14417a93d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "017c7573-0f0e-4c2f-be8f-335db7ee4909",
        "cursor": {
          "ref": "4bbfc8db-a99e-47ec-a7de-ec029ec92036",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "aaf11549-c6e9-4c6a-b3d6-f80f4546b4a8"
        },
        "item": {
          "id": "017c7573-0f0e-4c2f-be8f-335db7ee4909",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "eec494f9-27b0-4d4b-a0ee-b101376b24de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bc4cb17-0dd4-42c4-81da-45f064363277",
        "cursor": {
          "ref": "21c6cbe6-c43b-4dc4-ab59-030fe4c87a6e",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "be9c1ce3-9f1a-426d-8080-48b983557548"
        },
        "item": {
          "id": "9bc4cb17-0dd4-42c4-81da-45f064363277",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "8e9ca6ab-6cef-40b0-8ccb-6e57e49a3ede",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7de0c98f-1487-4512-bdee-5d5ffe53cc24",
        "cursor": {
          "ref": "7d748132-e655-4d3e-a076-9644345b392b",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "245c7290-2fc8-4c7d-8208-c9f0c08282ad"
        },
        "item": {
          "id": "7de0c98f-1487-4512-bdee-5d5ffe53cc24",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "5940bb54-01ff-43cf-812a-13714a8122a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ddf46a2-2e3a-4f5a-a7f6-3127edf14929",
        "cursor": {
          "ref": "cd6958d3-644a-4d8e-9e4a-591722b18b8c",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "210e68eb-888a-4f3f-8667-51c79747ff77"
        },
        "item": {
          "id": "5ddf46a2-2e3a-4f5a-a7f6-3127edf14929",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "6739a9b0-f905-4e79-a8c3-fb9bcf5f8a5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25f98d64-78e2-4f00-aca3-76be66822b3e",
        "cursor": {
          "ref": "0b6f6681-d75e-41ef-99f6-283717fe3870",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "3276b94d-155d-4d52-b37f-d165fef2a597"
        },
        "item": {
          "id": "25f98d64-78e2-4f00-aca3-76be66822b3e",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "23674388-9909-43e7-a6c1-2b225d9baafe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34191c4d-5532-4f58-93c3-d80e0aee1299",
        "cursor": {
          "ref": "16dbf893-5e97-494e-9a93-d3246ea8a67e",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "ae711402-72f2-4588-a29d-030dfc10a713"
        },
        "item": {
          "id": "34191c4d-5532-4f58-93c3-d80e0aee1299",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "262a6da5-53e1-497b-ac18-53ee259141a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa0f8d4a-e148-42c9-b982-b2528b4a929a",
        "cursor": {
          "ref": "57fd319e-72f7-4b63-8063-3566b6b089b2",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "a5fa5719-6228-4723-9d7f-2dfde03e70fa"
        },
        "item": {
          "id": "fa0f8d4a-e148-42c9-b982-b2528b4a929a",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "e56de1e6-08f5-4763-bbe7-23c39e356c1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "468286f1-0cfc-4358-8457-e96e61e4caac",
        "cursor": {
          "ref": "78ac29ae-219c-4b47-b51c-e2b8596b2f44",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "a4010204-bd6f-474a-a4a7-07fcbe19df6b"
        },
        "item": {
          "id": "468286f1-0cfc-4358-8457-e96e61e4caac",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "5a2a8120-630c-44db-92c7-527755841fb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44530a72-9242-4a92-b209-4b63809b088c",
        "cursor": {
          "ref": "f91dfc4e-4a35-45df-9a86-6fe14d312a0d",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "40746c96-64df-481d-9f70-236d11234d84"
        },
        "item": {
          "id": "44530a72-9242-4a92-b209-4b63809b088c",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "560ad4c3-f1a7-4a0f-890d-07a41872a8a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d18b346-fed4-467f-9257-a476659ab009",
        "cursor": {
          "ref": "b101fd40-afe4-41bc-bf9c-700061730d08",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "009ba711-ad2f-4e07-81af-43b23a1ccbdc"
        },
        "item": {
          "id": "1d18b346-fed4-467f-9257-a476659ab009",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "ce187833-88cd-42d1-a37f-8892e9af23d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5454cdb-0d39-4bcd-9169-b68384221dcb",
        "cursor": {
          "ref": "a3b698b9-6d71-4f4b-9d19-a4c0bd8a93f7",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "9007e0c2-2a44-4853-b3af-4f9694eddf13"
        },
        "item": {
          "id": "d5454cdb-0d39-4bcd-9169-b68384221dcb",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "6603e904-61ab-4a92-a647-c1456d84246e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "010b0027-098d-4945-ae43-8e09c84ac144",
        "cursor": {
          "ref": "d1e43cc5-6013-498a-8f06-47b6e27d84d2",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "53d0c26f-a4d6-460c-a17d-71c8cac5e0c7"
        },
        "item": {
          "id": "010b0027-098d-4945-ae43-8e09c84ac144",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "399d0e90-fa18-47b6-b6dc-7a3774ea7512",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03f2b8b0-150b-4176-8085-1ac28c0df883",
        "cursor": {
          "ref": "60a34e45-bd2e-4623-b53c-6230dc13445c",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "148159d4-6a2a-472f-bca8-3b8e97e23536"
        },
        "item": {
          "id": "03f2b8b0-150b-4176-8085-1ac28c0df883",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "ee4efce1-dc77-4dfe-bb27-ac91398b80b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6c6de2c-3ba3-4abc-a242-7564001ad21d",
        "cursor": {
          "ref": "b392c54f-39cb-4a55-b775-ba95b07ac933",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "54839fc7-541a-48f5-9fea-beb2e46625df"
        },
        "item": {
          "id": "c6c6de2c-3ba3-4abc-a242-7564001ad21d",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "8a150d98-b30a-4f98-8409-2d176281540f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5e2876c-5acf-4b4a-9c64-b479713ec384",
        "cursor": {
          "ref": "e37ec70d-37c1-4c4b-9a83-8da4b85618e3",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "d28bbfd6-d49c-468d-a837-044efdbce76f"
        },
        "item": {
          "id": "c5e2876c-5acf-4b4a-9c64-b479713ec384",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "d8302086-fa6e-4ecc-9dee-b587efadae99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 132,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b768b5d0-120a-486b-9051-18ea4cf33a10",
        "cursor": {
          "ref": "697a06c6-01c9-41bb-a47e-92f697de6685",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "5153b4eb-886f-4579-9407-8af4dbb61c59"
        },
        "item": {
          "id": "b768b5d0-120a-486b-9051-18ea4cf33a10",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "d2ff0e67-6bfc-4583-bdcf-51b564eae95f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 114,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d64065a6-6449-474b-bc76-d0c64316b01c",
        "cursor": {
          "ref": "28e8ebd4-2686-49d3-8dc4-9651681b9136",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "7724fa8d-4fe5-489c-ad3a-0a941eef6bf2"
        },
        "item": {
          "id": "d64065a6-6449-474b-bc76-d0c64316b01c",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "b8cc1354-a4aa-4a81-b21c-2ccb5024d71c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 245,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "009c3875-3dc9-4382-ab83-c44ca1d9a253",
        "cursor": {
          "ref": "885265d3-c9a3-4e4c-a229-ec74db04bcb4",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "cc148b04-f69c-4713-a1a9-94e1e80c07a6"
        },
        "item": {
          "id": "009c3875-3dc9-4382-ab83-c44ca1d9a253",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "9c019f76-1d0d-4e1f-85b8-9e6ac1d7d68c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9176a406-28b4-4eb1-b3c7-8b93ed1c4d28",
        "cursor": {
          "ref": "cb11769a-19fe-4127-813c-4fc425954de7",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "86ee6d5a-72a6-4991-9556-40496e528ed8"
        },
        "item": {
          "id": "9176a406-28b4-4eb1-b3c7-8b93ed1c4d28",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "fdc66128-7956-4888-a66c-be10592fcb27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 110,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a254ec63-5a16-4d2e-a55c-f43527718476",
        "cursor": {
          "ref": "577e7a44-9d67-416e-9ae0-17b199662416",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "41ae5286-bcfc-4b7e-9929-2cf903110d3c"
        },
        "item": {
          "id": "a254ec63-5a16-4d2e-a55c-f43527718476",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "b009e7c5-ac82-4338-ab9f-5b930bd1fe90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c024106-20e1-4a1d-b2ce-d778971fc5aa",
        "cursor": {
          "ref": "f4c975e5-3793-48ba-b919-e7d132882af9",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "7f937214-8e40-45a4-b711-516874595ae9"
        },
        "item": {
          "id": "0c024106-20e1-4a1d-b2ce-d778971fc5aa",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "c4298bbf-293e-46a1-8bc8-10f9fef42c02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 196,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8d89213-a819-4b35-8e64-5ffd6956e211",
        "cursor": {
          "ref": "b5bb1538-1635-49b9-aa7e-0a8d7b851583",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "9558fcc8-e7fd-4412-8ed0-8256881fc857"
        },
        "item": {
          "id": "e8d89213-a819-4b35-8e64-5ffd6956e211",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "2fcbf564-d9f4-4863-9fe8-7c9e33f1c6da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3afb6963-4508-47e4-9b49-440a93a0d4cd",
        "cursor": {
          "ref": "3b834158-5586-441c-97b4-e5906a2b0e06",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "cebd3813-c0d9-4dc1-a942-f57d02328c12"
        },
        "item": {
          "id": "3afb6963-4508-47e4-9b49-440a93a0d4cd",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "d7802e7a-ca06-4893-a889-31a8eebe8dd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84957364-2e2f-4d06-a687-b3aad5fb2403",
        "cursor": {
          "ref": "e5ae61c9-4acb-4e2d-9342-2abf27ebe157",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "af8ab64d-8fb6-4a2a-a2b1-dc73af0f9fc7"
        },
        "item": {
          "id": "84957364-2e2f-4d06-a687-b3aad5fb2403",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "93629a6d-b617-4589-acbb-eb78b78115bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7fcc1d8-d216-4004-adfb-079fa877ce45",
        "cursor": {
          "ref": "0706e493-7a66-42d3-b007-5cfdd3048782",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "1b47d27c-7016-45a1-9c2b-ae2a26f45c51"
        },
        "item": {
          "id": "a7fcc1d8-d216-4004-adfb-079fa877ce45",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "48f66289-1f0a-4957-a251-a87a390f65f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6994cdbf-feca-4503-adca-6347cabc4d5d",
        "cursor": {
          "ref": "86977cac-87fb-44c7-b9a9-a4bf115754c7",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "94fd6988-a753-4994-a7c5-5c209d84dd38"
        },
        "item": {
          "id": "6994cdbf-feca-4503-adca-6347cabc4d5d",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "237a5dd4-af01-449f-9b36-1315298248cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9869fc8a-54fb-46a9-b256-24294b59648d",
        "cursor": {
          "ref": "4252cfd2-bc79-4bc9-abed-b880543d29ce",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "eb04f0b4-c37e-4ea1-972c-efd516297352"
        },
        "item": {
          "id": "9869fc8a-54fb-46a9-b256-24294b59648d",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "f147eb92-2ec4-490e-9f92-cc58620bab5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2703840-e32e-41fe-aef6-30c3522c1496",
        "cursor": {
          "ref": "608aff4c-257c-448e-8648-e3bc7347c602",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "96243c2e-58bf-4715-8032-0acf830e9f7f"
        },
        "item": {
          "id": "d2703840-e32e-41fe-aef6-30c3522c1496",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "3a83a3b7-5d77-4408-89c2-48e2c25d7e48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7551807-1357-44a6-a0bf-e21f0dd2dcd5",
        "cursor": {
          "ref": "9f261503-86db-4522-8cf7-5bbdc655cfec",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "30bc46d1-795d-4652-a547-760d557d2931"
        },
        "item": {
          "id": "d7551807-1357-44a6-a0bf-e21f0dd2dcd5",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "cdba19ef-6064-404f-85a9-4a735bdf4fda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 491,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e985642-9afa-432e-ad05-0429d8f3bf3b",
        "cursor": {
          "ref": "b3e8f66a-2403-444c-a2fb-95e576b64d8e",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "4b4bcc60-8487-4de6-b6a9-e933a68d6520"
        },
        "item": {
          "id": "9e985642-9afa-432e-ad05-0429d8f3bf3b",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "457b7625-20ac-45db-8cb5-d2ceed258e30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 112,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "044153db-4a30-4766-b9dd-90cb136a329c",
        "cursor": {
          "ref": "023991ce-b970-4298-a1e5-564c567d71b8",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "e34d41b0-6b87-41f2-929a-9f64f1e44ddb"
        },
        "item": {
          "id": "044153db-4a30-4766-b9dd-90cb136a329c",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "9e7a332b-ca5d-4abc-a355-8f1c28f49d90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18aded72-0930-4463-b09e-6546e45e7ac4",
        "cursor": {
          "ref": "984150e9-40e6-460b-9969-270d2514d2c0",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "bdaafb76-ab5b-4b3d-bb2d-b8d552eaacac"
        },
        "item": {
          "id": "18aded72-0930-4463-b09e-6546e45e7ac4",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "f3abc2bd-6abc-44e7-bb14-47abc4998223",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c3978c4-675d-431d-a6bc-366898a7e96e",
        "cursor": {
          "ref": "334007ab-feca-4dcf-86eb-40e6e1cea3fc",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "2f5d12dd-f7e2-48fc-8dff-975245de51e5"
        },
        "item": {
          "id": "6c3978c4-675d-431d-a6bc-366898a7e96e",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "9b8c99eb-7c17-4252-8ef2-a094f9034454",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 201,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "070bb693-a435-4675-92d4-4e27c1599c20",
        "cursor": {
          "ref": "2cd8bbf0-0ad9-4dbb-b28f-282a9858e458",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "326e4115-655f-4cbc-bbf9-071507db5847"
        },
        "item": {
          "id": "070bb693-a435-4675-92d4-4e27c1599c20",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "facd1ad0-c853-46aa-927a-89b0628c53f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a98fffa-7aa6-4fbd-a5c6-04b931b7f8f9",
        "cursor": {
          "ref": "c8219171-94b8-43d4-8f24-14b86048a74b",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "604121bf-ade7-4d78-977f-6360dd629581"
        },
        "item": {
          "id": "2a98fffa-7aa6-4fbd-a5c6-04b931b7f8f9",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "25592a5b-18c3-407a-a3cb-2cb01a76b390",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6536272e-9159-4470-b42b-8612514c509f",
        "cursor": {
          "ref": "5ebc0909-795e-4e0f-95fb-67435f2b5c97",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "0e29bb18-a9ef-4c10-983b-61477e914805"
        },
        "item": {
          "id": "6536272e-9159-4470-b42b-8612514c509f",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "91ac628e-30e5-411b-afa7-ab1ea1e204d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30b339e9-995a-4e5f-aa3b-602225c4ff4a",
        "cursor": {
          "ref": "0abbd381-1de5-418f-ac8c-fa0222bfce00",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "809e7ef0-b753-4e9e-bc56-f497f101d4a8"
        },
        "item": {
          "id": "30b339e9-995a-4e5f-aa3b-602225c4ff4a",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "e32e4db1-c33a-4cac-bb69-2987d95b6112",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8b69013-6a15-497f-9b13-b3a3d8aec8e9",
        "cursor": {
          "ref": "4871145e-263e-4212-a553-873bcf63ddb9",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "9dee4a8d-4682-4a75-801b-605b1c543c56"
        },
        "item": {
          "id": "a8b69013-6a15-497f-9b13-b3a3d8aec8e9",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "0dd46059-bed5-4da9-a600-20f205df053a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "348cf8bc-8970-4a16-b401-93d34720cf6f",
        "cursor": {
          "ref": "f50e5701-b734-47de-abff-f52c7f36b6d5",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "7a282c64-68d5-4e17-984f-330bf737a040"
        },
        "item": {
          "id": "348cf8bc-8970-4a16-b401-93d34720cf6f",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "4b6b7d83-508b-4831-bed3-00bd78141a08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 124,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "472486ee-63e3-4fdb-957b-6c02ccda84de",
        "cursor": {
          "ref": "b0aded88-4c79-4b27-b8e8-d5535bd64ef4",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "108a821a-e8a9-4bb7-8de7-8740815de17b"
        },
        "item": {
          "id": "472486ee-63e3-4fdb-957b-6c02ccda84de",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "5910455f-17d3-48c4-8f28-383c51338f5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acd50055-1cc9-4b6d-baf8-fce6478c5b0a",
        "cursor": {
          "ref": "79f64779-ea07-42ba-8dd1-e91400cebf69",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "9c18a9f8-9dab-498d-9b25-c4cc4612f95c"
        },
        "item": {
          "id": "acd50055-1cc9-4b6d-baf8-fce6478c5b0a",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "6fb34f15-0472-45d2-802d-599b70b5f3a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4194e81d-53f1-4927-b31e-23f015ad10b7",
        "cursor": {
          "ref": "cc21128d-9a82-4e10-ac07-568189988fdb",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "5b001c8b-74b2-44ee-804a-aa9f630386c1"
        },
        "item": {
          "id": "4194e81d-53f1-4927-b31e-23f015ad10b7",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "36d32624-25ac-4e17-bf70-1a5e4c278032",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 177,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a61e90b-047a-49c3-8370-bbac84996ef5",
        "cursor": {
          "ref": "b0550af3-91ae-4b4a-9cb1-b9ec66ed684b",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "fdec1497-8f25-42bf-b13c-76ab395b91e4"
        },
        "item": {
          "id": "0a61e90b-047a-49c3-8370-bbac84996ef5",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "e88072dc-9c4b-4885-a08a-0a489665a1e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7ab3bee-64ce-4b79-bb30-340e289874c6",
        "cursor": {
          "ref": "a6041eca-65bc-4839-9281-6ca6d173d20b",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "97772274-c8fd-4dea-882a-5a4bda1c5c45"
        },
        "item": {
          "id": "f7ab3bee-64ce-4b79-bb30-340e289874c6",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "e37ad972-59f0-4703-a8ca-8c0b7b0a3259",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c906ae8c-9b48-4aa2-9a80-ea28996e7d91",
        "cursor": {
          "ref": "8efe605f-554d-4464-bb59-5ba1b1797d4d",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "4077a5e5-71af-45f1-8bca-f27e1dc8847b"
        },
        "item": {
          "id": "c906ae8c-9b48-4aa2-9a80-ea28996e7d91",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "7a893253-5a34-4f9a-89ef-ba31871d190c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "876f543b-63fb-4705-bd0d-987408c2f2c0",
        "cursor": {
          "ref": "32d7ec4f-441a-462c-bebb-cbe0066e7123",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "70dcfe45-ed38-4312-85ba-25a10b081e4a"
        },
        "item": {
          "id": "876f543b-63fb-4705-bd0d-987408c2f2c0",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "d58fca4d-db6a-4235-802f-96aad5f317ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c98694be-92e7-471e-8b9f-dd53b8f72725",
        "cursor": {
          "ref": "51e0daec-bb47-45dc-a014-a34ecd6506f7",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "688260a9-cb49-4900-a319-ac587c0f327e"
        },
        "item": {
          "id": "c98694be-92e7-471e-8b9f-dd53b8f72725",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "1f6d1f41-f088-49e2-9555-9d2b0a250630",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b299831-7751-4421-be10-84df495a72c2",
        "cursor": {
          "ref": "db151837-997c-4616-aaf3-15b740020194",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "d4df5044-da5a-4f62-acc0-5db1530f8426"
        },
        "item": {
          "id": "0b299831-7751-4421-be10-84df495a72c2",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "d757e93d-3e65-42b3-b6ed-be3a8c1be330",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0aa39aee-4c22-4b02-b63e-97170043b881",
        "cursor": {
          "ref": "9757be77-bd82-42e8-8d1d-3176803792b2",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "dd6f4fc9-da44-4d20-8794-1f4967a80df0"
        },
        "item": {
          "id": "0aa39aee-4c22-4b02-b63e-97170043b881",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "3943627f-5069-42af-82a0-70ffe71cae6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f487c99f-4d01-4337-bc62-98b4951a13e1",
        "cursor": {
          "ref": "f30e12e0-cb12-42ca-bce8-1bc90da78d46",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "2c8fd0d0-e2f4-49e7-95d6-70f626430229"
        },
        "item": {
          "id": "f487c99f-4d01-4337-bc62-98b4951a13e1",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "ff685b89-050e-4002-9626-91b7e69758e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0745e26-7815-4d6b-98c1-5ac013c7f23a",
        "cursor": {
          "ref": "0b12117d-11fd-45e9-bfed-b83fed042701",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "d8bce5a6-f5fc-462b-bf81-2968fb73f2bc"
        },
        "item": {
          "id": "e0745e26-7815-4d6b-98c1-5ac013c7f23a",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "ec582c3a-faf4-4081-bfd7-739f0cab2353",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "0dc3a75f-7988-4fe9-9296-9ec2dea0510a",
        "cursor": {
          "ref": "47df8514-7594-481d-b483-b32ae1185451",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "a4b7fd0e-b13f-457c-bda2-4018faef7373"
        },
        "item": {
          "id": "0dc3a75f-7988-4fe9-9296-9ec2dea0510a",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "0442a525-70c2-4346-8d84-aa0a16db8fad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "79f3f593-8d9c-405f-b46d-1916a7d6de88",
        "cursor": {
          "ref": "a678e9f4-de67-41b0-816b-555acebc70a0",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "e20083b0-61b4-459a-8758-88e91f33a569"
        },
        "item": {
          "id": "79f3f593-8d9c-405f-b46d-1916a7d6de88",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "2c5165ae-680f-4726-9580-3de9a40f5fd4",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "faac2ffb-16ad-4ac2-8083-88690ecfe2b2",
        "cursor": {
          "ref": "26a4ced9-34da-48fb-9c7f-91aca8b43477",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "d05ab68b-848d-48ba-834e-d928e8a96390"
        },
        "item": {
          "id": "faac2ffb-16ad-4ac2-8083-88690ecfe2b2",
          "name": "credentials_verify"
        },
        "response": {
          "id": "0eef16be-1bda-4553-b642-8cba91938424",
          "status": "OK",
          "code": 200,
          "responseTime": 2055,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "faeeb7f4-a28e-49bc-8191-beee24b7d44a",
        "cursor": {
          "ref": "3e13fc8d-cf07-44ed-a10e-90b8efdc81f7",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "7de18928-6b97-4a7e-b3aa-a5fb37a09372"
        },
        "item": {
          "id": "faeeb7f4-a28e-49bc-8191-beee24b7d44a",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "5cc3d2cd-585e-4cb3-a97c-8dc06a3208ef",
          "status": "OK",
          "code": 200,
          "responseTime": 2442,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bb13e6b-4ca5-44b3-9732-829268cb314f",
        "cursor": {
          "ref": "bc090e2a-5705-4360-9900-e8a5f397ed84",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "57b533d4-8eb3-450c-a690-f4d0c65a5738"
        },
        "item": {
          "id": "1bb13e6b-4ca5-44b3-9732-829268cb314f",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "084160ac-22df-4a62-a7e7-8728b9bf8eca",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "1bb13e6b-4ca5-44b3-9732-829268cb314f",
        "cursor": {
          "ref": "bc090e2a-5705-4360-9900-e8a5f397ed84",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "57b533d4-8eb3-450c-a690-f4d0c65a5738"
        },
        "item": {
          "id": "1bb13e6b-4ca5-44b3-9732-829268cb314f",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "084160ac-22df-4a62-a7e7-8728b9bf8eca",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "1bb13e6b-4ca5-44b3-9732-829268cb314f",
        "cursor": {
          "ref": "bc090e2a-5705-4360-9900-e8a5f397ed84",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "57b533d4-8eb3-450c-a690-f4d0c65a5738"
        },
        "item": {
          "id": "1bb13e6b-4ca5-44b3-9732-829268cb314f",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "084160ac-22df-4a62-a7e7-8728b9bf8eca",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "0e06ec25-bf40-4658-a185-d4f7b98a46a9",
        "cursor": {
          "ref": "29af1618-d761-4e16-8049-f5d1c5519d18",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "b9e030e8-d2c6-4132-8273-8aa9d2a91b87"
        },
        "item": {
          "id": "0e06ec25-bf40-4658-a185-d4f7b98a46a9",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "219d61f3-c423-4cde-ad98-633e8e5daf0a",
          "status": "OK",
          "code": 200,
          "responseTime": 152,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "e6fb9968-ac0c-494a-af08-727d49e98f83",
        "cursor": {
          "ref": "2dc91e96-7820-4eae-a824-6fdc45caf64b",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "172287b2-517d-4fc4-a39f-16fd4bb4efa1"
        },
        "item": {
          "id": "e6fb9968-ac0c-494a-af08-727d49e98f83",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "a1e4c2a0-ae1d-449f-be48-53db5188606e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "e6fb9968-ac0c-494a-af08-727d49e98f83",
        "cursor": {
          "ref": "2dc91e96-7820-4eae-a824-6fdc45caf64b",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "172287b2-517d-4fc4-a39f-16fd4bb4efa1"
        },
        "item": {
          "id": "e6fb9968-ac0c-494a-af08-727d49e98f83",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "a1e4c2a0-ae1d-449f-be48-53db5188606e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "6bc486c4-60c7-41f3-ad50-d9a0a2947d8f",
        "cursor": {
          "ref": "f1e4d752-f712-47d9-a2a2-d1745cea67d8",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "26c0f3fa-0839-4db2-b75a-bce6b5c3ec8b"
        },
        "item": {
          "id": "6bc486c4-60c7-41f3-ad50-d9a0a2947d8f",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "936e072c-3432-4f7c-b6de-aa823e887bde",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 144,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "67d3e450-b404-4d0a-b32c-ea4c414d7f04",
        "cursor": {
          "ref": "f81741a8-3f3f-4e2a-a444-85132b7f9cf3",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "17ffe088-b8f3-4efd-9e7a-6b0adfba4ef0"
        },
        "item": {
          "id": "67d3e450-b404-4d0a-b32c-ea4c414d7f04",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "11764a38-4767-4cf0-9fcd-f1d16995983a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "67d3e450-b404-4d0a-b32c-ea4c414d7f04",
        "cursor": {
          "ref": "f81741a8-3f3f-4e2a-a444-85132b7f9cf3",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "17ffe088-b8f3-4efd-9e7a-6b0adfba4ef0"
        },
        "item": {
          "id": "67d3e450-b404-4d0a-b32c-ea4c414d7f04",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "11764a38-4767-4cf0-9fcd-f1d16995983a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "b6ce4e95-8aa6-423d-a606-7e8a93dc6fb3",
        "cursor": {
          "ref": "03fb7cae-cf8b-46b9-ba9c-c816fdcf9256",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "1ec7c6a5-06ad-42e9-b8c5-d1274d0782c1"
        },
        "item": {
          "id": "b6ce4e95-8aa6-423d-a606-7e8a93dc6fb3",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "82ee3f66-be1d-492a-82f8-e9b7328d880b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 196,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      }
    ]
  }
}