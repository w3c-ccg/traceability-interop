{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "c3fa9208-5157-449c-8a1a-e21bf5922ef5",
        "name": "Clear Cache",
        "item": [
          {
            "id": "625ac645-44b8-47f5-b8c6-a1b1dd4852c5",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8fa147ec-a1aa-467a-aebd-6b7610af1238",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "9391c97e-da57-49cb-8ca0-5864e2160611"
                }
              }
            ]
          },
          {
            "id": "bd5ad012-34f8-4ad2-9480-d32beb1f262d",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ac2b0f98-c974-40bc-a73f-a410d50bbb0b",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "b1e8cb79-1f63-4756-8ddf-dc3813e88ed6"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "9b2f3fa0-ef8e-4080-b3aa-c77d7477e6ce",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "77338f3f-36fa-4b4c-8ba1-458d4de0185d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d82b6cd3-b7f4-43c1-b3f1-19480451f081",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a9148124-d753-4948-82be-89e0a3e8ee85",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9ef91139-52b7-4acc-ac2c-c2f71c4ee995"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "946bbf2d-1c48-451a-8bad-d2e5b60c137d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "50b0cfd8-5e06-4891-bc50-2eb5fa37f776"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "3ad09d5e-a0a2-4a9f-b37f-6c087de725e5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1555f4cb-7f8f-46ae-878a-23196cb8c2d6"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "64c8bb8e-56b7-4dde-b3f1-951b9d6e770e",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "9eb3c6c7-c310-4dde-9f28-f1d224130d24"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f6028666-f446-415d-8c49-0127a9b49851",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cc0a51da-e4e9-4bc5-b2ad-af0291ee91f3"
            }
          }
        ]
      },
      {
        "id": "1ccae08c-5a70-4578-bedf-d20d7d815179",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "53e16bc4-c8d6-4829-a455-50ad152d74ca",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9d5f3e37-6e8d-49ef-b9c6-a82b2d4c1628",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "35feaa6d-1779-4f10-ae67-558d3de5cfd9",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61272c54-a4f6-44e1-b11a-dfbc4a5fac63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5a498555-b300-47cd-a43f-27f85af1b8b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c1754f5-d8c7-474d-84a1-ed64484c342d",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4c2edc7-f65e-41a2-81fd-63ed358298f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7fb0a99e-b9e6-431c-8252-50e53a746c23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68df2dad-d9fb-4a2c-8366-82290f99b0e3",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e25bc2b2-2b3d-4394-8527-e71d9bbe08df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7aa2e90d-b411-4737-837f-f839a0e0ae2c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b48b4128-691e-4adb-9ffb-fe579c5df0a5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b517e077-21ed-4f38-98b7-870ec098a5e7",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57b9ab6a-5016-4b7a-a135-5753def07460",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ce2c2041-192a-46f4-bf04-c88f749ba917"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2da34338-ceec-479c-a134-790951647095",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9bc4964-5191-4488-8bcd-cb9687b574fc"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "9b4a44d1-0df2-489e-8169-4865d87acda7",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a170aee2-799f-4a3b-a342-5ed94928d7bf",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "02f05a68-54e4-4601-9441-66750cf51405",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "e2e08588-38fa-4787-9fba-6598b027eae3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "129d82ee-e47a-465f-8053-32c1a2ccc2fb",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "7a375118-2f57-4ade-997f-5c1c8f29c320"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ed05b48b-7a19-4d88-9d40-89ee1c73e8b8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "15af7d3f-b718-4ed1-a09e-27f205d677bb"
            }
          }
        ]
      },
      {
        "id": "0af6fd24-8aac-4dc8-bb6a-46671d8236c7",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "033a4480-36c0-4411-a148-1ff229904bc8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "72e156db-a40c-485e-9669-5010ad93bb69",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "d13cdba2-8276-47fb-9266-794e5180b006",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e420c9da-5f94-4c24-8d1e-e475fab13127",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "509b4495-47ce-49de-a8ab-794ed584e4f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "393be265-da48-4e5d-b9d1-b6013c97cfc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "16de7121-97d8-4ff5-968f-244335adcacb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e743a3c1-ffcf-4c9d-9c44-dd5262d0b1de",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1125790-737a-4e83-b07c-1fac458ab852",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63e3d39e-adf4-4db8-b476-a19746b091b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dd3643a-8301-4afd-97d3-d8987de9374b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "847972d8-412a-4197-9062-8b8c91323e0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "977b7c1b-c8e2-4d3c-916a-7877727c0f5f",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "461c9a9b-c93c-4189-a907-55513d1d13e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7105d92f-502f-401b-9920-65f5f0acf824"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14da653c-cdfe-4c1f-ad7a-4532aff9f493",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a2d132c0-37c2-4247-9e53-970a64f00a8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0037a7b2-1cbc-4813-bd69-93f6cea4329f",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f31be037-a61c-4ea5-a287-e27e6c5b0c98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1675c583-4bf3-413d-9e49-200ecdcdd8b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7843dd02-7f97-4b00-8193-386e8667ebff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ea663431-4e17-4fef-90e0-cee675358256"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6105aedb-5c45-4046-897f-050a5ee32e20",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bad923f-6b79-45ba-a623-f0394010d94e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3e7030e-2c66-4827-9d97-b0cde2d5b4f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38938c9b-8e15-43d9-b66f-ef01c0d2d5e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "186f0864-53dd-4454-bb8d-9571cb1ca692"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7079a5b3-b938-4fcb-b4f2-123426554c6d",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7768e466-4d73-4ce5-b426-83bf49efec84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46fdc7e5-aeee-4c1e-a8a5-8502eab7d076"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffb720e1-b017-44fc-86af-f48a4e09658e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bdfb814e-3737-4ca5-84e5-e692cee97202"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0bbf5c3-affc-48bf-b0f1-47d46c24ea34",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2106a05b-14fa-425b-935b-1ba122eb9d05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f90c9b8e-bac2-48e7-9fec-4c0bf95e1249"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f800d6e-ebcc-4825-8d2f-a5b02632541f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1e2ee0e4-84fe-4614-be0c-20fbfadb0b36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5f51756-820f-44f2-b84d-9bf481a2ef6e",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53f73a46-0234-43e7-a276-bb73006a7840",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8d6f967-ec8b-4d00-b28f-eeb8b6af9fe8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fc81bce-77c7-4569-a330-8b654a4c8ca9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a5060148-513d-4926-9619-f6908fe00e77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4395bd0-a493-4c2f-a095-be56680ccabf",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73329ee4-3c4f-4c9b-8f78-ff441eb02a8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "488b925e-0953-40f2-af42-c9c1a836dce1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a61bf2a-6b8e-4740-96f7-165dce39b231",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ee6622ae-5cff-4b61-b4b6-8a475df64c11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5acd2cec-a65d-4c96-9034-6c387151897a",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7055272b-78aa-40b6-9d39-6a2af37891d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "926ed729-b9b6-4cdf-a953-ea296f623275"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bf54218-170c-4aa3-9fa6-f5294383b70c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6c9df48b-76b8-4ffa-98c9-b4304fb63afd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56cb8a2e-be31-4b81-9fb6-37bdd73ae615",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6bd0a0d-93b2-4de6-92dc-29cdaab0c64a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80686e07-6f0f-4e8c-8c48-139e1c9781c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6fbfa02-78e0-4e4d-a804-cc0d84002a4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "59816937-c39d-489b-a8ed-87914c997907"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1660b3b-e4e6-4213-8e62-6fcd0d436f35",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58efa78e-7bc8-4ffb-a5d7-501a19478e48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90683582-8dfa-454f-b981-f847f12733e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd3eb687-5770-452b-b9b8-4ae2e522f454",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0525e8bf-2aa4-4aee-ba7b-2261f8f9d1da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d180eb14-b5e3-475d-8025-7371a9c7900d",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de870552-f659-413e-aaeb-fdfeb9c5b1f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "888943c8-3807-4a3a-8664-0faf6d0fe282"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6d199c5-0997-4d77-9061-5985ce91523f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "eb902430-92a4-4e96-bed2-57077b9e4a23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd0c64ae-11a5-4fa0-a30b-635e1dbd5e49",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83aa0dc9-8e1f-4805-8ce4-88cc5e93d7ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d574ef9f-84b1-4d8d-818a-30fbad2d69f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36bc3594-4001-4436-8dcd-9eff1bd65410",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "982dfbfd-263d-44c4-a774-25bb24a766ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac5d789f-d3fc-44f0-9f30-513207f8ba36",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "221d2a9d-f4e4-4b01-bf12-c7ab328ae9c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "978bd847-055e-4faa-b794-091029295c33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c94f2280-98af-4ff8-9129-f83e8e6d8612",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b8a543b7-5139-408d-94c9-e830df421bdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a1a86ed-60cc-4ca9-be5b-a4b416569cf0",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d70fb650-4c26-4cbd-a747-32d1d2a95b93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24711ab7-b757-4136-a1be-3cacf1d65cc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2db6829-651f-454a-aa89-c6c0fce38df1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0963c50a-879f-4652-9f58-5f18844541c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bb97595-1947-459d-b5f6-e8c0ea296985",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9e53d03-690f-41fc-a987-0cc23943ccfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fa77485-43b0-4bfe-bf17-07f7d4574ce8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "985cec63-5ea3-4258-b53e-8707f1845e78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bfb72e4d-5c1d-432a-8456-c88a623fb165"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e5c830f-42a0-46f6-b252-8d5de7092919",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e2f3129-deb7-4374-918d-90f83717db79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "532e29a5-4e0b-4ca7-ba00-0d8283bbf7c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acac3ffe-6cf1-4cb3-b3f2-e57f8de8aa08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "d35911b0-7b61-4ebe-bd41-1e5e48d0b79a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5dda891-917c-472f-b2ce-86667aaeaacc",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ff92d83-e7b0-4c93-9f08-624a2bc083ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdd055bc-116f-4cb0-b51a-8d69e34220ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1184197-707b-4c91-9af8-7d8429af9a64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "45310094-a2bc-4c8d-8acc-f709a408d094"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84dfbd57-fbc2-402e-a05e-1aa7d3b27ab4",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43351868-e476-42b0-b9d5-82b82e08eada",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad8302c3-60ec-4077-946c-5af6de081ed3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af6d22dc-d96a-42c6-8677-ed57a095b048",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1482efd5-9141-4a4b-8498-73e88330b220"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b836dbd-69d4-4a0d-a159-18951deb6fd5",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45fe7402-ff7f-4322-b800-0239ced4260f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "488145a0-0815-4cc6-9885-671cce25a093"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b371c3fc-0412-47f3-890f-303b64154bb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7b678a01-bba6-4d82-a3a1-8d9e0c36a8fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3368d71b-f17e-4a52-8680-9018f2eb51f6",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56010d97-a9e2-4186-8db0-d5cf250ce218",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a0b4d93-a3d4-4449-adaf-3349583c8e2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e492da5a-75bb-4c7b-9647-722e3bc71280",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "855d5904-51bf-4d6c-a20b-1ea48e308515"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1000876-fbfe-485a-9203-31e7c456fa19",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8df32610-d177-495a-9917-e228dfc9265c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88c53a9a-d9d2-49c0-829f-724e38c2b2b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe9e88e6-a9a7-4d72-b783-702e2344fbdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b0d63af8-968d-4f3f-80cd-f01fa5f51f17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfa8e8ef-cebb-40b5-95a2-d82cce23c6f7",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e31b591-cd58-4084-9993-c0f165724243",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b566c0b1-db0b-45a2-9a1e-92e2007881a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c14bda1c-cd3b-4ff0-ba7a-a21c391d5309",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "7cafbd51-ce61-4235-872f-4c0252ae78b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c40ac345-8fa8-496b-9c30-a12ffc7c6f9e",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5f28978-acf9-486d-afab-cb21505e3ec3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "821369f8-374a-47a7-95ad-d851a08b5c60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b35bcdbc-8d6b-4896-aeb5-8f01ca3c62ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3a9c2f84-37ae-4547-9f06-847aeacbe39a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e298a22a-90e3-446c-9900-45b2355ab76b",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6a2f7c9-3883-48e2-a317-d4860095b3a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7930af96-db24-4090-b7bd-2282dace1070"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc0e90b6-95fe-4f8a-a79f-ce0ab0b5128d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "dde97d12-1592-49c6-a5c7-a3e066161af6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42b68906-20bd-4bcf-8ef4-8018ad0fe47a",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9bdafe5-ec14-47f1-b4d6-e6615dbcc103",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "303925fb-0498-434b-9f3c-927647820a5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f450d5b6-abc8-4042-ad22-f0bf008911d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "436daafd-3c49-4b8c-ba3e-89c3fe772610"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6458e157-1309-4003-ade9-4cbee45f2224",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c270fd0f-e7a6-418a-b099-a6a001ad8f02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c92bf95b-005b-4811-8561-e5da8e19ed30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a401685-5948-4aa2-bbc9-71cef071a19d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "db9ba321-cc1f-4c74-9e19-aa7ac4f794ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b50e47c-8aee-4e47-ba13-e9adfa067b43",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92145d99-9450-4047-a783-15e9e3521a08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "976355f0-de82-4cbf-aeba-84bc879348b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edff2453-4beb-479d-868a-4b333beb3635",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ee31c4d2-06f7-43bd-b27e-879a5ebc769d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e0e81d0-782e-4d07-92c4-7faece1a2da6",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c146edf-1466-4cb9-95b4-331f9991b3f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc485c78-7707-4738-b3b1-5c8b9ea29f1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5362c4db-d552-4c24-9266-6baddaa68de6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "987a91ea-4393-4070-87f1-46477809243e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e808488-ce55-4772-bf4c-1dd1b2f0c2e4",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26921633-b2de-4b86-b40c-256401350692",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e241cf5-4e9d-4fd4-9fc4-06628fc47604"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5c2eecb-3aad-4175-939c-52360b900424",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f42e197f-c0ce-4125-9437-b07c1689c16b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6baf072b-ea3b-4523-9fd3-b3f9e623b904",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff577be1-1088-4c8d-8321-42cebf7edcab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a6de3b2-e864-4d8f-8680-58f7000a1c24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b6cb6a3-6f5f-4413-8d48-911b79f6438c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "72971934-a8c8-42f3-9e38-d12fdb64fecb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e418d475-7c05-4a2a-ac20-2fd407f1837c",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "750cca0f-8be5-483c-997d-3fdbce649a75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f091ec7-5f01-47ab-97ff-d05e86e8096f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c9945c0-c18e-40c8-aa15-0dea8b649db7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "293204cb-4a3c-4b60-b889-ab364233cbc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3f8ef56-9075-43c3-8d6a-bc43ce556a4a",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31cb5f07-063f-43a1-869e-27315f4daaaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7847416f-2296-49ab-9e77-78a3f9671f1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ad7c22b-a3a2-477d-b121-f9a64abb6e02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "70daf4ee-06ad-4657-a8d1-03e45d76bc5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec0c45d8-4310-4b9f-ac23-e85580a168cd",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88086380-12aa-4f0e-90ed-823162c9c09e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "baa1d869-b318-4071-99c6-e33e3360dfb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9ae10a5-b287-487c-a922-dd76c82acf46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "3d813f3c-63aa-4cf0-8df8-7fde04028681"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12558147-d508-4f0c-9fce-fca428e67e60",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1346e18-58d5-4a27-aeb0-7a1533e7c3f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e30c4709-dcb5-449a-b863-86ebbe21d0b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22c841f0-6166-4147-9ff4-b1e18190f7ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6ee0bade-20e1-4e1c-983c-2b50b89439c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff89c6e9-496b-4db3-9999-0b65f6d05da7",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7417142-98c6-4179-a2b8-1d23161c2db4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81676917-7dd8-48f2-b0f1-1b5f8599c24c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62b791d3-b706-4420-b9da-bc60f29c5329",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "be0afc4a-81bd-4d28-abc5-78f6d8bdcf83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5d43824-f442-4619-9436-95a4c8c5cc43",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bff766e-7665-426f-b95b-b9ff70459dae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da8ec224-cb20-4e9b-a159-e347609c32a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa62b71b-29b8-4462-8ab4-412f7172fe2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "be588792-4cef-4780-9b2a-e4f3a1c533ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d57abb69-683a-4951-b312-0e7c91787991",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47dc5fc2-151c-47f0-b3c5-da7dfa288835",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8796d41b-4e52-489a-b829-a44323dd5a93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79b68a61-7fd3-46e8-9645-8e25d0d3237e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "66cbf56b-eb1d-447e-87b5-544f2ca241b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83d9e500-c3f9-4e58-aaa7-7e03ab2720ce",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2627b0fc-6960-4b58-9924-6dc98621720c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d04cfc6-c24a-42a9-bef7-ac26820bdcfb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a92aff7-a50c-4248-9d64-bec79b4a0332",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "84c0e225-9f7b-4144-b996-32f554ecc6ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1367f65-554e-4ee2-8419-044c11edb4b3",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c23411f-61f2-41db-8dad-b9f8786e6751",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25a65412-aa8f-49f0-965d-3f8bd7c3c553"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "467aed35-8bb9-42cf-99a1-1a5d7f5f3743",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "e6142e12-3d9c-4928-9b43-1e7bf16275a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e968e60-0677-4052-965b-d402b60d5644",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29b889f6-abb3-4f6a-aa5b-797675559ee7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74ebeea4-ae44-485c-bf1a-b236ac8f21e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48d27283-917d-495e-b3a2-04314c34d899",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "1aee84bc-35e2-4fbf-9435-bab3ed5712d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f5f8b1d-948a-40e9-b1b9-bf6c98a406ec",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64aafb44-ab7b-4a45-b700-eb7247ab3154",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "510cbb30-e4af-447f-b473-6d482df05b58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c677d83-8865-4e84-b55e-ef24cae12e47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "4286546a-6549-4420-9f86-5a2251787192"
                        }
                      }
                    ]
                  },
                  {
                    "id": "359aa279-43a4-420b-8939-7a27a26f55b5",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f70e2d20-d1e4-433c-a968-7e9e420756dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "188cd2a5-8ca3-4c37-ab9d-c56bd864ea31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f97f445-06db-402f-99dd-86c9b57115dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "9ba8638e-f715-4986-a6ee-033b8f12db96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86e3f569-1231-46a6-a79b-7d69f5a981d8",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44f4a257-0d5f-452b-9c31-75bbc5ea4f76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a9e31e7-fd94-4704-99b8-27d0a415a079"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afbd8548-0795-4b87-a1e4-1623f86c5432",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ba704905-9462-4622-baea-ae4d631bd752"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79e9e333-77b8-4968-ac63-3c95b0c32d09",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "498e1f11-801d-4038-a5d5-fa7ee8aee541",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "faa2da7f-895c-4043-897b-ecb54cab30d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73579fb0-e96b-41df-b34f-3cb934cbd1d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4d907445-df5b-4e1c-9f09-7cfd7dd791bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "805a8fb8-053d-4090-9d65-d2398639c530",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1353abbc-6111-4954-b934-e989adf949b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "451ef54a-aae8-42a5-b553-f85744ba6352"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b5497ec-8d52-4da1-af16-e24fa633d7ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f807e891-2fa0-47e8-8e6b-7a56a8fdaaec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55d0f2f4-31b3-4fe5-9e4e-b290a7a7d8f0",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84991409-3abe-4dba-b090-86807463036b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f9fddaa-ab53-4928-8b89-d31396a05fba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f622f71-bd9f-4994-b4fb-c0dfe3f22050",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f7f515f2-5ba5-4bbb-9ac1-c6d9284ea2f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "077e413b-af36-4e18-8164-e6a86e9ceead",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cdc3d77-ad1d-4611-a578-db5df70ef011",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b67eab5-dc20-41e2-bdfc-5f80173eab19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33950ea8-6c16-4f7b-aa4c-6237a6dc40db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f0a4b518-886a-4696-a56d-d19a18ee11d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e313b219-bae6-4cc5-a948-718b380642d4",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "946064fa-58b8-46a8-b181-176f16c7a2aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6260a95-2104-41ad-8aa2-9a5276fd968c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dab116b-d2f2-4e43-b203-29750cead878",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a926fa43-a7e2-4cf1-91dd-7eb5cdc4a27e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d57ea89-9d78-4110-9aa8-da1b2dc13d5a",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c45d25ea-dc7e-4bc5-90af-8138909c24ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "acb32ecf-a03b-4167-b526-74bbc3dcda3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ae7d458-82ba-4600-8c7d-0d2f6d46a47f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "d6b15584-60cf-4f3b-b687-9afc4651cdd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c36f4fd-fd12-4e09-aba2-e27a0f874f67",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cf4752f-b972-4651-a21f-5be18d0f2edf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ce016c7-15f0-4cf2-a2db-87e18ffb5a4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4482b4d3-a87a-47d7-8f61-50cfb5239136",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "41023b3d-c686-4cae-ad54-be982b9d9363"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9605e4f1-038a-4d23-a066-d6ae89ac3f63",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ee6454f-605a-493f-b68d-8753cdbf3ec6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd610eaa-6e94-4352-b59d-08e4db49c4af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06ad0f6d-fe61-4e0d-8687-ffdcdf652388",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e27e2241-2173-4218-83df-808307c909e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9b286fd-0902-4b4e-bbdb-3f6816c7a429",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2d7e34f-27c5-4dea-8e04-411d88fd3f56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ba1eafe-a191-4058-be73-733b2a1ba861"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66e45346-c586-4994-92bd-c8198d21d1a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "61eccf3c-6f38-4f8a-803c-2514ef6dd93d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80776330-f50f-45fe-ab77-8ccb98fd581f",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87295d21-99c8-4359-9f6e-76cd3d3f82e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d049d483-7843-4f41-9fab-dc5e0fcf80e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d6bda12-5a9b-4a64-8efd-d2b94609db0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d27d1f74-40cf-44ed-8c36-2a3d52d4ce5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2857038-686e-4848-99f2-287c6f12f254",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8f54368-9dbf-4c01-bfda-dc49387484fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b098d54e-8c1b-4880-8ff4-53d7b2d0eb0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf1d19c2-58fd-466b-a10c-4d2971461e36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "8b6c0a7d-9507-4097-8ddc-3e8fc151367b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dfce62e-82d6-46c0-be6d-1178ade3f5fe",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0522d0b-db6a-4d3c-a211-ccaed476a0a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77bb53dc-5ea4-4d2f-84f6-a989b97e3940"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d56db00-1d2b-491e-b15b-34041e77c92e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "2d5cd235-3bf4-48b7-9a70-9ec30faedd21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eddd37fe-05fe-4002-a3d2-3878ac0fb67e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0c84902-82e6-4a39-b162-4b3fd5eeca00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d59ed8ed-44f0-4d9d-99d4-4ce31465c620"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e4d0275-f6b8-445a-a057-1eabe2f2a2e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "577474c4-46b0-423a-abf8-2af45ac30ede"
                        }
                      }
                    ]
                  },
                  {
                    "id": "206dd57a-4874-4d63-92da-d37f2864e850",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a86560e-5e45-4442-9d4d-f1e06d120a4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97d95b40-9b03-498f-9a62-67a19edf55dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ae6fbcd-de3a-4fea-a2fc-e30fef7b2ff4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "6c0a4c06-dac4-4278-a43f-6fede09d3499"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b0a7498-c916-4b98-afa2-2a58806d47be",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1390ca34-103c-453d-aa57-50d4c4adb1a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f64fb4b3-96cf-4893-9e9e-5385232d8cd2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abe4e46f-f0d0-4b7d-a604-4b745bff0c69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "8c586440-fa29-4859-8b2d-2b5f8c670e10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07ef064a-a8a7-46f5-bc27-00868f8219c8",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "984a02d2-27fc-4339-9f3e-dd86502452fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c96257d-bd08-46bd-a0e7-109690f94b7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f73591e-866a-430d-9638-a395398101d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "66d173d8-609f-4f37-b072-475e33d847d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2aa02fe5-992c-408c-8429-ccb5378ecba6",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51a95ec4-132d-40e1-9523-388c95de58b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1012ca63-8ae7-438e-9e07-3bd9d27c3f25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "180179d3-c84b-465f-a742-e9a1d971ab61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "48c2c3c6-ebf5-47f7-ae91-2e6f5a47022e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfa56a18-0a80-41a9-ab99-b00033a75589",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6221226-ebe8-4671-947f-87b832b4d4af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "516d9e8e-9878-4d1a-955d-2e09a34b5fdb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cbee3e8-6715-4b6c-9c0f-69ea1f1e24a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "b4928455-f38f-46ae-9e00-38b9e6c61662"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afb491bc-36b5-43f0-a8e6-1e4f425a771f",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dddbb88-594a-4043-b1d5-6fcf55e544d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8eac56b2-c4e6-45cf-bd73-ea4dfcb94b2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76d1c77d-244a-4403-ba49-b23996e6cad4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c4c191ea-90e4-4d12-9c5f-04241ccdfc3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a749686-054c-4e64-a868-6f586fab36dd",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "beb05ac2-966e-4640-a58a-d4483e9b4c05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "232ef5da-2078-4c9e-ad85-9c10453a40ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55d7ed81-499d-41f9-b403-1a90595f9605",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "27503a01-2281-4e92-b93c-419892205e53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d876388-14d7-4bef-bc44-6df77fd92201",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66bbde48-eb8d-4b75-bdc8-afb8839c1749",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "329570f2-1262-4ef6-ac3a-fc4baca7cf9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bfb55d6-7984-4c51-91bc-5694257fa3d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f17c9b7c-35a9-45fd-ae95-56005dd5e653"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98c1dd07-ad19-43e7-8f2b-3290622ad658",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0576dc85-f89d-444c-94a2-01aeed2e5ab3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b39c231d-1e13-4dd2-81a5-810e49622892"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32772fb7-0b44-41ec-b00a-d4fa899a3e12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4fb0992b-5a77-44d9-a005-b2ec9c855682"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1259708f-936f-4373-a586-b7d3dfb771ba",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d72b7c95-da2d-4a05-8724-56a928b64218",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc076987-e1d1-4ad6-9d9e-b9cb7b015bad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a50f043a-6281-4d2f-acde-811a0ad8972d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "78ac39a5-b87a-43c6-aa54-9dde277ab1e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "532eae17-c3b3-4ffd-b64c-208e923fc4eb",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53deec4c-4fed-47b0-9e58-7a1652795c4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3d793fb-ef74-442f-a54a-6a39c1b781dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f3fbafe-84b3-4b46-b8dd-f94afdee1b7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "5a5756ae-d574-4e0e-a08d-16c28ac59d1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae08aa5e-a9f1-4140-a0aa-431ea6c222c5",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b1b0513-3c80-4d0d-80db-30ad3b3e2adc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98d902c3-6862-4b83-a8a2-14c8ab8a8300"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9d0b707-f742-46a5-9b30-02c1b969082d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e688f6b5-fa72-420a-8b54-8b22a70cce98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71f8f4f6-9c4b-4bb7-999f-0efdb6152566",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f790018e-04da-4d02-a06f-f666ab9bd1f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "554d4616-d02e-487f-b1cb-16c9229c7878"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efb107a3-7b77-4f6d-b6c1-5ee0b6aa3967",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8b47b7b2-37ab-4a0f-8e1c-68c2fbed08d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6bfd0fd-733b-4d03-a86e-48b7636723a1",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fa5f48d-aa92-4503-ae02-5144e8642d35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "775705dc-f215-4a64-b803-d1d9efbe4d37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83e0d1d3-dde5-41e0-b3e9-796c24eb6b07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4523864c-6112-45fe-9446-48c7e9037cb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ca86847-6d5b-48c2-adad-74f4cd55c658",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04f45eaa-9397-4a41-aca3-92f2dcede4a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eefd02c5-1157-4665-883c-d64380ef917c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f155ca47-989c-4d63-b956-f0ca90a72b4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "49dc2ca1-2e40-48a2-baf7-d7287a50559e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88d9bb71-f6e2-4ff6-9093-1c587eedf9de",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d7fe90a-bad8-4c3d-9b85-9a72f235d481",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a51c380-fe22-4325-91fd-f7ecc0a6b024"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47952055-8181-46f1-95aa-7ef9d5d29615",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "43ed2fd7-d54f-4d27-aa95-8d1efa7373b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3b65972-566b-4d7b-a85e-65e6afe6a128",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86dcb548-02f6-444e-a611-228d1771e99b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78217d89-2109-451b-9d8b-f080c9d31a9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75193f2e-6fb8-42e1-a19d-5e833553e8fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "bdd2046c-e05d-4453-9429-04b300d61bc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30b2439e-d4ec-4645-a526-732ebdc73317",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "732f17c2-f010-4d68-8859-a115fcc4f2e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6789940a-261a-40c8-8765-fdf38884d44c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b661b36f-9916-4a15-a9c8-d1abed9b5a3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "dd71c0ee-94c3-43f2-b5cb-59d7015721d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "068b2d19-7303-4e20-81d7-fafadcc3408c",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f88ce521-64d0-486c-8eed-eed7be2aae38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b1c3d27-e1fb-4426-bec3-fa4272fe736f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9586748-d74d-44c8-b8c7-025c885b48ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0b04344f-e900-4c63-acd1-ecd6e42270ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "670f4f9f-d981-40b8-ba34-c0f879225ce3",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a1b39e1-5557-4d05-b1f9-aefdf706eddd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5beeaa73-4210-4f02-9a9e-29eb6dbef239"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cb280d0-3363-4ab9-a582-66faaa03e83e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a5e2e569-95a6-47f3-9df9-7a397be271d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e09a4148-d4f4-499b-b326-0bad7f5d22dd",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0b2e12a-8ce3-445e-8786-96f8dd341e8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f143b1f-8be5-432f-bb2c-ede27ec46c42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "587a467f-eeac-4cc1-8549-3e03930a3156",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1a4b6d03-c4e3-4b70-91f3-bc14277c1f73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dd608bc-4e55-49ef-b0f6-9b4908857c88",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84b726e7-f2cf-430b-9509-87fae25f4263",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd3e1f0c-c7cd-4cf9-bb2a-742dd5e88c1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3e513a5-efb9-4bb2-aa03-000cd0a20763",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "80fd24a9-ebc4-401d-a51f-f3b1b24c31c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5b75198-f9ce-480a-b225-a5ed03af71e4",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cc6b0d7-0742-448d-9f83-a83ab47f0a1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dae6bb91-5ba5-41b3-b457-621255b8922e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b98a61be-1a4c-4e5d-a538-4527cf125bf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "d3402a3d-5309-4a57-a370-61c3138fe71f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e1a301d-1599-46bf-a89f-3fbd56a2d65a",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ad662c7-aa9a-4793-ab20-66934f905ca3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15f3937a-1ade-47b1-8e7c-8112895a0131"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "644cbffb-1724-4bba-ac69-09f6ca69e80a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4a3de54e-5dd3-4fce-af64-6e949a26bbc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f0279cb-8a81-4c03-9dbf-1849df955190",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89de1a8f-3029-4c1b-a1da-259d81a2e9ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "167316fc-b0bb-4e2b-adfd-87bea97d0f9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6913427-14b4-4180-9a3d-81b5a3c98547",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "33326b03-40fe-4f64-82da-cfc244b44989"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd289da3-17e6-4daa-bf78-280384981c32",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8244838a-6434-40c4-9de0-5f697374e353",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a360ac17-7382-4cc7-8797-6cddc15676a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c985e39-e1e1-40c5-8f9d-b9e8c1116f3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1bf5e8f9-ded8-4ead-b3af-f80aa93a5eeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6055d4c-98df-4dc2-9cb2-4957b0869e29",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf75c43f-8263-4aee-b476-67a1a1d2d812",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "773d0a27-7a22-4e0a-8e3b-521dc37a25b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4d5eb1f-7dc5-4343-8c45-0c47e7787411",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4972b6a8-e0ce-4a41-ad24-ac773cc99cfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64aff1d8-2d52-4270-9cc9-4906c422ee98",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ae2f3e3-c8fa-40bc-b1de-a0c02270d85e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09f23831-f51a-4ac0-b74a-941878f44567"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dfa1c45-a654-4ab5-b86a-77058b651dd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f060cb47-e00f-4165-86d7-6cbf6a0aaf7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "854cba90-ed99-4ea4-a5fc-d093a8a031f6",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28fe1e6c-c96d-498a-8be8-f854c714e58a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0d07a12-5f4e-4d31-a9a3-76eec4dc277d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51c01617-9b40-4e96-a085-a6a4a6e78a5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "58ef426e-f42e-482f-ba98-10d978c8b183"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b89980a9-6902-4d2f-89ae-11506506bf08",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd9279a9-b9cf-429b-b613-06c7568f05ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab8096ed-ce96-4cf5-af7a-24c4297cdb3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8e50747-a3fb-4211-ba13-b423fdc449ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "3752d309-8ac3-4182-ae65-5fdb02ec8f9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f0cc5ed-819a-4337-84d6-5a7cf4fc759d",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f94f7f76-5cd7-4fbb-b234-38d18183b2e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f54cce53-4a53-424d-bf43-cc71cd59ae3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59ccfb9f-4e35-42d4-b053-f74c589e485d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "ed5434ee-3765-4284-a102-98f7d5dbbc89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ec406a9-35ad-4314-96cb-0772bc16f630",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53e8ea60-0602-4855-8bf4-38396934493d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3691074a-06cc-4d1c-b17a-f240c8d4a381"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb0a2a9d-cee9-4e9d-a3fd-5dd2748fc952",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "f85779fd-0608-4fbb-affc-f2d1cb3c4d71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89fa45d3-b2a7-48fd-bbbe-4b755196b58e",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "144f7b2c-a9d6-4c71-9281-89e41f18efb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18d8231d-e78b-4e59-8f41-ad7c3dd21b70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17f770c8-dfc0-45bf-b968-a0c9ed7299db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "6bb823f0-f152-4430-b73c-5535593fba81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e075d207-bd2a-427f-8f20-a5d45aba29ac",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b76f14a6-855c-4a91-88c4-50ac193c68ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "83bd8e53-8b48-4055-9b24-ed98d8493770"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac3dc926-6a96-43a9-8c49-005222c09aba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "5d6090b2-390c-4a31-8b5d-9b94bb4ab250"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a06ee053-9185-42c9-883d-77bdbe165562",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8d219497-9c23-4ef4-a538-16e9d27fd6e4",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9281aaab-f9af-4c77-8dba-371b2a231650",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "94dec06b-531f-4fec-b7c8-79c6317215ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac045e1f-f83c-4b9e-ad2e-282a343d0849",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "43f65c6f-5291-42a4-9071-90c7255f8d04"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7934558d-9fab-4ff0-95f3-990480649c84",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d8870a80-5779-4498-82a8-13f9d071034a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c901252b-c031-41c5-aa5e-8be831995309",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "03a31eff-80cf-435f-9d0b-fb114a24e7d6"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6ca085e9-9d6c-4433-84e8-5a9c054b79b0",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "dc54fb5c-3a5e-4219-bed8-a1ee925b147c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "319da9a2-6fa0-4b8a-93d4-f532e1f837e0",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8e08c598-7dca-456d-acd1-70107879334e"
                }
              }
            ]
          },
          {
            "id": "4aa2f3b7-4116-43ab-8890-9be08df72c2c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c16e4869-6421-4ad0-aea9-8f2e9b4f35fc",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "0abd928d-c0d4-457c-8e8d-a83a7ef98686",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f97206a0-b4a1-49f0-94f1-851a5c048e02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "bd1889f2-fe8b-417e-9280-cfbbbadef902"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "939442d6-d9c6-4a22-b760-60d25937de40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d1b0874-bfda-47c7-b0d8-1b199d832762"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "06e3dc01-8453-4825-8470-3419149d3bdf",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "24483529-60ef-4331-b5d1-f525c5654e7d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6c9537bc-16ca-44ee-be77-fea0462bdb53"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d2083339-31cc-4ba8-bdf0-f72c1bbb1594",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b06b8c91-cf08-4ef3-b0a9-6c0a4249de65"
                    }
                  }
                ]
              },
              {
                "id": "ccb0c04a-345b-4c10-bcc0-bdc0eb2d4cca",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ce110e85-01b4-4020-8c1d-484b04e574e4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f57fc840-3db1-4c63-87df-fbe722d2a3ef"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2db247fa-6e53-487b-9ec1-9f8bc0ca787c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "847984dd-8b6d-420c-8a73-c10c2cbc2cdf"
                    }
                  }
                ]
              },
              {
                "id": "385e873a-3f2d-4fdb-857d-c2efd1a4cb2b",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fa7dd7ce-a1a3-4484-8885-a04b0b3cd2e0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1d735e58-4cab-4b13-8775-f68bb44c5ba5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "72ad55e0-031a-43ae-b343-e6f119da05f7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "80be1706-919e-4f9f-bee3-5a296bd454ea"
                    }
                  }
                ]
              },
              {
                "id": "3b6c1bd5-5d43-4125-9cd7-16919fdb9faa",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1e3dd1e1-9ba3-41d9-946c-9177d9035218",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bc2f6747-db17-4b6a-8d5e-bb99071f2229"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "85aeff0e-a9ff-462d-b384-d63e75f0e585",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "2ce579e0-fdef-49cc-b564-8b8eefe15db9"
                    }
                  }
                ]
              },
              {
                "id": "cc1bfb34-939b-4e24-a24f-633ae8062122",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5ddc8418-239f-4657-bde4-e3d852381e97",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6783ec3a-b3ea-41ee-8a67-ce55db305ece"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "873bb7d8-4ad2-49c6-b87a-e93d1e8af170",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "b55c319d-a580-45f9-9b5d-fe06aa979594"
                    }
                  }
                ]
              },
              {
                "id": "6731c780-182f-43b9-a92e-016899791002",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1879cc1b-4c60-485f-8415-f0d1ba184dfd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d0b808bc-ec74-426d-8910-ab39ba817a29"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "922ccd81-e866-4a97-b563-1c205989569b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "a1d8422a-4d04-4711-8c8c-9ad96babb110"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "07d71241-001d-42d3-b720-debf04b247ef",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "bd153c49-c867-4d67-9b34-07adda492e5d"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "cbc2a7fa-8194-4f39-baac-af5d767680fc",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "318884a3-d9d1-4ceb-91eb-760b7a0ddc0c"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "eca8abc7-4631-4153-8e5b-59b1ffc8900b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "7efa52cc-e459-4c12-9f4b-c62b07a3dd12"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1f2b13eb-eaee-408f-9ca2-df47391d0e6a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e9882f81-69f1-4abb-aa3f-22527e9de1e5"
            }
          }
        ]
      },
      {
        "id": "6e978977-5f28-49cb-96af-89c14efaa1e4",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "cfee1fd8-600b-43ba-8441-1c53c334061e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b8d4bee5-9b58-410d-ba4e-a18e90eed188",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "56ae349d-cadd-4a93-98f8-67d46b4c0cce",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1a3a598-e814-4b1c-911e-49dd2aeb38e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c42953b-29f7-4277-abc3-e9be77cf76c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a27a614e-2fcf-4bc0-94ae-f0b701c14d35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "50ad3beb-9d6a-4bda-8ef1-316c2b5eeb9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "240b7c51-a0c3-4388-a8ff-3372180ffb64",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b7254af-c3d1-49f9-aabe-04e35a7b6991",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9520ae88-40a7-4fd2-b5fe-df81e5d5d363"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "572d13f0-169e-4cf8-95ca-aa87cdc3a9c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "53b6ad23-62c5-4c4a-b15c-8bce9540ebad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94152095-d59f-4c63-b184-ad124dd95731",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26b22828-1905-4e99-8fc2-3e76da45d729",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4925bc83-104d-475b-9aaf-47eac957e13d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4b9e58a-ead7-4fb9-800b-acb8b7e8f571",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fdf1c4dc-8d61-4fc5-a70b-efdd97984a56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcbb81c7-b6f8-4709-add4-3b2ff3c5337a",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b683845-268f-4f2c-88ba-035f82085526",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac6f9107-8cd1-4373-8cbf-a3dc4ed00f22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52095f9f-a1d5-4c38-ac9e-a22b27a1dbb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7cb0abbe-2075-4ca0-93c9-eaa078974c8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d41f07f-3d3e-4edb-967b-4f56ab0435f1",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07b5ba60-02a3-40b6-a9ab-806747010959",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eed2efa3-f0fa-43c4-9731-1a4bc06c08d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2398452-a2f1-4847-9c66-fd370542d06a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3959949d-f894-40e7-9e2a-8c426d2e9d0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5e8ce4e-240a-4ce0-9c5a-de363a80733f",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac413e79-0f31-4285-ab56-9386ceb0f349",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be4b2ca2-2285-420a-974b-d030cadb6f16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dfc92ca-1afc-4263-a343-d2b477b91e99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a935193c-a29b-4bea-b21d-995873b17840"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e888b305-ed56-481e-b4f9-752eb34acbd8",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ff09e07-8c48-48d7-b3fa-c858d211601f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "386bf489-5c9f-4578-8bfe-a8de641bfe5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2200a1a-5834-4275-8711-d5528b913443",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "f4765d61-0e35-4a62-93ef-0fc84d6041f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "090c47ef-00c7-4df4-aa27-3c1854378b93",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ad225e6-9272-4a5e-9851-4c035e257296",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a42f02b-c707-44e6-af14-71292f6df080"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5270275-1e98-4042-9a85-6d410d839835",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a840c34f-2637-4f52-9229-d40c83923b5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32a9f4f1-19dd-4e37-852f-72578d308ac1",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80798334-9020-46c6-9795-278d8f8fe220",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9ed1bf9-0c7a-4753-a68c-f272576f368a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7092f859-7856-4069-a3de-962cff81984e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a3bf2f1b-c91a-4ce8-a075-6b095aad53e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f80802fd-9640-41c5-ab12-73f80d3001c9",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ae8afc5-97c7-4c62-9d2e-7ab3d6833831",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a14e023f-c375-44f7-9a53-cb4d2b61421d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa4f8be3-fc32-4829-8829-1e5cd2bfcef3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "561af7ea-5141-485e-a62c-1f47b8e4e834"
                        }
                      }
                    ]
                  },
                  {
                    "id": "648e96cb-5708-4f0b-ab78-915d9a25a5f4",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0196067-6278-42f7-9989-e3e408edfb10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81d55efc-ec0b-45c0-9292-b8ba35cfd499"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaa488f2-7ccd-4add-8e55-8918be9355d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "2c127d80-56c7-4e79-9920-a1636d25bb9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38ba1b9c-f64f-44f8-b0dd-c02b71851ad8",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e832faf-0f27-4283-ac65-c50a3fc70269",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdcac34f-aa27-47ab-a38e-098a689570e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2e63321-ed44-4b71-a32a-69fe60ce1427",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "be84a652-4090-4a22-8580-ac4c6a3d1965"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d3397ac-85d0-44b8-b33f-887ece9ba2d4",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e829e72-1c3f-49fb-81e7-9758fb688c6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3640526b-f4ea-4f5c-94b8-283f14c2b902"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "609d57a2-94f2-47e6-bd8a-258b43eb41df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1237e470-6aab-4b0b-a8c8-c2e03228cb1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c692092-1e82-4f5b-a8f4-36daad0b018a",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc3a11c7-96b3-4f1b-92b4-39453669f464",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9dcd2cb8-9f25-4d0f-9560-6e95ab1e0afb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2984242-04b9-4161-8e50-cfa5ee098f45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "bd810000-7a42-4cd5-b5a4-cde7347657cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a167ab1d-b5d6-48bb-8800-396c6c4d5865",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eebfc0a8-dcc8-4171-839d-f161d60825a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2502357b-5a69-4bbc-9aef-6157d1650693"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3293cfa9-708a-46a0-be6d-f7614b671020",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "28f2f04a-a855-445d-907c-ca0eeddf7a03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb92e53c-6aee-441a-9109-247db4348e16",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5f71b31-e809-4a0a-a333-a789e52d81e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e4144fe-98cc-49da-be77-8e3b83d99d14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef2490ed-d274-4905-b57b-4861a0c41e0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "f560076d-8e2c-4af2-84bc-dab42aadbba4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "524ce697-336a-4ebb-9c13-adec8a8e460a",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a19f63f-95d0-4059-a0a8-d49fb98849d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fec249a7-8699-45a3-b333-15e5a985ac00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d17b94b5-b173-4c74-8d16-1b8f5f4003f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "e39ca217-5f61-4d7c-810c-2c393ceca693"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e3a1bcc-6fbc-4134-8625-cbe76d7e12e9",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9988d37a-b492-433a-9816-da026ab1f481",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7b343ae-7d16-4bed-8b24-15876b511bde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffc1af42-25a5-4546-b2ed-597cdb5526fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "3b630a0e-506c-4918-8a52-bc4aa3428fb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a92269ba-5d04-4ef0-ab2f-1f314895893a",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edfd10e5-ec80-4e37-aac0-ab7c69799160",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "565da428-e488-4519-af4a-5042b0c8dd7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "592d0523-076f-42f3-b736-705dbb9977e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "45d3493b-62c7-4e45-aa76-f00a77196287"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c364c7bf-eb40-4dff-a6fe-863ee5999d47",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac4e39e5-b9bb-490d-a62a-d931db7b900d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b58e8e8f-d733-4132-8c67-b3b641d23ccf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c6df49e-112a-4201-b162-ebc0653a3b22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "41b038ff-84b1-4cbc-9630-6f1a212ffa82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c10cc7bc-4b39-4871-bfb2-92717ce7d467",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e93e76f-09e6-4340-ab6f-a9fce5894e74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f9e06c4-d4d6-460f-880d-c4626ada9313"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af06bdec-398f-44a4-bc2b-3144124240ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "61212bbd-b1a7-4731-b08a-37247e254a3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62311d07-c544-4934-baa9-60d57b6dd3ad",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6f95656-fef0-462f-9742-9fa60984be13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62a8b731-2bc7-4a5d-bf76-24f031b2085a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8cf3287-ccb5-49a5-b9cf-eadf3d8b29ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b31e13b4-68af-45c6-bf0b-552fb94b735c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5fa261b-fecf-43b0-8760-6cc85eafda9d",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "000354dc-06d5-44c4-b10c-e8fcdb76497c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "705dffc8-4dde-4b66-98ff-3d5380ce5b28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4090dd93-b99a-4611-94c7-057c690a90ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c58e456d-44df-438c-acb1-a8dcaaa1ed92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47051635-2659-42a3-82e9-93a0d301f046",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a190a60a-0861-4a4a-b8e1-ea826de77078",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01a9395a-6f7b-4066-9b70-0656156a9f2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b77602ae-55ed-46d5-8579-6be2d19245d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "08cab4b8-4cbd-4f3c-9b33-8db2c30d9a3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ae7f7d7-9e4b-400b-b3c9-d9dd6d8f8359",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87acc81f-b0c8-4c2a-a7c7-23c34f95bf64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cb01e83-7c6c-44e4-b3b4-5ff5ba088b63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "266e1d18-366c-45ac-bb70-3eff54d733d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cbc85851-01a8-447e-8ff1-8d4281004f67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ff9aa0b-3117-48c6-abb5-90f83bc49891",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69008425-a833-42ba-bdce-63210b3379eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0424736-75cd-4522-b37f-2f3f65d04d62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23f9629c-d830-4d52-b318-e2181cbbb38d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f741441c-6656-49b5-8533-4c6ba5836709"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2574409-4ead-43eb-8043-94c275a4f97b",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f9381c7-ae2a-4e2a-a84a-21f1b54fc5b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f639e7c7-c377-4810-9167-b217ac630356"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a85daf11-282c-4ba6-b629-0db7aa3b36db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "310f731b-33e1-4a81-93b5-46792a78b774"
                        }
                      }
                    ]
                  },
                  {
                    "id": "427b9ac7-d6eb-4fd0-9c77-46bea4c8cbf2",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46fef7bb-6fc6-48e7-a3fd-d7b19271a729",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2ea059d-3862-4058-8864-bef756e92d8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6992b222-8c18-44b4-8b9f-19e6945a6d8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b210754a-98fd-4c37-a3dd-5b431d29b6f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a123e94-651f-4fbe-b761-44ae1470b9f6",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a96bff4-ecf5-4f15-88aa-515a8755d356",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f678914b-26e7-4bc9-b00b-c19027922391"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd734ca3-e8c3-4429-80f3-9bff15eb7599",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1376243a-a7fc-424f-85b5-7e417e392fb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a4e41b4-fbb1-4359-a36f-6f05f5ee6e25",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db2030a7-b901-4089-adfc-2af07f63ebd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0485c7e5-abf6-4d45-b797-4a9451909ae9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba68f15a-c520-43a4-976c-c6ab34807c36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a0e59f81-c8da-4d32-a4e3-d8191bcaf3e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "118e0c5e-287d-48e0-8484-3d72f95f050b",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e45cd3cf-f7a7-4dcc-b8c8-5e0a1a2c5c29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5afaa7e-888a-4384-a8ca-85b94da1557f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "828f7c26-ba6c-4f52-baa9-009600d81a5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0b8cc3af-0b97-469d-9397-debf8fc11f0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c82ac54d-763b-4de9-91ba-5f979e950327",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69acbd04-aa23-4563-9eb7-24b4ec5be7f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58c62612-f596-4fdf-ad71-dc22584d198e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71aa73f3-01df-4ec1-9bc6-690de1afb7b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3d9b71a8-cf24-4901-a0cd-70b9ac0dc865"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70bbf79a-10e8-46a1-9f1b-69b793badb58",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa1b5d24-fa24-4957-8dd8-305bccfb809d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be7462f7-60b8-4300-ba9c-f6dd5044c2b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ea3531c-6fb3-47fa-ade7-4678ec0c51bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c6e079ae-1686-48e3-a5a8-5cf2288b3b4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1e9ded0-fe3c-4200-b44e-f940c224efc3",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97c33781-dbb4-4d7b-8048-a4530a95e56b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "408baf10-7472-4bd5-9e17-fe617a5962f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51d9ae6b-6e3a-4261-89e9-6045f2c40854",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fa42bb47-d831-47e0-b249-599718baf6cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67ed14e2-cf03-42da-9e2f-e2f9c5cf32bc",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcd195f7-dd15-4e85-a600-0e6bb6b6fd3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "499e50b0-7b28-4f93-a846-839d22424242"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6c89756-eb83-4f65-9319-d5a2f219e3b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "640e6d5d-39d4-4438-81d9-03e8e9651450"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e25cc55-63d5-4e94-a3e7-531725c3e2ad",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1d35b13-f80a-4039-af4e-125f74255141",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "094ed3e4-95f7-492b-87cb-5a675810805a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9511f98-7d98-44a7-96d3-801b9d668dc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b607f7bd-4c5c-4fd9-b5cb-201fee38625c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1960edf-eb5e-4317-b3bd-f68846dfcd61",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9070cf6b-657e-4b59-b41a-71da106b2d39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2a8c2df-e575-44bf-ac37-aec2b93e5faf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19e4ca6b-a68c-4d8e-9e5e-00d2ac92b302",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "28366df6-1471-4927-8031-b5981fcbe181"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f033b6a5-6830-4271-8e49-4d8f59aace1d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e268e408-a1d8-4299-b559-2af6f5958291",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df53b03f-66b2-4109-b182-8e69e1e35b41",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "1802b164-8715-4c3f-ac5d-07fa67a534bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96de63bb-91f5-4552-b1fd-b06438afb0fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "029d2164-7f0e-477a-909b-286fc020532c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e3adbc66-85b3-4ed3-ac1f-958e5342c200",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c283eaee-c267-4e1f-9643-5e5142b9d38b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c3401eaa-7a2d-45c9-8078-8106de46b0b4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "21e3ca05-618b-4dee-b429-8751cad6b6cc"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bd7aa483-4813-434f-8693-b99d5f63a94f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "f9f18a24-3aba-46f8-871e-0da712b5c00f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e010746e-43b4-43eb-8385-b898901d1f98",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "85771bfc-ee6c-49a0-af9c-5acec6fc305f"
            }
          }
        ]
      },
      {
        "id": "e47fe346-43f4-48e4-8bac-a1f936ba102b",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "79d1ae26-0c3b-420a-b48a-10522fe397b7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "aecc58a7-36a4-4ab0-af48-76bf9a82f98d",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "2d9cb8cc-5549-4247-95a9-8b31870ed74e",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b251203-bcbb-418a-9978-32053dc9b00e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b2483e0-8ce5-459b-952b-614929829cd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb83b0da-2727-47da-bbbf-c715b792f7f0",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c6cf9c9-21cc-49ad-825f-b90bda202b1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbe50264-bb98-46bd-ab3b-ad8a9d6bf403"
                        }
                      }
                    ]
                  },
                  {
                    "id": "049bf4c1-f3e0-4f49-bc07-d32e60b9e175",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "192f7889-0020-4e98-81b8-21a70884b336",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ddb43a2a-c86a-49f8-b71f-4b3cb157bc25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6014a79f-4cf8-4813-b957-f658a40ac2ae",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a870ab94-b90d-49d9-8ec0-31836b02b0f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09f8e739-7cc3-4240-87a0-c0a9e121407b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "484575a9-5a33-4bae-8234-a1b980c38284",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21815e3e-356c-44ed-97a0-ce3c062d4e69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7dca6e1-9620-48b0-9931-3df35a4a3ca1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4253212e-4e7e-4cdb-abed-ff5ac6d4fb1a",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b21f31d-bc8a-4c7b-aaab-33dd1a97d4de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b0cb131-f754-41fc-b49e-9b4fbd96598d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab865157-94e9-43b2-a11e-1a36a186138e",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b701e858-ee4d-4853-adb1-af3532c50c06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6736832c-4182-4515-8ed7-f4cc7443ecfc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91cc7603-c259-4f22-9c9a-1b63842b62b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "787d89d4-4040-4e7c-95d5-e0a40589242b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66313bd1-ee98-4ab7-90a9-3b087b98114b",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00735646-7109-4eab-863d-b574c8fd5f4f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1c674155-ed7f-454f-9534-6346d648b60b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f444f89a-b4a5-4cc7-ad4b-0f8a474b07c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4ff939b-c497-4d09-8023-6b5c873af8cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da2c055e-790e-41da-909b-68e8d93952bf",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ca6d57f-d841-4d98-bd4d-e6c912b0a8ec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e7344a2c-5280-4aab-8fe2-d1be23e83c04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63ace873-1380-490b-bb2d-3c1c0e670ee0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4be6cad1-ad83-4d51-8b5f-ee9daa9e7083"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3efd61c7-b6c1-47a3-a44f-f3dc528bc8cb",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4729762d-61c1-406c-aeb9-1315a5a02fa4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "677d739f-9261-45b8-8c64-6a4c6d646627"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08379136-840e-4e29-8717-a9cc816b364d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "502167b1-14c4-4af7-9acd-174f04193986"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3788605-f812-45b3-b81c-23e81f35654d",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9166d615-b531-4a0c-af40-3b3c57eada7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3ff8850-cf3f-4599-8687-ed49ddcbfa83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcace18d-7a98-42e7-bc1d-a177d2cde877",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "300d5b36-ea80-4034-ac4b-447acf2d5deb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "235e0dea-242a-4d31-92b6-0e70799e254c",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2af44347-3911-4018-8aa3-c9c36da3c90a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b04a42e9-e04b-4a89-acff-31654fd89c38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5ead8ac-b562-4088-90d0-1f478d1620ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c4ca632-2cc2-42fa-9270-6925d8813bf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf05650c-ea5a-41c4-90ad-b245a51d21eb",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfa88454-4edc-4494-a588-191c33f2aedf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "61c128ce-6871-4bc5-828e-7fd12f2cd7f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c654ec8-a311-4060-bdb9-57152d2fe6fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "916bf8e2-cd3a-4daa-a7f2-e51f7d7c98d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f53e2a6-3740-42f6-9f86-9c368de31ca2",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53e64469-1f1a-4819-9a48-804a5631a6d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a673c904-16e7-4986-9b36-7ac78093f97d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d75c12cb-f57e-4715-8842-5f1d816fb25b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b43ca43-b96c-4ba8-a1f5-0f25a6df5688"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b71b3f31-88df-4f22-b49a-27338d446ea8",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8856ad16-f2d7-4a4d-aca9-2925f99a0031",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "59a6bce1-67ca-4b88-bc6a-15eb5e65452c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b489d21f-9f68-4a42-88d1-1179c0dacbb7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b6e2329-fc03-4b84-8054-d92f510fc84a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4757397f-5040-49ec-ae7d-f5e0ebe7a7ec",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b114ae03-4ac9-4019-81bf-f1c5c4f8d6a7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "db032d91-6ac0-4bfd-b58b-ba08aee24d0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7a90eca-362b-49d6-951c-67c6bfa9b6c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "005a3b8c-4d93-469e-83b4-05f00b2cd6dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "021229ae-83bc-472e-9286-d00cbd2e97e4",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20efc1ea-18cb-4c19-9eb9-0e2c984a6be8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6691eeaf-218c-4b26-acbe-d55dda72ffef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "625d90f2-b177-4e82-a5e0-8728d5f7cddc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2a81776-43ad-4d75-b62e-2eb6ba638699"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97debc2a-a64f-4945-9992-be6aa1304010",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c027bae9-d24a-4bd3-b54c-1a9ca21e43f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d69793e-d968-4bf3-a23d-1a294433a714"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3ad7658-08c2-4e54-b49e-065c621ce48b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0d71591-b3a6-4904-b532-263380191a1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0eee0093-1380-47ad-b29a-f2141051a183",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c768eb6-1332-47a1-9c3a-4f0916bc496b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14e2852c-1a66-47eb-b333-fcfcb79ddba9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54973553-15df-4822-902a-fa25417687fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0d9b3d6-3d97-4934-9145-07659e93d8f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8727962-1208-41fc-a2f3-2cdfb1b5a309",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a2799b5-6256-4cb9-9cdf-dc3aebf2f09e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4b761ea-25b0-4ea4-afe9-14092219e011"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "228ef53a-82bb-470e-8ca2-e4c632dac329",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0dc1039a-8df9-4899-ad12-039248d0894d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39d7f3fe-5945-4bcc-9c9b-13b95a8476f4",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ff712d4-2e2d-4e56-9636-6708e8c45ffd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f48b0cbd-9459-4041-bd59-862f8ba5b3a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44dcdf41-8114-443d-b4da-717e5b7e588e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd4d0b4b-dd12-4bd7-9352-902c9f33d291"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55f38b31-396e-40ad-9027-c789c72cd918",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "feb75dc8-9dcd-4815-8834-a9364cbbdc4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aacb9e8e-fec6-4e15-8b3e-467966424469"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36bd67d1-57a9-4b63-97f1-76215cbcd5a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3cda42b-7956-4572-a598-69dc297d6478"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad679411-fa29-4596-b9b4-b9e10081d920",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06dbec0f-9a03-49f6-bcd1-908fca5a6781",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55d3d4d1-100a-4256-871c-60b79784fde1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "930b2209-3deb-4b89-bfb6-9bda8c3955da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a16fa0a3-655f-4035-bca8-70f199f1ffd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d79eb4e8-7a94-4c00-8bba-7cfd3ad5428c",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbae8120-fbae-47e4-845f-47a39060f353",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "25d3ae26-1764-4142-8a7b-15018561613b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8a58aa3-2229-491b-94db-5a5b208eecce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bef36f69-95f3-4999-ae7a-4086e9c4244a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4ed0b5c-9a1b-42fd-b3a7-772271827063",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c131b324-de1f-4688-a275-7f1ebc723f68",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b49459de-7a2c-4772-83cf-f9873f4ac04e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f14fd6ec-e828-40c7-86c4-11326b90b83e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "427f57da-09d1-406e-95cd-6a4c479e586a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d89721cb-ebec-46a5-85d6-a23dbfb2fa27",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d94ecd9b-b88a-4792-ac11-d2f18a0e108f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2e4bba28-d519-4013-9af5-83bf674f3640"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1e88062-c4ce-4dca-8fae-b48e2a4170d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7afa4b5-3305-4a3e-8013-5b45322fdd3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdad9cd8-3882-4974-a241-9f538cfec1ec",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c50c37cc-3235-471f-99a1-ef9c60506f31",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c45213ae-e3d2-495f-832f-534e3e6cfb99"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "daf1590b-c77d-473b-9495-6b878a61c701",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c134f5c9-541b-48a8-a793-16f5b80ac910"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0eaa2dcf-9a9c-4aad-bb76-fd246884cb66",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0102e028-5678-4c02-9b66-7fe69981edfb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e937e28-65be-4702-a3cd-56b2dcd6fea3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b84f61f9-1a53-43fc-aae8-29e12fa95d7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "164d663d-2901-4c2e-ac7a-2d1839e4329a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c65d8fb-9ad4-44d5-a0e1-e2afd3d22d70",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "505e0b4b-098d-4e2d-bd0d-4112e43d62e7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5dcda910-1642-49e4-a9e5-3ea00b25985e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e550346e-c2de-4cd1-93e5-d91607e4fbb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "964acd1f-f538-4093-b57b-ca6f4405dfbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb5592a0-0f0d-48e0-b9dc-e0a582c33131",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfb3dc95-8dce-47ee-8a12-ab3c6c62831f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "993e6f4d-f570-453c-b0c5-17e4fe27aa54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70fdfdf0-0373-4ba6-bf7e-63e6a05c9edb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "197f947a-817f-4d46-ab91-9b1b906c1a63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0da85e99-e98a-4706-ba28-1e9c50a20701",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81c4156b-5bc3-4f19-9d2d-d9de8bb0ecc8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6bb2c156-73d1-4482-9e7f-6a80edbe5521"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1ffcfaf-c07c-442d-a561-c62a54046548",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4424f4f3-1902-43b2-b1fd-047513549d5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e42e65f-7fc6-4338-88dc-a47e15ac8b34",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6399cfbc-3ce2-4b97-8eaf-f4f4bb5ae628",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9bcb461c-98bb-441a-9033-4bf9a69fbf72"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad69c670-0a60-4db5-b2b2-9c8b33576301",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1194078-0e94-4609-a904-4bff59dbe4c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5ef8aac-1ea5-4a38-a575-dd211e21fee4",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dca48935-caba-4dca-9c2e-b5c716b28beb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9ac317b4-0b76-466e-baf1-170ddcc06884"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "796b3314-56dd-4f9d-bf97-0bdbb9cced54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c59e0f0-a4c0-4f27-b031-2076e902354c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f981d78f-4174-48ee-80ff-7c47037fc724",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "938cd4fb-afb6-49d9-870f-977cc03f8c34",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d0a5d390-0413-4bca-8375-cd7e4949f267"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c3a8569-d326-45fb-9619-0b85fee4c028",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b002bc07-fd3a-4ef4-a76d-45d33042bd8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9ad1554-79db-4435-b6b4-a249dbdcb28e",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6184e92-1c75-45d5-9085-88086b61493d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fd52602-e63d-4527-b6e0-3431f4b30cff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c59bf21b-7af7-4ab4-87a1-0a4f2d545bfe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "838446c3-11a5-4442-86ab-7edc547364af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89935508-0ea0-43f1-a50c-4297093c290c",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d15e42d-29c9-4556-abda-975e2314fde3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c3c6387-33c0-4989-8f62-d7ffeb80a251"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9a1a002-3a3c-4c9e-a36b-9160d7813c78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b46c23d-ac6a-44ec-a5d6-8586811cfcde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8e7a77d-abce-4054-8acb-d069b8d49386",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25a58ae8-1fb5-4555-be1f-53fbee9e26cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "492250ef-5274-4fa6-870e-d922b64df848"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82717591-3d5a-4473-ad58-e51be63a1ce7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4dee10b3-d8e8-4f63-affb-196bb23b71ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2607eae-92a7-49df-aaa1-cf7fadeeb3d5",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ceb83419-a8fa-46d9-b6c4-83261255af0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ac9d329-3f7c-4616-98dd-fb05dab5dcc7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c546e3a0-4bcf-489f-ac1d-9041204ecf13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29f4f7fa-35ce-4039-b916-e8e0e7ef2784"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41a09b85-1e3c-4205-80a0-5fdef2d7fe53",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f3058bd-2b0e-4417-b548-436438141045",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c414f74-cbee-463f-a8de-70222dec00d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18b834d9-6454-4e72-a808-5042be90f4d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5bfd45f-da2d-4503-9d86-a2a786bed195"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0483f216-7946-47b5-8ec1-efee5ee409c2",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4aabd99d-3751-4c52-8403-ffe5617170ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1af882d4-7330-4bb9-8454-614c8dc3257d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "914176be-599a-4f1d-af49-1767bae3b51a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90fc5317-58e9-458d-854c-837b836dd243"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07a206b5-30fc-4d48-ba08-5788e1e6dc0c",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6df00bf-aa48-4dfd-b1af-a1f09b1cd0b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "927d788d-557a-4079-b0d4-d5237cda1ad0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ca680bb-1df0-485e-bf34-519af03d3496",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9bcce83-1597-4940-bdf8-4fe2171150df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdd30f93-8305-497c-8d5f-0ee0b7e08005",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2a62507-0fd6-4749-8e44-106af1666c69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a611740d-594f-4633-95ab-9a9e26c0757a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f74c76a8-6589-4a61-946e-5d25c2de5a8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d494e8d2-bad2-48e0-8fec-25d847406b73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fd2149f-c9a5-4d95-9917-a93f2ce7d270",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84efc0a4-9889-4974-8cf9-4f53b0be0b11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dde414a3-3ead-4021-a957-748e906dbaa3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79a08072-96ec-43aa-8747-9cf16ceaa3a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcb6c9cf-bfc6-4119-91e9-79038bed685c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b150be5-2966-4ead-8366-bc1e79bce4c9",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "773effca-6de0-479d-813b-001bea801f5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47ded2f5-325c-4bfa-9e1d-213aa39f76e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e38ce217-3fe9-455e-93a3-fb7bf4fca9cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41bec655-8c0b-46d3-b149-d27198745286"
                        }
                      }
                    ]
                  },
                  {
                    "id": "955d0c00-039b-4013-b5b2-51cd617c7e2d",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cfe475c-bad9-420b-ad74-1ceb42214f92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1051c5f-705d-4853-beb5-ec12cfe1d0f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97a5edbb-5f5f-484c-8ae2-ae3033fbc2c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6bfe26a-afa0-4f87-baaa-7b50b3ffad02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fdeafc7-4635-4d39-bcb4-48eaf7537188",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ace5914-5869-4c7f-a5d9-b96b0824979f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b14e19aa-6826-4677-9308-22038085ab93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3050e7e-c1ca-4a3c-89a9-066018f01f0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21ca8cac-20c0-4ec5-8e4c-bfa7653405e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09220052-0142-40ed-8a9c-0f0bb62cbaca",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6630d3a7-6a07-4532-bd9b-da92ec6db192",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd8d996e-f406-4b84-95a2-159b00457b77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "234b0da5-294b-4d74-87f1-3bdd8afcd8db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82cb9177-ed43-4293-9a4b-3eba0f0d3c20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad72fbba-b046-4095-9c8f-74b657eb3896",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e275cfa-b389-41eb-be22-25c01325be6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6501bf11-c010-476d-872c-444ca784e4ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42f055ac-4d87-4816-b145-70cbdfce3acb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37c1eb30-b4f7-48e6-a363-240b9c357fd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4f0edf2-7378-44e4-b115-265569e90470",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22e1365e-4cbf-4727-9b73-a5600230a306",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36a864ee-089a-435e-9ba6-90e2d1bf2eaf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ade2ff78-c91e-41d3-b796-e86a47ca8fa6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7606bc11-216a-43be-bbc8-33a8434ea7e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41b331c6-a04c-4e80-9e1b-48e73eaf2655",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3b9aa7b-ceb4-48a9-ba6c-924cdbe36ba1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0dc356bf-3127-461b-b31d-4881306053a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6df31f5-5adb-4c00-94f6-9937358e09f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ce3b004-7236-467f-b99d-36c89ff201a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "695a2c9c-919a-4482-9adf-cc26c7c75923",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "124b88fa-d18b-46a9-938c-12949fa7ef54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2ac6465-0aec-4cce-a3d4-457eee6d42f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8205669d-559b-4455-ac61-484a2feec9fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54400d00-bda3-41c6-a184-e5b6520923b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae40c5f6-1d38-4deb-9f32-98da09c93c6e",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c93e6a0-fd7e-426d-9cca-495ec4e362e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03c25500-d630-4124-a9ac-21f8584ac2d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c73f451c-632c-4a0a-844e-f53a4cc2dc09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c1d7b93-add4-4adb-ba11-5148d4587753"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c90d88c-168f-4edc-b937-493eb125a5a2",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b08c26d6-0029-4278-8164-b5ad23bd1464",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c812f9e-7609-4ce9-b84d-e245406d013a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2196a6f0-1022-48f7-a92c-0258fc850208",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fdde4e63-6640-487b-992d-886e83ad26c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bad9dac4-f55e-4cb3-9609-069b080fda1d",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f286782-c0c2-4deb-bd7d-5db1ca73152f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e0b99d8-85a6-42ff-9e6e-99daed60ef89"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d911b2ea-2c49-41a1-b946-473720fdded2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35c526b0-75c3-43a1-984e-9875def6f6e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "122c9476-7571-4fc3-a6fb-b8017454e71f",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3eef9b3a-a5f3-4c52-a803-f8e02284b83d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb290c4a-894f-4db3-8965-3aa170010dc9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cd6a8de-06c6-4624-807c-b433ff5821c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe7e102a-aa58-46ac-989a-f16873c42353"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dc2a019-f835-4dd5-824f-312af88c5fa3",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10960f79-0527-4dcd-9cba-16f6e1e6647e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8fd1f2e-051e-4530-84ee-a6ad1159768a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1bf2b22-347f-48f6-93b6-4dc39668237c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "830ba12c-e34e-41fb-91ad-0496f8505bb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31d5263b-890d-4acd-8c7a-fa474fc7176e",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "212c1760-f401-4b72-9e99-31c403ad87fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a8c4729-49a8-4fb2-a89c-91d97bd78aad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b29c00c5-9337-4a52-9fae-729ef19b1c8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "908a521e-afcc-4cf4-b1b1-ed5459631d1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cae6eff-36b7-42fd-a753-af5d9a6f0193",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63540179-9dc7-4b0a-83f7-ce5b4d303fca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a606040-ee1b-445d-8b8c-a6416751c5a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa60c4d9-4a8f-42eb-9d8a-08850ce7c7ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4a7d737-c8d8-455f-b715-675ace8eaf02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ba77da1-810f-4444-a8e3-a72ea9484ae2",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c37e6d18-cbeb-45ba-a597-bc7b2602b043",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e02bf98-b826-46db-8f56-6dd409ea6df7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c463804-0122-4d07-842c-26e90802a77f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3734816b-d520-4395-a72a-1fde0f9a19b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0440c3e9-a8c4-4234-bb2a-940047c0b3e3",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f73a01e5-3286-4517-85b3-1593052c4b24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f100c5b2-f834-4d7e-8ddd-a858faa16c71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14f70036-2249-41c4-905e-9566511d8a0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9479b2d4-324d-41a3-be13-ae9e8e99dc7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00e1c655-9f5f-418e-a018-cf3dc9caf610",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d35fd6fc-aa6c-417a-a20c-4d0460c15845",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d702876a-ac3e-43bd-90b9-eb5ef78895c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9d2ff6d-0064-436a-a5fa-d0a157237e44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3c4659e-b414-4c16-ad40-27c826737226"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a55faa3e-7437-4f8d-9d78-d124f8e3b187",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fb7b45b-f067-4003-ab55-843c71f6b038",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3edaee6-4cf4-4004-8ab7-01e11edcd266"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca71cfe7-5bcf-42ed-bade-8ec8a647d293",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46a9e64d-ed67-4994-92f4-2b9eb9705a26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "301714de-bbc4-4759-8cfa-325539d19302",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e598727c-70ab-4a30-bf32-a6733d3c4d34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ed4cb9b-7909-4c9a-851f-0e1e625cf783"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f05397fe-a8e5-4356-b60e-c375735e9337",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da38a9ef-51e5-4dd7-8f30-97b162ba333e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39a7b9c4-2d16-485d-a431-2bb1a602ca6d",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dee000b-f737-4037-a7f5-b8d214313157",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8bffd373-713e-48be-903b-5665838adb9b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cb1c018-5009-4f00-9cf7-1a7436a16dc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf30d49a-df68-4d96-80ed-0f5a1a57a3bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d7202d3-36ae-4135-9726-26b65eec2f6a",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfd18c3f-2992-4796-a991-eade87abf2a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3e482387-763f-4434-b8ce-dd3b2d697f5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27d2ecce-2b04-489e-90c5-557976a7bc53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d33b07b9-8039-48ed-b951-8699bbcd6b49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5760cc11-1805-48a7-819e-6e704ab9bee1",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f9076d4-dc4b-4a2e-ae13-831e80caf9fc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f610757e-866e-4f40-a805-dae51089557e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3784ce13-5e53-40b3-b920-162aa652c69b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "806b25f7-842d-48f2-80ca-238809553ca3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b4985a0-decc-43d8-900f-1301e4a122bc",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8299744-a243-4d2a-aa23-4a8d8570f8ff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d8f201ae-75fb-4295-8389-1854e8e05b60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff25c94c-dd22-43e3-801b-b07a215b2f27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f319821d-f6b7-45b9-b7e4-bc2008762768"
                        }
                      }
                    ]
                  },
                  {
                    "id": "191c2c47-0c8e-4815-bab4-1413155bbec8",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98635157-3169-46dd-8232-b53f76d5dc51",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "339e7b38-3228-4fc6-a8e3-9c1a392932ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccf75008-f93e-4574-93b7-91a62da78eb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c912e27-f74c-4326-ac36-fd0fc61a4969"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ab850c3-015a-492b-9232-3a51660376bc",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f871622b-ea80-4286-b3a2-1e83cd1f19aa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f1735c89-c096-4c36-b02e-e05854181c3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bf4b6cd-fe4e-400f-9550-80525b38d1ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a4d48c7-569c-487d-8c8d-81f39afd75a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e38d097-8d1b-4775-9611-a39360258440",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e78c27c3-039d-4f25-a774-5444a339b37d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2f7baceb-7bd1-4661-8526-74c07aa9c938"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "867fa9c4-d3ca-418a-b5ff-2d7b530e154f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76a3e17c-f1c2-493f-a172-32b89a0bb55b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "415d8a66-bce3-461f-9b10-22eb03aed08b",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8db9773d-536c-48f7-879f-fb0645f7d87e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7e4e4171-7555-4eb1-8a0e-2d7b0bc3a182"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2af2d0b-92a9-4b11-9e8f-4fc6caba7579",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c17e0f4e-8898-4170-8a1e-58c134468e67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c807ea7-7d1b-446a-b7b7-dffe86e0f925",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93b0e8c0-c379-4029-9ddb-7746a24d7db4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5e215fd3-20f3-4df1-8da8-39bc4ecfab25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b0ac2e6-4090-4e99-9b35-e8ed845087e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba10447e-f5cd-46e2-b6f1-e7dafdaf5b42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da9577f0-a52c-4cae-8137-1cab70364e9a",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43197d93-48fb-4ba2-a446-35b6255af687",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "673eee4a-90b0-42f1-a816-e1741399de94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa6423e6-6901-499c-9941-c152208b2c36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3020b21d-89cf-496d-b354-19ccce320fac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cf16fd7-f8dc-48ee-b497-13fdf993222c",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8312cbea-2dba-448a-8770-1de48b7f4a69",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "89ee55e3-346f-46df-ba60-11198a8bef0b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5eefbf4-63f3-45f9-8d99-185ba2096550",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cde3f9ad-13c0-4a98-8320-9f0b66c8ad2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c95a90c-3cbd-4f4f-b503-558a5e0cda9e",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb440159-ca10-44b1-8512-d9ee60787d12",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c39e6779-ce0d-43fd-8651-15ac77a2e835"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d487bd3-abc8-41fd-8a72-117e57290cae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "978b6b3a-d3ef-4577-b10d-717422d32da8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d8759bd-f7ec-41d5-af9a-4b03b8946508",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbe0aa7e-7125-4400-b681-2a59e1808f10",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f76ef5a9-f642-45be-96a0-43978f78a77b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed9a732a-84af-4e7b-a3a8-4cad3e57c06a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c44a1a4-d642-4796-865a-9841582a0037"
                        }
                      }
                    ]
                  },
                  {
                    "id": "942a055d-e498-4743-a73d-c8f83eea9ab9",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0c5b3ea-65ce-4307-b070-0480e925ea2b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "648b5174-7a2b-476c-9529-de5a0bb4036f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36f9b546-07f4-4348-9e5b-55987f27c952",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "491fdfe1-2cae-478f-b1a8-cc70a013dd96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33f5dd9a-2c4d-40c7-b6ca-d7b8851024bc",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0a32d63-6252-4aca-ae8a-b6a25b64db46",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "13fc8db6-ecb4-4e66-a099-f75d718cda7d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bf225e9-6bca-4ce1-a7bc-f43749f03947",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df332f64-539c-4d4c-8d1d-a85c3c0f4435"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35813788-44e5-42e9-8644-d62a47f981fc",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4354a12b-2aa4-4848-b510-e757f4d62165",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "87103132-f0b3-4558-90bc-ca0ffe860347"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0130d806-c90b-4cfa-b82c-4ff6a0cd5015",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83f1975a-1d66-4fc1-bb8d-97f9a859babd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "245ceb86-48e4-4ca8-bd3e-903b88b69426",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14f6a64d-9cb8-474a-b018-955dcc6ec2ac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c785ae06-93bf-47b0-81de-d0ee4ce1d92f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0247d65d-dfcd-4fee-b20c-8560a7be1f07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2566b658-67c0-4b0b-a941-b90360b45eea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c45755d5-7445-4234-bc3f-085e6570b6af",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a92b159f-345c-4710-8d35-357547ca57d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d9ffcbec-c830-4ab3-a675-3983e196a7c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93ccff22-b549-4724-b3dd-8be5bacc7f6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9454b5eb-d1a9-4f19-9082-f943d8bbb68c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0bc10f4-0697-4c2c-a1a7-f80ec959c0fb",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95a9980f-1fed-457d-a274-09eb7bb82bde",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "43b2268a-f486-4c20-9e82-e044a2e5514c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03f1bd16-0ff6-4476-8e4d-dce0bc18c3a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1da44688-d6c0-40c2-ba1c-8751cbbbe91c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2445007c-3053-4da4-98a0-1a936f20239c",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "970a4810-dd0b-4e24-b703-423c4b0d2df6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "28b465e1-846d-4ad2-bb81-8646a2faf6be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24dbef40-b455-41c1-917b-bd8943a8cdfe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fd8083c-fff2-4df7-a6ca-504cc453c60c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3094f2c1-18bf-49c2-96ba-42933a072435",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "214b965d-cc2b-48fa-bdd6-0eb12de620fd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc792d62-2d92-4f75-a276-1d37ad6caa5e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7f4b788-323b-4c25-8eed-f92f4dfc21df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92b82634-3294-496c-8f86-44f990aac42b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06b7a4e9-ff45-4d96-8bec-c5099d6f02e0",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11b7047d-415b-4a96-b51f-37bf4f6eab8e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cf35dda4-8db9-40f6-b612-46996297ba7f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c3f3597-ea78-414d-96d1-a71edc19b84d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a151f9a-a3d7-45f9-be2b-4e1f271739a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e903d728-cda4-49b6-b187-1cbeab7c8b29",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ef5a28c-9eb2-497b-938c-2829579bc496",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d37eb706-0d77-47e2-98c1-55636ab8f1d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "998812d8-afb6-451b-8f2d-9fccc47c108b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad6fba49-69f6-478f-a5ed-af598084035c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ef5aa7e-ba78-400b-9aa2-a60b0655a491",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51ffe354-bf79-4bd6-95f0-b2878cc48857",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f051bedd-4541-4216-a397-cef7d0f6e38b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dd97f83-55bb-4d60-a542-1595c36c5196",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5078dd3a-5ee3-4951-819a-cd4751b591f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da130297-313d-438d-a57f-af3f5c8bbd16",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3142196b-4faf-4f90-9ef7-3ad04f42d60f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "09a66979-89ec-4d8a-a034-a8681151dc1d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "738c2e6a-df2e-416c-a0e9-b0778663d73b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acb5b472-3ff2-4810-8bdc-824ca2aaa9dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "639681e1-951c-4dda-9357-f801ae2bcade",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ebb1268-cbd2-405d-9fc1-108ce804105e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f55f4e55-628e-4106-83f0-122761f642df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "425ed90f-a341-4d62-982e-a13b85ba3267",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "083c417b-e2b5-4d41-8435-19514a924fe6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed924e71-7f44-4d6a-be14-05f857004d08",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14c600c5-9b9e-4142-a374-a573e3ee3dca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7ddf120e-6236-4118-9030-53b961ee901e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a168409e-eb30-4e2a-8023-961f2c038ef7",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbf4e005-3a23-437a-9ecd-86bdecd98d13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7be62f92-2d9d-4389-a414-b89f3340ca6e",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67ce8afd-3295-471c-b5f3-a743b075f633",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8b9f132b-80af-40c9-9378-4160c9936cfc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a534081-13f9-45a5-95f7-8eb93ee6746b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9b66f4a-6d38-4b92-b68d-31d8a54144af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be64253b-d7c2-4c15-92f6-c9ea7d0cce79",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b93f5cf0-cdb8-4949-a123-5f93eb866e28",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "14724f7b-86d7-48d5-a591-f8f55c889311"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4d74952-c1f9-4229-9a57-64b4f5542cdb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03757311-bd8c-4e26-899f-663aa39b1ad5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5987c754-669c-4a6d-baf0-434d748cc509",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3f811e6-41f1-4273-b24e-44095140f595",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6dd117e2-ea9b-48a3-9d87-a19399d5d763"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5eca337-afc2-4953-9848-e926f58532eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9c78a56-4d69-4a15-9a6b-24e575b14a06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef7d32ea-e6e2-4360-ae4e-9ca16d45a5cd",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec6c9e5f-eeba-4193-bacd-e0b6fabb572e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f5e96a6a-8b16-456a-b5d2-bd80aa8ff1ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5eb46e5c-4226-4b6e-8414-9896b53c4d52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74e7d6de-802a-4ec1-b3de-aeaf10ce4790"
                        }
                      }
                    ]
                  },
                  {
                    "id": "326e7c4b-755e-4507-8a59-114ed80f7912",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2258f37-de67-422c-8886-0f36ebf36154",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "244ba0a5-84df-4653-90b9-f0fcc46ed52c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f08ef33a-76d6-4b6c-86f6-07ca89875a98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c31525c9-b7e1-4e8c-9984-7475f0c285ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bff81642-76f2-4ec1-a56d-544e506bcaff",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75903ee8-da96-4192-92f7-467750c03065",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b8af9561-caa5-4085-a799-58b02ad74059"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5363ca04-b2ad-477e-98bf-acf6e7d75a5c",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0191909b-f018-4517-bbaa-e5ace48c3f36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "123289d2-1e2c-4929-a5a6-f013e0384e42",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae241b1e-9a19-4024-85f2-c9cdb6e7bc05",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9c47415c-60aa-4a60-b193-dd545a26bae1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "568428d7-5709-4996-9131-615685919473",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bafe301d-2974-4a04-8ce3-edc518e4a998"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d0117ab1-58e7-4232-93f4-bc7bcd1857ea",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0fc438ef-6ac2-4fa4-9c7f-6840a2e30917"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "590d96df-89be-4268-aabc-727146971ac5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bf6eb6ad-cf05-42c1-9d27-210551c19602"
                    }
                  }
                ]
              },
              {
                "id": "12e4f11f-caef-411c-853e-945cd5ebc9d2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f63b565f-267f-488a-841b-e8eab6d4e159",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "839c25c2-ae87-4ee7-a71c-a74a4782b147",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "425bef49-22c6-4f49-82ae-08f17573f026"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2916ca02-82cc-4d40-92bc-254b561242bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "62bceda4-efb6-480a-a81a-4e0d366dea1e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e40e0ac4-e6bd-4f02-8397-614145633663",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "71e649e6-bc90-465d-a92c-4db6c23aae2f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6765c1b8-e4d1-4584-8c76-cae566271ff6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bd2926f6-78d3-453a-a7c3-e21c4aaaf18f"
                    }
                  }
                ]
              },
              {
                "id": "0e4a0986-89d5-4ac2-b221-15326afe11a6",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "b8eacba7-c18c-45fb-a20b-926c1b2829fa",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69df3556-37bc-4dc6-87f3-0707998eeecb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "67345446-ff6c-4ebd-976d-3068f463d894"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7c3dc06-68b2-4309-9552-decd9ab3c9d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b30e9b63-05e4-48cd-9dc1-15c371b64706"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "9c1a4389-801e-40bf-b0a3-92c0e9b8257d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "853cfb0d-233e-4505-9131-b1d328edff35",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f0842c7d-3b82-4f9f-895d-c84dcf0e8163",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "0149fc88-d629-4f00-80a1-006a5082f307"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "faeff62d-86d9-4bd9-88e8-b2340030c8be",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1935934c-1c1b-4fd7-be07-9f3a4d396b57"
                    }
                  }
                ]
              },
              {
                "id": "48f7cbbf-f718-43dc-90a6-4865790bf264",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b0c69b84-bd2b-46b2-88aa-0ae2d06caf03",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "ca19612d-6dbc-4a0b-9ecf-d41352a21279"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8f3e498b-8f0e-450f-80f5-6c419a232e66",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d94b1a27-2e9a-4e4b-911b-6179a0f9c957"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "99fa4d5d-e073-4b70-95bd-8630d0827d0c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "bde3f3a2-7bfe-48fc-8ba2-ff98ac15bcb9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "47b14114-3e9e-4bec-a87e-cd0bc3301e5c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "47ad28a6-144e-43cc-b437-d19c898e024e"
            }
          }
        ]
      },
      {
        "id": "9e7eacf2-9d0e-4f56-aed6-4cb23817e370",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "cea14758-07a1-43ea-ac83-75bda7fc67df",
            "name": "Negative Testing",
            "item": [
              {
                "id": "dda50efe-e651-4e73-83f9-78b074cdf828",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2ec971f2-4b72-4b86-8626-d66f277a275a",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad3aefb2-5aee-44ba-8828-976a6d8b7d02",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "28e88ff5-a88a-48a3-a9e6-16bc2349bed8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1256a58d-9bd1-4297-927b-7c8d939eeb80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "aa4d71be-c76a-4bf6-bca9-ea43c7c426b5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "be14db2c-6a1d-4780-af73-f493b1109744",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8d34fc6f-ef4b-496a-8d0d-965adc32593b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cc5287ac-ea46-4bc7-a5d0-8cfa9d98578e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5e2ab99d-d399-4727-a5fc-f6baeccf7d18"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "10975855-54b6-4222-8158-02396d725f9a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "15385948-a8dc-41e2-9037-75342c5c32b5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b92301b0-aea6-4783-9291-de64c472ecfe",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0efedecb-32ba-4495-b685-8e2b81d5d5b3"
            }
          }
        ]
      },
      {
        "id": "c520e9bb-1737-49ed-a394-24f34d7e9e36",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "3c96a8d5-d9eb-47a6-96e2-2ffad6583def",
            "name": "Negative Testing",
            "item": [
              {
                "id": "27e82a11-2291-4c14-a693-cc84c6e548bc",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ef0d5c47-3134-4783-a69b-84b01fd9e6d9",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e2c7cd9-daa6-4031-aa2b-55c337072aeb",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7ce2be98-ed95-4544-a857-62dde0befa95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da44b81a-5c30-4cb1-b284-292a0ce43916",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fde0814b-8ae8-4f95-8489-7c49c3e0c001"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d94fd99a-0931-4afd-8ca1-93d0645ab33d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "61db47cb-b669-4404-98c4-08b4333f5f92"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9ac4930b-6611-4d2a-971c-b309ae693dd0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "003ff80a-0ae4-44e6-8d9f-fdc42f3be0bc"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5be57ae4-c406-4731-80a9-0996b0bbd7c2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "762eb54a-25d0-437e-abef-c3e6d47614fa"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ea9149ac-2349-46bb-9434-23ec486e789f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "382a9fdc-70ee-4448-88a9-1efb3dc89319"
            }
          }
        ]
      },
      {
        "id": "be709560-794b-4b2b-be86-d45f75ae5171",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "4fb64074-1a90-4b01-9168-3741b04165db",
            "name": "Negative Testing",
            "item": [
              {
                "id": "20f5fdfe-fb50-4ab7-a4dd-a8f7707a15fe",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5d29e77e-991f-4d49-aa33-fde73641ac1d",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c00cb0d-594c-484a-bfa1-67a2196e48b2",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "22931c7e-959a-4bf3-817b-62446f9c4d6d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "caed5d7d-f31e-4428-9954-8aad6a6435c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a5d61eb1-e68f-4028-a60e-161ded171b3f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c09b0cac-01dc-4e64-b71f-8569609d6f7e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "50012ccc-aa75-4827-ae13-e2be8a51afae"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "eb1522ca-3072-498a-821b-9cc7049be79b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b3e1efef-d412-45d5-b629-e8708130d32e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "beab6053-9735-4110-9385-5d002e8e8c15",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "81fc7647-62f8-4ea4-bb3b-f6678f672ce1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "031c2757-8771-4d91-875b-1a38c50172b9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7fc35e40-93e8-4b70-8588-cf4e0f10a107"
            }
          }
        ]
      },
      {
        "id": "01307cc1-81e3-42cf-8a52-ab139d750bd7",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "978b9128-b803-43f3-ab80-180a0bcfd65b",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "21161e1d-5f16-4b17-b5b7-f2b14e0a5fe3",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "1d5d623d-9411-4e5e-9670-7a7bac940b2f",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "310245a5-9197-48dc-a4c6-425e41ed7eb0",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "92ab2a82-c06d-40e6-afd5-2cab91651c87",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 71
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 69.33730158730158,
      "responseMin": 11,
      "responseMax": 755,
      "responseSd": 86.66090478477248,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1718239083566,
      "completed": 1718239109270
    },
    "executions": [
      {
        "id": "625ac645-44b8-47f5-b8c6-a1b1dd4852c5",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "89030bc8-8d05-4947-8567-7f1550eb0753",
          "httpRequestId": "1439d951-2508-450b-bc8a-3ef429c7bef7"
        },
        "item": {
          "id": "625ac645-44b8-47f5-b8c6-a1b1dd4852c5",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "9cb8add3-3c9d-438f-8bfa-0553cbe977ae",
          "status": "OK",
          "code": 200,
          "responseTime": 60,
          "responseSize": 0
        }
      },
      {
        "id": "bd5ad012-34f8-4ad2-9480-d32beb1f262d",
        "cursor": {
          "ref": "47b670cc-0700-48e6-971c-bebb45df5ecd",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "cffec979-8219-4688-9e44-407a4a5b7c01"
        },
        "item": {
          "id": "bd5ad012-34f8-4ad2-9480-d32beb1f262d",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "c9a9d790-f687-4591-a56b-48688555859d",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 0
        }
      },
      {
        "id": "d82b6cd3-b7f4-43c1-b3f1-19480451f081",
        "cursor": {
          "ref": "bf802cd5-21ee-4ad8-8df9-426ea588e579",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "dcf40707-6d20-42c3-a0c1-a35a42fd607b"
        },
        "item": {
          "id": "d82b6cd3-b7f4-43c1-b3f1-19480451f081",
          "name": "did_json"
        },
        "response": {
          "id": "f053be9c-b09c-49d2-9aed-4806c1c45ac4",
          "status": "OK",
          "code": 200,
          "responseTime": 284,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35feaa6d-1779-4f10-ae67-558d3de5cfd9",
        "cursor": {
          "ref": "ec6db9d3-a153-4a5c-a900-4febe385cb2d",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "df0d4280-9661-44fd-b4de-0cf68bd3ccb5"
        },
        "item": {
          "id": "35feaa6d-1779-4f10-ae67-558d3de5cfd9",
          "name": "did:invalid"
        },
        "response": {
          "id": "9013e535-f911-4bb9-8878-0c821b528fcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 230,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35feaa6d-1779-4f10-ae67-558d3de5cfd9",
        "cursor": {
          "ref": "ec6db9d3-a153-4a5c-a900-4febe385cb2d",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "df0d4280-9661-44fd-b4de-0cf68bd3ccb5"
        },
        "item": {
          "id": "35feaa6d-1779-4f10-ae67-558d3de5cfd9",
          "name": "did:invalid"
        },
        "response": {
          "id": "9013e535-f911-4bb9-8878-0c821b528fcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 230,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c1754f5-d8c7-474d-84a1-ed64484c342d",
        "cursor": {
          "ref": "8b2a7802-12e3-4016-9c12-cebb468a6b08",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "b8449965-5c48-4dfc-96f3-1f2a3da006ae"
        },
        "item": {
          "id": "7c1754f5-d8c7-474d-84a1-ed64484c342d",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "72551f0c-d6c7-4a31-887f-24bdb29e36ca",
          "status": "Not Found",
          "code": 404,
          "responseTime": 313,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68df2dad-d9fb-4a2c-8366-82290f99b0e3",
        "cursor": {
          "ref": "24f3674c-c688-4ca2-a2d5-83013a1b4dd1",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "6dcd765a-ba27-4bea-a3fc-a69e13bd6c72"
        },
        "item": {
          "id": "68df2dad-d9fb-4a2c-8366-82290f99b0e3",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "178ed03a-78c0-426f-aea4-f63de8740294",
          "status": "Not Found",
          "code": 404,
          "responseTime": 40,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b517e077-21ed-4f38-98b7-870ec098a5e7",
        "cursor": {
          "ref": "738b61a1-8702-4f4c-a50c-0a5c4983eca8",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "bf302301-a19d-4562-ac9c-be1d187f1630"
        },
        "item": {
          "id": "b517e077-21ed-4f38-98b7-870ec098a5e7",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "cba04867-d355-4118-8d78-612213b42f88",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 27,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a170aee2-799f-4a3b-a342-5ed94928d7bf",
        "cursor": {
          "ref": "1ff859f2-f0b1-47c3-ae82-bedf0fbcfa4e",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "317e6647-5439-4f40-8f7f-4c8cb58745a9"
        },
        "item": {
          "id": "a170aee2-799f-4a3b-a342-5ed94928d7bf",
          "name": "identifiers"
        },
        "response": {
          "id": "388ab068-4194-4ff1-946a-bdc1b03aaa8f",
          "status": "OK",
          "code": 200,
          "responseTime": 91,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d13cdba2-8276-47fb-9266-794e5180b006",
        "cursor": {
          "ref": "e3d3b287-2158-4233-9f85-cb6ba87fb81d",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "227e2237-57fa-423a-b156-a69a7b44d7aa"
        },
        "item": {
          "id": "d13cdba2-8276-47fb-9266-794e5180b006",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "dd000d96-9cc6-4d5f-a0f9-be8bd7ff685d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e743a3c1-ffcf-4c9d-9c44-dd5262d0b1de",
        "cursor": {
          "ref": "1796f4e9-b3e7-46f9-a1a5-cff7263948d1",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "afcc107c-a675-4292-8b8e-7e17da2ee89b"
        },
        "item": {
          "id": "e743a3c1-ffcf-4c9d-9c44-dd5262d0b1de",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "e1249673-1d45-4b1e-81a5-3c854db6e14e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "977b7c1b-c8e2-4d3c-916a-7877727c0f5f",
        "cursor": {
          "ref": "4afcc1e8-b346-4bfb-8372-3338c871e81d",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "0d9416de-138f-4c55-adbf-f884ce3f66eb"
        },
        "item": {
          "id": "977b7c1b-c8e2-4d3c-916a-7877727c0f5f",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "89884310-cbdf-4fa6-81d5-cfcfb4d9b09c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0037a7b2-1cbc-4813-bd69-93f6cea4329f",
        "cursor": {
          "ref": "195f118a-b7cc-48a5-94b8-484f35716daf",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "2947b2df-f404-4688-bf89-ef63a13b117b"
        },
        "item": {
          "id": "0037a7b2-1cbc-4813-bd69-93f6cea4329f",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "aae34b90-9154-4a8e-b180-e859bea4e8ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6105aedb-5c45-4046-897f-050a5ee32e20",
        "cursor": {
          "ref": "b410872d-0e5d-4703-bfc3-270c18a1c170",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "1be10f73-d637-404a-9100-0ac0c7320851"
        },
        "item": {
          "id": "6105aedb-5c45-4046-897f-050a5ee32e20",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "010fd597-57e0-4c81-b773-207e00d06dcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7079a5b3-b938-4fcb-b4f2-123426554c6d",
        "cursor": {
          "ref": "9681a233-7d90-4286-abef-89dc948da8c6",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "3a0e059b-b972-48ae-8155-83c7e15a871e"
        },
        "item": {
          "id": "7079a5b3-b938-4fcb-b4f2-123426554c6d",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "678e9115-ddd0-4346-b8a1-c9750cd915b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0bbf5c3-affc-48bf-b0f1-47d46c24ea34",
        "cursor": {
          "ref": "b1377be4-95b8-4a67-8c83-7dcfdb1dd4d6",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "c77b93db-2d29-4ce0-936c-4b38cd23a4ad"
        },
        "item": {
          "id": "e0bbf5c3-affc-48bf-b0f1-47d46c24ea34",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "142b25e2-c043-4421-9604-020d7c302d5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5f51756-820f-44f2-b84d-9bf481a2ef6e",
        "cursor": {
          "ref": "f5a92e76-9c04-4a0e-97e5-cc7238ef4bb6",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "62cddf9c-c80a-4245-a21c-31fe42af1470"
        },
        "item": {
          "id": "c5f51756-820f-44f2-b84d-9bf481a2ef6e",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "a6722ddf-439a-4833-8e12-58fca10720c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4395bd0-a493-4c2f-a095-be56680ccabf",
        "cursor": {
          "ref": "da26530f-f003-4f25-9548-54ef176522af",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "25f198c6-72f2-49ee-96c6-d0e0fbc0f26f"
        },
        "item": {
          "id": "c4395bd0-a493-4c2f-a095-be56680ccabf",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "c6a34031-5f9e-4550-ab40-7f2ddcd70dc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5acd2cec-a65d-4c96-9034-6c387151897a",
        "cursor": {
          "ref": "d540e9b6-7349-44ad-9da2-a1dca67672a7",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "2a6bcd1d-18d9-4b2a-94ce-9ad3a17bcb26"
        },
        "item": {
          "id": "5acd2cec-a65d-4c96-9034-6c387151897a",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "c97ca9cc-1845-441e-a0be-63d09d0f5a66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56cb8a2e-be31-4b81-9fb6-37bdd73ae615",
        "cursor": {
          "ref": "280d7d0d-428e-42d3-897c-4db45e4b8b7e",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "778dc87e-fdaf-4187-85c0-936f5722aeac"
        },
        "item": {
          "id": "56cb8a2e-be31-4b81-9fb6-37bdd73ae615",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "28913ecc-5a70-4e54-bea2-b8027f78c987",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1660b3b-e4e6-4213-8e62-6fcd0d436f35",
        "cursor": {
          "ref": "f1733912-6dda-47f9-9d52-e9f8eb22b771",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "78abfaef-8741-45ec-8cb0-04ce8e832edb"
        },
        "item": {
          "id": "a1660b3b-e4e6-4213-8e62-6fcd0d436f35",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "e09b2847-a091-4f95-9201-3053a7c57c28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d180eb14-b5e3-475d-8025-7371a9c7900d",
        "cursor": {
          "ref": "399a563e-6d8a-4801-805f-72b76feb39f5",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "ce9c432b-bd94-4ab7-8d9a-be7ff430198c"
        },
        "item": {
          "id": "d180eb14-b5e3-475d-8025-7371a9c7900d",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "3ccfb68e-01f1-42e8-b6ab-4cc9bb595530",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd0c64ae-11a5-4fa0-a30b-635e1dbd5e49",
        "cursor": {
          "ref": "189f71d0-0b13-4338-a630-c6903a664122",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "1759b9ce-8f2e-4714-82d3-46c554b44aae"
        },
        "item": {
          "id": "dd0c64ae-11a5-4fa0-a30b-635e1dbd5e49",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "9e1ca2ba-18a0-45c5-bfdf-d0e83246506e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac5d789f-d3fc-44f0-9f30-513207f8ba36",
        "cursor": {
          "ref": "9e220764-87f8-4a6f-afb9-424cef0da3fe",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "193570bd-822a-4741-8521-0b5b5735acec"
        },
        "item": {
          "id": "ac5d789f-d3fc-44f0-9f30-513207f8ba36",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "f2809e5c-c5fc-43df-95a9-e3235dbdb0c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a1a86ed-60cc-4ca9-be5b-a4b416569cf0",
        "cursor": {
          "ref": "c53bb25a-da40-4ff0-ae43-1023c1a35fc0",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "3aa6a9ff-29f8-4898-9aea-fbfc73646082"
        },
        "item": {
          "id": "4a1a86ed-60cc-4ca9-be5b-a4b416569cf0",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "438af1ce-6f7d-4869-9f3f-510e0c09f32a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bb97595-1947-459d-b5f6-e8c0ea296985",
        "cursor": {
          "ref": "8af1a095-2a3b-43aa-9fd5-8ea0d94d2c9f",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "84258ecf-7584-4cdd-86ef-e4929724122a"
        },
        "item": {
          "id": "3bb97595-1947-459d-b5f6-e8c0ea296985",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "0e92c475-d503-4ec4-9086-06bbce82bcd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e5c830f-42a0-46f6-b252-8d5de7092919",
        "cursor": {
          "ref": "018668ac-cee4-4e86-b28a-7ea6d0ea335f",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "63d3facd-9f50-4219-bdc4-eb0c33c77ae7"
        },
        "item": {
          "id": "5e5c830f-42a0-46f6-b252-8d5de7092919",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "bd8e765f-b57c-4717-b7f6-f3fcf461f571",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5dda891-917c-472f-b2ce-86667aaeaacc",
        "cursor": {
          "ref": "1e9d01f7-bfcf-4538-9af2-73e91fb33d6d",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "d8ec15de-b0e5-4075-bd7a-b67ce886f717"
        },
        "item": {
          "id": "a5dda891-917c-472f-b2ce-86667aaeaacc",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "86c2a185-647b-42de-bf40-e46f4615098f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84dfbd57-fbc2-402e-a05e-1aa7d3b27ab4",
        "cursor": {
          "ref": "fc10e8f4-650d-4740-a0ff-34bb60e50042",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "41fa2de4-957f-4a29-ad32-ba1bee878a81"
        },
        "item": {
          "id": "84dfbd57-fbc2-402e-a05e-1aa7d3b27ab4",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "109f94f6-373c-43b3-9b63-829aefa11db9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b836dbd-69d4-4a0d-a159-18951deb6fd5",
        "cursor": {
          "ref": "25d30ed9-6ae7-410e-b73d-7545622b0f9f",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "7832c71b-b58c-43e4-a6ab-1f9526759c7d"
        },
        "item": {
          "id": "1b836dbd-69d4-4a0d-a159-18951deb6fd5",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "ec19b0c5-75c9-4834-9991-afa7b31887b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3368d71b-f17e-4a52-8680-9018f2eb51f6",
        "cursor": {
          "ref": "e5c64675-360e-4a1f-bec2-9a53b4df98e7",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "52d1db9a-f9da-441f-9e32-749621c20a36"
        },
        "item": {
          "id": "3368d71b-f17e-4a52-8680-9018f2eb51f6",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "57f6d566-8d3f-43f9-9989-8880c0419ee5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1000876-fbfe-485a-9203-31e7c456fa19",
        "cursor": {
          "ref": "bf912dbf-f0f3-407f-8690-c4c1cf41a38e",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "1bb518bb-6225-4a36-9cd5-663174603837"
        },
        "item": {
          "id": "f1000876-fbfe-485a-9203-31e7c456fa19",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "1dedf1b8-4a98-4310-9f36-babaeed6b1e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfa8e8ef-cebb-40b5-95a2-d82cce23c6f7",
        "cursor": {
          "ref": "49b9b021-bbad-41db-bd17-30cffc4cef3a",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "fca5828e-f21b-4918-a3f9-396e5f5d911e"
        },
        "item": {
          "id": "bfa8e8ef-cebb-40b5-95a2-d82cce23c6f7",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "25e281b7-eec9-4f86-bfee-b2056c533ebc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c40ac345-8fa8-496b-9c30-a12ffc7c6f9e",
        "cursor": {
          "ref": "3bcc5a79-082e-48d5-a596-7d81204a1c21",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "7228354d-cf2c-4513-8a9a-a5e1c8506acc"
        },
        "item": {
          "id": "c40ac345-8fa8-496b-9c30-a12ffc7c6f9e",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "51a9a435-6797-4fe5-b58c-00b38858330c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e298a22a-90e3-446c-9900-45b2355ab76b",
        "cursor": {
          "ref": "b9140abc-d6e3-4c31-8847-6859a44b7c20",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "52674e8f-c58a-4f3d-8cf6-71c893f03ffc"
        },
        "item": {
          "id": "e298a22a-90e3-446c-9900-45b2355ab76b",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "9aaeecea-c4ca-47af-bada-099f994512f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42b68906-20bd-4bcf-8ef4-8018ad0fe47a",
        "cursor": {
          "ref": "3ef34f09-f07a-4ab8-ac49-60c389710afb",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "7b4cab5f-ca48-4165-963d-f45480514a81"
        },
        "item": {
          "id": "42b68906-20bd-4bcf-8ef4-8018ad0fe47a",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "12506aec-9fef-4b2e-afce-7b0d1cfaff67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6458e157-1309-4003-ade9-4cbee45f2224",
        "cursor": {
          "ref": "fcacd870-d0d1-4d1b-9b13-d3d4dfa08481",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "ed9cbded-0962-4e71-9e2a-57f4abac52f4"
        },
        "item": {
          "id": "6458e157-1309-4003-ade9-4cbee45f2224",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "b764e5dd-ff91-4efe-a6d5-6074b4b3e850",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b50e47c-8aee-4e47-ba13-e9adfa067b43",
        "cursor": {
          "ref": "d1ade5e7-ceef-4e07-a1d2-99dcc81fa1a2",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "e94b459a-e83a-4044-833c-fea0859e0889"
        },
        "item": {
          "id": "0b50e47c-8aee-4e47-ba13-e9adfa067b43",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "98dc2e94-7160-4b2c-a97a-0d8e56635f52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e0e81d0-782e-4d07-92c4-7faece1a2da6",
        "cursor": {
          "ref": "2fec9812-6e6e-4c22-86c1-dca68d908418",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "3244c951-96c4-47eb-a83d-42977c129f59"
        },
        "item": {
          "id": "8e0e81d0-782e-4d07-92c4-7faece1a2da6",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "7924019b-e747-49be-a29c-dd3da0934115",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e808488-ce55-4772-bf4c-1dd1b2f0c2e4",
        "cursor": {
          "ref": "a9ec21dc-b7c5-4c13-9557-cbbaafc86bd3",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "beeacd50-41a0-4908-97bf-133911f2bc78"
        },
        "item": {
          "id": "3e808488-ce55-4772-bf4c-1dd1b2f0c2e4",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "dc73acf5-08d5-496e-9d8e-8f7a08766634",
          "status": "Created",
          "code": 201,
          "responseTime": 755,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "6baf072b-ea3b-4523-9fd3-b3f9e623b904",
        "cursor": {
          "ref": "f1832857-bba2-4af0-8fae-4ed5d749682e",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "8fed98bf-4a3a-4463-a294-3220c052b24d"
        },
        "item": {
          "id": "6baf072b-ea3b-4523-9fd3-b3f9e623b904",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "a6b0da5a-f94e-4c2d-80eb-6503b87757d0",
          "status": "Created",
          "code": 201,
          "responseTime": 316,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "e418d475-7c05-4a2a-ac20-2fd407f1837c",
        "cursor": {
          "ref": "23330054-fe0e-4d8b-9506-3dfb6398a7e6",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "ad1e2829-2355-4e2d-9161-4445767c1af2"
        },
        "item": {
          "id": "e418d475-7c05-4a2a-ac20-2fd407f1837c",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "6bbcc7ae-eced-479e-b5fb-77d7a8ac9e63",
          "status": "Created",
          "code": 201,
          "responseTime": 277,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "d3f8ef56-9075-43c3-8d6a-bc43ce556a4a",
        "cursor": {
          "ref": "44d52bfe-7632-4c06-88e8-cf7e84a83393",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "fb9efc22-0cd8-41e5-8387-c601afbe67e2"
        },
        "item": {
          "id": "d3f8ef56-9075-43c3-8d6a-bc43ce556a4a",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "eb8e2631-c75f-4dbe-9144-5935205a4c2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec0c45d8-4310-4b9f-ac23-e85580a168cd",
        "cursor": {
          "ref": "e0340461-c0b4-4042-b900-3d5c926b2449",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "0bc8b4e6-5779-4c52-a177-724861ece734"
        },
        "item": {
          "id": "ec0c45d8-4310-4b9f-ac23-e85580a168cd",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "e7a48aaa-6de2-41e1-87cc-deca7aa18b40",
          "status": "Created",
          "code": 201,
          "responseTime": 283,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "12558147-d508-4f0c-9fce-fca428e67e60",
        "cursor": {
          "ref": "60c7c600-edec-472b-9e10-b3d6d3f4c716",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "27a48ba0-54fa-42ce-9dc2-cf352ba69255"
        },
        "item": {
          "id": "12558147-d508-4f0c-9fce-fca428e67e60",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "ddaa5170-e13e-4735-9452-d2e9cbb86204",
          "status": "Created",
          "code": 201,
          "responseTime": 275,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "ff89c6e9-496b-4db3-9999-0b65f6d05da7",
        "cursor": {
          "ref": "d7c36b0d-ecf9-46eb-8f39-8b00bef66514",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "a28ddcdf-6930-4cb4-9ac0-da407884e491"
        },
        "item": {
          "id": "ff89c6e9-496b-4db3-9999-0b65f6d05da7",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "34644b61-8790-4660-9944-46c9f14303fb",
          "status": "Created",
          "code": 201,
          "responseTime": 270,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "b5d43824-f442-4619-9436-95a4c8c5cc43",
        "cursor": {
          "ref": "aa1e1be7-6462-426c-a374-cfeb406aa09b",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "332d7f59-702d-42fc-b4cc-8b4ac773a1dd"
        },
        "item": {
          "id": "b5d43824-f442-4619-9436-95a4c8c5cc43",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "b9eb0e74-1887-4152-94f9-752116cad50d",
          "status": "Created",
          "code": 201,
          "responseTime": 268,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "d57abb69-683a-4951-b312-0e7c91787991",
        "cursor": {
          "ref": "0408dd9b-3bc8-4d8c-982d-7992c84b2716",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "d0e5fd8c-1213-455a-b6fb-022d50e91ec9"
        },
        "item": {
          "id": "d57abb69-683a-4951-b312-0e7c91787991",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "775eb83a-b46f-4c9b-9f9b-469ddc2b0420",
          "status": "Created",
          "code": 201,
          "responseTime": 262,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "83d9e500-c3f9-4e58-aaa7-7e03ab2720ce",
        "cursor": {
          "ref": "ffcacf90-0088-4b23-8ecc-fa5e7b3734ae",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "885986a6-aade-42c6-a047-fe3b191dbc37"
        },
        "item": {
          "id": "83d9e500-c3f9-4e58-aaa7-7e03ab2720ce",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "b3803b42-d0c5-4b3e-8db0-0d765b6e7ea1",
          "status": "Created",
          "code": 201,
          "responseTime": 290,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "e1367f65-554e-4ee2-8419-044c11edb4b3",
        "cursor": {
          "ref": "72ccce6d-1c05-464a-bbd4-3b9b8243d426",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "9a785381-dd07-42ce-8f5b-d9937b3d3e99"
        },
        "item": {
          "id": "e1367f65-554e-4ee2-8419-044c11edb4b3",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "a21c7754-2585-4fc8-88ac-6a875e2955fa",
          "status": "Created",
          "code": 201,
          "responseTime": 255,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "9e968e60-0677-4052-965b-d402b60d5644",
        "cursor": {
          "ref": "094a24f0-1923-4db3-80b3-8c396cfff806",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "f1deb70a-ebe1-4a5b-8e14-9d9ae4f37c62"
        },
        "item": {
          "id": "9e968e60-0677-4052-965b-d402b60d5644",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "bc289c71-1c05-4ccc-b0b0-7135b3ce7696",
          "status": "Created",
          "code": 201,
          "responseTime": 253,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "0f5f8b1d-948a-40e9-b1b9-bf6c98a406ec",
        "cursor": {
          "ref": "9f2eb90e-0935-438d-abfd-a9fb62d18538",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "117c8f21-f094-4485-b6a9-c502b8b0a7f5"
        },
        "item": {
          "id": "0f5f8b1d-948a-40e9-b1b9-bf6c98a406ec",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "431e7d96-595c-4b84-9e52-2760baff8732",
          "status": "Created",
          "code": 201,
          "responseTime": 295,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "359aa279-43a4-420b-8939-7a27a26f55b5",
        "cursor": {
          "ref": "5797d7eb-7440-4acc-985a-d0a46376326a",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "1f43ab25-1eb8-4770-9d02-66e04d84ed09"
        },
        "item": {
          "id": "359aa279-43a4-420b-8939-7a27a26f55b5",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "be155843-5a0a-473f-9e6c-7466386513de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86e3f569-1231-46a6-a79b-7d69f5a981d8",
        "cursor": {
          "ref": "43c418ab-b4fe-42de-a24e-f2066bf6feb0",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "0fd0482f-070e-4216-af65-921f8e42d801"
        },
        "item": {
          "id": "86e3f569-1231-46a6-a79b-7d69f5a981d8",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "a4a5c343-5fa2-4830-bff0-777ae9e9e908",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79e9e333-77b8-4968-ac63-3c95b0c32d09",
        "cursor": {
          "ref": "5e8ae571-f82a-47a7-a5ab-daf30583337f",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "5ae05062-b04e-45ae-9116-b2472266f7f5"
        },
        "item": {
          "id": "79e9e333-77b8-4968-ac63-3c95b0c32d09",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "4680911a-69e9-4da9-ac34-2543e76aa435",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "805a8fb8-053d-4090-9d65-d2398639c530",
        "cursor": {
          "ref": "24705572-8723-47b0-a0a1-82ea1e100566",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "fcb627c1-9748-43fb-b463-a2f8c97e59c9"
        },
        "item": {
          "id": "805a8fb8-053d-4090-9d65-d2398639c530",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "757e7a2d-7040-48cc-9785-9e466f7d8f38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55d0f2f4-31b3-4fe5-9e4e-b290a7a7d8f0",
        "cursor": {
          "ref": "f2463293-ebbf-4d55-b0c0-20bd9adf68a3",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "13b09155-fc6d-462a-8778-bd781eddc279"
        },
        "item": {
          "id": "55d0f2f4-31b3-4fe5-9e4e-b290a7a7d8f0",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "41f5ffe0-c6d6-4581-927d-cf0d341c7717",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "077e413b-af36-4e18-8164-e6a86e9ceead",
        "cursor": {
          "ref": "0f52383f-8bf8-4e43-8c28-b207a3b43e68",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "0c7c9809-f36a-4bed-b027-47475a52748d"
        },
        "item": {
          "id": "077e413b-af36-4e18-8164-e6a86e9ceead",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "4913b632-26bc-4473-9647-5ff7b2d79e55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e313b219-bae6-4cc5-a948-718b380642d4",
        "cursor": {
          "ref": "1c5974b7-7dd7-4e8d-9be5-dc4adfcc7662",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "75fe6146-063b-4afc-b0f0-1b71aa2224d2"
        },
        "item": {
          "id": "e313b219-bae6-4cc5-a948-718b380642d4",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "8725ff9d-2354-413e-8242-0e0470eb2c49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d57ea89-9d78-4110-9aa8-da1b2dc13d5a",
        "cursor": {
          "ref": "bad1583a-6183-404b-b3cb-e6bf6b9023db",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "880a49e7-b5dd-4850-9629-4418943108d5"
        },
        "item": {
          "id": "1d57ea89-9d78-4110-9aa8-da1b2dc13d5a",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "097e8ed7-ff71-467d-b973-bdb8805a9818",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c36f4fd-fd12-4e09-aba2-e27a0f874f67",
        "cursor": {
          "ref": "1466d4c9-3e52-4b73-b3c3-d01a749ce02a",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "ec828a49-beb8-49de-8e68-7b7bb4df5755"
        },
        "item": {
          "id": "6c36f4fd-fd12-4e09-aba2-e27a0f874f67",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "ea88284c-784e-4158-b24e-10a9b7130526",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9605e4f1-038a-4d23-a066-d6ae89ac3f63",
        "cursor": {
          "ref": "0d46bf90-33ab-430f-8aa7-157b7be0199f",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "453c1beb-1a14-4c66-9bb0-38aca3fe9b6b"
        },
        "item": {
          "id": "9605e4f1-038a-4d23-a066-d6ae89ac3f63",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "baa1e8d3-dd62-40f4-a5bd-72051199841a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9b286fd-0902-4b4e-bbdb-3f6816c7a429",
        "cursor": {
          "ref": "6764ac9b-f423-4617-b70e-f7dbbdce108b",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "b8eb8101-719f-4eb4-8b6d-7fd38279ae2b"
        },
        "item": {
          "id": "e9b286fd-0902-4b4e-bbdb-3f6816c7a429",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "1c2855cc-5cdf-4307-a62d-ddad5ccd9b3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80776330-f50f-45fe-ab77-8ccb98fd581f",
        "cursor": {
          "ref": "f6b57974-0915-4e3a-aec4-c0f0b97706b9",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "a4ccc1fb-be16-43f4-a636-0a6652af25e2"
        },
        "item": {
          "id": "80776330-f50f-45fe-ab77-8ccb98fd581f",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "80620451-976b-4d47-8013-c65ee8f81769",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2857038-686e-4848-99f2-287c6f12f254",
        "cursor": {
          "ref": "5b3e3ccb-4753-47c1-8329-11e5dc34e2b3",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "7096fb86-2570-4e64-a36b-91a589b308ff"
        },
        "item": {
          "id": "a2857038-686e-4848-99f2-287c6f12f254",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "01ec3de8-3ca5-472c-912d-076af3db3828",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dfce62e-82d6-46c0-be6d-1178ade3f5fe",
        "cursor": {
          "ref": "226c9560-fb14-4fe2-856b-c52217dd1eab",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "b5f7adcf-8ebd-470d-a872-ad3e3c9ad9fb"
        },
        "item": {
          "id": "0dfce62e-82d6-46c0-be6d-1178ade3f5fe",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "9c3beef2-193f-42ae-972e-f4a506ec1dcb",
          "status": "Created",
          "code": 201,
          "responseTime": 289,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "eddd37fe-05fe-4002-a3d2-3878ac0fb67e",
        "cursor": {
          "ref": "1e9ca144-1224-4074-a524-81650e6f5411",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "b9485bd0-e5b1-4463-9c31-a191d3e34fc7"
        },
        "item": {
          "id": "eddd37fe-05fe-4002-a3d2-3878ac0fb67e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "971e2bdb-5653-4859-b48e-72eea832fe7f",
          "status": "Created",
          "code": 201,
          "responseTime": 288,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "206dd57a-4874-4d63-92da-d37f2864e850",
        "cursor": {
          "ref": "c1f395e1-5dee-459c-b9e1-78e59a7efa44",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "dbd18985-1755-4b7b-a873-9c7f1e4e1e25"
        },
        "item": {
          "id": "206dd57a-4874-4d63-92da-d37f2864e850",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "e51ba2fe-aab7-49ed-b641-a3bfe0229028",
          "status": "Created",
          "code": 201,
          "responseTime": 281,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "3b0a7498-c916-4b98-afa2-2a58806d47be",
        "cursor": {
          "ref": "1da0b139-aaa1-45e9-8835-608ff35f98db",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "ce96953a-eb42-4394-ba31-ee223e68fef2"
        },
        "item": {
          "id": "3b0a7498-c916-4b98-afa2-2a58806d47be",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "6263e00b-ae0b-407b-a94b-88af881cb8be",
          "status": "Created",
          "code": 201,
          "responseTime": 272,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "07ef064a-a8a7-46f5-bc27-00868f8219c8",
        "cursor": {
          "ref": "2cb80394-99e9-40b9-bd87-c82d488551e2",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "b609a6aa-6206-4387-a24e-996a66722622"
        },
        "item": {
          "id": "07ef064a-a8a7-46f5-bc27-00868f8219c8",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "ab863cec-0a1e-4051-963c-e46446e150ab",
          "status": "Created",
          "code": 201,
          "responseTime": 285,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "2aa02fe5-992c-408c-8429-ccb5378ecba6",
        "cursor": {
          "ref": "5a4a471a-03c6-4b44-8a1d-a9c64bb97e2f",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "c25c32b9-97c3-4588-b6c0-6d57dbf4bd1e"
        },
        "item": {
          "id": "2aa02fe5-992c-408c-8429-ccb5378ecba6",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "bd50c27a-9cc3-4bf9-8dfc-55c7ad1de02a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfa56a18-0a80-41a9-ab99-b00033a75589",
        "cursor": {
          "ref": "07ce8c44-1592-4709-a3b7-69fd2460598b",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "89387298-6a06-43cf-b997-1baa0581097e"
        },
        "item": {
          "id": "bfa56a18-0a80-41a9-ab99-b00033a75589",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "230683c8-fdcb-4e41-80c6-442ae64f0cc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afb491bc-36b5-43f0-a8e6-1e4f425a771f",
        "cursor": {
          "ref": "335dd597-6caa-4b56-b374-8c86fd3ee632",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "507d2fbe-c247-4a69-a367-51e0dbe0a7f0"
        },
        "item": {
          "id": "afb491bc-36b5-43f0-a8e6-1e4f425a771f",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "cf96237d-b910-426b-8a50-864f379c86b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a749686-054c-4e64-a868-6f586fab36dd",
        "cursor": {
          "ref": "e32fe88a-b7b6-4ab1-a7c2-76f8cb1a1eda",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "fe26a077-ae81-48d7-bbc8-9ace108d23e6"
        },
        "item": {
          "id": "2a749686-054c-4e64-a868-6f586fab36dd",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "6e1dece2-a910-47ac-bf4b-7dce591f6168",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d876388-14d7-4bef-bc44-6df77fd92201",
        "cursor": {
          "ref": "2ed27da9-4c0c-4cc7-8e9d-1c5934cda0af",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "e5e25c9c-6666-4476-bd70-80e39be51a1c"
        },
        "item": {
          "id": "6d876388-14d7-4bef-bc44-6df77fd92201",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "9bc2f464-9f8c-47fd-b494-57f4bde6a884",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98c1dd07-ad19-43e7-8f2b-3290622ad658",
        "cursor": {
          "ref": "07de32ae-90aa-4a44-9ea1-a6002ba3af2a",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "29a422db-2608-4017-86d8-a0fead8eb13f"
        },
        "item": {
          "id": "98c1dd07-ad19-43e7-8f2b-3290622ad658",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "fc7a6b00-93c1-4f5e-8665-611472c72975",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1259708f-936f-4373-a586-b7d3dfb771ba",
        "cursor": {
          "ref": "adf0d141-d766-4f92-a728-4df1b4cb4049",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "876e8f76-726d-44b3-ba72-155c24ad1293"
        },
        "item": {
          "id": "1259708f-936f-4373-a586-b7d3dfb771ba",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "c3311a1f-19a4-431b-86e0-7f70dcb4a3f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "532eae17-c3b3-4ffd-b64c-208e923fc4eb",
        "cursor": {
          "ref": "46aad80c-a185-45f4-96af-db1180305d11",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "21f13665-5d34-4f72-9298-5f9a9a155c40"
        },
        "item": {
          "id": "532eae17-c3b3-4ffd-b64c-208e923fc4eb",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "ebb4dd1f-c8a6-4430-9fab-77b7f4d20640",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae08aa5e-a9f1-4140-a0aa-431ea6c222c5",
        "cursor": {
          "ref": "34d23b6e-2a8d-448c-879f-383b8b635cde",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "30581e23-8db8-4009-a4ff-d248832c7713"
        },
        "item": {
          "id": "ae08aa5e-a9f1-4140-a0aa-431ea6c222c5",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "fb69224b-6e47-4d2c-b3bb-0995e0323e24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71f8f4f6-9c4b-4bb7-999f-0efdb6152566",
        "cursor": {
          "ref": "26abb269-89ea-4e20-a468-2721c0aec84b",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "69a91fea-e1bd-43a9-bad6-a5a35d71a482"
        },
        "item": {
          "id": "71f8f4f6-9c4b-4bb7-999f-0efdb6152566",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "03c8ceed-295e-4fae-8da9-70af44a79cd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6bfd0fd-733b-4d03-a86e-48b7636723a1",
        "cursor": {
          "ref": "9e66bd56-9232-4d07-8b4c-5b7a1a2858c1",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "ee9925a3-3e11-453c-851a-d79887fd2124"
        },
        "item": {
          "id": "a6bfd0fd-733b-4d03-a86e-48b7636723a1",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "7d76de6c-f6be-4375-a504-a232939aa37d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ca86847-6d5b-48c2-adad-74f4cd55c658",
        "cursor": {
          "ref": "644036e5-e723-4358-be69-5544774b76af",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "7a8f705e-6a0b-489e-9548-03b802d75956"
        },
        "item": {
          "id": "5ca86847-6d5b-48c2-adad-74f4cd55c658",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "5f0d6d3e-0b8c-4142-b026-52e8d8491335",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88d9bb71-f6e2-4ff6-9093-1c587eedf9de",
        "cursor": {
          "ref": "00b1a468-dac3-43c1-8f55-b3d0b78f7642",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "5bc20352-40e8-4e08-87d2-d10eeb5fe344"
        },
        "item": {
          "id": "88d9bb71-f6e2-4ff6-9093-1c587eedf9de",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "73150446-b6a6-40c7-b63f-f728ca378332",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3b65972-566b-4d7b-a85e-65e6afe6a128",
        "cursor": {
          "ref": "0aa48885-162e-4580-b71a-9baa48c1907e",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "5bb3b2cb-5981-443c-9f71-4155a645354d"
        },
        "item": {
          "id": "c3b65972-566b-4d7b-a85e-65e6afe6a128",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "9456a108-47ca-4c2d-a544-8450837c1206",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30b2439e-d4ec-4645-a526-732ebdc73317",
        "cursor": {
          "ref": "2ebb8b40-baa3-4f0a-b74e-e609c8628296",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "b23fb452-001a-495d-a98e-98b88eed1282"
        },
        "item": {
          "id": "30b2439e-d4ec-4645-a526-732ebdc73317",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "d6e656e4-863d-4b8a-9f3a-952b6fbaf803",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "068b2d19-7303-4e20-81d7-fafadcc3408c",
        "cursor": {
          "ref": "9d20c62f-ad09-4039-bbd2-ca75fdc0cf02",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "61b8af19-ab70-4a29-8727-3223ad43dda4"
        },
        "item": {
          "id": "068b2d19-7303-4e20-81d7-fafadcc3408c",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "e5f76ee4-f921-455b-9df5-3956295c14a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "670f4f9f-d981-40b8-ba34-c0f879225ce3",
        "cursor": {
          "ref": "c5ad11d6-b4dd-4d68-a3f0-57e66a237171",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "362aeac1-65b7-419e-a13b-bc2cff961d5c"
        },
        "item": {
          "id": "670f4f9f-d981-40b8-ba34-c0f879225ce3",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "11c3ec8a-a8d1-478f-8f17-9ff383643d7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e09a4148-d4f4-499b-b326-0bad7f5d22dd",
        "cursor": {
          "ref": "d28fac04-0f84-4288-aa80-ee5a47140771",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "b5c9a155-58c1-437b-a2e2-c279dcfdba78"
        },
        "item": {
          "id": "e09a4148-d4f4-499b-b326-0bad7f5d22dd",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "c3247cdb-21b6-4e83-aa4a-a00ddd53d79c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dd608bc-4e55-49ef-b0f6-9b4908857c88",
        "cursor": {
          "ref": "17f89566-7550-4d49-88c6-f599ccc68a3e",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "4f9583ce-33b4-4639-bc40-8605ca576aac"
        },
        "item": {
          "id": "6dd608bc-4e55-49ef-b0f6-9b4908857c88",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "38c09b48-2198-44ad-9027-b2a8c5f278e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5b75198-f9ce-480a-b225-a5ed03af71e4",
        "cursor": {
          "ref": "0b86a864-5b60-46e9-a640-00caaff71f8b",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "f7500d14-366a-4db7-998d-fbca1649fb9c"
        },
        "item": {
          "id": "e5b75198-f9ce-480a-b225-a5ed03af71e4",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "2ed06a65-aaca-4259-8036-409da65268a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e1a301d-1599-46bf-a89f-3fbd56a2d65a",
        "cursor": {
          "ref": "95759457-e939-4d60-93d0-72f1f622c857",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "ebc7a601-b8e5-499c-ba97-f9310361261e"
        },
        "item": {
          "id": "8e1a301d-1599-46bf-a89f-3fbd56a2d65a",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "940f5dc3-7f82-4de8-ac9a-074ab8a10bd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f0279cb-8a81-4c03-9dbf-1849df955190",
        "cursor": {
          "ref": "896e2f0a-aa89-4409-b11c-896deb235038",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "8237212e-e16b-4c4c-b893-9c848d1225e2"
        },
        "item": {
          "id": "4f0279cb-8a81-4c03-9dbf-1849df955190",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "f1ca734d-1e17-40db-a384-ac8839242675",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd289da3-17e6-4daa-bf78-280384981c32",
        "cursor": {
          "ref": "1251f0fd-2be8-4464-ac4b-fabcae715e69",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "0f1f6059-7cac-4b22-98f9-2962b771bbdd"
        },
        "item": {
          "id": "bd289da3-17e6-4daa-bf78-280384981c32",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "edf29b0d-1d2d-4dd4-8b6b-36bde428cee1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6055d4c-98df-4dc2-9cb2-4957b0869e29",
        "cursor": {
          "ref": "00e5325c-11aa-4258-83d4-302144d3528c",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "93904ffc-2bf3-4c70-8c92-4fcbd1270c94"
        },
        "item": {
          "id": "b6055d4c-98df-4dc2-9cb2-4957b0869e29",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "039d7e13-821b-4694-b596-ca0e8987250c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64aff1d8-2d52-4270-9cc9-4906c422ee98",
        "cursor": {
          "ref": "db38665c-a51b-4204-ba0c-06e51a8193a6",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "cc2e5dc2-d7a9-417f-b0ad-77178498251b"
        },
        "item": {
          "id": "64aff1d8-2d52-4270-9cc9-4906c422ee98",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "76c67fa5-a837-4ad2-bd2a-8d81aa2b1d89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "854cba90-ed99-4ea4-a5fc-d093a8a031f6",
        "cursor": {
          "ref": "986ea760-f3b6-45ad-bc75-4fd71e326603",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "6574ce41-099a-4521-b0ed-1f2c9ba86285"
        },
        "item": {
          "id": "854cba90-ed99-4ea4-a5fc-d093a8a031f6",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "a0839e3d-245a-4c60-8a5a-8bcfd60299fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b89980a9-6902-4d2f-89ae-11506506bf08",
        "cursor": {
          "ref": "c65c79e8-4692-46d5-a1c7-37f9b187dd65",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "3ce44110-1a95-428d-9dc4-17307168f2c1"
        },
        "item": {
          "id": "b89980a9-6902-4d2f-89ae-11506506bf08",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "bc895050-a2e3-4069-9554-41ba1a4ebbde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f0cc5ed-819a-4337-84d6-5a7cf4fc759d",
        "cursor": {
          "ref": "02c6272c-83a5-42e2-9288-4b50afccea6b",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "74aeef87-be08-455e-86c7-463b8a124819"
        },
        "item": {
          "id": "3f0cc5ed-819a-4337-84d6-5a7cf4fc759d",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "82e514c7-55da-4f4f-a427-767c8f24eaaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ec406a9-35ad-4314-96cb-0772bc16f630",
        "cursor": {
          "ref": "98c35be3-b633-4494-8b51-aa164830ef5e",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "1126b814-4c15-4d00-b818-1f733bc7fecf"
        },
        "item": {
          "id": "7ec406a9-35ad-4314-96cb-0772bc16f630",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "49f46370-bf58-446f-9246-b8fa4512836f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89fa45d3-b2a7-48fd-bbbe-4b755196b58e",
        "cursor": {
          "ref": "a76d62f8-6c3e-43ed-9d78-16cc836a2eb1",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "7e2db4b2-d0f5-426f-8fe1-593772d1cb99"
        },
        "item": {
          "id": "89fa45d3-b2a7-48fd-bbbe-4b755196b58e",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "0de80395-a540-4375-b148-88163abad9a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e075d207-bd2a-427f-8f20-a5d45aba29ac",
        "cursor": {
          "ref": "a010282c-3542-4141-ad19-a93abf2a5dc2",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "59ec8c97-2452-48b0-a051-3e05f5db1da1"
        },
        "item": {
          "id": "e075d207-bd2a-427f-8f20-a5d45aba29ac",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "3ccd347b-13d6-4f2b-ae01-1b4bbb0690e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d219497-9c23-4ef4-a538-16e9d27fd6e4",
        "cursor": {
          "ref": "cbe702ba-925a-4cd1-98ac-c24abdacc758",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "d29d09f0-cf3c-4c37-a200-4771ff517c57"
        },
        "item": {
          "id": "8d219497-9c23-4ef4-a538-16e9d27fd6e4",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "4949a843-350f-4833-af56-99fa1d44bb10",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0abd928d-c0d4-457c-8e8d-a83a7ef98686",
        "cursor": {
          "ref": "19ab9650-adc9-4d41-bda2-a6accdf94ae8",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "d756ced3-301e-45a3-8af3-407862afbd5a"
        },
        "item": {
          "id": "0abd928d-c0d4-457c-8e8d-a83a7ef98686",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "6e6cd10b-386f-4716-ad5e-ff6ae95da785",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "06e3dc01-8453-4825-8470-3419149d3bdf",
        "cursor": {
          "ref": "8703c5ff-2e18-4c29-8b00-ef4dd6af6429",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "b5a37d32-99c6-400d-b5a8-e67f12587abf"
        },
        "item": {
          "id": "06e3dc01-8453-4825-8470-3419149d3bdf",
          "name": "credentials_issue"
        },
        "response": {
          "id": "ca113ebb-f28f-4de8-9fd0-23f402991d37",
          "status": "Created",
          "code": 201,
          "responseTime": 285,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccb0c04a-345b-4c10-bcc0-bdc0eb2d4cca",
        "cursor": {
          "ref": "07dfc036-9808-4a07-b6f7-543f501717a7",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "ecf0f64d-dc2a-4611-8f8c-6949506177bb"
        },
        "item": {
          "id": "ccb0c04a-345b-4c10-bcc0-bdc0eb2d4cca",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "fcc90393-e33a-47f6-80a2-3961d4ab232e",
          "status": "Created",
          "code": 201,
          "responseTime": 286,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "385e873a-3f2d-4fdb-857d-c2efd1a4cb2b",
        "cursor": {
          "ref": "6779fc2b-0aa1-4c60-8f5f-3ad6c901cf7c",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "7307f0c1-f7ba-4c2d-b425-c5a93bfd82cd"
        },
        "item": {
          "id": "385e873a-3f2d-4fdb-857d-c2efd1a4cb2b",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "3f3c55c5-89fd-4046-8e66-8369687944c8",
          "status": "Created",
          "code": 201,
          "responseTime": 283,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b6c1bd5-5d43-4125-9cd7-16919fdb9faa",
        "cursor": {
          "ref": "6c772fec-9e4c-4b8f-8400-64ce877e3af8",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "be275ec1-1efa-4997-b344-db909061f7d0"
        },
        "item": {
          "id": "3b6c1bd5-5d43-4125-9cd7-16919fdb9faa",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "cb9a7035-7a45-4294-9c04-859a537a17a8",
          "status": "Created",
          "code": 201,
          "responseTime": 270,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc1bfb34-939b-4e24-a24f-633ae8062122",
        "cursor": {
          "ref": "8db5ec98-e157-4037-b98d-a6fdac97bf3a",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "4bca6255-ee38-43e5-96b2-17e755d33744"
        },
        "item": {
          "id": "cc1bfb34-939b-4e24-a24f-633ae8062122",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "62ee8faa-5351-406c-8f1d-e17445de05b5",
          "status": "Created",
          "code": 201,
          "responseTime": 286,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-06-13T00:38:18.070Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-06-13T00:38:18.070Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "6731c780-182f-43b9-a92e-016899791002",
        "cursor": {
          "ref": "e1609358-e5df-48d8-99d2-753a4941b9a6",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "e18fbbec-d540-477f-bc05-d6be0d1fcc0c"
        },
        "item": {
          "id": "6731c780-182f-43b9-a92e-016899791002",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "682f6fca-1f4e-4a3d-b9c0-373e4ecf3d53",
          "status": "Created",
          "code": 201,
          "responseTime": 297,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56ae349d-cadd-4a93-98f8-67d46b4c0cce",
        "cursor": {
          "ref": "c9d8d530-3e3c-4c15-a5a3-08a9296e3e3e",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "4c3b89da-82fc-4740-877d-db686c8917eb"
        },
        "item": {
          "id": "56ae349d-cadd-4a93-98f8-67d46b4c0cce",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "178999ab-e3af-4bc8-8444-a5244278d464",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "240b7c51-a0c3-4388-a8ff-3372180ffb64",
        "cursor": {
          "ref": "1b1564a7-c908-4842-956f-f94b2f57ca67",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "94fcbe01-c2ad-450c-84b2-3612803a657e"
        },
        "item": {
          "id": "240b7c51-a0c3-4388-a8ff-3372180ffb64",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "6f343262-8857-426f-9cb0-9c22b78dee5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94152095-d59f-4c63-b184-ad124dd95731",
        "cursor": {
          "ref": "2c411288-e591-4e79-a54f-f44843d7670b",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "9381ef54-2103-47ce-86b3-60017162516e"
        },
        "item": {
          "id": "94152095-d59f-4c63-b184-ad124dd95731",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "4d5f955f-c117-4d47-8406-4ce13979cab1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcbb81c7-b6f8-4709-add4-3b2ff3c5337a",
        "cursor": {
          "ref": "5c52fcc6-cf4e-4f39-ab39-8f6bf28ab6e5",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "00077e79-fc52-4f8a-b53e-076d3bb50488"
        },
        "item": {
          "id": "bcbb81c7-b6f8-4709-add4-3b2ff3c5337a",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "213bd8bf-069d-4780-bf5d-34ac15e6e0b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d41f07f-3d3e-4edb-967b-4f56ab0435f1",
        "cursor": {
          "ref": "b9b1e464-ea48-44f4-8bcd-ee618c14ce86",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "60532a84-8062-4d2b-8def-051f1f7bcc9e"
        },
        "item": {
          "id": "9d41f07f-3d3e-4edb-967b-4f56ab0435f1",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "e8d8f59f-020a-47e6-8d35-df7be08dcdde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5e8ce4e-240a-4ce0-9c5a-de363a80733f",
        "cursor": {
          "ref": "ed1c9eee-fc42-46aa-a130-e36cd8f860e5",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "c17746a6-f828-4227-8b68-24a92e5ba7ec"
        },
        "item": {
          "id": "a5e8ce4e-240a-4ce0-9c5a-de363a80733f",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "5a7b86fe-7f26-4371-8c46-df44fd9e0f8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e888b305-ed56-481e-b4f9-752eb34acbd8",
        "cursor": {
          "ref": "e6e912fe-e8f6-477a-812f-014a0c278d3b",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "b012e92b-139a-4df1-86ef-5053ee9b5ccb"
        },
        "item": {
          "id": "e888b305-ed56-481e-b4f9-752eb34acbd8",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "7fb9d307-9db7-4a39-8f43-1ec6c3190b7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "090c47ef-00c7-4df4-aa27-3c1854378b93",
        "cursor": {
          "ref": "7b7bc145-b323-49bf-97c5-b5acb1d6698e",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "dc7921c8-b6cd-4e98-95f8-2b5a9e7fd142"
        },
        "item": {
          "id": "090c47ef-00c7-4df4-aa27-3c1854378b93",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "86f5a1ef-9833-4a3d-af1f-3c15c02d06d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32a9f4f1-19dd-4e37-852f-72578d308ac1",
        "cursor": {
          "ref": "135503f2-9339-424a-a519-05d45b688166",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "f4d65784-4cda-47d8-80ad-ec7ff30d380b"
        },
        "item": {
          "id": "32a9f4f1-19dd-4e37-852f-72578d308ac1",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "4bf3a45f-7480-4e47-8080-377b0ac5cd5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f80802fd-9640-41c5-ab12-73f80d3001c9",
        "cursor": {
          "ref": "5f788f26-274d-4cb9-93a2-6e88ce98ac26",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "ad5e1778-47f9-44aa-b02a-02c2f3b30046"
        },
        "item": {
          "id": "f80802fd-9640-41c5-ab12-73f80d3001c9",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "11ccc545-b3f6-4f21-af21-afa3a5c6d4df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "648e96cb-5708-4f0b-ab78-915d9a25a5f4",
        "cursor": {
          "ref": "4c5b0ff4-c807-4b23-9c9e-bd55d58575e6",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "124b512f-42cd-42ab-9d78-8ecef72d1318"
        },
        "item": {
          "id": "648e96cb-5708-4f0b-ab78-915d9a25a5f4",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "0f3ee4e2-4ae1-4f64-be79-345a7f4bf5b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38ba1b9c-f64f-44f8-b0dd-c02b71851ad8",
        "cursor": {
          "ref": "2febf087-c4ca-4d2d-a004-11daf3c00a3a",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "c9ef891f-7cb6-40cf-8bbe-8a9f295547d9"
        },
        "item": {
          "id": "38ba1b9c-f64f-44f8-b0dd-c02b71851ad8",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "1d6b2787-b4b6-4058-aa2c-09ae0f8d16a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d3397ac-85d0-44b8-b33f-887ece9ba2d4",
        "cursor": {
          "ref": "4e0a4a5b-efb6-418c-be5f-2fd7e8fe7907",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "6acec2df-4367-4c3e-b55d-c008e902c6c2"
        },
        "item": {
          "id": "8d3397ac-85d0-44b8-b33f-887ece9ba2d4",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "1210f70d-5a28-47b2-b687-0517eceec1e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c692092-1e82-4f5b-a8f4-36daad0b018a",
        "cursor": {
          "ref": "49a0be5d-3c5f-4c77-ab22-307e243be26f",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "24060f26-c4c2-4efe-a11f-b8af2e35c68c"
        },
        "item": {
          "id": "6c692092-1e82-4f5b-a8f4-36daad0b018a",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "3045b77b-e657-438b-8fe9-ad1d4e9c9cac",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 72,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "a167ab1d-b5d6-48bb-8800-396c6c4d5865",
        "cursor": {
          "ref": "1c605319-b4f5-4673-bb67-f68ed435b2aa",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "a5660d68-6fcf-4043-9333-2000943490d3"
        },
        "item": {
          "id": "a167ab1d-b5d6-48bb-8800-396c6c4d5865",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "604fbe33-f64c-40b8-92d1-f66b51f7bcf4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb92e53c-6aee-441a-9109-247db4348e16",
        "cursor": {
          "ref": "6277c2d2-d49e-424e-a285-a676133a8eb7",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "203f19b2-70b5-4876-b6fe-12d28f15900c"
        },
        "item": {
          "id": "eb92e53c-6aee-441a-9109-247db4348e16",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "db406cfc-ab47-4ef8-921c-ec39e1cd0f10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "524ce697-336a-4ebb-9c13-adec8a8e460a",
        "cursor": {
          "ref": "4bc53a6a-935e-41a7-b504-3b229b433788",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "8537bd9c-9ce7-49a6-8c71-018256115f89"
        },
        "item": {
          "id": "524ce697-336a-4ebb-9c13-adec8a8e460a",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "15f3de48-af1c-409e-a2b6-2a9763ff2f5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e3a1bcc-6fbc-4134-8625-cbe76d7e12e9",
        "cursor": {
          "ref": "5c32eba2-65ca-4350-9b68-28fd4ec1f6b4",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "53ebab55-a57d-447b-a8cb-d323ad740525"
        },
        "item": {
          "id": "9e3a1bcc-6fbc-4134-8625-cbe76d7e12e9",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "29aa57cc-a238-4142-b2c1-f14e4f7802c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a92269ba-5d04-4ef0-ab2f-1f314895893a",
        "cursor": {
          "ref": "e9e9e847-1602-4258-a1ed-15623a5fd865",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "878b8d2e-07ab-472f-b1f3-f9c1bd6ed5df"
        },
        "item": {
          "id": "a92269ba-5d04-4ef0-ab2f-1f314895893a",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "91f954e9-5224-45fa-bea0-1c18e57f90b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c364c7bf-eb40-4dff-a6fe-863ee5999d47",
        "cursor": {
          "ref": "a1124eb1-113f-4e4b-bbf0-28d4ee77bd09",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "a1d9008f-5074-46cc-91f4-bafc43387789"
        },
        "item": {
          "id": "c364c7bf-eb40-4dff-a6fe-863ee5999d47",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "cdd704dd-2e82-4218-bcae-4f5fdc99e9c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c10cc7bc-4b39-4871-bfb2-92717ce7d467",
        "cursor": {
          "ref": "c296f927-daa0-48a7-b5cd-f47793c37b0b",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "0693eef7-0706-4867-9be8-cf3ba386b87d"
        },
        "item": {
          "id": "c10cc7bc-4b39-4871-bfb2-92717ce7d467",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "ec7fa88d-f423-45b8-8a4b-c34d1c56dd2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62311d07-c544-4934-baa9-60d57b6dd3ad",
        "cursor": {
          "ref": "e8ee4b9c-ed46-4532-a742-b9898052ff0f",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "3de24564-be99-4548-8b13-05d795e5bf3b"
        },
        "item": {
          "id": "62311d07-c544-4934-baa9-60d57b6dd3ad",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "5f58cd3b-c811-49d4-bb30-bab884b8d2e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5fa261b-fecf-43b0-8760-6cc85eafda9d",
        "cursor": {
          "ref": "f55ce377-dd67-427e-bd22-770dcf185a0a",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "52a91eb3-d0e2-43c8-964e-73647475ef49"
        },
        "item": {
          "id": "b5fa261b-fecf-43b0-8760-6cc85eafda9d",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "617f9135-dcba-46af-99d3-b8a10fe84548",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47051635-2659-42a3-82e9-93a0d301f046",
        "cursor": {
          "ref": "4741561f-75de-4ae1-8cac-45256807e46e",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "161133b6-2299-4840-bbbf-a06042aa9919"
        },
        "item": {
          "id": "47051635-2659-42a3-82e9-93a0d301f046",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "ddebbad7-c5db-41f0-adad-d0dd13e01f53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ae7f7d7-9e4b-400b-b3c9-d9dd6d8f8359",
        "cursor": {
          "ref": "a28cfcb7-3e13-47a4-9a55-0e192e5f5a97",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "b00f2c25-27c4-4f31-858d-9ab6c09cf661"
        },
        "item": {
          "id": "9ae7f7d7-9e4b-400b-b3c9-d9dd6d8f8359",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "d6fca3ff-0441-4d15-809c-b8c77a31fe09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ff9aa0b-3117-48c6-abb5-90f83bc49891",
        "cursor": {
          "ref": "75594252-dec7-4dee-b923-44384612b027",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "3dc8ec86-e405-4186-9490-9359640a93b4"
        },
        "item": {
          "id": "6ff9aa0b-3117-48c6-abb5-90f83bc49891",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "ce1838d4-86b8-4afe-8d4c-b11a42de15c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2574409-4ead-43eb-8043-94c275a4f97b",
        "cursor": {
          "ref": "53610309-7d76-4aba-a766-3e49f2bbd505",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "47e37981-8e45-4dec-ae56-96a100492167"
        },
        "item": {
          "id": "b2574409-4ead-43eb-8043-94c275a4f97b",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "5c766fbc-179f-4c29-85a3-82cdfb93eb51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "427b9ac7-d6eb-4fd0-9c77-46bea4c8cbf2",
        "cursor": {
          "ref": "70ab5b61-0d76-4269-a254-a7af7ba6811a",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "81b2ec33-481a-4bf5-8abb-56413309bcf8"
        },
        "item": {
          "id": "427b9ac7-d6eb-4fd0-9c77-46bea4c8cbf2",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "c5f72fa1-ff7a-43d0-ba71-ae22c31b7f75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a123e94-651f-4fbe-b761-44ae1470b9f6",
        "cursor": {
          "ref": "eeb55c2b-73fb-4953-be14-5ec314232dd3",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "0a60e37a-661c-4a5d-b61f-29ac5b1ce82f"
        },
        "item": {
          "id": "9a123e94-651f-4fbe-b761-44ae1470b9f6",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "f9c4b0c9-93ec-4031-b08d-78e5b75386b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a4e41b4-fbb1-4359-a36f-6f05f5ee6e25",
        "cursor": {
          "ref": "15e33464-2e54-4596-bf15-5ebd3ce1a756",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "c116f629-3fea-40a3-93b6-9dbb8bb56117"
        },
        "item": {
          "id": "0a4e41b4-fbb1-4359-a36f-6f05f5ee6e25",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "54a20edf-1abb-4145-a000-3dedc0d33bc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "118e0c5e-287d-48e0-8484-3d72f95f050b",
        "cursor": {
          "ref": "52dfd7d4-6025-4cc4-a577-940ed7e3bffd",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "3dc3c70d-1e51-4f70-9eed-2c80eb37df0f"
        },
        "item": {
          "id": "118e0c5e-287d-48e0-8484-3d72f95f050b",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "89300940-049c-442f-99ac-4950276b66e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c82ac54d-763b-4de9-91ba-5f979e950327",
        "cursor": {
          "ref": "a8845064-9774-4c1f-ab13-47bd645f11e0",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "af48041c-2c70-443f-99c5-6c9f23d316db"
        },
        "item": {
          "id": "c82ac54d-763b-4de9-91ba-5f979e950327",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "d5834c52-9833-46be-8875-cbfb36c6184a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70bbf79a-10e8-46a1-9f1b-69b793badb58",
        "cursor": {
          "ref": "557fd262-88ca-4815-afe7-e79d52b3afe4",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "46fe810e-ab78-4114-a41e-24f963a20cd9"
        },
        "item": {
          "id": "70bbf79a-10e8-46a1-9f1b-69b793badb58",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "19d69c48-1f5b-4250-9770-661cb8faab61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1e9ded0-fe3c-4200-b44e-f940c224efc3",
        "cursor": {
          "ref": "73d7f3d0-e40c-4681-a3df-c4516c6c0b4a",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "2f827e0e-5142-4069-9330-dd389fce2019"
        },
        "item": {
          "id": "b1e9ded0-fe3c-4200-b44e-f940c224efc3",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "103099d7-e440-44d3-bf0d-1affb526915f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67ed14e2-cf03-42da-9e2f-e2f9c5cf32bc",
        "cursor": {
          "ref": "12142b6c-8060-45d1-938f-638c1d0bdf33",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "f821ba8c-a01e-487b-9b44-65a28932ea1c"
        },
        "item": {
          "id": "67ed14e2-cf03-42da-9e2f-e2f9c5cf32bc",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "8cd92701-7503-48c7-8db5-f447c9234025",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e25cc55-63d5-4e94-a3e7-531725c3e2ad",
        "cursor": {
          "ref": "c0a147b9-3a61-42c5-92f0-7db7b5f7380c",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "3cc04825-2c8b-4615-88fb-f38d435b7e4a"
        },
        "item": {
          "id": "4e25cc55-63d5-4e94-a3e7-531725c3e2ad",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "4c3f23d0-9cf2-4d99-8396-9521d100b014",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1960edf-eb5e-4317-b3bd-f68846dfcd61",
        "cursor": {
          "ref": "3cf0dc01-c678-418c-b0c3-9ead11c8ebee",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "e21423f2-164e-429f-956b-febd2661cd6e"
        },
        "item": {
          "id": "c1960edf-eb5e-4317-b3bd-f68846dfcd61",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "fa5971a1-cc00-4669-b955-08eaac258869",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e268e408-a1d8-4299-b559-2af6f5958291",
        "cursor": {
          "ref": "7e1ec402-dfb3-4512-beda-9e4d6da78cdb",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "95f2a0d0-8ce4-4586-b666-ad845b639057"
        },
        "item": {
          "id": "e268e408-a1d8-4299-b559-2af6f5958291",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "ae30ca1c-9520-4840-91f8-babe192bd318",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d9cb8cc-5549-4247-95a9-8b31870ed74e",
        "cursor": {
          "ref": "08fdcf03-ae10-4cfd-a126-43c0598ac78f",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "8e1232f8-b43a-4c7d-95ab-b872b1dbd220"
        },
        "item": {
          "id": "2d9cb8cc-5549-4247-95a9-8b31870ed74e",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "37fcad2d-1d44-49f1-9193-ae2d61f246b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb83b0da-2727-47da-bbbf-c715b792f7f0",
        "cursor": {
          "ref": "4d01d06f-fa29-48f7-af48-2cb9f9c303f1",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "cc00d896-4d5f-4d55-8301-e2dbb2c501c6"
        },
        "item": {
          "id": "bb83b0da-2727-47da-bbbf-c715b792f7f0",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "789e1a03-40c4-47a2-a87f-e47470713405",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "049bf4c1-f3e0-4f49-bc07-d32e60b9e175",
        "cursor": {
          "ref": "99c76af2-db0f-4aa4-8437-af11889787d5",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "2938373d-8213-4b5a-a805-e6a985e4010b"
        },
        "item": {
          "id": "049bf4c1-f3e0-4f49-bc07-d32e60b9e175",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "ed7b29aa-0de2-43c6-83cb-9a911710337e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6014a79f-4cf8-4813-b957-f658a40ac2ae",
        "cursor": {
          "ref": "0ea3242c-35ea-48c7-8805-5780695eb87d",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "c01eb097-9eb9-40f7-b360-15dcf5875a88"
        },
        "item": {
          "id": "6014a79f-4cf8-4813-b957-f658a40ac2ae",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "cede926e-137d-442d-ab78-3570e4238dcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "484575a9-5a33-4bae-8234-a1b980c38284",
        "cursor": {
          "ref": "a3dd4dd2-1ed9-4f9b-9950-4059f019b737",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "ad0f1e34-2293-425b-925b-80c7a53a171f"
        },
        "item": {
          "id": "484575a9-5a33-4bae-8234-a1b980c38284",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "aa005998-98da-4395-be44-c9e71cf18e59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4253212e-4e7e-4cdb-abed-ff5ac6d4fb1a",
        "cursor": {
          "ref": "369326bc-c1b6-4c0a-b4f9-fdee11359431",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "a0a77dcb-e5b6-48cf-9b64-ab7470b83a39"
        },
        "item": {
          "id": "4253212e-4e7e-4cdb-abed-ff5ac6d4fb1a",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "cee09511-86c1-4a54-bc82-398a5c0baf95",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "ab865157-94e9-43b2-a11e-1a36a186138e",
        "cursor": {
          "ref": "2367f7d9-a423-4016-a53f-ab043d8a7024",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "3c9df0bd-6f07-4eb4-b9a8-3c9b691ae722"
        },
        "item": {
          "id": "ab865157-94e9-43b2-a11e-1a36a186138e",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "1732ddc0-5bc3-4bae-943b-aa8f5a4a3894",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66313bd1-ee98-4ab7-90a9-3b087b98114b",
        "cursor": {
          "ref": "0cfda88c-1450-410b-9c9c-a94f6cac12e4",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "fe3781ff-a6ca-46a5-be2f-daa23e1d46b9"
        },
        "item": {
          "id": "66313bd1-ee98-4ab7-90a9-3b087b98114b",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "66911100-6c5b-4f49-88b1-302528d9a261",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da2c055e-790e-41da-909b-68e8d93952bf",
        "cursor": {
          "ref": "9e98575a-c665-4380-bc2c-1e0d777fffe5",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "b5e5999d-cdab-4a2f-8ce3-c31405cfb434"
        },
        "item": {
          "id": "da2c055e-790e-41da-909b-68e8d93952bf",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "ccddbf10-f8d2-4ed6-90ef-ed39ebf5236f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3efd61c7-b6c1-47a3-a44f-f3dc528bc8cb",
        "cursor": {
          "ref": "bca8b83a-4b1c-49cf-b8f0-5d13e6048132",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "26a60ed6-369d-41bb-82d6-e9a5dd3cdb6c"
        },
        "item": {
          "id": "3efd61c7-b6c1-47a3-a44f-f3dc528bc8cb",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "40578fde-df6a-4f8d-b60b-37bbdec5aad1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3788605-f812-45b3-b81c-23e81f35654d",
        "cursor": {
          "ref": "1c9948d6-c650-4b61-8a48-79b2e943bfed",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "20eaa566-b34d-42a6-b62d-10797fd3aebf"
        },
        "item": {
          "id": "b3788605-f812-45b3-b81c-23e81f35654d",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "dc821b86-5b65-476d-bc90-5e7d28274807",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "235e0dea-242a-4d31-92b6-0e70799e254c",
        "cursor": {
          "ref": "305660ac-4646-4c86-a20f-23394a0d233f",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "991bd7b3-1a71-4092-8370-afa98fbaf5e3"
        },
        "item": {
          "id": "235e0dea-242a-4d31-92b6-0e70799e254c",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "d33e9c42-c24a-4cc1-898a-d2c03353d110",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf05650c-ea5a-41c4-90ad-b245a51d21eb",
        "cursor": {
          "ref": "994baaa5-ba53-4b20-bb24-c123dda41188",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "da29499a-d19d-4528-94c9-8157fca500e2"
        },
        "item": {
          "id": "bf05650c-ea5a-41c4-90ad-b245a51d21eb",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "7b38a73d-d861-411a-9107-cdf57734a391",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f53e2a6-3740-42f6-9f86-9c368de31ca2",
        "cursor": {
          "ref": "47e9cc54-8930-4161-b740-98eb1b143c6e",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "5b8f7a5a-2481-4cea-8dd8-dbc8c8f633d5"
        },
        "item": {
          "id": "9f53e2a6-3740-42f6-9f86-9c368de31ca2",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "3e699b64-1f89-44ed-ad45-591413a06bda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b71b3f31-88df-4f22-b49a-27338d446ea8",
        "cursor": {
          "ref": "4f1d7fbc-daa3-4663-8f17-91eda867ab3d",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "27f18f19-1793-4457-93b1-090df8f9381d"
        },
        "item": {
          "id": "b71b3f31-88df-4f22-b49a-27338d446ea8",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "f14bf662-9c7c-48e3-97a4-580f75af2dc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4757397f-5040-49ec-ae7d-f5e0ebe7a7ec",
        "cursor": {
          "ref": "2a484c3a-b3c5-4ebc-b36c-52d27e8b3090",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "c5ebe841-e500-4cf0-9c1f-4e55f8a41dc8"
        },
        "item": {
          "id": "4757397f-5040-49ec-ae7d-f5e0ebe7a7ec",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "1958f88b-e0e5-441f-b988-32f4480127cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "021229ae-83bc-472e-9286-d00cbd2e97e4",
        "cursor": {
          "ref": "d6b1e4a3-214b-4a4c-a7a1-7eb5358a4b5c",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "b3783eef-d409-46ce-8fa7-1d9a4b9468d4"
        },
        "item": {
          "id": "021229ae-83bc-472e-9286-d00cbd2e97e4",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "78ca8f66-b690-49bc-b6e0-62ecf94d5bc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97debc2a-a64f-4945-9992-be6aa1304010",
        "cursor": {
          "ref": "2c20cbf7-06a0-4061-b04d-1e2f261fc061",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "d506e61a-8ed1-43be-aa68-611e989d9ec2"
        },
        "item": {
          "id": "97debc2a-a64f-4945-9992-be6aa1304010",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "65e0cd74-bbbc-4697-9a61-d4a194666f22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0eee0093-1380-47ad-b29a-f2141051a183",
        "cursor": {
          "ref": "d4c424fc-7594-4109-a65e-a094bb93fba5",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "7d0492bf-89a1-468e-8ddd-b4b3e2c87502"
        },
        "item": {
          "id": "0eee0093-1380-47ad-b29a-f2141051a183",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "0403d72a-1d4b-4fc1-8dc6-89a7fdea1048",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8727962-1208-41fc-a2f3-2cdfb1b5a309",
        "cursor": {
          "ref": "e2baf6ee-de69-46c6-b889-24b5df703a3d",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "0c40202a-5dba-4a69-bd4d-051489afe505"
        },
        "item": {
          "id": "a8727962-1208-41fc-a2f3-2cdfb1b5a309",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "6acb553c-274b-4425-a646-e99b5a6a897c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39d7f3fe-5945-4bcc-9c9b-13b95a8476f4",
        "cursor": {
          "ref": "ea99cee5-02d8-4985-98e5-9f81e5744c91",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "286bc641-eb32-4591-85a5-464e8f6d4cd0"
        },
        "item": {
          "id": "39d7f3fe-5945-4bcc-9c9b-13b95a8476f4",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "5f18a599-2314-439d-ac9a-1decd49e96e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55f38b31-396e-40ad-9027-c789c72cd918",
        "cursor": {
          "ref": "a51acfc8-a735-4094-8eb0-0170284377cb",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "d9b27f44-33bd-4c05-89fc-679652dc1426"
        },
        "item": {
          "id": "55f38b31-396e-40ad-9027-c789c72cd918",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "8a66b0ca-6397-491b-b7fc-74fb7944ee5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad679411-fa29-4596-b9b4-b9e10081d920",
        "cursor": {
          "ref": "9440732f-e0a6-44d1-a537-141c5910e793",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "3246134f-0056-4952-b753-161862fa168b"
        },
        "item": {
          "id": "ad679411-fa29-4596-b9b4-b9e10081d920",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "d63c1abd-1d00-4d71-a9a8-a826af7515c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d79eb4e8-7a94-4c00-8bba-7cfd3ad5428c",
        "cursor": {
          "ref": "39cb41e5-d921-4d24-be5a-83fbdbe74b4d",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "13f47e00-9f79-4f73-bf14-30d84d384ae2"
        },
        "item": {
          "id": "d79eb4e8-7a94-4c00-8bba-7cfd3ad5428c",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "f6ac9fff-ea38-4927-8400-b55f9fd29018",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4ed0b5c-9a1b-42fd-b3a7-772271827063",
        "cursor": {
          "ref": "e045b281-3b72-4688-8290-e9b38b20aaf6",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "0c45f686-84dc-4d3b-b99d-b58faf0fc8ee"
        },
        "item": {
          "id": "b4ed0b5c-9a1b-42fd-b3a7-772271827063",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "179b8bce-3add-4176-9d42-95196bb7ffc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d89721cb-ebec-46a5-85d6-a23dbfb2fa27",
        "cursor": {
          "ref": "201212fb-5179-4e32-aaf4-fd88b25f9882",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "d46f3eef-1357-4662-bd1e-ce6943aa2e67"
        },
        "item": {
          "id": "d89721cb-ebec-46a5-85d6-a23dbfb2fa27",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "626a290d-5dec-455b-945f-544c908c6d46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdad9cd8-3882-4974-a241-9f538cfec1ec",
        "cursor": {
          "ref": "7015ba24-aea7-4b55-858f-459b738b748b",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "7cdea434-e56d-483a-9330-d73cfbb950b5"
        },
        "item": {
          "id": "fdad9cd8-3882-4974-a241-9f538cfec1ec",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "ad542a02-b0b0-4e7a-b763-c81f229eeaf3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0eaa2dcf-9a9c-4aad-bb76-fd246884cb66",
        "cursor": {
          "ref": "82159e25-3a39-436f-9781-1ed24733f3fc",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "0a1b78aa-64dd-4c99-ab8d-bff13af8ea1f"
        },
        "item": {
          "id": "0eaa2dcf-9a9c-4aad-bb76-fd246884cb66",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "4ce5221c-339b-4df8-94d5-633b75e8c5c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c65d8fb-9ad4-44d5-a0e1-e2afd3d22d70",
        "cursor": {
          "ref": "300a99c5-2bae-41a2-9d46-febb584a016a",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "d71ef9a9-e40f-4f12-8d6e-0c96db4ba2e5"
        },
        "item": {
          "id": "7c65d8fb-9ad4-44d5-a0e1-e2afd3d22d70",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "f1b1540b-f11f-4992-8bc0-de5cf071e7f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb5592a0-0f0d-48e0-b9dc-e0a582c33131",
        "cursor": {
          "ref": "c9b555bb-2a91-41ff-9b19-80367f27eb4f",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "8aeeed94-40f7-495c-bee1-bedafba9b660"
        },
        "item": {
          "id": "eb5592a0-0f0d-48e0-b9dc-e0a582c33131",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "26d01708-6cf4-4354-b161-be0321e2d29f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0da85e99-e98a-4706-ba28-1e9c50a20701",
        "cursor": {
          "ref": "29008bbf-ceb7-421a-a017-429a64b12ce9",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "0bc35d92-1ffb-445c-acb5-0f53e1811bb7"
        },
        "item": {
          "id": "0da85e99-e98a-4706-ba28-1e9c50a20701",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "2c8de2b1-1c98-4491-9133-88945b715466",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e42e65f-7fc6-4338-88dc-a47e15ac8b34",
        "cursor": {
          "ref": "e8e47ae4-7283-4e2d-a44b-3a8c36ef8545",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "926217ec-81b3-44c9-b2cd-6a787fc4abfa"
        },
        "item": {
          "id": "6e42e65f-7fc6-4338-88dc-a47e15ac8b34",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "f2dc4b05-4176-4059-a438-41ef851c2953",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5ef8aac-1ea5-4a38-a575-dd211e21fee4",
        "cursor": {
          "ref": "4db18322-d587-49f3-924f-6f5a2d1786b1",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "2e1bd6e3-e0d6-4244-8862-907eac0a797a"
        },
        "item": {
          "id": "b5ef8aac-1ea5-4a38-a575-dd211e21fee4",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "6b947f96-47f3-45d9-9c9d-8e502d56da24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f981d78f-4174-48ee-80ff-7c47037fc724",
        "cursor": {
          "ref": "b672a794-704e-4d72-af38-85745395ef4d",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "2c4b298e-f81f-435a-b278-65003d4b1269"
        },
        "item": {
          "id": "f981d78f-4174-48ee-80ff-7c47037fc724",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "c9ad22a3-84d9-4bf7-864a-148bd53e750a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9ad1554-79db-4435-b6b4-a249dbdcb28e",
        "cursor": {
          "ref": "0be8b332-39bd-4310-9ffb-8d85dca829a8",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "d3282082-b072-4631-a985-8e2cb867485a"
        },
        "item": {
          "id": "e9ad1554-79db-4435-b6b4-a249dbdcb28e",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "7550ed64-e3f6-4bee-a7d7-f6ef7c7b97b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89935508-0ea0-43f1-a50c-4297093c290c",
        "cursor": {
          "ref": "ef04e860-c767-401b-9c2f-b9e2eee2f54e",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "69b40f79-91e6-425e-894b-f062dcdc72d9"
        },
        "item": {
          "id": "89935508-0ea0-43f1-a50c-4297093c290c",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "d51008ab-2f67-403c-b940-7540056bd8e1",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "f8e7a77d-abce-4054-8acb-d069b8d49386",
        "cursor": {
          "ref": "8ccaac68-ce35-418e-9616-1a3ab9dc965a",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "868d7436-5435-4b56-8ab3-ff174834e61f"
        },
        "item": {
          "id": "f8e7a77d-abce-4054-8acb-d069b8d49386",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "0084642c-bab8-4008-aaca-95eb96363206",
          "status": "OK",
          "code": 200,
          "responseTime": 118,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "b2607eae-92a7-49df-aaa1-cf7fadeeb3d5",
        "cursor": {
          "ref": "6dfbba4f-7d00-44cb-a153-56438a713a53",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "769a3fe4-d318-48a3-847d-ba0b4566d2e5"
        },
        "item": {
          "id": "b2607eae-92a7-49df-aaa1-cf7fadeeb3d5",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "4d877aee-3029-4498-923f-f4af760ed468",
          "status": "OK",
          "code": 200,
          "responseTime": 78,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "41a09b85-1e3c-4205-80a0-5fdef2d7fe53",
        "cursor": {
          "ref": "ff01b3c8-d008-4348-931b-af6adfb77970",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "134f9200-ac32-4eef-a65f-fc7987ef7024"
        },
        "item": {
          "id": "41a09b85-1e3c-4205-80a0-5fdef2d7fe53",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "3006fca8-6630-4b4a-bd2e-91e92ccf0f20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0483f216-7946-47b5-8ec1-efee5ee409c2",
        "cursor": {
          "ref": "bbc9e989-63ba-4d1c-b51e-b52c3a847f63",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "d29d7393-d110-4670-8608-81b22e7eda5e"
        },
        "item": {
          "id": "0483f216-7946-47b5-8ec1-efee5ee409c2",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "c2b1c99c-ead4-4448-b26e-c08daa2303e0",
          "status": "OK",
          "code": 200,
          "responseTime": 94,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "07a206b5-30fc-4d48-ba08-5788e1e6dc0c",
        "cursor": {
          "ref": "00ceb992-afd9-4ba9-8461-e089639a3052",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "79982cc3-4bea-41d8-9793-e4b0cac66aad"
        },
        "item": {
          "id": "07a206b5-30fc-4d48-ba08-5788e1e6dc0c",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "88d1d434-cf96-4840-a68c-e6e770e1f681",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "bdd30f93-8305-497c-8d5f-0ee0b7e08005",
        "cursor": {
          "ref": "12e2c90b-d0d9-4fb7-94b3-a3a1c9496a99",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "b3fab39b-865c-4900-9a98-8c79fc185246"
        },
        "item": {
          "id": "bdd30f93-8305-497c-8d5f-0ee0b7e08005",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "c4c540b5-da04-4cc6-857d-2893364fa685",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "1fd2149f-c9a5-4d95-9917-a93f2ce7d270",
        "cursor": {
          "ref": "fedf62d8-0e53-4429-8019-bb3432c790a9",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "65e579b1-8ee3-47b1-bf52-8fa2e249cb34"
        },
        "item": {
          "id": "1fd2149f-c9a5-4d95-9917-a93f2ce7d270",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "d3b7bf46-954d-4fd4-8fb4-a4fb74c71d48",
          "status": "OK",
          "code": 200,
          "responseTime": 76,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "0b150be5-2966-4ead-8366-bc1e79bce4c9",
        "cursor": {
          "ref": "6d768a25-7609-413f-9887-12a2a2c552e8",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "7777b286-a953-4cf1-bd2c-8eed509b07ad"
        },
        "item": {
          "id": "0b150be5-2966-4ead-8366-bc1e79bce4c9",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "46356770-a88d-491e-959d-4b124ef62f9d",
          "status": "OK",
          "code": 200,
          "responseTime": 100,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "955d0c00-039b-4013-b5b2-51cd617c7e2d",
        "cursor": {
          "ref": "87fd39c3-39dd-4af8-80b9-cb656ff65fa2",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "2109584e-45a9-4112-9b70-c1375b7e707f"
        },
        "item": {
          "id": "955d0c00-039b-4013-b5b2-51cd617c7e2d",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "4962f448-c174-4d83-85bf-ae82693b34c4",
          "status": "OK",
          "code": 200,
          "responseTime": 76,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "1fdeafc7-4635-4d39-bcb4-48eaf7537188",
        "cursor": {
          "ref": "bc6be102-fd0e-411c-936d-125857ba4ebe",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "79916eb9-7d55-4250-bb84-65aad76199fd"
        },
        "item": {
          "id": "1fdeafc7-4635-4d39-bcb4-48eaf7537188",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "bca4610b-869e-4377-9764-21df84ac731c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09220052-0142-40ed-8a9c-0f0bb62cbaca",
        "cursor": {
          "ref": "c6207b04-af49-4232-9fd1-d349911c8651",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "cf5a52a1-0985-4907-9fb3-bf2c0612875a"
        },
        "item": {
          "id": "09220052-0142-40ed-8a9c-0f0bb62cbaca",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "1ea0d915-dc56-402e-98ed-ddc76263abaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad72fbba-b046-4095-9c8f-74b657eb3896",
        "cursor": {
          "ref": "80cf7abd-9fd8-446b-94fe-639d446fa1e3",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "5945c19b-a722-48ad-a767-3e7cbb5fe4ad"
        },
        "item": {
          "id": "ad72fbba-b046-4095-9c8f-74b657eb3896",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "80902d39-ee1b-4a91-8bd8-f16f7f845a9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4f0edf2-7378-44e4-b115-265569e90470",
        "cursor": {
          "ref": "3a86dcc5-c583-4e00-8de9-5f0043ecf2c4",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "7eed1aa6-113c-4f36-aff0-3c662d4ce1d7"
        },
        "item": {
          "id": "b4f0edf2-7378-44e4-b115-265569e90470",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "f56541b5-56d1-4222-b8ce-22bfc88b2fc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41b331c6-a04c-4e80-9e1b-48e73eaf2655",
        "cursor": {
          "ref": "1e96186f-31df-4893-b62a-07d2ff9760bd",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "a28879c4-c97e-4dd7-b56b-89255ba4d96c"
        },
        "item": {
          "id": "41b331c6-a04c-4e80-9e1b-48e73eaf2655",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "19bfb00b-4de4-4470-a567-5feacae09664",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "695a2c9c-919a-4482-9adf-cc26c7c75923",
        "cursor": {
          "ref": "bf77d943-1a63-4eb0-9da7-ea97e122b042",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "5db4da9e-0243-4445-884c-9e1a9d26c8dd"
        },
        "item": {
          "id": "695a2c9c-919a-4482-9adf-cc26c7c75923",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "4013c082-104e-4195-8cdc-239c6e17d6d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae40c5f6-1d38-4deb-9f32-98da09c93c6e",
        "cursor": {
          "ref": "f47bf56d-20cd-4d3e-a5d3-bc15aba7c42d",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "3fe5bc94-e3f1-4736-8e65-2783417c989d"
        },
        "item": {
          "id": "ae40c5f6-1d38-4deb-9f32-98da09c93c6e",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "9d07e1bd-7b9c-4002-8067-f0f617bba19e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c90d88c-168f-4edc-b937-493eb125a5a2",
        "cursor": {
          "ref": "4970e3e5-79a6-410b-98bc-eb5c72aa7039",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "ceac4960-8a2a-475e-a2c1-ab30f64e4863"
        },
        "item": {
          "id": "0c90d88c-168f-4edc-b937-493eb125a5a2",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "7064e5c2-2393-461e-8c6e-b0db77cf4a48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bad9dac4-f55e-4cb3-9609-069b080fda1d",
        "cursor": {
          "ref": "f67b5490-1c96-41df-8214-6df153607fe7",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "248916ce-8ded-4e8f-8816-98f6a014ebd6"
        },
        "item": {
          "id": "bad9dac4-f55e-4cb3-9609-069b080fda1d",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "f9206295-5859-4896-adc9-72112b415e43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "122c9476-7571-4fc3-a6fb-b8017454e71f",
        "cursor": {
          "ref": "21a00407-b261-455b-ab1e-122da3617c09",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "fb33a206-7992-4b0f-8c13-4a97d796ee79"
        },
        "item": {
          "id": "122c9476-7571-4fc3-a6fb-b8017454e71f",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "4d057358-fb37-4e13-93c9-ca9813a2eb68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dc2a019-f835-4dd5-824f-312af88c5fa3",
        "cursor": {
          "ref": "c7c37611-cadf-47be-b517-abe314474f68",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "d34b8a91-d2c7-4cf0-8efb-d5fcc047f0c2"
        },
        "item": {
          "id": "3dc2a019-f835-4dd5-824f-312af88c5fa3",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "87566f6d-5c43-4194-86d5-5bd8200847ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31d5263b-890d-4acd-8c7a-fa474fc7176e",
        "cursor": {
          "ref": "3f6d9101-56ea-46b4-a145-1ed177b4ffcf",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "3f110d41-6f55-4b68-b65d-5d59b42c303c"
        },
        "item": {
          "id": "31d5263b-890d-4acd-8c7a-fa474fc7176e",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "18860d97-0afe-4f0c-9ecc-10464028d33e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cae6eff-36b7-42fd-a753-af5d9a6f0193",
        "cursor": {
          "ref": "9d902d93-a053-4690-a310-66c80fea44a4",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "3b33b539-1a3e-48e5-ba1d-e6de9a65853f"
        },
        "item": {
          "id": "1cae6eff-36b7-42fd-a753-af5d9a6f0193",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "a2e9095c-b27d-4946-9335-9939471e6599",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ba77da1-810f-4444-a8e3-a72ea9484ae2",
        "cursor": {
          "ref": "bca61229-dbbb-4ffc-83ee-9439abf5a4b8",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "fbeae09d-5373-42d1-9764-c5e381d0972d"
        },
        "item": {
          "id": "6ba77da1-810f-4444-a8e3-a72ea9484ae2",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "29ac9c12-0e94-4ff2-86a7-db8d83224814",
          "status": "OK",
          "code": 200,
          "responseTime": 89,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "0440c3e9-a8c4-4234-bb2a-940047c0b3e3",
        "cursor": {
          "ref": "ffe7eff4-726c-4421-b108-8d7931c89957",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "716dc778-6e0b-4be1-9cef-6b512228beb6"
        },
        "item": {
          "id": "0440c3e9-a8c4-4234-bb2a-940047c0b3e3",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "f4d6443c-1ca9-4e4a-9777-0da52e1534a3",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "00e1c655-9f5f-418e-a018-cf3dc9caf610",
        "cursor": {
          "ref": "da75e064-1d38-4adb-8363-9aeb7584df1d",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "6eeb0ed0-eaef-495b-8542-81a26a57b75b"
        },
        "item": {
          "id": "00e1c655-9f5f-418e-a018-cf3dc9caf610",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "77a0d7c9-d581-42a3-99cd-1b2d72b9bd5f",
          "status": "OK",
          "code": 200,
          "responseTime": 89,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "a55faa3e-7437-4f8d-9d78-d124f8e3b187",
        "cursor": {
          "ref": "8560c208-f64b-4c6e-b42a-b2fed0c568a2",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "a5781992-5400-42ae-8462-5ae9c2ea2b0b"
        },
        "item": {
          "id": "a55faa3e-7437-4f8d-9d78-d124f8e3b187",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "40297db5-31a1-4168-b9ca-720bd416bb96",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "301714de-bbc4-4759-8cfa-325539d19302",
        "cursor": {
          "ref": "ac4dc38d-1001-4b31-bd18-344ae473d1f6",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "874955ff-b5e9-4903-965c-e0a4a5fb98e3"
        },
        "item": {
          "id": "301714de-bbc4-4759-8cfa-325539d19302",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "9be0428c-dc8c-4d3e-8a91-67c5e2cd4d3e",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "39a7b9c4-2d16-485d-a431-2bb1a602ca6d",
        "cursor": {
          "ref": "d9a14005-b683-43de-a87b-690125b45fad",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "e7baac1b-af44-4d2e-b139-e4435571ef7c"
        },
        "item": {
          "id": "39a7b9c4-2d16-485d-a431-2bb1a602ca6d",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "db2bddc4-648e-4f49-9e2c-81ca7da712ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d7202d3-36ae-4135-9726-26b65eec2f6a",
        "cursor": {
          "ref": "dff48f91-c743-41be-a122-f7d1a4168895",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "5f35b114-3643-4381-ba19-d60193de8a2f"
        },
        "item": {
          "id": "2d7202d3-36ae-4135-9726-26b65eec2f6a",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "adf81b37-ff95-4b26-99f3-650f09bec331",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5760cc11-1805-48a7-819e-6e704ab9bee1",
        "cursor": {
          "ref": "1b7fe4fb-d1c9-4ea3-a6fc-d4e9a5dd2034",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "12d3f5ce-69da-4c67-b5c1-dba7071a9e6c"
        },
        "item": {
          "id": "5760cc11-1805-48a7-819e-6e704ab9bee1",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "03117965-aea9-4e88-8b8b-829cef207538",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b4985a0-decc-43d8-900f-1301e4a122bc",
        "cursor": {
          "ref": "d7db5cc2-68d4-4af6-a1df-91912fd4e251",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "4237b6e9-858e-4c0d-89b8-8b14106f1e3c"
        },
        "item": {
          "id": "6b4985a0-decc-43d8-900f-1301e4a122bc",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "a910f18b-e295-4323-89ba-9015b73354f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "191c2c47-0c8e-4815-bab4-1413155bbec8",
        "cursor": {
          "ref": "0d7bf967-e9e1-44bf-af5a-07676e53378b",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "05498740-74c3-4eeb-9916-d9245ab95430"
        },
        "item": {
          "id": "191c2c47-0c8e-4815-bab4-1413155bbec8",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "ab8ef3aa-2bfd-4c35-a564-54238579f413",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ab850c3-015a-492b-9232-3a51660376bc",
        "cursor": {
          "ref": "008b79c9-c814-4b9e-b584-00e8214c75df",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "e5f8274d-0f73-4235-8191-4d07ad5266cc"
        },
        "item": {
          "id": "4ab850c3-015a-492b-9232-3a51660376bc",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "1fe1c127-7056-4145-aa87-4e6d151c8370",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e38d097-8d1b-4775-9611-a39360258440",
        "cursor": {
          "ref": "489d99f0-02d9-467d-8c8f-7cc79aaf51ae",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "5e35622d-6609-4656-8547-df091df5f34d"
        },
        "item": {
          "id": "6e38d097-8d1b-4775-9611-a39360258440",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "348e7411-959b-4994-b0b8-c9c2dac5aca8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "415d8a66-bce3-461f-9b10-22eb03aed08b",
        "cursor": {
          "ref": "afafa2dc-8ac1-4a07-86ae-e6ca7b7b83ac",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "eb3a67ca-3cfe-4b15-92e1-c65d42d42c16"
        },
        "item": {
          "id": "415d8a66-bce3-461f-9b10-22eb03aed08b",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "f99c840a-de61-4d0f-8bba-4bfb493b7be8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c807ea7-7d1b-446a-b7b7-dffe86e0f925",
        "cursor": {
          "ref": "be80f14d-69c6-410a-97b8-5c8fccb4a582",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "5070778e-984a-46c2-b574-0573b69b302a"
        },
        "item": {
          "id": "3c807ea7-7d1b-446a-b7b7-dffe86e0f925",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "7e16b859-fea7-4d05-a6b7-5b2e7c1cf82d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da9577f0-a52c-4cae-8137-1cab70364e9a",
        "cursor": {
          "ref": "6fb44b77-dce5-4eee-b00c-939a114edda9",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "e71ada8f-beca-4c8f-94bb-f8df3bfc6733"
        },
        "item": {
          "id": "da9577f0-a52c-4cae-8137-1cab70364e9a",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "f4b9d751-2138-43d2-bee3-0a1766efa9ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cf16fd7-f8dc-48ee-b497-13fdf993222c",
        "cursor": {
          "ref": "de06e72e-4f7b-4111-8f7b-3628640a6450",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "b089d0c2-9bc9-4797-9adb-4968c9f5a081"
        },
        "item": {
          "id": "6cf16fd7-f8dc-48ee-b497-13fdf993222c",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "41a91c1f-e7d8-4919-b392-e711c1b9ad9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c95a90c-3cbd-4f4f-b503-558a5e0cda9e",
        "cursor": {
          "ref": "cc877203-b825-46d5-8383-8def58031216",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "5c978729-c5c2-4e0f-9946-55894b149d60"
        },
        "item": {
          "id": "8c95a90c-3cbd-4f4f-b503-558a5e0cda9e",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "497cdb65-ae7c-48fd-9d30-ba40ffbd3f73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d8759bd-f7ec-41d5-af9a-4b03b8946508",
        "cursor": {
          "ref": "31c0c9b2-ceeb-474c-9996-a6e4935c46e1",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "5452ead9-640a-4d16-a8ce-2570d0116ad2"
        },
        "item": {
          "id": "7d8759bd-f7ec-41d5-af9a-4b03b8946508",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "388d6980-3736-4d6c-99f6-1dbcf731dc6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "942a055d-e498-4743-a73d-c8f83eea9ab9",
        "cursor": {
          "ref": "6f229491-d7c1-4f09-8471-7cabdfb3f646",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "11ea3032-cc60-4c93-82b9-8f21331b7355"
        },
        "item": {
          "id": "942a055d-e498-4743-a73d-c8f83eea9ab9",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "17cc6178-8ed4-4d3a-9cfd-552d515b46a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33f5dd9a-2c4d-40c7-b6ca-d7b8851024bc",
        "cursor": {
          "ref": "b164d4bf-2a1b-4399-9e88-f5840c23d3c6",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "ebe02c08-3335-4fc6-b08f-b4a7a4a8f735"
        },
        "item": {
          "id": "33f5dd9a-2c4d-40c7-b6ca-d7b8851024bc",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "75fe04dc-48ea-4acd-8efd-7d27de5261ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35813788-44e5-42e9-8644-d62a47f981fc",
        "cursor": {
          "ref": "040e29c0-ec6c-4598-8069-35ec96f33a31",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "5da1939f-6325-4d13-8049-89e4e338bdf1"
        },
        "item": {
          "id": "35813788-44e5-42e9-8644-d62a47f981fc",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "d5666aaa-01a9-48a6-9ffa-f3dbb4422f4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "245ceb86-48e4-4ca8-bd3e-903b88b69426",
        "cursor": {
          "ref": "c48c1d56-96af-41f8-8feb-f0198d5273a5",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "490cefd2-d16c-4878-9d2c-d86af42f3ef3"
        },
        "item": {
          "id": "245ceb86-48e4-4ca8-bd3e-903b88b69426",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "ba580a86-a534-4723-a5f2-6d5778932267",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c45755d5-7445-4234-bc3f-085e6570b6af",
        "cursor": {
          "ref": "21ba1393-ce80-4bcc-9a1a-33cbb26a2368",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "8b9b6014-edf8-4eb5-b47e-c62b7ec48947"
        },
        "item": {
          "id": "c45755d5-7445-4234-bc3f-085e6570b6af",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "f896d44d-21df-4555-b17e-cdae8e8c7c74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0bc10f4-0697-4c2c-a1a7-f80ec959c0fb",
        "cursor": {
          "ref": "c94f9193-c53e-4ba8-8383-0785a9dac4a4",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "634fee12-b1d8-419e-9550-6c97e9bfad3b"
        },
        "item": {
          "id": "b0bc10f4-0697-4c2c-a1a7-f80ec959c0fb",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "add97aaa-c27e-4776-b297-f5e04aac9c06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2445007c-3053-4da4-98a0-1a936f20239c",
        "cursor": {
          "ref": "6460bd41-3f3e-462c-bd57-3033365d20f8",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "8174d42d-4838-4dfa-88dc-63c30a82550d"
        },
        "item": {
          "id": "2445007c-3053-4da4-98a0-1a936f20239c",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "afb8027f-0d37-480b-9374-f1b764b50268",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3094f2c1-18bf-49c2-96ba-42933a072435",
        "cursor": {
          "ref": "0be6f49c-2a9a-4cc2-9905-8c869cd29cb0",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "fe025377-40c2-478d-8678-168ea87e97b0"
        },
        "item": {
          "id": "3094f2c1-18bf-49c2-96ba-42933a072435",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "dc5974c0-9179-496a-9a84-76819be4eb15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06b7a4e9-ff45-4d96-8bec-c5099d6f02e0",
        "cursor": {
          "ref": "1e73ab7d-012e-461a-9acc-90cd88f6a37f",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "f2c8bfbb-d8ef-424c-a8db-378df39e2804"
        },
        "item": {
          "id": "06b7a4e9-ff45-4d96-8bec-c5099d6f02e0",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "2c35653b-2432-40d6-a4f5-0e112789c34d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e903d728-cda4-49b6-b187-1cbeab7c8b29",
        "cursor": {
          "ref": "024e74b5-46a3-401b-88ec-f6405275b90c",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "b1c3d7a1-2948-49b7-ad6e-c527df7d4fab"
        },
        "item": {
          "id": "e903d728-cda4-49b6-b187-1cbeab7c8b29",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "1e8d86d1-f0e0-4413-9f6f-1271b8a6ab70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ef5aa7e-ba78-400b-9aa2-a60b0655a491",
        "cursor": {
          "ref": "5cff9cd1-61de-43e1-8af1-ef988d40b2f0",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "8e6f5124-4aa8-4853-9c3b-e691edb349a9"
        },
        "item": {
          "id": "7ef5aa7e-ba78-400b-9aa2-a60b0655a491",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "bec805af-9e3c-4e41-b382-d04d9e9be073",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da130297-313d-438d-a57f-af3f5c8bbd16",
        "cursor": {
          "ref": "d9692eae-1632-4c01-a2e6-8c197499719a",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "8a45b01d-2aed-44b4-b0e7-5549fe889265"
        },
        "item": {
          "id": "da130297-313d-438d-a57f-af3f5c8bbd16",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "8d4dd7ae-192e-4a34-a3ba-0f0ee4e60a2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "639681e1-951c-4dda-9357-f801ae2bcade",
        "cursor": {
          "ref": "bc61ef43-6574-4d93-bfe2-9cb47985c04b",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "0780dd44-367f-42b7-9460-8645d2856beb"
        },
        "item": {
          "id": "639681e1-951c-4dda-9357-f801ae2bcade",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "68207bd2-71bb-49ed-af2a-39b4da323609",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed924e71-7f44-4d6a-be14-05f857004d08",
        "cursor": {
          "ref": "e73174c1-ef19-4aea-a5b6-bd068bccf7d2",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "cbbbcf66-744f-46a5-9d06-706c0011a3bc"
        },
        "item": {
          "id": "ed924e71-7f44-4d6a-be14-05f857004d08",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "b68fcbe5-569a-4c00-92ca-13140e56b2c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7be62f92-2d9d-4389-a414-b89f3340ca6e",
        "cursor": {
          "ref": "f2ca1deb-a6b3-49cd-9609-5204860bb133",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "9f585c47-56a9-4dc7-9e0d-66b7be61a29e"
        },
        "item": {
          "id": "7be62f92-2d9d-4389-a414-b89f3340ca6e",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "9c00c757-3ffb-4bf1-82ec-c295c3dca67b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be64253b-d7c2-4c15-92f6-c9ea7d0cce79",
        "cursor": {
          "ref": "1dd2a6d1-de20-49cb-9e4c-48bd95986202",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "ba54ef39-cb96-451a-b341-fb91cd55a9ca"
        },
        "item": {
          "id": "be64253b-d7c2-4c15-92f6-c9ea7d0cce79",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "8c1717b1-659a-429f-82ae-10e6dd09f8f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5987c754-669c-4a6d-baf0-434d748cc509",
        "cursor": {
          "ref": "3ad1d2d6-cb44-4373-b2ca-58399a26c2f1",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "06daad2e-a3c3-4e1f-947f-38ce3e57af8b"
        },
        "item": {
          "id": "5987c754-669c-4a6d-baf0-434d748cc509",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "58ea35e5-fc0e-4c8d-aa91-61b268a2d687",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef7d32ea-e6e2-4360-ae4e-9ca16d45a5cd",
        "cursor": {
          "ref": "02b6be67-d87a-4da6-8c1d-0dd77fe7fd06",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "6bff73dc-b98d-47d9-bc46-7f6e3e9729a0"
        },
        "item": {
          "id": "ef7d32ea-e6e2-4360-ae4e-9ca16d45a5cd",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "6eb17fbb-3132-4e19-9b8f-7b072705f7ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "326e7c4b-755e-4507-8a59-114ed80f7912",
        "cursor": {
          "ref": "ee7b03c8-288a-44bb-b51d-16a83f857e6b",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "ce100162-8e49-4590-9f34-abef954c98fd"
        },
        "item": {
          "id": "326e7c4b-755e-4507-8a59-114ed80f7912",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "8802aeed-6a77-45dd-9ea4-4a808f019741",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bff81642-76f2-4ec1-a56d-544e506bcaff",
        "cursor": {
          "ref": "67b008b3-b862-47e0-a52c-38536e87de08",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "efe06553-79e9-4f7e-92b0-d149830fb175"
        },
        "item": {
          "id": "bff81642-76f2-4ec1-a56d-544e506bcaff",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "2432f25a-7558-4042-95d6-ad0f4af6c0bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "123289d2-1e2c-4929-a5a6-f013e0384e42",
        "cursor": {
          "ref": "29f713cf-ec6e-4674-baf9-5cbfe5b4060e",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "a62ea136-ef84-4464-9822-8bc3745e53a3"
        },
        "item": {
          "id": "123289d2-1e2c-4929-a5a6-f013e0384e42",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "37e3fb0e-9e44-4cc4-9d4d-14e73b313ae5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f63b565f-267f-488a-841b-e8eab6d4e159",
        "cursor": {
          "ref": "1e5f08e8-54d3-4fb1-9b84-d8d0431d5115",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "42f46755-2a9f-41f4-99c0-324c28f103e7"
        },
        "item": {
          "id": "f63b565f-267f-488a-841b-e8eab6d4e159",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "65c0bec5-6c4f-4de8-a792-4f035c676574",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 26,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8eacba7-c18c-45fb-a20b-926c1b2829fa",
        "cursor": {
          "ref": "89ac6c12-1e51-4b73-95c5-dfcf499c45c3",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "23e4c222-0930-48f9-b05a-3e9d157cf1e8"
        },
        "item": {
          "id": "b8eacba7-c18c-45fb-a20b-926c1b2829fa",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "acd6e593-594d-4fff-8b48-cbfddf98a76e",
          "status": "OK",
          "code": 200,
          "responseTime": 186,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "853cfb0d-233e-4505-9131-b1d328edff35",
        "cursor": {
          "ref": "ea47fa32-c488-4d99-8a11-ffd7ff205299",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "a88ad8fe-9f08-4988-b081-cd3eaa40aa3e"
        },
        "item": {
          "id": "853cfb0d-233e-4505-9131-b1d328edff35",
          "name": "credentials_verify"
        },
        "response": {
          "id": "069df23a-02b4-4464-bc24-cd6e612cf7a3",
          "status": "OK",
          "code": 200,
          "responseTime": 95,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "48f7cbbf-f718-43dc-90a6-4865790bf264",
        "cursor": {
          "ref": "1fcc1094-a0bb-44aa-a0d8-e0cb4822a1ac",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "fc77ac44-f0e8-4929-9965-5006580d2a31"
        },
        "item": {
          "id": "48f7cbbf-f718-43dc-90a6-4865790bf264",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "1955f6b1-bf79-4cd9-a731-d9d3414f1d5a",
          "status": "OK",
          "code": 200,
          "responseTime": 88,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ec971f2-4b72-4b86-8626-d66f277a275a",
        "cursor": {
          "ref": "b1d48316-44cb-4566-bb91-4731be8da0cc",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "8750b50a-893f-4326-8866-70e760f4de03"
        },
        "item": {
          "id": "2ec971f2-4b72-4b86-8626-d66f277a275a",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "10e6b6ed-3ffc-494e-8bea-5219de3850bb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ec971f2-4b72-4b86-8626-d66f277a275a",
        "cursor": {
          "ref": "b1d48316-44cb-4566-bb91-4731be8da0cc",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "8750b50a-893f-4326-8866-70e760f4de03"
        },
        "item": {
          "id": "2ec971f2-4b72-4b86-8626-d66f277a275a",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "10e6b6ed-3ffc-494e-8bea-5219de3850bb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef0d5c47-3134-4783-a69b-84b01fd9e6d9",
        "cursor": {
          "ref": "4d4bc02d-1803-4a46-ac76-c7c4d9aad788",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "eaaab8dd-2864-4d7f-8705-3ca060e0db31"
        },
        "item": {
          "id": "ef0d5c47-3134-4783-a69b-84b01fd9e6d9",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "3ddaf344-8cca-4888-b728-c4db44ea44bb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 26,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d29e77e-991f-4d49-aa33-fde73641ac1d",
        "cursor": {
          "ref": "fcbf1a7e-868c-40f5-9605-a142bded2c1a",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "7367e29f-b5a6-4713-8e00-449184f4ff2d"
        },
        "item": {
          "id": "5d29e77e-991f-4d49-aa33-fde73641ac1d",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "d6a2c220-54ec-47ea-a3b4-0675030510df",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}